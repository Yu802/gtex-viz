var RawDataQuery=function(t){"use strict";var e={},n={},r=34,o=10,i=13;function s(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var a=function(t){var a=new RegExp('["'+t+"\n\r]"),c=t.charCodeAt(0);function l(t,s){var a,l=[],u=t.length,f=0,p=0,d=u<=0,h=!1;function m(){if(d)return n;if(h)return h=!1,e;var s,a,l=f;if(t.charCodeAt(l)===r){for(;f++<u&&t.charCodeAt(f)!==r||t.charCodeAt(++f)===r;);return(s=f)>=u?d=!0:(a=t.charCodeAt(f++))===o?h=!0:a===i&&(h=!0,t.charCodeAt(f)===o&&++f),t.slice(l+1,s-1).replace(/""/g,'"')}for(;f<u;){if((a=t.charCodeAt(s=f++))===o)h=!0;else if(a===i)h=!0,t.charCodeAt(f)===o&&++f;else if(a!==c)continue;return t.slice(l,s)}return d=!0,t.slice(l,u)}for(t.charCodeAt(u-1)===o&&--u,t.charCodeAt(u-1)===i&&--u;(a=m())!==n;){for(var g=[];a!==e&&a!==n;)g.push(a),a=m();s&&null==(g=s(g,p++))||l.push(g)}return l}function u(e){return e.map(f).join(t)}function f(t){return null==t?"":a.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,o=l(t,function(t,o){if(n)return n(t,o-1);r=t,n=e?function(t,e){var n=s(t);return function(r,o){return e(n(r),o,t)}}(t,e):s(t)});return o.columns=r||[],o},parseRows:l,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(f).join(t)].concat(e.map(function(e){return n.map(function(t){return f(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(u).join("\n")}}},c=a(",").parse,l=a("\t").parse;function u(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var f=function(t,e){return fetch(t,e).then(u)};function p(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),f(e,n).then(function(e){return t(e,r)})}}p(c);var d=p(l);function h(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var m=function(t,e){return fetch(t,e).then(h)},g="http://www.w3.org/1999/xhtml",v={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},_=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),v.hasOwnProperty(e)?{space:v[e],local:t}:t};var y=function(t){var e=_(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===g&&e.documentElement.namespaceURI===g?e.createElement(t):e.createElementNS(n,t)}})(e)};function w(){}var x=function(t){return null==t?w:function(){return this.querySelector(t)}};function b(){return[]}var A=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var I=document.documentElement;if(!I.matches){var S=I.webkitMatchesSelector||I.msMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector;A=function(t){return function(){return S.call(this,t)}}}}var E=A,C=function(t){return new Array(t.length)};function T(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var k="$";function j(t,e,n,r,o,i){for(var s,a=0,c=e.length,l=i.length;a<l;++a)(s=e[a])?(s.__data__=i[a],r[a]=s):n[a]=new T(t,i[a]);for(;a<c;++a)(s=e[a])&&(o[a]=s)}function N(t,e,n,r,o,i,s){var a,c,l,u={},f=e.length,p=i.length,d=new Array(f);for(a=0;a<f;++a)(c=e[a])&&(d[a]=l=k+s.call(c,c.__data__,a,e),l in u?o[a]=c:u[l]=c);for(a=0;a<p;++a)(c=u[l=k+s.call(t,i[a],a,i)])?(r[a]=c,c.__data__=i[a],u[l]=null):n[a]=new T(t,i[a]);for(a=0;a<f;++a)(c=e[a])&&u[d[a]]===c&&(o[a]=c)}function R(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var B=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function D(t){return t.trim().split(/^|\s+/)}function O(t){return t.classList||new F(t)}function F(t){this._node=t,this._names=D(t.getAttribute("class")||"")}function M(t,e){for(var n=O(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function P(t,e){for(var n=O(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}F.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function q(){this.textContent=""}function G(){this.innerHTML=""}function U(){this.nextSibling&&this.parentNode.appendChild(this)}function z(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function H(){return null}function L(){var t=this.parentNode;t&&t.removeChild(this)}function W(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Y(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var X={};"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(X={mouseenter:"mouseover",mouseleave:"mouseout"}));function J(t,e,n){return t=V(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function V(t,e,n){return function(r){try{t.call(this,this.__data__,e,n)}finally{}}}function Q(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?e.length=o:delete this.__on}}}function K(t,e,n){var r=X.hasOwnProperty(t.type)?J:V;return function(o,i,s){var a,c=this.__on,l=r(e,i,s);if(c)for(var u=0,f=c.length;u<f;++u)if((a=c[u]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=n),void(a.value=e);this.addEventListener(t.type,l,n),a={type:t.type,name:t.name,value:e,listener:l,capture:n},c?c.push(a):this.__on=[a]}}function Z(t,e,n){var r=B(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}var tt=[null];function et(t,e){this._groups=t,this._parents=e}et.prototype=function(){return new et([[document.documentElement]],tt)}.prototype={constructor:et,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,a=e[o],c=a.length,l=r[o]=new Array(c),u=0;u<c;++u)(i=a[u])&&(s=t.call(i,i.__data__,u,a))&&("__data__"in i&&(s.__data__=i.__data__),l[u]=s);return new et(r,this._parents)},selectAll:function(t){var e;"function"!=typeof t&&(t=null==(e=t)?b:function(){return this.querySelectorAll(e)});for(var n=this._groups,r=n.length,o=[],i=[],s=0;s<r;++s)for(var a,c=n[s],l=c.length,u=0;u<l;++u)(a=c[u])&&(o.push(t.call(a,a.__data__,u,c)),i.push(a));return new et(o,i)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],a=s.length,c=r[o]=[],l=0;l<a;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&c.push(i);return new et(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),u=-1,this.each(function(t){h[++u]=t}),h;var n,r=e?N:j,o=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=i.length,a=new Array(s),c=new Array(s),l=new Array(s),u=0;u<s;++u){var f=o[u],p=i[u],d=p.length,h=t.call(f,f&&f.__data__,u,o),m=h.length,g=c[u]=new Array(m),v=a[u]=new Array(m);r(f,p,g,v,l[u]=new Array(d),h,e);for(var _,y,w=0,x=0;w<m;++w)if(_=g[w]){for(w>=x&&(x=w+1);!(y=v[x])&&++x<m;);_._next=y||null}}return(a=new et(a,o))._enter=c,a._exit=l,a},enter:function(){return new et(this._enter||this._groups.map(C),this._parents)},exit:function(){return new et(this._exit||this._groups.map(C),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),a=0;a<i;++a)for(var c,l=e[a],u=n[a],f=l.length,p=s[a]=new Array(f),d=0;d<f;++d)(c=l[d]||u[d])&&(p[d]=c);for(;a<r;++a)s[a]=e[a];return new et(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&s!==r.nextSibling&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=R);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,a=n[i],c=a.length,l=o[i]=new Array(c),u=0;u<c;++u)(s=a[u])&&(l[u]=s);l.sort(e)}return new et(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,a=i.length;s<a;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=_(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):function(t,e){return t.style.getPropertyValue(e)||B(t).getComputedStyle(t,null).getPropertyValue(e)}(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=D(t+"");if(arguments.length<2){for(var r=O(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?M:P)(this,t)}}:e?function(t){return function(){M(this,t)}}:function(t){return function(){P(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?q:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(U)},lower:function(){return this.each(z)},append:function(t){var e="function"==typeof t?t:y(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:y(t),r=null==e?H:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(L)},clone:function(t){return this.select(t?Y:W)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),s=i.length;if(!(arguments.length<2)){for(a=e?K:Q,null==n&&(n=!1),r=0;r<s;++r)this.each(a(i[r],e,n));return this}var a=this.node().__on;if(a)for(var c,l=0,u=a.length;l<u;++l)for(r=0,c=a[l];r<s;++r)if((o=i[r]).type===c.type&&o.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return Z(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return Z(this,t,e)}})(t,e))}};var nt=function(t){return"string"==typeof t?new et([[document.querySelector(t)]],[document.documentElement]):new et([[t]],tt)};class rt{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,o="fa-download"){this.createButton(t,o);nt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);nt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),o=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var o=n[r].cssRules,i=0;i<o.length;i++){var s=o[i];if(void 0!==s.style){var a;try{a=$(t).find(s.selectorText)}catch(t){a=[]}a.length>0&&(e+=s.selectorText+" { "+s.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(r.get());o.prepend(i),$("#"+n).html("").hide();let s=$(`#${n}`).append(o).html(),a=new Blob([s],{type:"image/svg+xml"});saveAs(a,e),$(`#${n}`).html("").hide()}}function ot(){return{checkSignedIn:lt,getUser:ut,signInButton:it,signOut:at,grantScopes:ft}}function it(){gapi.signin2.render("my-signin2",{scope:"profile email",width:240,height:50,longtitle:!0,theme:"dark",onsuccess:st,onfailure:ct})}function st(t){$("#g-signout").show()}function at(){gapi.auth2.getAuthInstance().signOut().then(function(){console.log("User signed out")}),$("#g-signout").hide()}function ct(t){console.error(t)}function lt(){return!!gapi.auth2&&ut().isSignedIn()}function ut(){return gapi.auth2.getAuthInstance().currentUser.get()}function ft(t){this.getUser().grant({scope:t}).then(function(t){console.log(JSON.stringify({message:"success",value:t}))},function(t){console.error(JSON>stringify({message:"fail",value:t}))})}function pt(t,e,n){const r=function(t){return e.filter(e=>e.dataType==t).reduce((t,e)=>(void 0===t[e.tissueId]&&(t[e.tissueId]=0),t[e.tissueId]=t[e.tissueId]+1,t),{})},o=[{label:"RNA-Seq",id:"RNASEQ",data:r("RNASEQ")},{label:"WES",id:"WES",data:r("WES")},{label:"WGS",id:"WGS",data:r("WGS")}];return{datasetId:t,X:n.map(t=>(t.id=t.tissueId,t.label=t.tissueName,o.forEach(e=>{t[e.id]=e.data[t.id]||void 0}),t)),Y:o,data:e}}function dt(t,e,n){const r={gtex_v7:{label:"GTEX V7",bgcolor:"#2a718b"}},o=nt(`#${t}`);o.select("thead").selectAll("th").data([{label:"",id:""}].concat(e.Y)).enter().append("th").attr("scope","col").attr("class",(t,e)=>""==t.id?"":`y${e-1}`).text(t=>t.label),o.select(".table-label").selectAll("*").remove(),o.select(".table-label").append("th").attr("colspan",e.Y.length+1).text(r[e.datasetId].label).style("background-color",r[e.datasetId].bgcolor),function(t,e){t.selectAll(".data-row").remove();const n=t.selectAll(".data-row").data(e.X).enter().append("tr").classed("data-row",!0);n.append("th").attr("scope","row").attr("class",(t,e)=>`x${e}`).text(t=>t.label),e.Y.forEach((t,e)=>{n.append("td").attr("class",(n,r)=>void 0===n[t.id]?"":`x${r} y${e}`).text(e=>e[t.id]||"")})}(o.select("tbody"),e),function(t){const e=nt(`#${t}`).select("tbody").selectAll("td");nt(`#${t}`).select("thead").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"col"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","col"),e.filter(`.${t}`).classed("selected",!1))}),nt(`#${t}`).select("tbody").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"row"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","row"),e.filter(`.${t}`).classed("selected",!1))}),e.style("cursor","pointer").on("click",function(){nt(this).classed("selected",!nt(this).classed("selected"))})}(t),function(t,e,n){const r=nt(`#${t}`).select("tbody").selectAll("td");nt("#matrix-table-toolbar").selectAll("*").remove();const o=new rt("matrix-table-toolbar",void 0,!0);o.createButton("sample-download"),o.createButton("send-to-firecloud","fa-cloud-upload-alt"),nt("#sample-download").style("cursor","pointer").on("click",function(){let t=r.filter(".selected");if(t.empty())alert("You have not selected any samples to download.");else{let n=["Sample ID","Tissue Name","Data Type","CRAM File GCP","CRAM File AWS","CRAM File MD5","CRAM File Size","CRAM Index GCP","CRAM Index AWS"].join("\t")+"\n";t.each(function(t){const r=nt(this).attr("class").split(" ").filter(t=>"selected"!=t),o=e.X[parseInt(r[0].replace("x",""))].id,i=e.Y[parseInt(r[1].replace("y",""))].id;console.log("Download "+o+" : "+i);const s=e.data.filter(t=>t.dataType==i&&t.tissueId==o&&"WES"!=t.dataType).map(t=>{console.log(t);let e=["cram_file","cram_file_aws","cram_file_md5","cram_file_size","cram_index","cram_index_aws"].map(e=>t.cramFile[e]),n=[t.cramFile.sample_id,t.tissueName,t.dataType].concat(e);return n.join("\t")});console.log(s),n+=s.join("\n")});let r=new Blob([n],{type:"text/plain;charset=utf-8"});saveAs(r,"GTEx.cram.txt",!0)}}),nt("#send-to-firecloud").style("cursor","pointer").on("click",function(){$("#fire-cloud-status").empty(),n.checkSignedIn()||alert("You need to sign in first");n.grantScopes("profile email https://www.googleapis.com/auth/devstorage.full_control https://www.googleapis.com/auth/plus.me"),function(t,e="billing-project-list"){let n=t.getAuthResponse(!0).access_token;console.log(n),$.ajax({url:"https://api.firecloud.org/api/profile/billing",type:"GET",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/json; charset=utf-8",success:function(t){$(`#${e}`).empty(),t.forEach(t=>{$("<label>"+`<input type="radio" name="billing-project" value="${t.projectName}"> `+t.projectName+"</label><br/>").appendTo($(`#${e}`))}),console.log(t[0])}})}(n.getUser()),function(t){let e=t.getAuthResponse(!0).access_token;$.ajax({url:"https://api.firecloud.org/api/workspaces",type:"GET",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+e)},success:function(t){const e=t.filter(t=>!t.public);console.log(e)},error:function(t){console.error(t)}})}(n.getUser());let t=r.filter(".selected");t.empty()?alert("You have not selected any samples to download."):nt("#fire-cloud-form").style("display","block")}),nt("#submit-to-firecloud-btn").on("click",function(){$("#fire-cloud-status").empty();let t=r.filter(".selected"),o=[];t.each(function(t){const n=nt(this).attr("class").split(" ").filter(t=>"selected"!=t),r=e.X[parseInt(n[0].replace("x",""))].id,i=e.Y[parseInt(n[1].replace("y",""))].id;console.log("Download "+r+" : "+i);const s=e.data.filter(t=>t.dataType==i&&t.tissueId==r&&"WES"!=t.dataType).map(t=>{let e=t.sampleId.split("-");return t.donorId=e[0]+"-"+e[1],t});o=o.concat(s)}),console.log(o.length),function(t,e){const n=t.getUser().getAuthResponse(!0).access_token,r=$('input[name="billing-project"]').val(),o=$('input[name="workspace"]').val();if(void 0===r)throw alert("You must provide a billin project"),"billing project is not provided";if(void 0===o||""==o)throw alert("You must provide a new workspace name"),"workspace name is not provided";console.log(o),console.log(e),$("#spinner").show(),$.ajax({url:"https://api.firecloud.org/api/workspaces",type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/json; charset=utf-8",data:JSON.stringify({namespace:r,name:o,attributes:{},authorizationDomain:[]}),success:function(t){console.log("finished creating workspace...");const i=e.map(t=>{if(!t.hasOwnProperty("donorId"))throw"Sample does not contain attr donorId.";return t.donorId}).filter((t,e,n)=>n.indexOf(t)===e),s=`entities=entity:participant_id\n${i.join("\n")}\n`,a=encodeURI(s);$.ajax({url:`https://api.firecloud.org/api/workspaces/${r}/${o}/importEntities`,type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/x-www-form-urlencoded",dataType:"text",data:a,success:function(t){$("#spinner").hide(),console.log("finished importing participant IDs...");let i=[["entity:sample_id","participant_id","sample_type","bam_file","bam_index"].join("\t")];const s=`entities=${(i=i.concat(e.map(t=>{if(void 0===t.cramFile)throw"Data Error: "+t;if(!t.cramFile.hasOwnProperty("cram_file"))throw"Data Error: "+t;return[t.cramFile.sample_id,t.donorId,t.dataType,t.cramFile.cram_file,t.cramFile.cram_index].join("\t")}))).join("\n")}\n`,a=encodeURI(s);console.log(s),$.ajax({url:`https://api.firecloud.org/api/workspaces/${r}/${o}/importEntities`,type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/x-www-form-urlencoded",dataType:"text",data:a,success:function(t){console.log("finished importing samples...");const e=`https://portal.firecloud.org/#workspaces/${r}/${o}/data`;$("#fire-cloud-status").html(`Submitted! <br/> Go to your <br/> <a target="_blank" href="${e}">FireCloud workspace</a>`)},error:function(t){console.error(t)}})},error:function(t){console.error(t)}})},error:function(t){console.error(t)}})}(n,o),nt("#fire-cloud-form").style("display","none")}),nt("#cancel-firecloud-btn").on("click",function(){nt("#fire-cloud-form").style("display","none"),alert("Canceled!")})}(t,e,n)}return t.renderSignInButton=function(t=ot().signInButton){t()},t.signOut=function(t=ot().signOut){t()},t.launch=function(t,e="gtex_v7",n=ot(),r=function(){const t="https://gtexportal.org/rest/v1/";return{dyneqtl:t+"association/dyneqtl",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",geneId:t+"reference/geneId?format=json&release=v7&geneId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",geneModel:t+"reference/collapsedGeneModel?unfiltered=false&release=v7&geneId=",geneModelUnfiltered:t+"reference/collapsedGeneModel?unfiltered=true&release=v7&geneId=",isoform:t+"reference/transcript?release=v7&gencode_id=",isoformExp:t+"expression/isoformExpression?datasetId=gtex_v7&boxplotDetail=median&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&page_size=10000",sample:"tmpSummaryData/gtex.Sample.csv",snp:t+"reference/snp?reference=current&format=json&snpId=",tissue:t+"dataset/tissueInfo",tissueSites:t+"dataset/tissueSiteDetail?format=json",topInTissueFiltered:t+"expression/topExpressedGenes?datasetId=gtex_v7&filterMtGene=true&sort_by=median&sortDirection=desc&page_size=50&tissueId=",topInTissue:t+"expression/topExpressedGenes?datasetId=gtex_v7&sort_by=median&sortDirection=desc&page_size=50&tissueId=",variantId:t+"reference/snp?format=json&reference=current&release=v7&variantId=",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt"}}()){const o=[m(r.tissue),d(r.rnaseqCram),d(r.wgsCram),d(r.sample)];Promise.all(o).then(function(r){let o=function(t){if(!t.hasOwnProperty("tissueInfo"))throw"Fatal Error: parseTissues input error.";const e=t.tissueInfo;return["tissueId","tissueName","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Fatal Error: parseTissue attr not found: "+t}),e}(r[0]);const i={rnaseq:r[1].reduce((t,e)=>(t[e.sample_id.toUpperCase()]=e,t),{}),wgs:r[2].reduce((t,e)=>(t[e.sample_id.toUpperCase()]=e,t),{})};let s=r[3].filter(t=>t.datasetId==e).map(t=>{switch(t.dataType){case"WGS":if(!i.wgs.hasOwnProperty(t.sampleId))throw t.sampleId+" has no cram files";t.cramFile=i.wgs[t.sampleId];break;case"RNASEQ":if(!i.rnaseq.hasOwnProperty(t.sampleId))throw t.sampleId+" has no cram files";t.cramFile=i.rnaseq[t.sampleId]}return t});const a=pt(e,s,o);dt(t,a,n),function(t,e,n,r,o){const i=()=>{const i=nt('input[name="sex"]:checked').node().value,s=nt('input[name="age"]:checked').node().value;if("both"==i&&"all"==s)dt(t,pt(e.datasetId,n,r),o);else{let a=void 0;a=pt(e.datasetId,"both"==i?n.filter(t=>t.ageBracket==s):"all"==s?n.filter(t=>t.sex==i):n.filter(t=>t.sex==i&&t.ageBracket==s),r),dt(t,a,o)}};nt("#filter-menu").selectAll('input[name="sex"]').on("change",i),nt("#filter-menu").selectAll('input[name="age"]').on("change",i)}(t,a,s,o,n)}).catch(function(t){console.error(t)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3LWRhdGEtcXVlcnkuYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9kc3YuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2pzb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvVG9vbGJhci5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvdXRpbHMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2dvb2dsZVVzZXIuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9SYXdEYXRhUXVlcnkuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBERUxJTUlURVIgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblxuICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICBpZiAoY29udmVydCkgcmV0dXJuIGNvbnZlcnQocm93LCBpIC0gMSk7XG4gICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgfSk7XG4gICAgcm93cy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUm93cyh0ZXh0LCBmKSB7XG4gICAgdmFyIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxuICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgbiA9IDAsIC8vIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gY3VycmVudCB0b2tlblxuICAgICAgICBlb2YgPSBOIDw9IDAsIC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9GP1xuICAgICAgICBlb2wgPSBmYWxzZTsgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICAvLyBTdHJpcCB0aGUgdHJhaWxpbmcgbmV3bGluZS5cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gTkVXTElORSkgLS1OO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBSRVRVUk4pIC0tTjtcblxuICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuICAgICAgaWYgKGVvZikgcmV0dXJuIEVPRjtcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuXG4gICAgICAvLyBVbmVzY2FwZSBxdW90ZXMuXG4gICAgICB2YXIgaSwgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSBRVU9URSkge1xuICAgICAgICB3aGlsZSAoSSsrIDwgTiAmJiB0ZXh0LmNoYXJDb2RlQXQoSSkgIT09IFFVT1RFIHx8IHRleHQuY2hhckNvZGVBdCgrK0kpID09PSBRVU9URSk7XG4gICAgICAgIGlmICgoaSA9IEkpID49IE4pIGVvZiA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpIC0gMSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZS5cbiAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSA9IEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IERFTElNSVRFUikgY29udGludWU7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gbGFzdCB0b2tlbiBiZWZvcmUgRU9GLlxuICAgICAgcmV0dXJuIGVvZiA9IHRydWUsIHRleHQuc2xpY2UoaiwgTik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHJvdy5wdXNoKHQpLCB0ID0gdG9rZW4oKTtcbiAgICAgIGlmIChmICYmIChyb3cgPSBmKHJvdywgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChyb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9KSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHJlRm9ybWF0LnRlc3QodGV4dCArPSBcIlwiKSA/IFwiXFxcIlwiICsgdGV4dC5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufVxuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbmV4cG9ydCB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG5leHBvcnQgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbiIsImZ1bmN0aW9uIHJlc3BvbnNlVGV4dChyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlVGV4dCk7XG59XG4iLCJpbXBvcnQge2NzdlBhcnNlLCBkc3ZGb3JtYXQsIHRzdlBhcnNlfSBmcm9tIFwiZDMtZHN2XCI7XG5pbXBvcnQgdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5cbmZ1bmN0aW9uIGRzdlBhcnNlKHBhcnNlKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaW5pdCwgcm93KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkc3YoZGVsaW1pdGVyLCBpbnB1dCwgaW5pdCwgcm93KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBpbml0ID09PSBcImZ1bmN0aW9uXCIpIHJvdyA9IGluaXQsIGluaXQgPSB1bmRlZmluZWQ7XG4gIHZhciBmb3JtYXQgPSBkc3ZGb3JtYXQoZGVsaW1pdGVyKTtcbiAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZm9ybWF0LnBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBjc3YgPSBkc3ZQYXJzZShjc3ZQYXJzZSk7XG5leHBvcnQgdmFyIHRzdiA9IGRzdlBhcnNlKHRzdlBhcnNlKTtcbiIsImZ1bmN0aW9uIHJlc3BvbnNlSnNvbihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwidmFyIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIWVsZW1lbnQubWF0Y2hlcykge1xuICAgIHZhciB2ZW5kb3JNYXRjaGVzID0gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm1vek1hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm9NYXRjaGVzU2VsZWN0b3I7XG4gICAgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2ZW5kb3JNYXRjaGVzLmNhbGwodGhpcywgc2VsZWN0b3IpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZShmYWxzZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZSh0cnVlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJ2YXIgZmlsdGVyRXZlbnRzID0ge307XG5cbmV4cG9ydCB2YXIgZXZlbnQgPSBudWxsO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQpKSB7XG4gICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICB2YXIgZXZlbnQwID0gZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXZlbnQgPSBldmVudDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB3cmFwID0gZmlsdGVyRXZlbnRzLmhhc093blByb3BlcnR5KHR5cGVuYW1lLnR5cGUpID8gZmlsdGVyQ29udGV4dExpc3RlbmVyIDogY29udGV4dExpc3RlbmVyO1xuICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gd3JhcCh2YWx1ZSwgaSwgZ3JvdXApO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8uY2FwdHVyZSA9IGNhcHR1cmUpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBjYXB0dXJlOiBjYXB0dXJlfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21FdmVudChldmVudDEsIGxpc3RlbmVyLCB0aGF0LCBhcmdzKSB7XG4gIHZhciBldmVudDAgPSBldmVudDtcbiAgZXZlbnQxLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gIGV2ZW50ID0gZXZlbnQxO1xuICB0cnkge1xuICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBldmVudCA9IGV2ZW50MDtcbiAgfVxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmRcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBub2RlLm5leHRTaWJsaW5nKSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsIi8qKlxuICogQ3JlYXRlIGEgdG9vbGJhclxuICogVGhpcyBjbGFzcyB1c2VzIGEgbG90IG9mIGpRdWVyeSBmb3IgZG9tIGVsZW1lbnQgbWFuaXB1bGF0aW9uXG4gKi9cblxuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cGFyc2VDc3NTdHlsZXN9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXIge1xuICAgIGNvbnN0cnVjdG9yKGRvbUlkLCB0b29sdGlwPXVuZGVmaW5lZCwgdmVydGljYWw9ZmFsc2Upe1xuICAgICAgICAkKGAjJHtkb21JZH1gKS5zaG93KCk7IC8vIGlmIGhpZGRlblxuXG4gICAgICAgIC8vIGFkZCBhIG5ldyBiYXJncm91cCBkaXYgdG8gZG9tSUQgd2l0aCBib290c3RyYXAgYnV0dG9uIGNsYXNzZXNcbiAgICAgICAgY29uc3QgYnRuQ2xhc3NlcyA9IHZlcnRpY2FsPydidG4tZ3JvdXAtdmVydGljYWwgYnRuLWdyb3VwLXNtJzogJ2J0bi1ncm91cCBidG4tZ3JvdXAtc20nO1xuICAgICAgICB0aGlzLmJhciA9ICQoJzxkaXYvPicpLmFkZENsYXNzKGJ0bkNsYXNzZXMpLmFwcGVuZFRvKGAjJHtkb21JZH1gKTtcbiAgICAgICAgdGhpcy5idXR0b25zID0ge307XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZG93bmxvYWQgYnV0dG9uIGZvciBTVkdcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbiBkb20gSURcbiAgICAgKiBAcGFyYW0gc3ZnSWQge1N0cmluZ30gdGhlIFNWRyBkb20gSUQgdG8gZ3JhYiBhbmQgZG93bmxvYWRcbiAgICAgKiBAcGFyYW0gb3V0ZmlsZU5hbWUge1N0cmluZ30gdGhlIGRvd25sb2FkIGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSBjbG9uZWQgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUncyBpY29uIGNsYXNzIG5hbWVcbiAgICAgKi9cbiAgICBjcmVhdGVEb3dubG9hZFN2Z0J1dHRvbihpZCwgc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkLCBpY29uPSdmYS1kb3dubG9hZCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkU3ZnKHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiRG93bmxvYWRcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVJlc2V0QnV0dG9uKGlkLCBjYWxsYmFjaywgaWNvbj0nZmEtZXhwYW5kLWFycm93cy1hbHQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIGNhbGxiYWNrKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiUmVzZXQgdGhlIHNjYWxlc1wiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24ncyBpZFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUgaWNvbiBjbGFzc1xuICAgICAqIERlcGVuZGVuY2llczogQm9vdHN0cmFwLCBqUXVlcnksIEZvbnRhd2Vzb21lXG4gICAgICovXG4gICAgY3JlYXRlQnV0dG9uKGlkLCBpY29uPSdmYS1kb3dubG9hZCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gJCgnPGEvPicpLmF0dHIoJ2lkJywgaWQpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2J0biBidG4tZGVmYXVsdCcpLmFwcGVuZFRvKHRoaXMuYmFyKTtcbiAgICAgICAgJCgnPGkvPicpLmFkZENsYXNzKGBmYSAke2ljb259YCkuYXBwZW5kVG8oJGJ1dHRvbik7XG4gICAgICAgIHRoaXMuYnV0dG9uc1tpZF0gPSAkYnV0dG9uO1xuICAgICAgICByZXR1cm4gJGJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhdHRhY2ggYSB0b29sdGlwIGRvbSB3aXRoIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICovXG4gICAgYXR0YWNoVG9vbHRpcCh0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBTVkcgb2JqXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBvdXRwdXQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIHRlbXBvcmFyeSBkb20gSUQgdG8gY29weSB0aGUgU1ZHIHRvXG4gICAgICogRGVwZW5kZW5jaWVzOiBGaWxlU2F2ZXJcbiAgICAgKi9cbiAgICBkb3dubG9hZFN2ZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpe1xuICAgICAgICAvLyBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfSBzdmdgKSlbMF0pOyAvLyBjb21wbGljYXRlZCBqUXVlcnkgdG8gZ2V0IHRvIHRoZSBTVkcgb2JqZWN0XG4gICAgICAgIGxldCBzdmdPYmogPSAkKCQoJChgJHtcIiNcIiArc3ZnSWR9YCkpWzBdKTtcbiAgICAgICAgbGV0ICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgICAgICAvLyBwYXJzZSBhbmQgYWRkIGFsbCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgICAgIGxldCBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAgICAgJChcIiNcIiArIGNsb25lSWQpLmh0bWwoJycpLmhpZGUoKTsgLy8gbWFrZSBzdXJlIHRoZSBjb3B5SUQgaXMgaW52aXNpYmxlXG4gICAgICAgIGxldCBzdmdIdG1sID0gJChgIyR7Y2xvbmVJZH1gKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgICAgICBsZXQgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgICAgIHNhdmVBcyhzdmdCbG9iLCBmaWxlTmFtZSk7IC8vIHRoaXMgaXMgYSBGaWxlU2F2ZXIgZnVuY3Rpb24uLi4uXG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgICAgICQoYCMke2Nsb25lSWR9YCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZXMgYW4gU1ZHXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gYSBET00gZWxlbWVudCBJRCB0aGF0IHN0YXJ0cyB3aXRoIGEgXCIjXCJcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY31cbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggdHdvIGF0dHJpYnV0ZXM6IHdpZHRoIGFuZCBoZWlnaHRcbiAqIEByZXR1cm4ge1NlbGVjdGlvbn0gdGhlIGQzIHNlbGVjdGlvbiBvYmplY3Qgb2YgdGhlIFNWR1xuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcGFyZW50IGRvbSBJRFxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfVxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY31cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiBsZWZ0LCB0b3BcbiAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdmcoaWQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgc3ZnSWQ9dW5kZWZpbmVkKXtcbiAgICBpZiAoc3ZnSWQ9PT11bmRlZmluZWQpIHN2Z0lkPWAke2lkfS1zdmdgO1xuICAgIHJldHVybiBzZWxlY3QoXCIjXCIraWQpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgc3ZnSWQpXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLnRvcH0pYClcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHN2Z09ialxuICogQHBhcmFtIGRvd25sb2FkRmlsZU5hbWUge1N0cmluZ31cbiAqIEBwYXJhbSB0ZW1wRG93bmxvYWREaXZJZCB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRTdmcoc3ZnT2JqLCBkb3dubG9hZEZpbGVOYW1lLCB0ZW1wRG93bmxvYWREaXZJZCl7XG4gICAgY29uc29sZS5sb2coc3ZnT2JqKTtcbiAgICB2YXIgJHN2Z0NvcHkgPSBzdmdPYmouY2xvbmUoKVxuICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgIC8vIHBhcnNlIGFuZCBhZGQgdGhlIENTUyBzdHlsaW5nIHVzZWQgYnkgdGhlIFNWR1xuICAgIHZhciBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICRzdmdDb3B5LnByZXBlbmQoc3R5bGVzKTtcblxuICAgICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIHZhciBzdmdIdG1sID0gJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgIHZhciBzdmdCbG9iID0gbmV3IEJsb2IoW3N2Z0h0bWxdLCB7dHlwZTogXCJpbWFnZS9zdmcreG1sXCJ9KTtcbiAgICBzYXZlQXMoc3ZnQmxvYiwgZG93bmxvYWRGaWxlTmFtZSk7XG5cbiAgICAvLyBjbGVhciB0aGUgdGVtcCBkb3dubG9hZCBkaXZcbiAgICAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbn1cbi8qKlxuICogQSBmdW5jdGlvbiBmb3IgcGFyc2luZyB0aGUgQ1NTIHN0eWxlIHNoZWV0IGFuZCBpbmNsdWRpbmcgdGhlIHN0eWxlIHByb3BlcnRpZXMgaW4gdGhlIGRvd25sb2FkYWJsZSBTVkcuXG4gKiBAcGFyYW0gZG9tXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzU3R5bGVzIChkb20pIHtcbiAgICB2YXIgdXNlZCA9IFwiXCI7XG4gICAgdmFyIHNoZWV0cyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGVldHMubGVuZ3RoOyBpKyspIHsgLy8gVE9ETzogd2FsayB0aHJvdWdoIHRoaXMgYmxvY2sgb2YgY29kZVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoc2hlZXRzW2ldLmNzc1J1bGVzID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gc2hlZXRzW2ldLmNzc1J1bGVzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJ1bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJ1bGUuc3R5bGUpICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zO1xuICAgICAgICAgICAgICAgICAgICAvL1NvbWUgc2VsZWN0b3JzIHdvbid0IHdvcmssIGFuZCBtb3N0IG9mIHRoZXNlIGRvbid0IG1hdHRlci5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zID0gJChkb20pLmZpbmQocnVsZS5zZWxlY3RvclRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgKz0gcnVsZS5zZWxlY3RvclRleHQgKyBcIiB7IFwiICsgcnVsZS5zdHlsZS5jc3NUZXh0ICsgXCIgfVxcblwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJbiBGaXJlZm94LCBpZiBzdHlsZXNoZWV0IG9yaWdpbmF0ZXMgZnJvbSBhIGRpZmYgZG9tYWluLFxuICAgICAgICAgICAgLy8gdHJ5aW5nIHRvIGFjY2VzcyB0aGUgY3NzUnVsZXMgd2lsbCB0aHJvdyBhIFNlY3VyaXR5RXJyb3IuXG4gICAgICAgICAgICAvLyBIZW5jZSwgd2UgbXVzdCB1c2UgYSB0cnkvY2F0Y2ggdG8gaGFuZGxlIHRoaXMgaW4gRmlyZWZveFxuICAgICAgICAgICAgaWYgKGUubmFtZSAhPT0gJ1NlY3VyaXR5RXJyb3InKSB0aHJvdyBlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICBzLmlubmVySFRNTCA9IFwiPCFbQ0RBVEFbXFxuXCIgKyB1c2VkICsgXCJcXG5dXT5cIjtcblxuICAgIHJldHVybiBzO1xufVxuIiwiLyoqKioqKiBHb29nbGUgU2lnbkluICoqKioqKi9cbmV4cG9ydCBmdW5jdGlvbiBnb29nbGVGdW5jKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hlY2tTaWduZWRJbjogY2hlY2tTaWduZWRJbixcbiAgICAgICAgZ2V0VXNlcjogZ2V0VXNlcixcbiAgICAgICAgc2lnbkluQnV0dG9uOiByZW5kZXJTaWduSW5CdXR0b24sXG4gICAgICAgIHNpZ25PdXQ6IHNpZ25PdXQsXG4gICAgICAgIGdyYW50U2NvcGVzOiBncmFudFNjb3Blc1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyU2lnbkluQnV0dG9uKCl7XG4gICAgZ2FwaS5zaWduaW4yLnJlbmRlcignbXktc2lnbmluMicsIHtcbiAgICAgICAgLy8gJ3Njb3BlJzogJ3Byb2ZpbGUgZW1haWwgaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kZXZzdG9yYWdlLmZ1bGxfY29udHJvbCBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3BsdXMubWUnLFxuICAgICAgICAnc2NvcGUnOiAncHJvZmlsZSBlbWFpbCcsXG4gICAgICAgICd3aWR0aCc6IDI0MCxcbiAgICAgICAgJ2hlaWdodCc6IDUwLFxuICAgICAgICAnbG9uZ3RpdGxlJzogdHJ1ZSxcbiAgICAgICAgJ3RoZW1lJzogJ2RhcmsnLFxuICAgICAgICAnb25zdWNjZXNzJzogb25TdWNjZXNzLFxuICAgICAgICAnb25mYWlsdXJlJzogb25GYWlsdXJlXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gb25TdWNjZXNzKGdvb2dsZVVzZXIpe1xuICAgICQoJyNnLXNpZ25vdXQnKS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNpZ25PdXQoKSB7XG4gICAgbGV0IGF1dGgyID0gZ2FwaS5hdXRoMi5nZXRBdXRoSW5zdGFuY2UoKTtcbiAgICBhdXRoMi5zaWduT3V0KCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgc2lnbmVkIG91dCcpO1xuICAgIH0pO1xuICAgICQoJyNnLXNpZ25vdXQnKS5oaWRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uRmFpbHVyZShlcnJvcil7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcilcbn1cblxuZnVuY3Rpb24gY2hlY2tTaWduZWRJbigpe1xuICAgIGlmIChnYXBpLmF1dGgyKSB7XG4gICAgICAgIHJldHVybiBnZXRVc2VyKCkuaXNTaWduZWRJbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFVzZXIoKXtcbiAgICByZXR1cm4gZ2FwaS5hdXRoMi5nZXRBdXRoSW5zdGFuY2UoKS5jdXJyZW50VXNlci5nZXQoKVxufVxuXG5mdW5jdGlvbiBncmFudFNjb3BlcyhzY29wZXMpe1xuICAgIHRoaXMuZ2V0VXNlcigpLmdyYW50KHtzY29wZTogc2NvcGVzfSkudGhlbihcbiAgICAgICAgZnVuY3Rpb24oc3VjY2Vzcyl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh7bWVzc2FnZTogXCJzdWNjZXNzXCIsIHZhbHVlOiBzdWNjZXNzfSkpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbihmYWlsKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSlNPTj5zdHJpbmdpZnkoe21lc3NhZ2U6IFwiZmFpbFwiLCB2YWx1ZTogZmFpbH0pKTtcbiAgICAgICAgfVxuICAgICk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHtqc29uLCB0c3Z9IGZyb20gJ2QzLWZldGNoJztcbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGx9IGZyb20gJ2QzLXNlbGVjdGlvbic7XG5pbXBvcnQge2dldEd0ZXhVcmxzLFxuICAgIHBhcnNlVGlzc3Vlc1xufSBmcm9tICcuL21vZHVsZXMvZ3RleERhdGFQYXJzZXInO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSAnLi9tb2R1bGVzL1Rvb2xiYXInO1xuaW1wb3J0IHtnb29nbGVGdW5jfSBmcm9tICcuL21vZHVsZXMvZ29vZ2xlVXNlcic7XG5cbi8qXG5UT0RPOlxuZmlyc3QgYnVpbGQgYSBkYXRhIG1hdHJpeCB3aXRoIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlXG57XG4gICAgY29sOiB0aXNzdWVzXG4gICAgcm93OiBkYXRhIHR5cGVzXG4gICAgZGF0YTogWyBvYmplY3RzIHdpdGggY29sIGFuZCByb3cgYW5kIHZhbHVlIF1cbn1cbiAqL1xuXG4vKipcbiAqIFJlbmRlciB0aGUgZ29vZ2xlIHNpZ25lZCBpbiBidXR0b24gKGlmIHRoZXJlIGlzbid0IG9uZSBwcm92aWRlZCBhbHJlYWR5KVxuICogQHBhcmFtIGNhbGxiYWNrIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclNpZ25JbkJ1dHRvbihjYWxsYmFjaz1nb29nbGVGdW5jKCkuc2lnbkluQnV0dG9uKXtcbiAgICBjYWxsYmFjaygpO1xufVxuXG4vKipcbiAqIERlZmluZSB0aGUgR29vZ2xlIHNpZ24gb3V0IGZ1bmN0aW9uXG4gKiBAcGFyYW0gY2FsbGJhY2sge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbk91dChjYWxsYmFjaz1nb29nbGVGdW5jKCkuc2lnbk91dCl7XG4gICAgY2FsbGJhY2soKTtcbn1cblxuLyoqXG4gKiBidWlsZCB0aGUgZGF0YSBtYXRyaXggdGFibGVcbiAqIEBwYXJhbSB0YWJsZUlkIHtTdHJpbmd9XG4gKiBAcGFyYW0gZGF0YXNldElkIHtTdHJpbmd9XG4gKiBAcGFyYW0gZ29vZ2xlRnVuYyB7T2JqZWN0fSB3aXRoIGZ1bmN0aW9uIGF0dHJpYnV0ZXM6IGNoZWNrU2lnbmVkSW4sIGdldFVzZXJcbiAqIEBwYXJhbSB1cmxzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxhdW5jaCh0YWJsZUlkLCBkYXRhc2V0SWQ9J2d0ZXhfdjcnLCBnb29nbGVGdW5jRGljdD1nb29nbGVGdW5jKCksIHVybHM9Z2V0R3RleFVybHMoKSl7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgIC8vIFRPRE86IHVybHMgZm9yIG90aGVyIGRhdGFzZXRzXG4gICAgICAgIGpzb24odXJscy50aXNzdWUpLFxuICAgICAgICB0c3YodXJscy5ybmFzZXFDcmFtKSxcbiAgICAgICAgdHN2KHVybHMud2dzQ3JhbSksXG4gICAgICAgIHRzdih1cmxzLnNhbXBsZSksXG4gICAgXTtcblxuICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAudGhlbihmdW5jdGlvbihhcmdzKXtcbiAgICAgICAgICAgIGxldCB0aXNzdWVzID0gcGFyc2VUaXNzdWVzKGFyZ3NbMF0pO1xuICAgICAgICAgICAgY29uc3QgY3JhbSA9IHtcbiAgICAgICAgICAgICAgICBybmFzZXE6IGFyZ3NbMV0ucmVkdWNlKChhLCBkKT0+e2FbZC5zYW1wbGVfaWQudG9VcHBlckNhc2UoKV09ZDsgcmV0dXJuIGE7fSwge30pLFxuICAgICAgICAgICAgICAgIHdnczogYXJnc1syXS5yZWR1Y2UoKGEsIGQpPT57YVtkLnNhbXBsZV9pZC50b1VwcGVyQ2FzZSgpXT1kOyByZXR1cm4gYTt9LCB7fSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgc2FtcGxlcyA9IGFyZ3NbM11cbiAgICAgICAgICAgICAgICAuZmlsdGVyKChzKT0+cy5kYXRhc2V0SWQ9PWRhdGFzZXRJZClcbiAgICAgICAgICAgICAgICAubWFwKChzKT0+e1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHMuZGF0YVR5cGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIldHU1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmFtLndncy5oYXNPd25Qcm9wZXJ0eShzLnNhbXBsZUlkKSkgdGhyb3cgcy5zYW1wbGVJZCArICcgaGFzIG5vIGNyYW0gZmlsZXMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY3JhbUZpbGUgPSBjcmFtLndnc1tzLnNhbXBsZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJSTkFTRVFcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3JhbS5ybmFzZXEuaGFzT3duUHJvcGVydHkocy5zYW1wbGVJZCkpIHRocm93IHMuc2FtcGxlSWQgKyAnIGhhcyBubyBjcmFtIGZpbGVzJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmNyYW1GaWxlID0gY3JhbS5ybmFzZXFbcy5zYW1wbGVJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRoZU1hdHJpeCA9IF9idWlsZE1hdHJpeChkYXRhc2V0SWQsIHNhbXBsZXMsIHRpc3N1ZXMpO1xuICAgICAgICAgICAgX3JlbmRlck1hdHJpeFRhYmxlKHRhYmxlSWQsIHRoZU1hdHJpeCwgZ29vZ2xlRnVuY0RpY3QpO1xuICAgICAgICAgICAgX2FkZEZpbHRlcnModGFibGVJZCwgdGhlTWF0cml4LCBzYW1wbGVzLCB0aXNzdWVzLCBnb29nbGVGdW5jRGljdCk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7Y29uc29sZS5lcnJvcihlcnIpfSk7XG59XG5cbmZ1bmN0aW9uIF9hZGRGaWx0ZXJzKHRhYmxlSWQsIG1hdCwgc2FtcGxlcywgdGlzc3VlcywgZ29vZ2xlRnVuY0RpY3Qpe1xuICAgIGNvbnN0IF9fZmlsdGVyID0gKCk9PntcbiAgICAgICAgY29uc3Qgc2V4ID0gc2VsZWN0KCdpbnB1dFtuYW1lPVwic2V4XCJdOmNoZWNrZWQnKS5ub2RlKCkudmFsdWU7XG4gICAgICAgIGNvbnN0IGFnZSA9IHNlbGVjdCgnaW5wdXRbbmFtZT1cImFnZVwiXTpjaGVja2VkJykubm9kZSgpLnZhbHVlO1xuICAgICAgICBpZiAoc2V4ID09ICdib3RoJyAmJiBhZ2UgPT0gJ2FsbCcpe1xuICAgICAgICAgICAgX3JlbmRlck1hdHJpeFRhYmxlKHRhYmxlSWQsIF9idWlsZE1hdHJpeChtYXQuZGF0YXNldElkLCBzYW1wbGVzLCB0aXNzdWVzKSwgZ29vZ2xlRnVuY0RpY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHNleCA9PSAnYm90aCcpIGZpbHRlcmVkTWF0ID0gX2J1aWxkTWF0cml4KG1hdC5kYXRhc2V0SWQsIHNhbXBsZXMuZmlsdGVyKHM9PnMuYWdlQnJhY2tldD09YWdlKSwgdGlzc3Vlcyk7XG4gICAgICAgICAgICBlbHNlIGlmIChhZ2UgPT0gJ2FsbCcpIGZpbHRlcmVkTWF0ID0gX2J1aWxkTWF0cml4KG1hdC5kYXRhc2V0SWQsIHNhbXBsZXMuZmlsdGVyKHM9PnMuc2V4PT1zZXgpLCB0aXNzdWVzKTtcbiAgICAgICAgICAgIGVsc2UgZmlsdGVyZWRNYXQgPSBfYnVpbGRNYXRyaXgobWF0LmRhdGFzZXRJZCwgc2FtcGxlcy5maWx0ZXIocz0+cy5zZXg9PXNleCAmJiBzLmFnZUJyYWNrZXQ9PWFnZSksIHRpc3N1ZXMpO1xuICAgICAgICAgICAgX3JlbmRlck1hdHJpeFRhYmxlKHRhYmxlSWQsIGZpbHRlcmVkTWF0LCBnb29nbGVGdW5jRGljdCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNlbGVjdCgnI2ZpbHRlci1tZW51Jykuc2VsZWN0QWxsKCdpbnB1dFtuYW1lPVwic2V4XCJdJykub24oJ2NoYW5nZScsIF9fZmlsdGVyKTtcbiAgICBzZWxlY3QoJyNmaWx0ZXItbWVudScpLnNlbGVjdEFsbCgnaW5wdXRbbmFtZT1cImFnZVwiXScpLm9uKCdjaGFuZ2UnLCBfX2ZpbHRlcik7XG59XG5cbmZ1bmN0aW9uIF9idWlsZE1hdHJpeChkYXRhc2V0SWQsIHNhbXBsZXMsIHRpc3N1ZXMpe1xuICAgIGNvbnN0IF9fYnVpbGRIYXNoID0gZnVuY3Rpb24oZGF0YVR5cGUpe1xuICAgICAgICByZXR1cm4gc2FtcGxlcy5maWx0ZXIoKHMpPT5zLmRhdGFUeXBlPT1kYXRhVHlwZSkucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICAgICAgaWYoYVtkLnRpc3N1ZUlkXT09PXVuZGVmaW5lZCkgYVtkLnRpc3N1ZUlkXSA9IDA7XG4gICAgICAgICAgICBhW2QudGlzc3VlSWRdPSBhW2QudGlzc3VlSWRdKzE7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfSwge30pO1xuICAgIH07XG4gICAgY29uc3QgY29sdW1ucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdSTkEtU2VxJyxcbiAgICAgICAgICAgIGlkOiAnUk5BU0VRJyxcbiAgICAgICAgICAgIGRhdGE6IF9fYnVpbGRIYXNoKCdSTkFTRVEnKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1dFUycsXG4gICAgICAgICAgICBpZDogJ1dFUycsXG4gICAgICAgICAgICBkYXRhOiBfX2J1aWxkSGFzaCgnV0VTJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdXR1MnLFxuICAgICAgICAgICAgaWQ6ICdXR1MnLFxuICAgICAgICAgICAgZGF0YTogX19idWlsZEhhc2goJ1dHUycpXG4gICAgICAgIH1cbiAgICBdO1xuICAgIGNvbnN0IHJvd3MgPSB0aXNzdWVzLm1hcCgodCk9PntcbiAgICAgICAgdC5pZCA9IHQudGlzc3VlSWQ7XG4gICAgICAgIHQubGFiZWwgPSB0LnRpc3N1ZU5hbWU7XG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sKT0+e1xuICAgICAgICAgICAgdFtjb2wuaWRdID0gY29sLmRhdGFbdC5pZF0gfHwgdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhc2V0SWQ6IGRhdGFzZXRJZCxcbiAgICAgICAgWDogcm93cyxcbiAgICAgICAgWTogY29sdW1ucyxcbiAgICAgICAgZGF0YTogc2FtcGxlc1xuICAgIH07XG59XG5cblxuLyoqXG4gKiBSZW5kZXIgdGhlIG1hdHJpeCBpbiBhbiBIVE1MIHRhYmxlIGZvcm1hdFxuICogQHBhcmFtIHRhYmxlSWQge1N0cmluZ30gdGhlIERPTSBJRCBvZiB0aGUgdGFibGVcbiAqIEBwYXJhbSBtYXQge09iamVjdH0gb2YgYXR0cjogZGF0YXNldElkLCBYLS1hIGxpc3Qgb2YgeCBvYmplY3RzLCBZLS1hIGxpc3Qgb2YgeSBvYmplY3RzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVuZGVyTWF0cml4VGFibGUodGFibGVJZCwgbWF0LCBnb29nbGVGdW5jRGljdCl7XG4gICAgY29uc3QgZGF0YXNldCA9IHtcbiAgICAgICAgJ2d0ZXhfdjcnOiB7XG4gICAgICAgICAgICBsYWJlbDonR1RFWCBWNycsXG4gICAgICAgICAgICBiZ2NvbG9yOiAnIzJhNzE4YidcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gcmVuZGVyaW5nIHRoZSBjb2x1bW4gbGFiZWxzXG4gICAgY29uc3QgdGhlVGFibGUgPSBzZWxlY3QoYCMke3RhYmxlSWR9YCk7XG4gICAgdGhlVGFibGUuc2VsZWN0KCd0aGVhZCcpLnNlbGVjdEFsbCgndGgnKVxuICAgICAgICAuZGF0YShbe2xhYmVsOlwiXCIsIGlkOlwiXCJ9XS5jb25jYXQobWF0LlkpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCd0aCcpXG4gICAgICAgIC5hdHRyKCdzY29wZScsICdjb2wnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAoZCwgaSk9PmQuaWQ9PVwiXCI/Jyc6YHkke2ktMX1gKVxuICAgICAgICAudGV4dCgoZCk9PmQubGFiZWwpO1xuXG4gICAgdGhlVGFibGUuc2VsZWN0KCcudGFibGUtbGFiZWwnKS5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTtcbiAgICB0aGVUYWJsZS5zZWxlY3QoJy50YWJsZS1sYWJlbCcpLmFwcGVuZCgndGgnKVxuICAgICAgICAuYXR0cignY29sc3BhbicsIG1hdC5ZLmxlbmd0aCArIDEpXG4gICAgICAgIC50ZXh0KGRhdGFzZXRbbWF0LmRhdGFzZXRJZF0ubGFiZWwpXG4gICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsZGF0YXNldFttYXQuZGF0YXNldElkXS5iZ2NvbG9yKTtcblxuICAgIF9yZW5kZXJDb3VudHModGhlVGFibGUuc2VsZWN0KCd0Ym9keScpLCBtYXQpO1xuICAgIF9hZGRDbGlja0V2ZW50cyh0YWJsZUlkKTtcbiAgICBfYWRkVG9vbGJhcih0YWJsZUlkLCBtYXQsIGdvb2dsZUZ1bmNEaWN0KTsgLy8gcmVidWlsZCB0aGUgdG9vbGJhciB3aXRoIHRoZSBuZXcgbWF0cml4XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJDb3VudHModGJvZHksIG1hdCl7XG4gICAgdGJvZHkuc2VsZWN0QWxsKCcuZGF0YS1yb3cnKS5yZW1vdmUoKTtcbiAgICBjb25zdCB0aGVSb3dzID0gdGJvZHkuc2VsZWN0QWxsKCcuZGF0YS1yb3cnKVxuICAgICAgICAuZGF0YShtYXQuWClcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgndHInKVxuICAgICAgICAuY2xhc3NlZCgnZGF0YS1yb3cnLCB0cnVlKTtcblxuICAgIC8vIHJlbmRlcmluZyB0aGUgcm93IGxhYmVsXG4gICAgdGhlUm93cy5hcHBlbmQoJ3RoJylcbiAgICAgICAgLmF0dHIoJ3Njb3BlJywgJ3JvdycpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIChkLCBpKT0+YHgke2l9YClcbiAgICAgICAgLnRleHQoKGQpPT5kLmxhYmVsKTtcblxuICAgIG1hdC5ZLmZvckVhY2goKHksIGopPT57XG4gICAgICAgIHRoZVJvd3MuYXBwZW5kKCd0ZCcpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAoZCwgaSk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gZFt5LmlkXT09PXVuZGVmaW5lZD8nJzpgeCR7aX0geSR7an1gO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50ZXh0KChkKT0+ZFt5LmlkXXx8JycpO1xuICAgIH0pO1xuXG59XG5cbi8qKlxuICogQWRkIGN1c3RvbWl6ZWQgY29sdW1uLCByb3cgYW5kIGNlbGwgY2xpY2sgZXZlbnRzXG4gKiBAcGFyYW0gdGFibGVJZCB7U3RyaW5nfSB0aGUgZG9tIElEIG9mIHRoZSB0YWJsZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2FkZENsaWNrRXZlbnRzKHRhYmxlSWQpe1xuICAgIGNvbnN0IHRoZUNlbGxzID0gc2VsZWN0KGAjJHt0YWJsZUlkfWApLnNlbGVjdCgndGJvZHknKS5zZWxlY3RBbGwoJ3RkJyk7XG5cbiAgICAvLyBjb2x1bW4gbGFiZWxzXG4gICAgc2VsZWN0KGAjJHt0YWJsZUlkfWApLnNlbGVjdCgndGhlYWQnKS5zZWxlY3RBbGwoJ3RoJylcbiAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gdG9nZ2xlIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgICAgY29uc3QgdGhlQ29sdW1uID0gc2VsZWN0KHRoaXMpLmF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgIGlmIChzZWxlY3QodGhpcykuYXR0cignc2NvcGUnKSA9PSAnY29sJykge1xuICAgICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmF0dHIoJ3Njb3BlJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICB0aGVDZWxscy5maWx0ZXIoYC4ke3RoZUNvbHVtbn1gKS5jbGFzc2VkKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmF0dHIoJ3Njb3BlJywgJ2NvbCcpO1xuICAgICAgICAgICAgICAgdGhlQ2VsbHMuZmlsdGVyKGAuJHt0aGVDb2x1bW59YCkuY2xhc3NlZCgnc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhlQ29sdW1uKTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyByb3cgbGFiZWxzXG4gICAgc2VsZWN0KGAjJHt0YWJsZUlkfWApLnNlbGVjdCgndGJvZHknKS5zZWxlY3RBbGwoJ3RoJylcbiAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICBjb25zdCB0aGVSb3cgPSBzZWxlY3QodGhpcykuYXR0cignY2xhc3MnKTtcbiAgICAgICAgICAgaWYgKHNlbGVjdCh0aGlzKS5hdHRyKCdzY29wZScpID09ICdyb3cnKSB7XG4gICAgICAgICAgICAgICBzZWxlY3QodGhpcykuYXR0cignc2NvcGUnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgIHRoZUNlbGxzLmZpbHRlcihgLiR7dGhlUm93fWApLmNsYXNzZWQoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICBzZWxlY3QodGhpcykuYXR0cignc2NvcGUnLCAncm93Jyk7XG4gICAgICAgICAgICAgICB0aGVDZWxscy5maWx0ZXIoYC4ke3RoZVJvd31gKS5jbGFzc2VkKCdzZWxlY3RlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGVSb3cpO1xuICAgICAgICB9KTtcblxuXG4gICAgLy8gZGF0YSBjZWxsc1xuICAgIHRoZUNlbGxzLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gdG9nZ2xlIHRoZSBzZWxlY3RlZCBjbGFzcyBhc3NpZ25tZW50XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZCgnc2VsZWN0ZWQnLCAhc2VsZWN0KHRoaXMpLmNsYXNzZWQoJ3NlbGVjdGVkJykpO1xuICAgICAgICB9KVxufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gdGFibGVJZFxuICogQHBhcmFtIG1hdFxuICogQHByaXZhdGVcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvRmlsZVNhdmVyLmpzL1xuICogRGVwZW5kZW5jaWVzOiBnb29nbGVVc2VyLmpzXG4gKi9cbmZ1bmN0aW9uIF9hZGRUb29sYmFyKHRhYmxlSWQsIG1hdCwgZ29vZ2xlRnVuY0RpY3Qpe1xuICAgIC8vIFRPRE86IGdldCByaWQgb2YgaGFyZC1jb2RlZCBkb20gSURzXG4gICAgY29uc3QgdGhlQ2VsbHMgPSBzZWxlY3QoYCMke3RhYmxlSWR9YCkuc2VsZWN0KCd0Ym9keScpLnNlbGVjdEFsbCgndGQnKTtcbiAgICBzZWxlY3QoJyNtYXRyaXgtdGFibGUtdG9vbGJhcicpLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpO1xuICAgIGNvbnN0IHRvb2xiYXIgPSBuZXcgVG9vbGJhcignbWF0cml4LXRhYmxlLXRvb2xiYXInLCB1bmRlZmluZWQsIHRydWUpO1xuICAgIHRvb2xiYXIuY3JlYXRlQnV0dG9uKCdzYW1wbGUtZG93bmxvYWQnKTtcbiAgICB0b29sYmFyLmNyZWF0ZUJ1dHRvbignc2VuZC10by1maXJlY2xvdWQnLCAnZmEtY2xvdWQtdXBsb2FkLWFsdCcpO1xuXG4gICAgc2VsZWN0KCcjc2FtcGxlLWRvd25sb2FkJylcbiAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgbGV0IGNlbGxzID0gdGhlQ2VsbHMuZmlsdGVyKGAuc2VsZWN0ZWRgKTtcbiAgICAgICAgICAgIGlmIChjZWxscy5lbXB0eSgpKSBhbGVydCgnWW91IGhhdmUgbm90IHNlbGVjdGVkIGFueSBzYW1wbGVzIHRvIGRvd25sb2FkLicpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGRvd25sb2FkQ29udGVudCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTYW1wbGUgSUQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1Rpc3N1ZSBOYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdEYXRhIFR5cGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NSQU0gRmlsZSBHQ1AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NSQU0gRmlsZSBBV1MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NSQU0gRmlsZSBNRDUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NSQU0gRmlsZSBTaXplJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdDUkFNIEluZGV4IEdDUCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ1JBTSBJbmRleCBBV1MnXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbihcIlxcdFwiKSArICdcXG4nO1xuICAgICAgICAgICAgICAgIGNlbGxzLmVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IHNlbGVjdCh0aGlzKS5hdHRyKCdjbGFzcycpLnNwbGl0KCcgJykuZmlsdGVyKChjKT0+e3JldHVybiBjIT0nc2VsZWN0ZWQnfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSBtYXQuWFtwYXJzZUludChtYXJrZXJbMF0ucmVwbGFjZSgneCcsICcnKSldLmlkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gbWF0LllbcGFyc2VJbnQobWFya2VyWzFdLnJlcGxhY2UoJ3knLCAnJykpXS5pZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvd25sb2FkICcgKyB4ICsgJyA6ICcrIHkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkU2FtcGxlcyA9IG1hdC5kYXRhLmZpbHRlcigocyk9PnMuZGF0YVR5cGU9PXkmJnMudGlzc3VlSWQ9PXgmJnMuZGF0YVR5cGUhPSdXRVMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqKiogV0FSTklORzogbm8gV0VTIGNyYW0gZmlsZXMgYXZhaWxhYmxlIEFUTSAqKioqL1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3JhbSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyYW1fZmlsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmFtX2ZpbGVfYXdzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyYW1fZmlsZV9tZDUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JhbV9maWxlX3NpemUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JhbV9pbmRleCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmFtX2luZGV4X2F3cydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLm1hcCgoZCk9PnMuY3JhbUZpbGVbZF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zID0gW3MuY3JhbUZpbGUuc2FtcGxlX2lkLCBzLnRpc3N1ZU5hbWUsIHMuZGF0YVR5cGVdLmNvbmNhdChjcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1ucy5qb2luKFwiXFx0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkU2FtcGxlcyk7XG4gICAgICAgICAgICAgICAgICAgIGRvd25sb2FkQ29udGVudCArPSBzZWxlY3RlZFNhbXBsZXMuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZXQgZmlsZSA9IG5ldyBCbG9iKFtkb3dubG9hZENvbnRlbnRdLCB7dHlwZTogJ3RleHQvcGxhaW47Y2hhcnNldD11dGYtOCd9KTtcbiAgICAgICAgICAgICAgICBzYXZlQXMoZmlsZSwgJ0dURXguY3JhbS50eHQnLCB0cnVlKTsgLy8gc2F2ZUFzKCkgaXMgYSBGaWxlU2F2ZXIgZmlsZSwgZGlzYWJsZSBhdXRvIEJPTVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICBzZWxlY3QoJyNzZW5kLXRvLWZpcmVjbG91ZCcpXG4gICAgICAgIC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxuICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQoJyNmaXJlLWNsb3VkLXN0YXR1cycpLmVtcHR5KCk7XG4gICAgICAgICAgICAgaWYgKCFnb29nbGVGdW5jRGljdC5jaGVja1NpZ25lZEluKCkpe1xuICAgICAgICAgICAgICAgICBhbGVydChcIllvdSBuZWVkIHRvIHNpZ24gaW4gZmlyc3RcIik7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGNvbnN0IHNjb3BlcyA9ICdwcm9maWxlIGVtYWlsIGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZGV2c3RvcmFnZS5mdWxsX2NvbnRyb2wgaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9wbHVzLm1lJztcbiAgICAgICAgICAgIGdvb2dsZUZ1bmNEaWN0LmdyYW50U2NvcGVzKHNjb3Blcyk7XG4gICAgICAgICAgICBfcmVwb3J0QmlsbGluZ1Byb2plY3RzKGdvb2dsZUZ1bmNEaWN0LmdldFVzZXIoKSk7XG4gICAgICAgICAgICBfcmVwb3J0V29ya3NwYWNlcyhnb29nbGVGdW5jRGljdC5nZXRVc2VyKCkpO1xuXG4gICAgICAgICAgICBsZXQgY2VsbHMgPSB0aGVDZWxscy5maWx0ZXIoYC5zZWxlY3RlZGApO1xuICAgICAgICAgICAgaWYgKGNlbGxzLmVtcHR5KCkpIGFsZXJ0KCdZb3UgaGF2ZSBub3Qgc2VsZWN0ZWQgYW55IHNhbXBsZXMgdG8gZG93bmxvYWQuJyk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxlY3QoJyNmaXJlLWNsb3VkLWZvcm0nKS5zdHlsZShcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICBzZWxlY3QoJyNzdWJtaXQtdG8tZmlyZWNsb3VkLWJ0bicpXG4gICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCgnI2ZpcmUtY2xvdWQtc3RhdHVzJykuZW1wdHkoKTtcbiAgICAgICAgICAgIGxldCBjZWxscyA9IHRoZUNlbGxzLmZpbHRlcihgLnNlbGVjdGVkYCk7XG4gICAgICAgICAgICBsZXQgYWxsU2VsZWN0ZWRTYW1wbGVzID0gW107XG4gICAgICAgICAgICBjZWxscy5lYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBzZWxlY3QodGhpcykuYXR0cignY2xhc3MnKS5zcGxpdCgnICcpLmZpbHRlcigoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAhPSAnc2VsZWN0ZWQnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IG1hdC5YW3BhcnNlSW50KG1hcmtlclswXS5yZXBsYWNlKCd4JywgJycpKV0uaWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IG1hdC5ZW3BhcnNlSW50KG1hcmtlclsxXS5yZXBsYWNlKCd5JywgJycpKV0uaWQ7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvd25sb2FkICcgKyB4ICsgJyA6ICcgKyB5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IG1hdC5kYXRhLmZpbHRlcigocyk9PnMuZGF0YVR5cGU9PXkmJnMudGlzc3VlSWQ9PXgmJnMuZGF0YVR5cGUhPSdXRVMnKS5tYXAoZD0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBkLnNhbXBsZUlkLnNwbGl0KCctJyk7XG4gICAgICAgICAgICAgICAgICAgIGQuZG9ub3JJZCA9IHRlbXBbMF0gKyAnLScgKyB0ZW1wWzFdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICB9KTsgLy8gTk9URTogY3VycmVudGx5IHdlIGRvbid0IGhhdmUgV0VTIENSQU0gZmlsZSBwYXRoc1xuICAgICAgICAgICAgICAgIGFsbFNlbGVjdGVkU2FtcGxlcyA9IGFsbFNlbGVjdGVkU2FtcGxlcy5jb25jYXQoc2VsZWN0ZWQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFsbFNlbGVjdGVkU2FtcGxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgX3N1Ym1pdFRvRmlyZUNsb3VkKGdvb2dsZUZ1bmNEaWN0LCBhbGxTZWxlY3RlZFNhbXBsZXMpO1xuICAgICAgICAgICAgc2VsZWN0KCcjZmlyZS1jbG91ZC1mb3JtJykuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICBzZWxlY3QoJyNjYW5jZWwtZmlyZWNsb3VkLWJ0bicpXG4gICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZWN0KCcjZmlyZS1jbG91ZC1mb3JtJykuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgIGFsZXJ0KCdDYW5jZWxlZCEnKTtcbiAgICAgICAgfSlcbn1cblxuLyoqKioqIEZpcmVDbG91ZCBBUEkgKioqKiovXG4vLyByZWZlcmVuY2U6IHVzZSB0aGlzIFVSTCwgaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL3Rva2VuaW5mbz9hY2Nlc3NfdG9rZW49TXlBY2Nlc3NUb2tlbiwgdG8gY2hlY2sgdGhlIGFjY2VzcyB0b2tlbiBpbmZvXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2lkZW50aXR5L3NpZ24taW4vd2ViL2J1aWxkLWJ1dHRvblxuLy8gZGVwZW5kZW5jaWVzOiBqUXVlcnlcbmZ1bmN0aW9uIF9yZXBvcnRCaWxsaW5nUHJvamVjdHMoZ29vZ2xlVXNlciwgZG9tSWQ9XCJiaWxsaW5nLXByb2plY3QtbGlzdFwiKSB7XG5cbiAgICAvLyBsZXQgcHJvZmlsZSA9IGdvb2dsZVVzZXIuZ2V0QmFzaWNQcm9maWxlKCk7XG4gICAgLy8gY29uc29sZS5sb2coJ0lEOiAnICsgcHJvZmlsZS5nZXRJZCgpKTtcbiAgICAvLyBjb25zb2xlLmxvZygnTmFtZTogJyArIHByb2ZpbGUuZ2V0TmFtZSgpKTtcbiAgICAvLyBjb25zb2xlLmxvZygnRW1haWw6ICcgKyBwcm9maWxlLmdldEVtYWlsKCkpO1xuICAgIC8vIGdldCB0aGUgdXNlcidzIGFjY2VzcyB0b2tlblxuXG4gICAgbGV0IHRva2VuID0gZ29vZ2xlVXNlci5nZXRBdXRoUmVzcG9uc2UodHJ1ZSkuYWNjZXNzX3Rva2VuO1xuICAgIGNvbnNvbGUubG9nKHRva2VuKTtcbiAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS9wcm9maWxlL2JpbGxpbmcnLFxuICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgeGhyRmllbGRzOiB7XG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uICh4aHIpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgdG9rZW4pO1xuICAgICAgICB9LFxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAvLyBDYW4ndCBmaWd1cmUgb3V0IGhvdyB0byBnZW5lcmF0ZSB0aGlzIGZvcm0gdXNpbmcgRDMuLi4gc28gaGVyZSBJJ20gdXNpbmcgalF1ZXJ5IHN5bnRheFxuICAgICAgICAgICAgJChgIyR7ZG9tSWR9YCkuZW1wdHkoKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmZvckVhY2goKGQpPT57XG4gICAgICAgICAgICAgICAgJCgnPGxhYmVsPicgK1xuICAgICAgICAgICAgICAgICAgICBgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJiaWxsaW5nLXByb2plY3RcIiB2YWx1ZT1cIiR7ZC5wcm9qZWN0TmFtZX1cIj4gYCArXG4gICAgICAgICAgICAgICAgICAgIGQucHJvamVjdE5hbWUgK1xuICAgICAgICAgICAgICAgICAgICc8L2xhYmVsPjxici8+J1xuICAgICAgICAgICAgICAgICkuYXBwZW5kVG8oJChgIyR7ZG9tSWR9YCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlWzBdKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBfcmVwb3J0V29ya3NwYWNlcyhnb29nbGVVc2VyKXtcbiAgICBsZXQgdG9rZW4gPSBnb29nbGVVc2VyLmdldEF1dGhSZXNwb25zZSh0cnVlKS5hY2Nlc3NfdG9rZW47XG4gICAgIC8vIGxpc3QgVXNlcidzIHdvcmtzcGFjZXNcbiAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS93b3Jrc3BhY2VzJyxcbiAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgIHhockZpZWxkczoge1xuICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoeGhyKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHRva2VuKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICBjb25zdCB3b3Jrc3BhY2VzID0gcmVzcG9uc2UuZmlsdGVyKChkKT0+IWQucHVibGljKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHdvcmtzcGFjZXMpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX3N1Ym1pdFRvRmlyZUNsb3VkKGdvb2dsZUZ1bmNEaWN0LCBzYW1wbGVzKXtcbiAgICBjb25zdCB0b2tlbiA9IGdvb2dsZUZ1bmNEaWN0LmdldFVzZXIoKS5nZXRBdXRoUmVzcG9uc2UodHJ1ZSkuYWNjZXNzX3Rva2VuO1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9ICQoJ2lucHV0W25hbWU9XCJiaWxsaW5nLXByb2plY3RcIl0nKS52YWwoKTtcbiAgICBjb25zdCB3b3Jrc3BhY2UgPSAkKCdpbnB1dFtuYW1lPVwid29ya3NwYWNlXCJdJykudmFsKCk7XG4gICAgaWYobmFtZXNwYWNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxlcnQoJ1lvdSBtdXN0IHByb3ZpZGUgYSBiaWxsaW4gcHJvamVjdCcpO1xuICAgICAgICB0aHJvdyhcImJpbGxpbmcgcHJvamVjdCBpcyBub3QgcHJvdmlkZWRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHdvcmtzcGFjZSA9PT0gdW5kZWZpbmVkIHx8IHdvcmtzcGFjZSA9PSAnJyl7XG4gICAgICAgIGFsZXJ0KCdZb3UgbXVzdCBwcm92aWRlIGEgbmV3IHdvcmtzcGFjZSBuYW1lJyk7XG4gICAgICAgIHRocm93KCd3b3Jrc3BhY2UgbmFtZSBpcyBub3QgcHJvdmlkZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyh3b3Jrc3BhY2UpO1xuICAgIGNvbnNvbGUubG9nKHNhbXBsZXMpO1xuICAgICQoJyNzcGlubmVyJykuc2hvdygpO1xuICAgIC8vIGNyZWF0ZSB0aGUgd29ya3NwYWNlXG4gICAgJC5hamF4KHtcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvd29ya3NwYWNlcycsXG4gICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgeGhyRmllbGRzOiB7XG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uICh4aHIpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgdG9rZW4pO1xuICAgICAgICB9LFxuICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLFxuICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBcIm5hbWVzcGFjZVwiOiBuYW1lc3BhY2UsXG4gICAgICAgICAgICBcIm5hbWVcIjogd29ya3NwYWNlLFxuICAgICAgICAgICAgXCJhdHRyaWJ1dGVzXCI6IHt9LFxuICAgICAgICAgICAgXCJhdXRob3JpemF0aW9uRG9tYWluXCI6IFtdXG4gICAgICAgIH0pLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSl7IC8vIGNhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIHdvcmtzcGFjZSBpcyBjcmVhdGVkXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpbmlzaGVkIGNyZWF0aW5nIHdvcmtzcGFjZS4uLlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGRvbm9ycyA9IHNhbXBsZXMubWFwKGQ9PntcbiAgICAgICAgICAgICAgICBpZiAoIWQuaGFzT3duUHJvcGVydHkoJ2Rvbm9ySWQnKSkgdGhyb3cgJ1NhbXBsZSBkb2VzIG5vdCBjb250YWluIGF0dHIgZG9ub3JJZC4nO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmRvbm9ySWQ7XG4gICAgICAgICAgICB9KS5maWx0ZXIoKGQsIGksIGEpID0+IGEuaW5kZXhPZihkKSA9PT0gaSk7IC8vIG9idGFpbiB1bmlxdWUgZG9ub3JzXG4gICAgICAgICAgICBjb25zdCBkb25vckVudGl0eVN0cmluZyA9IGBlbnRpdGllcz1lbnRpdHk6cGFydGljaXBhbnRfaWRcXG4ke2Rvbm9ycy5qb2luKCdcXG4nKX1cXG5gO1xuICAgICAgICAgICAgY29uc3QgZG9ub3JFbnRpdHlVcmxFbmNvZGUgPSBlbmNvZGVVUkkoZG9ub3JFbnRpdHlTdHJpbmcpO1xuXG4gICAgICAgICAgICAvLyBzdWJtaXR0aW5nIHBhcnRpY2lwYW50IElEc1xuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IGBodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS93b3Jrc3BhY2VzLyR7bmFtZXNwYWNlfS8ke3dvcmtzcGFjZX0vaW1wb3J0RW50aXRpZXNgLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICB4aHJGaWVsZHM6IHtcbiAgICAgICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24gKHhocikge1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHRva2VuKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRvbm9yRW50aXR5VXJsRW5jb2RlLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3NwaW5uZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbmFsbHksIHN1Ym1pdHRpbmcgc2FtcGxlc1xuICAgICAgICAgICAgICAgICAgICAvLyBwcmVwYXJlIHRoZSBzYW1wbGVFbnRpdHlTdHJpbmcgZm9yIEZpcmVDbG91ZCBBUElcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmaW5pc2hlZCBpbXBvcnRpbmcgcGFydGljaXBhbnQgSURzLi4uXCIpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2FtcGxlRW50aXR5ID0gW1snZW50aXR5OnNhbXBsZV9pZCcsICdwYXJ0aWNpcGFudF9pZCcsICdzYW1wbGVfdHlwZScsICdiYW1fZmlsZScsICdiYW1faW5kZXgnXS5qb2luKCdcXHQnKV07XG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZUVudGl0eSA9IHNhbXBsZUVudGl0eS5jb25jYXQoc2FtcGxlcy5tYXAoZD0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuY3JhbUZpbGUgPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJEYXRhIEVycm9yOiBcIiArIGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighZC5jcmFtRmlsZS5oYXNPd25Qcm9wZXJ0eSgnY3JhbV9maWxlJykpIHRocm93IFwiRGF0YSBFcnJvcjogXCIgKyBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogdXNlIGNyYW1GaWxlLnNhbXBsZV9pZCBpbnN0ZWFkIG9mIGQuc2FtcGxlSWQgdG8gcHJlc2VydmUgdGhlIG9jY2FzaW9uYWwgbWl4ZWQgY2FzZSBzYW1wbGUgSURzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2QuY3JhbUZpbGUuc2FtcGxlX2lkLCBkLmRvbm9ySWQsIGQuZGF0YVR5cGUsIGQuY3JhbUZpbGUuY3JhbV9maWxlLCBkLmNyYW1GaWxlLmNyYW1faW5kZXhdLmpvaW4oJ1xcdCcpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNhbXBsZUVudGl0eVN0cmluZyA9IGBlbnRpdGllcz0ke3NhbXBsZUVudGl0eS5qb2luKCdcXG4nKX1cXG5gO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzYW1wbGVFbnRpdHlVcmxFbmNvZGUgPSBlbmNvZGVVUkkoc2FtcGxlRW50aXR5U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2FtcGxlRW50aXR5U3RyaW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvd29ya3NwYWNlcy8ke25hbWVzcGFjZX0vJHt3b3Jrc3BhY2V9L2ltcG9ydEVudGl0aWVzYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHhockZpZWxkczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoeGhyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyICcgKyB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNhbXBsZUVudGl0eVVybEVuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpbmlzaGVkIGltcG9ydGluZyBzYW1wbGVzLi4uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZjVVJMID0gYGh0dHBzOi8vcG9ydGFsLmZpcmVjbG91ZC5vcmcvI3dvcmtzcGFjZXMvJHtuYW1lc3BhY2V9LyR7d29ya3NwYWNlfS9kYXRhYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjZmlyZS1jbG91ZC1zdGF0dXMnKS5odG1sKGBTdWJtaXR0ZWQhIDxici8+IEdvIHRvIHlvdXIgPGJyLz4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiR7ZmNVUkx9XCI+RmlyZUNsb3VkIHdvcmtzcGFjZTwvYT5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3Ipe2NvbnNvbGUuZXJyb3IoZXJyb3IpfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcil7Y29uc29sZS5lcnJvcihlcnJvcil9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKXtjb25zb2xlLmVycm9yKGVycm9yKX1cbiAgICB9KTtcbn1cblxuXG5cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3RleFVybHMoKXtcbiAgICBjb25zdCBob3N0ID0gJ2h0dHBzOi8vZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nOyAvLyBOT1RFOiB0b3AgZXhwcmVzc2VkIGdlbmVzIGFyZSBub3QgeWV0IGluIHByb2R1Y3Rpb25cbiAgICByZXR1cm4ge1xuICAgICAgICBkeW5lcXRsOiBob3N0ICsgJ2Fzc29jaWF0aW9uL2R5bmVxdGwnLFxuXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5FeG9uRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIGdlbmVJZDogaG9zdCArICdyZWZlcmVuY2UvZ2VuZUlkP2Zvcm1hdD1qc29uJnJlbGVhc2U9djcmZ2VuZUlkPScsXG4gICAgICAgIGdlbmVFeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9nZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsOiBob3N0ICsgJ3JlZmVyZW5jZS9jb2xsYXBzZWRHZW5lTW9kZWw/dW5maWx0ZXJlZD1mYWxzZSZyZWxlYXNlPXY3JmdlbmVJZD0nLFxuICAgICAgICBnZW5lTW9kZWxVbmZpbHRlcmVkOiBob3N0ICsgJ3JlZmVyZW5jZS9jb2xsYXBzZWRHZW5lTW9kZWw/dW5maWx0ZXJlZD10cnVlJnJlbGVhc2U9djcmZ2VuZUlkPScsXG5cbiAgICAgICAgaXNvZm9ybTogaG9zdCArICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9JyxcbiAgICAgICAgaXNvZm9ybUV4cDogaG9zdCArICdleHByZXNzaW9uL2lzb2Zvcm1FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmJveHBsb3REZXRhaWw9bWVkaWFuJmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIGp1bmN0aW9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgbWVkR2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhbkdlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmcGFnZV9zaXplPTEwMDAwJyxcblxuICAgICAgICAvLyBzYW1wbGU6ICdkYXRhL2d0ZXguU2FtcGxlLmNzdicsXG4gICAgICAgIHNhbXBsZTogJ3RtcFN1bW1hcnlEYXRhL2d0ZXguU2FtcGxlLmNzdicsXG4gICAgICAgIHNucDogaG9zdCArICdyZWZlcmVuY2Uvc25wP3JlZmVyZW5jZT1jdXJyZW50JmZvcm1hdD1qc29uJnNucElkPScsXG5cbiAgICAgICAgdGlzc3VlOiAgaG9zdCArICdkYXRhc2V0L3Rpc3N1ZUluZm8nLFxuICAgICAgICB0aXNzdWVTaXRlczogaG9zdCArICdkYXRhc2V0L3Rpc3N1ZVNpdGVEZXRhaWw/Zm9ybWF0PWpzb24nLFxuXG4gICAgICAgIHRvcEluVGlzc3VlRmlsdGVyZWQ6IGhvc3QgKyAnZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lcz9kYXRhc2V0SWQ9Z3RleF92NyZmaWx0ZXJNdEdlbmU9dHJ1ZSZzb3J0X2J5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZV9zaXplPTUwJnRpc3N1ZUlkPScsXG4gICAgICAgIHRvcEluVGlzc3VlOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZXM/ZGF0YXNldElkPWd0ZXhfdjcmc29ydF9ieT1tZWRpYW4mc29ydERpcmVjdGlvbj1kZXNjJnBhZ2Vfc2l6ZT01MCZ0aXNzdWVJZD0nLFxuXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArICdyZWZlcmVuY2Uvc25wP2Zvcm1hdD1qc29uJnJlZmVyZW5jZT1jdXJyZW50JnJlbGVhc2U9djcmdmFyaWFudElkPScsXG5cbiAgICAgICAgLy8gbG9jYWwgc3RhdGljIGZpbGVzXG4gICAgICAgIHJuYXNlcUNyYW06ICd0bXBTdW1tYXJ5RGF0YS9ybmFzZXFfY3JhbV9maWxlc192N19kYkdhUF8wMTE1MTYudHh0JyxcbiAgICAgICAgd2dzQ3JhbTogJ3RtcFN1bW1hcnlEYXRhL3dnc19jcmFtX2ZpbGVzX3Y3X2hnMzhfZGJHYVBfMDExNTE2LnR4dCcsXG5cbiAgICB9XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIGdlbmVzIGZyb20gR1RFeCB3ZWIgc2VydmljZVxuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZ2VuZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZXMoZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdnZW5lSWQnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnR2VuZSB3ZWIgc2VydmljZSBwYXJzaW5nIGVycm9yJztcbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3Vlc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgdGlzc3Vlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVzKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlSW5mbyc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VUaXNzdWVzIGlucHV0IGVycm9yLic7XG4gICAgY29uc3QgdGlzc3VlcyA9IGRhdGFbYXR0cl07XG5cbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3Rpc3N1ZUlkJywgJ3Rpc3N1ZU5hbWUnLCAnY29sb3JIZXgnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VUaXNzdWUgYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRpc3N1ZXM7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZSBncm91cHNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIGZvckVxdGwge0Jvb2xlYW59XG4gKiBAcmV0dXJucyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsPWZhbHNlKXtcbiAgICAvLyB0aGUgbGlzdCBvZiBpbnZhbGlkZSBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIGNvbnN0IGludmFsaWRUaXNzdWVzID0gWydCbGFkZGVyJywgJ0NlcnZpeF9FY3RvY2Vydml4JywgJ0NlcnZpeF9FbmRvY2Vydml4JywgJ0ZhbGxvcGlhbl9UdWJlJywgJ0tpZG5leV9Db3J0ZXgnXTtcblxuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlU2l0ZURldGFpbCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VUaXNzdWVTaXRlcyBpbnB1dCBlcnJvci4nO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBmb3JFcXRsPT1mYWxzZT9kYXRhW2F0dHJdOmRhdGFbYXR0cl0uZmlsdGVyKChkKT0+e3JldHVybiAhaW52YWxpZFRpc3N1ZXMuaW5jbHVkZXMoZC50aXNzdWVfc2l0ZV9kZXRhaWxfaWQpfSk7IC8vIGFuIGFycmF5IG9mIHRpc3N1ZV9zaXRlX2RldGFpbCBvYmplY3RzXG5cbiAgICAvLyBidWlsZCB0aGUgdGlzc3VlR3JvdXBzIGxvb2t1cCBkaWN0aW9uYXJ5IGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lIChpLmUuIHRoZSB0aXNzdWUgbWFpbiBzaXRlIG5hbWUpXG4gICAgWyd0aXNzdWVfc2l0ZScsICd0aXNzdWVfc2l0ZV9kZXRhaWxfaWQnLCAndGlzc3VlX3NpdGVfZGV0YWlsJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyBgcGFyc2VUaXNzdWVTaXRlcyBhdHRyIGVycm9yLiAke2R9IGlzIG5vdCBmb3VuZGA7XG4gICAgfSk7XG4gICAgbGV0IHRpc3N1ZUdyb3VwcyA9IHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57XG4gICAgICAgIGxldCBncm91cE5hbWUgPSBkLnRpc3N1ZV9zaXRlO1xuICAgICAgICBsZXQgc2l0ZSA9IHtcbiAgICAgICAgICAgIGlkOiBkLnRpc3N1ZV9zaXRlX2RldGFpbF9pZCxcbiAgICAgICAgICAgIG5hbWU6IGQudGlzc3VlX3NpdGVfZGV0YWlsXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGdyb3VwTmFtZSkpIGFycltncm91cE5hbWVdID0gW107IC8vIGluaXRpYXRlIGFuIGFycmF5XG4gICAgICAgIGFycltncm91cE5hbWVdLnB1c2goc2l0ZSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwge30pO1xuXG4gICAgLy8gbW9kaWZ5IHRoZSB0aXNzdWUgZ3JvdXBzIHRoYXQgaGF2ZSBvbmx5IGEgc2luZ2xlIHNpdGVcbiAgICAvLyBieSByZXBsYWNpbmcgdGhlIGdyb3VwJ3MgbmFtZSB3aXRoIHRoZSBzaW5nbGUgc2l0ZSdzIG5hbWUgLS0gZm9yIGEgYmV0dGVyIEFscGhhYmV0aWNhbCBvcmRlciBvZiB0aGUgdGlzc3VlIGdyb3Vwc1xuXG4gICAgT2JqZWN0LmtleXModGlzc3VlR3JvdXBzKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAodGlzc3VlR3JvdXBzW2RdLmxlbmd0aCA9PSAxKXsgLy8gYSBzaW5nbGUtc2l0ZSBncm91cFxuICAgICAgICAgICAgbGV0IHNpdGUgPSB0aXNzdWVHcm91cHNbZF1bMF07IC8vIHRoZSBzaW5nbGUgc2l0ZVxuICAgICAgICAgICAgZGVsZXRlIHRpc3N1ZUdyb3Vwc1tkXTsgLy8gcmVtb3ZlIHRoZSBvbGQgZ3JvdXAgaW4gdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIHRpc3N1ZUdyb3Vwc1tzaXRlLm5hbWVdID0gW3NpdGVdOyAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgd2l0aCB0aGUgc2l0ZSdzIG5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRpc3N1ZUdyb3VwcztcblxufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBleG9uc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbnMoZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICdjb2xsYXBzZWRHZW5lTW9kZWwnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbnMgaW5wdXQgZXJyb3IuJyArIGRhdGE7XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWydmZWF0dXJlVHlwZScsICdzdGFydCcsICdlbmQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWRhdGFbYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9ucyBhdHRyIG5vdCBmb3VuZDogJyArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl0uZmlsdGVyKChkKT0+ZC5mZWF0dXJlVHlwZSA9PSAnZXhvbicpLm1hcCgoZCk9PntcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZC5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGQuZW5kO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUganVuY3Rpb25zXG4gKiBAcGFyYW0gZGF0YVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uc1xuICogLy8gd2UgZG8gbm90IHN0b3JlIGp1bmN0aW9uIHN0cnVjdHVyZSBhbm5vdGF0aW9ucyBpbiBNb25nb1xuICAgIC8vIHNvIGhlcmUgd2UgdXNlIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlIHRvIHJldHJpZXZlIHRoZSBqdW5jdGlvbiBnZW5vbWljIGxvY2F0aW9uc1xuICAgIC8vIGFzc3VtaW5nIHRoYXQgZWFjaCB0aXNzdWUgaGFzIHRoZSBzYW1lIGp1bmN0aW9ucyxcbiAgICAvLyB0byBncmFiIGFsbCB0aGUga25vd24ganVuY3Rpb25zIG9mIGEgZ2VuZSwgd2Ugb25seSBuZWVkIHRvIGxvb2sgYXQgb25lIHRpc3N1ZVxuICAgIC8vIGhlcmUgd2UgYXJiaXRyYXJpbHkgcGljayBMaXZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25zKGRhdGEpe1xuXG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlSnVuY3Rpb25zIGlucHV0IGVycm9yLiAnICsgZGF0YTtcbiAgICByZXR1cm4gZGF0YVthdHRyXS5maWx0ZXIoKGQpPT5kLnRpc3N1ZUlkPT0nTGl2ZXInKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tOiBwb3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21TdGFydDogcG9zWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kOiBwb3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25JZDogZC5qdW5jdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJc29mb3JtRXhvbnMoZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICd0cmFuc2NyaXB0JztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ3BhcnNlSXNvZm9ybXMgaW5wdXQgZXJyb3IgJyArIGRhdGE7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl0uZmlsdGVyKChkKT0+e3JldHVybiAnZXhvbicgPT0gZC5mZWF0dXJlVHlwZX0pXG4gICAgICAgIC5yZWR1Y2UoKGEsIGQpPT57XG4gICAgICAgIGlmIChhW2QudHJhbnNjcmlwdElkXSA9PT0gdW5kZWZpbmVkKSBhW2QudHJhbnNjcmlwdElkXSA9IFtdO1xuICAgICAgICBhW2QudHJhbnNjcmlwdElkXS5wdXNoKGQpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9LCB7fSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBpc29mb3Jtc1xuICogQHBhcmFtIGRhdGEge0pzb259IGZyb20gR1RFeCB3ZWIgc2VydmljZSAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/cmVsZWFzZT12NyZnZW5jb2RlX2lkPSdcbiAqIHJldHVybnMgYSBsaXN0IG9mIGlzb2Zvcm0gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJc29mb3JtcyhkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ3RyYW5zY3JpcHQnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VJc29mb3JtcyBpbnB1dCBlcnJvcicpO1xuICAgIHJldHVybiBkYXRhW2F0dHJdLmZpbHRlcigoZCk9PntyZXR1cm4gJ3RyYW5zY3JpcHQnID09IGQuZmVhdHVyZVR5cGV9KS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCBsMSA9IE1hdGguYWJzKGEuY2hyb21FbmQgLSBhLmNocm9tU3RhcnQpICsgMTtcbiAgICAgICAgY29uc3QgbDIgPSBNYXRoLmFicyhiLmNocm9tRW5kIC0gYi5jaHJvbVN0YXJ0KSArIDE7XG4gICAgICAgIHJldHVybiAtKGwxLWwyKTsgLy8gc29ydCBieSBpc29mb3JtIGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgZmluYWwgKG1hc2tlZCkgZ2VuZSBtb2RlbCBleG9uIGV4cHJlc3Npb25cbiAqIGV4cHJlc3Npb24gaXMgbm9ybWFsaXplZCB0byByZWFkcyBwZXIga2JcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiBleG9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBleG9ucyB7TGlzdH0gb2YgZXhvbnMgd2l0aCBwb3NpdGlvbnNcbiAqIEBwYXJhbSB1c2VMb2cge2Jvb2xlYW59IHVzZSBsb2cyIHRyYW5zZm9ybWF0aW9uXG4gKiBAcGFyYW0gYWRqdXN0IHtOdW1iZXJ9IGRlZmF1bHQgMC4wMVxuICogQHJldHVybnMge0xpc3R9IG9mIGV4b24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9uRXhwcmVzc2lvbihkYXRhLCBleG9ucywgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBleG9uRGljdCA9IGV4b25zLnJlZHVjZSgoYSwgZCk9PnthW2QuZXhvbklkXSA9IGQ7IHJldHVybiBhO30sIHt9KTtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkV4b25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlRXhvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGV4b25PYmplY3RzID0gZGF0YVthdHRyXTtcbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIFsnZGF0YScsICdleG9uSWQnLCAndGlzc3VlSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWV4b25PYmplY3RzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGV4b24gY291bnRzXG4gICAgZXhvbk9iamVjdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBjb25zdCBleG9uID0gZXhvbkRpY3RbZC5leG9uSWRdOyAvLyBmb3IgcmV0cmlldmluZyBleG9uIHBvc2l0aW9uc1xuICAgICAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgICAgICBbJ2VuZCcsICdzdGFydCddLmZvckVhY2goKHApPT57XG4gICAgICAgICAgICBpZiAoIWV4b24uaGFzT3duUHJvcGVydHkocCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBhdHRyIG5vdCBmb3VuZDogJyArIHA7XG4gICAgICAgIH0pO1xuICAgICAgICBkLmwgPSBleG9uLmVuZCAtIGV4b24uc3RhcnQgKyAxO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQuZGF0YSkvZC5sO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5kYXRhKS9kLmw7XG4gICAgICAgIGlmICh1c2VMb2cpIGQudmFsdWUgPSBNYXRoLmxvZzIoZC52YWx1ZSArIDEpO1xuICAgICAgICBkLnggPSBkLmV4b25JZDtcbiAgICAgICAgZC55ID0gZC50aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBleG9uLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZXhvbi5lbmQ7XG4gICAgICAgIGQudW5pdCA9IGQudW5pdCArICcgcGVyIGJhc2UnO1xuICAgIH0pO1xuICAgIHJldHVybiBleG9uT2JqZWN0cy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmNocm9tU3RhcnQ8Yi5jaHJvbVN0YXJ0KSByZXR1cm4gLTE7XG4gICAgICAgIGlmIChhLmNocm9tU3RhcnQ+Yi5jaHJvbVN0YXJ0KSByZXR1cm4gMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7IC8vIHNvcnQgYnkgZ2Vub21pYyBsb2NhdGlvbiBpbiBhc2NlbmRpbmcgb3JkZXJcbn1cblxuLyoqXG4gKiBQYXJzZSBqdW5jdGlvbiBtZWRpYW4gcmVhZCBjb3VudCBkYXRhXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgdGhlIGp1bmN0aW9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHBlcmZvcm0gbG9nIHRyYW5zZm9ybWF0aW9uXG4gKiBAcGFyYW0gYWRqdXN0IHtOdW1iZXJ9IGZvciBoYW5kbGluZyAwJ3Mgd2hlbiB1c2VMb2cgaXMgdHJ1ZVxuICogQHJldHVybnMge0xpc3R9IG9mIGp1bmN0aW9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uKGRhdGEsIHVzZUxvZz10cnVlLCBhZGp1c3Q9MSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGp1bmN0aW9ucyA9IGRhdGFbYXR0cl07XG5cbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIGlmIChqdW5jdGlvbnMgPT09IHVuZGVmaW5lZCB8fCBqdW5jdGlvbnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBqdW5jdGlvbiBkYXRhIGZvdW5kJyk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIFsndGlzc3VlSWQnLCAnanVuY3Rpb25JZCcsICdkYXRhJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghanVuY3Rpb25zWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgZDtcbiAgICB9KTtcblxuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGp1bmN0aW9uIHJlYWQgY291bnRzXG4gICAganVuY3Rpb25zLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihkLmRhdGEgKyBhZGp1c3QpKTpOdW1iZXIoZC5kYXRhKTtcbiAgICAgICAgZC54ID0gZC5qdW5jdGlvbklkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZUlkO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5kYXRhKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkXG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSBpc29mb3JtIGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0gdXNlTG9nXG4gKiBAcGFyYW0gYWRqdXN0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSXNvZm9ybUV4cHJlc3Npb24oZGF0YSwgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBhdHRyID0gJ2lzb2Zvcm1FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSXNvZm9ybUV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcbiAgICAvLyBwYXJzZSBHVEV4IGlzb2Zvcm0gbWVkaWFuIFRQTVxuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBkLnZhbHVlID0gdXNlTG9nP01hdGgubG9nMTAoTnVtYmVyKGQuZGF0YSArIGFkanVzdCkpOk51bWJlcihkLmRhdGEpO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5kYXRhKTtcbiAgICAgICAgZC54ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJc29mb3JtRXhwcmVzc2lvblRyYW5zcG9zZShkYXRhLCB1c2VMb2c9dHJ1ZSwgYWRqdXN0PTEpe1xuICAgIGNvbnN0IGF0dHIgPSAnaXNvZm9ybUV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdygncGFyc2VJc29mb3JtRXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGQudmFsdWUgPSB1c2VMb2c/TWF0aC5sb2cxMChOdW1iZXIoZC5kYXRhICsgYWRqdXN0KSk6TnVtYmVyKGQuZGF0YSk7XG4gICAgICAgIGQub3JpZ2luYWxWYWx1ZSA9IE51bWJlcihkLmRhdGEpO1xuICAgICAgICBkLnkgPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC54ID0gZC50aXNzdWVJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0ciBtZWRpYW5HZW5lRXhwcmVzc2lvblxuICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn0gcGVyZm9ybXMgbG9nMTAgdHJhbnNmb3JtYXRpb25cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNZWRpYW5FeHByZXNzaW9uKGRhdGEsIHVzZUxvZz10cnVlKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkdlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ3BhcnNlTWVkaWFuRXhwcmVzc2lvbiBpbnB1dCBlcnJvci4nO1xuICAgIGNvbnN0IGFkanVzdCA9IDE7XG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4gZ2VuZSBleHByZXNzaW9uXG4gICAgLy8gZXJyb3ItY2hlY2tpbmcgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZXM6XG4gICAgaWYgKGRhdGFbYXR0cl0ubGVuZ3RoID09IDApIHRocm93ICdwYXJzZU1lZGlhbkV4cHJlc3Npb24gZmluZHMgbm8gZGF0YS4nO1xuICAgIFsnbWVkaWFuJywgJ3Rpc3N1ZUlkJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgYHBhcnNlTWVkaWFuRXhwcmVzc2lvbiBhdHRyIGVycm9yLiAke2R9IGlzIG5vdCBmb3VuZGA7XG4gICAgfSk7XG4gICAgbGV0IHJlc3VsdHMgPSBkYXRhW2F0dHJdO1xuICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihkLm1lZGlhbikgKyBhZGp1c3QpOk51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudGlzc3VlSWQ7XG4gICAgICAgIGQueSA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgZ2VuZSBleHByZXNzaW9uXG4gKiBAcGFyYW0gZ2VuY29kZUlkIHtTdHJpbmd9XG4gKiBAcGFyYW0gZGF0YSB7SnNvbn0gd2l0aCBhdHRyOiB0aXNzdWVJZCwgZ2VuZVN5bWJvbFxuICogQHJldHVybnMge3tleHA6IHt9LCBnZW5lU3ltYm9sOiBzdHJpbmd9fVxuICovXG4vLyBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uKGdlbmNvZGVJZCwgZGF0YSl7XG4vLyAgICAgbGV0IGxvb2t1cFRhYmxlID0ge1xuLy8gICAgICAgICBleHA6IHt9LCAvLyBpbmRleGVkIGJ5IHRpc3N1ZUlkXG4vLyAgICAgICAgIGdlbmVTeW1ib2w6ICcnXG4vLyAgICAgfTtcbi8vICAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgKCdwYXJzZUdlbmVFeHByZXNzaW9uIGlucHV0IGVycm9yLicpO1xuLy8gICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCk9Pntcbi8vICAgICAgICAgaWYgKGQuZ2VuY29kZUlkID09IGdlbmNvZGVJZCkge1xuLy8gICAgICAgICAgICAgLy8gaWYgdGhlIGdlbmNvZGUgSUQgbWF0Y2hlcyB0aGUgcXVlcnkgZ2VuY29kZUlkLFxuLy8gICAgICAgICAgICAgLy8gYWRkIHRoZSBleHByZXNzaW9uIGRhdGEgdG8gdGhlIGxvb2t1cCB0YWJsZVxuLy8gICAgICAgICAgICAgbG9va3VwVGFibGUuZXhwW2QudGlzc3VlSWRdID0gZC5kYXRhO1xuLy8gICAgICAgICAgICAgaWYgKCcnID09IGxvb2t1cFRhYmxlLmdlbmVTeW1ib2wpIGxvb2t1cFRhYmxlLmdlbmVTeW1ib2wgPSBkLmdlbmVTeW1ib2xcbi8vICAgICAgICAgfVxuLy8gICAgIH0pO1xuLy8gICAgIHJldHVybiBsb29rdXBUYWJsZVxuLy8gfVxuXG4vKipcbiAqIHBhcnNlIHRoZSBleHByZXNzaW9uIGRhdGEgb2YgYSBnZW5lIGZvciBhIGdyb3VwZWQgdmlvbGluIHBsb3RcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZ2VuZSBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gY29sb3JzIHtEaWN0aW9uYXJ5fSB0aGUgdmlvbGluIGNvbG9yIGZvciBnZW5lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbihkYXRhLCB1c2VMb2c9dHJ1ZSwgY29sb3JzPXVuZGVmaW5lZCl7XG4gICAgY29uc3QgYXR0ciA9ICdnZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluIGlucHV0IGVycm9yLic7XG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBkLnZhbHVlcyA9IHVzZUxvZz9kLmRhdGEubWFwKChkZCk9PntyZXR1cm4gTWF0aC5sb2cxMCgrZGQrMSl9KTpkLmRhdGE7XG4gICAgICAgIGQuZ3JvdXAgPSBkLnRpc3N1ZUlkO1xuICAgICAgICBkLmxhYmVsID0gZC5nZW5lU3ltYm9sO1xuICAgICAgICBkLmNvbG9yID0gY29sb3JzPT09dW5kZWZpbmVkPycjOTBjMWMxJzpjb2xvcnNbZC5nZW5jb2RlSWRdO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuIl0sIm5hbWVzIjpbIkVPTCIsIkVPRiIsIlFVT1RFIiwiTkVXTElORSIsIlJFVFVSTiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIm1hcCIsIm5hbWUiLCJpIiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJkZWxpbWl0ZXIiLCJyZUZvcm1hdCIsIlJlZ0V4cCIsIkRFTElNSVRFUiIsImNoYXJDb2RlQXQiLCJwYXJzZVJvd3MiLCJ0ZXh0IiwiZiIsInQiLCJyb3dzIiwiTiIsImxlbmd0aCIsIkkiLCJuIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJjIiwiaiIsInNsaWNlIiwicmVwbGFjZSIsInJvdyIsInB1c2giLCJmb3JtYXRSb3ciLCJmb3JtYXRWYWx1ZSIsInRlc3QiLCJwYXJzZSIsImNvbnZlcnQiLCJvYmplY3QiLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXQiLCJjb2x1bW5TZXQiLCJPYmplY3QiLCJjcmVhdGUiLCJmb3JFYWNoIiwiY29sdW1uIiwiaW5mZXJDb2x1bW5zIiwiY29uY2F0IiwiZm9ybWF0Um93cyIsImNzdlBhcnNlIiwiZHN2IiwidHN2UGFyc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiaW5wdXQiLCJpbml0IiwiZmV0Y2giLCJ0aGVuIiwiZHN2UGFyc2UiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJ0c3YiLCJyZXNwb25zZUpzb24iLCJqc29uIiwieGh0bWwiLCJzdmciLCJ4bGluayIsInhtbCIsInhtbG5zIiwicHJlZml4IiwiaW5kZXhPZiIsIm5hbWVzcGFjZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInNwYWNlIiwibG9jYWwiLCJmdWxsbmFtZSIsIm5hbWVzcGFjZSIsInRoaXMiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9uZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImVtcHR5IiwibWF0Y2hlciIsIm1hdGNoZXMiLCJlbGVtZW50IiwidmVuZG9yTWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsImNhbGwiLCJ1cGRhdGUiLCJBcnJheSIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsImFwcGVuZENoaWxkIiwiY2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJuZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiZGVmYXVsdFZpZXciLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwidHJpbSIsInNwbGl0IiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsInNldEF0dHJpYnV0ZSIsInNwbGljZSIsImNvbnRhaW5zIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImZpbHRlckV2ZW50cyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiZmlsdGVyQ29udGV4dExpc3RlbmVyIiwibGlzdGVuZXIiLCJpbmRleCIsImNvbnRleHRMaXN0ZW5lciIsImV2ZW50IiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJvbiIsIl9fb24iLCJvIiwibSIsInR5cGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FwdHVyZSIsIm9uQWRkIiwidmFsdWUiLCJ3cmFwIiwiZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwicm9vdCIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJmaWx0ZXIiLCJtYXRjaCIsInNpemUiLCJlYWNoIiwieCIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm1lcmdlIiwic2VsZWN0aW9uIiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm0xIiwiTWF0aCIsIm1pbiIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsIm9yZGVyIiwic29ydCIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJjYWxsYmFjayIsImFwcGx5Iiwibm9kZXMiLCJhdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsInYiLCJzZXRBdHRyaWJ1dGVOUyIsInN0eWxlIiwicHJpb3JpdHkiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJzdHlsZVZhbHVlIiwicHJvcGVydHkiLCJjbGFzc2VkIiwiaHRtbCIsImFwcGVuZCIsImNyZWF0b3IiLCJpbnNlcnQiLCJiZWZvcmUiLCJjbG9uZSIsImRlZXAiLCJ0eXBlbmFtZXMiLCJwYXJzZVR5cGVuYW1lcyIsImRpc3BhdGNoIiwiVG9vbGJhciIsIltvYmplY3QgT2JqZWN0XSIsImRvbUlkIiwidG9vbHRpcCIsInZlcnRpY2FsIiwiJCIsInNob3ciLCJidG5DbGFzc2VzIiwiYmFyIiwiYWRkQ2xhc3MiLCJhcHBlbmRUbyIsImJ1dHRvbnMiLCJpZCIsInN2Z0lkIiwib3V0ZmlsZU5hbWUiLCJjbG9uZUlkIiwiaWNvbiIsImNyZWF0ZUJ1dHRvbiIsImRvd25sb2FkU3ZnIiwiaGlkZSIsIiRidXR0b24iLCJmaWxlTmFtZSIsInN2Z09iaiIsIiRzdmdDb3B5Iiwic3R5bGVzIiwiZG9tIiwidXNlZCIsInNoZWV0cyIsInN0eWxlU2hlZXRzIiwiY3NzUnVsZXMiLCJydWxlcyIsInJ1bGUiLCJlbGVtcyIsImZpbmQiLCJzZWxlY3RvclRleHQiLCJlIiwiY3NzVGV4dCIsInMiLCJwYXJzZUNzc1N0eWxlcyIsImdldCIsInByZXBlbmQiLCJzdmdIdG1sIiwic3ZnQmxvYiIsIkJsb2IiLCJzYXZlQXMiLCJnb29nbGVGdW5jIiwiY2hlY2tTaWduZWRJbiIsImdldFVzZXIiLCJzaWduSW5CdXR0b24iLCJyZW5kZXJTaWduSW5CdXR0b24iLCJzaWduT3V0IiwiZ3JhbnRTY29wZXMiLCJnYXBpIiwic2lnbmluMiIsInJlbmRlciIsInNjb3BlIiwid2lkdGgiLCJoZWlnaHQiLCJsb25ndGl0bGUiLCJ0aGVtZSIsIm9uc3VjY2VzcyIsIm9uU3VjY2VzcyIsIm9uZmFpbHVyZSIsIm9uRmFpbHVyZSIsImdvb2dsZVVzZXIiLCJhdXRoMiIsImdldEF1dGhJbnN0YW5jZSIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImlzU2lnbmVkSW4iLCJjdXJyZW50VXNlciIsInNjb3BlcyIsImdyYW50Iiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJmYWlsIiwiX2J1aWxkTWF0cml4IiwiZGF0YXNldElkIiwic2FtcGxlcyIsInRpc3N1ZXMiLCJfX2J1aWxkSGFzaCIsImRhdGFUeXBlIiwicmVkdWNlIiwidGlzc3VlSWQiLCJsYWJlbCIsIlgiLCJ0aXNzdWVOYW1lIiwiY29sIiwiWSIsIl9yZW5kZXJNYXRyaXhUYWJsZSIsInRhYmxlSWQiLCJtYXQiLCJnb29nbGVGdW5jRGljdCIsImRhdGFzZXQiLCJndGV4X3Y3IiwiYmdjb2xvciIsInRoZVRhYmxlIiwidGJvZHkiLCJ0aGVSb3dzIiwieSIsIl9yZW5kZXJDb3VudHMiLCJ0aGVDZWxscyIsInRoZUNvbHVtbiIsInRoZVJvdyIsIl9hZGRDbGlja0V2ZW50cyIsInRvb2xiYXIiLCJjZWxscyIsImFsZXJ0IiwiZG93bmxvYWRDb250ZW50IiwibWFya2VyIiwicGFyc2VJbnQiLCJzZWxlY3RlZFNhbXBsZXMiLCJjcmFtIiwiY3JhbUZpbGUiLCJzYW1wbGVfaWQiLCJmaWxlIiwiZ2V0QXV0aFJlc3BvbnNlIiwiYWNjZXNzX3Rva2VuIiwiYWpheCIsInVybCIsInhockZpZWxkcyIsIndpdGhDcmVkZW50aWFscyIsImJlZm9yZVNlbmQiLCJ4aHIiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiY29udGVudFR5cGUiLCJwcm9qZWN0TmFtZSIsIl9yZXBvcnRCaWxsaW5nUHJvamVjdHMiLCJ3b3Jrc3BhY2VzIiwicHVibGljIiwiX3JlcG9ydFdvcmtzcGFjZXMiLCJhbGxTZWxlY3RlZFNhbXBsZXMiLCJzZWxlY3RlZCIsInRlbXAiLCJzYW1wbGVJZCIsImRvbm9ySWQiLCJ2YWwiLCJ3b3Jrc3BhY2UiLCJhdHRyaWJ1dGVzIiwiYXV0aG9yaXphdGlvbkRvbWFpbiIsImRvbm9ycyIsImRvbm9yRW50aXR5U3RyaW5nIiwiZG9ub3JFbnRpdHlVcmxFbmNvZGUiLCJlbmNvZGVVUkkiLCJzYW1wbGVFbnRpdHkiLCJzYW1wbGVFbnRpdHlTdHJpbmciLCJjcmFtX2ZpbGUiLCJjcmFtX2luZGV4Iiwic2FtcGxlRW50aXR5VXJsRW5jb2RlIiwiZmNVUkwiLCJfc3VibWl0VG9GaXJlQ2xvdWQiLCJfYWRkVG9vbGJhciIsInVybHMiLCJob3N0IiwiZHluZXF0bCIsImV4b25FeHAiLCJnZW5lSWQiLCJnZW5lRXhwIiwiZ2VuZU1vZGVsIiwiZ2VuZU1vZGVsVW5maWx0ZXJlZCIsImlzb2Zvcm0iLCJpc29mb3JtRXhwIiwianVuY3Rpb25FeHAiLCJtZWRHZW5lRXhwIiwic2FtcGxlIiwic25wIiwidGlzc3VlIiwidGlzc3VlU2l0ZXMiLCJ0b3BJblRpc3N1ZUZpbHRlcmVkIiwidG9wSW5UaXNzdWUiLCJ2YXJpYW50SWQiLCJybmFzZXFDcmFtIiwid2dzQ3JhbSIsImdldEd0ZXhVcmxzIiwicHJvbWlzZXMiLCJQcm9taXNlIiwiYWxsIiwiYXJncyIsInBhcnNlVGlzc3VlcyIsInJuYXNlcSIsInRvVXBwZXJDYXNlIiwid2dzIiwidGhlTWF0cml4IiwiX19maWx0ZXIiLCJzZXgiLCJhZ2UiLCJmaWx0ZXJlZE1hdCIsImFnZUJyYWNrZXQiLCJfYWRkRmlsdGVycyIsImNhdGNoIiwiZXJyIl0sIm1hcHBpbmdzIjoiMENBQUEsSUFBSUEsS0FDQUMsS0FDQUMsRUFBUSxHQUNSQyxFQUFVLEdBQ1ZDLEVBQVMsR0FFYixTQUFTQyxFQUFnQkMsR0FDdkIsT0FBTyxJQUFJQyxTQUFTLElBQUssV0FBYUQsRUFBUUUsSUFBSSxTQUFTQyxFQUFNQyxHQUMvRCxPQUFPQyxLQUFLQyxVQUFVSCxHQUFRLE9BQVNDLEVBQUksTUFDMUNHLEtBQUssS0FBTyxLQTBCakIsTUFBZSxTQUFTQyxHQUN0QixJQUFJQyxFQUFXLElBQUlDLE9BQU8sS0FBUUYsRUFBWSxTQUMxQ0csRUFBWUgsRUFBVUksV0FBVyxHQVdyQyxTQUFTQyxFQUFVQyxFQUFNQyxHQUN2QixJQUlJQyxFQUpBQyxLQUNBQyxFQUFJSixFQUFLSyxPQUNUQyxFQUFJLEVBQ0pDLEVBQUksRUFFSkMsRUFBTUosR0FBSyxFQUNYSyxHQUFNLEVBTVYsU0FBU0MsSUFDUCxHQUFJRixFQUFLLE9BQU8zQixFQUNoQixHQUFJNEIsRUFBSyxPQUFPQSxHQUFNLEVBQU83QixFQUc3QixJQUFJVSxFQUFVcUIsRUFBUEMsRUFBSU4sRUFDWCxHQUFJTixFQUFLRixXQUFXYyxLQUFPOUIsRUFBTyxDQUNoQyxLQUFPd0IsSUFBTUYsR0FBS0osRUFBS0YsV0FBV1EsS0FBT3hCLEdBQVNrQixFQUFLRixhQUFhUSxLQUFPeEIsSUFJM0UsT0FIS1EsRUFBSWdCLElBQU1GLEVBQUdJLEdBQU0sR0FDZEcsRUFBSVgsRUFBS0YsV0FBV1EsUUFBVXZCLEVBQVMwQixHQUFNLEVBQzlDRSxJQUFNM0IsSUFBVXlCLEdBQU0sRUFBVVQsRUFBS0YsV0FBV1EsS0FBT3ZCLEtBQVd1QixHQUNwRU4sRUFBS2EsTUFBTUQsRUFBSSxFQUFHdEIsRUFBSSxHQUFHd0IsUUFBUSxNQUFPLEtBSWpELEtBQU9SLEVBQUlGLEdBQUcs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
