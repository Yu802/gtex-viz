var RawDataQuery=function(t){"use strict";var e={},n={},r=34,o=10,i=13;function s(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var a=function(t){var a=new RegExp('["'+t+"\n\r]"),c=t.charCodeAt(0);function l(t,s){var a,l=[],u=t.length,f=0,d=0,p=u<=0,h=!1;function m(){if(p)return n;if(h)return h=!1,e;var s,a,l=f;if(t.charCodeAt(l)===r){for(;f++<u&&t.charCodeAt(f)!==r||t.charCodeAt(++f)===r;);return(s=f)>=u?p=!0:(a=t.charCodeAt(f++))===o?h=!0:a===i&&(h=!0,t.charCodeAt(f)===o&&++f),t.slice(l+1,s-1).replace(/""/g,'"')}for(;f<u;){if((a=t.charCodeAt(s=f++))===o)h=!0;else if(a===i)h=!0,t.charCodeAt(f)===o&&++f;else if(a!==c)continue;return t.slice(l,s)}return p=!0,t.slice(l,u)}for(t.charCodeAt(u-1)===o&&--u,t.charCodeAt(u-1)===i&&--u;(a=m())!==n;){for(var g=[];a!==e&&a!==n;)g.push(a),a=m();s&&null==(g=s(g,d++))||l.push(g)}return l}function u(e){return e.map(f).join(t)}function f(t){return null==t?"":a.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,o=l(t,function(t,o){if(n)return n(t,o-1);r=t,n=e?function(t,e){var n=s(t);return function(r,o){return e(n(r),o,t)}}(t,e):s(t)});return o.columns=r||[],o},parseRows:l,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(f).join(t)].concat(e.map(function(e){return n.map(function(t){return f(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(u).join("\n")}}},c=a(",").parse,l=a("\t").parse;function u(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var f=function(t,e){return fetch(t,e).then(u)};function d(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),f(e,n).then(function(e){return t(e,r)})}}d(c);var p=d(l);function h(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var m=function(t,e){return fetch(t,e).then(h)},g="http://www.w3.org/1999/xhtml",_={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},v=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),_.hasOwnProperty(e)?{space:_[e],local:t}:t};var y=function(t){var e=v(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===g&&e.documentElement.namespaceURI===g?e.createElement(t):e.createElementNS(n,t)}})(e)};function w(){}var x=function(t){return null==t?w:function(){return this.querySelector(t)}};function b(){return[]}var A=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var I=document.documentElement;if(!I.matches){var S=I.webkitMatchesSelector||I.msMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector;A=function(t){return function(){return S.call(this,t)}}}}var E=A,C=function(t){return new Array(t.length)};function T(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var j="$";function k(t,e,n,r,o,i){for(var s,a=0,c=e.length,l=i.length;a<l;++a)(s=e[a])?(s.__data__=i[a],r[a]=s):n[a]=new T(t,i[a]);for(;a<c;++a)(s=e[a])&&(o[a]=s)}function R(t,e,n,r,o,i,s){var a,c,l,u={},f=e.length,d=i.length,p=new Array(f);for(a=0;a<f;++a)(c=e[a])&&(p[a]=l=j+s.call(c,c.__data__,a,e),l in u?o[a]=c:u[l]=c);for(a=0;a<d;++a)(c=u[l=j+s.call(t,i[a],a,i)])?(r[a]=c,c.__data__=i[a],u[l]=null):n[a]=new T(t,i[a]);for(a=0;a<f;++a)(c=e[a])&&u[p[a]]===c&&(o[a]=c)}function N(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var D=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function B(t){return t.trim().split(/^|\s+/)}function M(t){return t.classList||new q(t)}function q(t){this._node=t,this._names=B(t.getAttribute("class")||"")}function G(t,e){for(var n=M(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function P(t,e){for(var n=M(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function F(){this.textContent=""}function O(){this.innerHTML=""}function z(){this.nextSibling&&this.parentNode.appendChild(this)}function H(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function L(){return null}function W(){var t=this.parentNode;t&&t.removeChild(this)}function U(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Y(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var X={};"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(X={mouseenter:"mouseover",mouseleave:"mouseout"}));function V(t,e,n){return t=Q(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Q(t,e,n){return function(r){try{t.call(this,this.__data__,e,n)}finally{}}}function J(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?e.length=o:delete this.__on}}}function K(t,e,n){var r=X.hasOwnProperty(t.type)?V:Q;return function(o,i,s){var a,c=this.__on,l=r(e,i,s);if(c)for(var u=0,f=c.length;u<f;++u)if((a=c[u]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=n),void(a.value=e);this.addEventListener(t.type,l,n),a={type:t.type,name:t.name,value:e,listener:l,capture:n},c?c.push(a):this.__on=[a]}}function Z(t,e,n){var r=D(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}var tt=[null];function et(t,e){this._groups=t,this._parents=e}et.prototype=function(){return new et([[document.documentElement]],tt)}.prototype={constructor:et,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,a=e[o],c=a.length,l=r[o]=new Array(c),u=0;u<c;++u)(i=a[u])&&(s=t.call(i,i.__data__,u,a))&&("__data__"in i&&(s.__data__=i.__data__),l[u]=s);return new et(r,this._parents)},selectAll:function(t){var e;"function"!=typeof t&&(t=null==(e=t)?b:function(){return this.querySelectorAll(e)});for(var n=this._groups,r=n.length,o=[],i=[],s=0;s<r;++s)for(var a,c=n[s],l=c.length,u=0;u<l;++u)(a=c[u])&&(o.push(t.call(a,a.__data__,u,c)),i.push(a));return new et(o,i)},filter:function(t){"function"!=typeof t&&(t=E(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],a=s.length,c=r[o]=[],l=0;l<a;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&c.push(i);return new et(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),u=-1,this.each(function(t){h[++u]=t}),h;var n,r=e?R:k,o=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=i.length,a=new Array(s),c=new Array(s),l=new Array(s),u=0;u<s;++u){var f=o[u],d=i[u],p=d.length,h=t.call(f,f&&f.__data__,u,o),m=h.length,g=c[u]=new Array(m),_=a[u]=new Array(m);r(f,d,g,_,l[u]=new Array(p),h,e);for(var v,y,w=0,x=0;w<m;++w)if(v=g[w]){for(w>=x&&(x=w+1);!(y=_[x])&&++x<m;);v._next=y||null}}return(a=new et(a,o))._enter=c,a._exit=l,a},enter:function(){return new et(this._enter||this._groups.map(C),this._parents)},exit:function(){return new et(this._exit||this._groups.map(C),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),a=0;a<i;++a)for(var c,l=e[a],u=n[a],f=l.length,d=s[a]=new Array(f),p=0;p<f;++p)(c=l[p]||u[p])&&(d[p]=c);for(;a<r;++a)s[a]=e[a];return new et(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&s!==r.nextSibling&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=N);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,a=n[i],c=a.length,l=o[i]=new Array(c),u=0;u<c;++u)(s=a[u])&&(l[u]=s);l.sort(e)}return new et(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,a=i.length;s<a;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=v(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):function(t,e){return t.style.getPropertyValue(e)||D(t).getComputedStyle(t,null).getPropertyValue(e)}(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=B(t+"");if(arguments.length<2){for(var r=M(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?G:P)(this,t)}}:e?function(t){return function(){G(this,t)}}:function(t){return function(){P(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?O:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(z)},lower:function(){return this.each(H)},append:function(t){var e="function"==typeof t?t:y(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:y(t),r=null==e?L:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(W)},clone:function(t){return this.select(t?Y:U)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),s=i.length;if(!(arguments.length<2)){for(a=e?K:J,null==n&&(n=!1),r=0;r<s;++r)this.each(a(i[r],e,n));return this}var a=this.node().__on;if(a)for(var c,l=0,u=a.length;l<u;++l)for(r=0,c=a[l];r<s;++r)if((o=i[r]).type===c.type&&o.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return Z(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return Z(this,t,e)}})(t,e))}};var nt=function(t){return"string"==typeof t?new et([[document.querySelector(t)]],[document.documentElement]):new et([[t]],tt)};class rt{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,o="fa-download"){this.createButton(t,o);nt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);nt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),o=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var o=n[r].cssRules,i=0;i<o.length;i++){var s=o[i];if(void 0!==s.style){var a;try{a=$(t).find(s.selectorText)}catch(t){a=[]}a.length>0&&(e+=s.selectorText+" { "+s.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var c=document.createElement("style");return c.setAttribute("type","text/css"),c.innerHTML="<![CDATA[\n"+e+"\n]]>",c}(r.get());o.prepend(i),$("#"+n).html("").hide();let s=$(`#${n}`).append(o).html(),a=new Blob([s],{type:"image/svg+xml"});saveAs(a,e),$(`#${n}`).html("").hide()}}function ot(t,e,n){const r=function(t){return e.filter(e=>e.dataType==t).reduce((t,e)=>(void 0===t[e.tissueId]&&(t[e.tissueId]=0),t[e.tissueId]=t[e.tissueId]+1,t),{})},o=[{label:"RNA-Seq",id:"RNASEQ",data:r("RNASEQ")},{label:"WES",id:"WES",data:r("WES")},{label:"WGS",id:"WGS",data:r("WGS")}];return{datasetId:t,X:n.map(t=>(t.id=t.tissueId,t.label=t.tissueName,o.forEach(e=>{t[e.id]=e.data[t.id]||void 0}),t)),Y:o,data:e}}function it(t,e){const n={gtex_v7:{label:"GTEX V7",bgcolor:"#2a718b"}},r=nt(`#${t}`);r.select("thead").selectAll("th").data([{label:"",id:""}].concat(e.Y)).enter().append("th").attr("scope","col").attr("class",(t,e)=>""==t.id?"":`y${e-1}`).text(t=>t.label),r.select(".table-label").selectAll("*").remove(),r.select(".table-label").append("th").attr("colspan",e.Y.length+1).text(n[e.datasetId].label).style("background-color",n[e.datasetId].bgcolor),function(t,e){t.selectAll(".data-row").remove();const n=t.selectAll(".data-row").data(e.X).enter().append("tr").classed("data-row",!0);n.append("th").attr("scope","row").attr("class",(t,e)=>`x${e}`).text(t=>t.label),e.Y.forEach((t,e)=>{n.append("td").attr("class",(n,r)=>void 0===n[t.id]?"":`x${r} y${e}`).text(e=>e[t.id]||"")})}(r.select("tbody"),e),function(t){const e=nt(`#${t}`).select("tbody").selectAll("td");nt(`#${t}`).select("thead").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"col"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","col"),e.filter(`.${t}`).classed("selected",!1))}),nt(`#${t}`).select("tbody").selectAll("th").style("cursor","pointer").on("click",function(){const t=nt(this).attr("class");"row"==nt(this).attr("scope")?(nt(this).attr("scope","selected"),e.filter(`.${t}`).classed("selected",!0)):(nt(this).attr("scope","row"),e.filter(`.${t}`).classed("selected",!1))}),e.style("cursor","pointer").on("click",function(){nt(this).classed("selected",!nt(this).classed("selected"))})}(t),function(t,e){const n=nt(`#${t}`).select("tbody").selectAll("td");nt("#matrix-table-toolbar").selectAll("*").remove();const r=new rt("matrix-table-toolbar",void 0,!0);r.createButton("sample-download"),r.createButton("send-to-firecloud","fa-cloud-upload-alt"),nt("#sample-download").style("cursor","pointer").on("click",function(){let t=n.filter(".selected");if(t.empty())alert("You have not selected any samples to download.");else{let n=["Sample ID","Tissue Name","Data Type","CRAM File GCP","CRAM File AWS","CRAM File MD5","CRAM File Size","CRAM Index GCP","CRAM Index AWS"].join("\t")+"\n";t.each(function(t){const r=nt(this).attr("class").split(" ").filter(t=>"selected"!=t),o=e.X[parseInt(r[0].replace("x",""))].id,i=e.Y[parseInt(r[1].replace("y",""))].id;console.log("Download "+o+" : "+i);const s=e.data.filter(t=>t.dataType==i&&t.tissueId==o&&"WES"!=t.dataType).map(t=>{console.log(t);let e=["cram_file","cram_file_aws","cram_file_md5","cram_file_size","cram_index","cram_index_aws"].map(e=>t.cramFile[e]),n=[t.sampleId,t.tissueName,t.dataType].concat(e);return n.join("\t")});console.log(s),n+=s.join("\n")});let r=new Blob([n],{type:"text/plain;charset=utf-8"});saveAs(r,"GTEx.cram.txt",!0)}}),nt("#send-to-firecloud").style("cursor","pointer").on("click",function(){checkSignedIn()||alert("You need to sign in first"),function(t,e="billing-project-list"){let n=t.getAuthResponse(!0).access_token;$.ajax({url:"https://api.firecloud.org/api/profile/billing",type:"GET",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/json; charset=utf-8",success:function(t){$(`#${e}`).empty(),t.forEach(t=>{$("<label>"+`<input type="radio" name="billing-project" value="${t.projectName}"> `+t.projectName+"</label><br/>").appendTo($(`#${e}`))}),console.log(t[0])}})}(getUser()),function(t){let e=t.getAuthResponse(!0).access_token;$.ajax({url:"https://api.firecloud.org/api/workspaces",type:"GET",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+e)},success:function(t){const e=t.filter(t=>!t.public);console.log(e)},error:function(t){console.error(t)}})}(getUser());let t=n.filter(".selected");t.empty()?alert("You have not selected any samples to download."):nt("#fire-cloud-form").style("display","block")}),nt("#submit-to-firecloud-btn").on("click",function(){let t=n.filter(".selected"),r=[];t.each(function(t){const n=nt(this).attr("class").split(" ").filter(t=>"selected"!=t),o=e.X[parseInt(n[0].replace("x",""))].id,i=e.Y[parseInt(n[1].replace("y",""))].id;console.log("Download "+o+" : "+i);const s=e.data.filter(t=>t.dataType==i&&t.tissueId==o&&"WES"!=t.dataType).map(t=>{let e=t.sampleId.split("-");return t.donorId=e[0]+"-"+e[1],t});r=r.concat(s)}),function(t,e){const n=t.getAuthResponse(!0).access_token,r=$('input[name="billing-project"]').val(),o=$('input[name="workspace"]').val();console.log(o),console.log(e),$.ajax({url:"https://api.firecloud.org/api/workspaces",type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/json; charset=utf-8",data:JSON.stringify({namespace:r,name:o,attributes:{},authorizationDomain:[]}),success:function(t){console.log("finished creating workspace...");const i=e.map(t=>{if(!t.hasOwnProperty("donorId"))throw"Sample does not contain attr donorId.";return t.donorId}),s=`entities=entity:participant_id\n${i.join("\n")}\n`,a=encodeURI(s);$.ajax({url:`https://api.firecloud.org/api/workspaces/${r}/${o}/importEntities`,type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/x-www-form-urlencoded",dataType:"text",data:a,success:function(t){console.log("finished importing participant IDs...");let i=[["entity:sample_id","participant_id","sample_type","bam_file","bam_index"].join("\t")];const s=`entities=${(i=i.concat(e.map(t=>[t.sampleId,t.donorId,t.dataType,t.cramFile.cram_file,t.cramFile.cram_index].join("\t")))).join("\n")}\n`,a=encodeURI(s);console.log(s),$.ajax({url:`https://api.firecloud.org/api/workspaces/${r}/${o}/importEntities`,type:"POST",xhrFields:{withCredentials:!1},beforeSend:function(t){t.setRequestHeader("Authorization","Bearer "+n)},contentType:"application/x-www-form-urlencoded",dataType:"text",data:a,success:function(t){console.log("finished importing samples...");const e=`https://portal.firecloud.org/#workspaces/${r}/${o}/data`;$("#fire-cloud-status").html(`Submitted! <br/> Go to your <br/> <a target="_blank" href="${e}">FireCloud workspace</a>`)},error:function(t){console.error(t)}})},error:function(t){console.error(t)}})},error:function(t){console.error(t)}})}(getUser(),r),nt("#fire-cloud-form").style("display","none")}),nt("#cancel-firecloud-btn").on("click",function(){nt("#fire-cloud-form").style("display","none"),alert("Canceled!")})}(t,e)}return t.launch=function(t,e="gtex_v7",n=function(){const t="https://gtexportal.org/rest/v1/";return{dyneqtl:t+"association/dyneqtl",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",geneId:t+"reference/geneId?format=json&release=v7&geneId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",geneModel:t+"reference/collapsedGeneModel?unfiltered=false&release=v7&geneId=",geneModelUnfiltered:t+"reference/collapsedGeneModel?unfiltered=true&release=v7&geneId=",isoform:t+"reference/transcript?release=v7&gencode_id=",isoformExp:t+"expression/isoformExpression?datasetId=gtex_v7&boxplotDetail=median&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&page_size=10000",sample:"tmpSummaryData/gtex.Sample.csv",snp:t+"reference/snp?reference=current&format=json&snpId=",tissue:t+"dataset/tissueInfo",tissueSites:t+"dataset/tissueSiteDetail?format=json",topInTissueFiltered:t+"expression/topExpressedGenes?datasetId=gtex_v7&filterMtGene=true&sort_by=median&sortDirection=desc&page_size=50&tissueId=",topInTissue:t+"expression/topExpressedGenes?datasetId=gtex_v7&sort_by=median&sortDirection=desc&page_size=50&tissueId=",variantId:t+"reference/snp?format=json&reference=current&release=v7&variantId=",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt"}}()){const r=[m(n.tissue),p(n.rnaseqCram),p(n.wgsCram),p(n.sample)];Promise.all(r).then(function(n){let r=function(t){if(!t.hasOwnProperty("tissueInfo"))throw"Fatal Error: parseTissues input error.";const e=t.tissueInfo;return["tissueId","tissueName","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Fatal Error: parseTissue attr not found: "+t}),e}(n[0]);const o={rnaseq:n[1].reduce((t,e)=>(t[e.sample_id]=e,t),{}),wgs:n[2].reduce((t,e)=>(t[e.sample_id]=e,t),{})};let i=n[3].filter(t=>t.datasetId==e).map(t=>{switch(t.dataType){case"WGS":t.cramFile=o.wgs[t.sampleId];break;case"RNASEQ":t.cramFile=o.rnaseq[t.sampleId]}return t});const s=ot(e,i,r);it(t,s),function(t,e,n,r){const o=()=>{const o=nt('input[name="sex"]:checked').node().value,i=nt('input[name="age"]:checked').node().value;if("both"==o&&"all"==i)it(t,ot(e.datasetId,n,r));else{let s=void 0;s=ot(e.datasetId,"both"==o?n.filter(t=>t.ageBracket==i):"all"==i?n.filter(t=>t.sex==o):n.filter(t=>t.sex==o&&t.ageBracket==i),r),it(t,s)}};nt("#filter-menu").selectAll('input[name="sex"]').on("change",o),nt("#filter-menu").selectAll('input[name="age"]').on("change",o)}(t,s,i,r)}).catch(function(t){console.error(t)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
