var BatchGeneExpression=function(t){"use strict";var e=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var n,r,i=(1===(n=e).length&&(r=n,n=function(t,n){return e(r(t),n)}),{left:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var a=r+i>>>1;n(t[a],e)<0?r=a+1:i=a}return r},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var a=r+i>>>1;n(t[a],e)>0?i=a:r=a+1}return r}}).right,a=function(t){return null===t?NaN:+t},o=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a},s=Math.sqrt(50),u=Math.sqrt(10),c=Math.sqrt(2),l=function(t,e,n){var r,i,a,o,s=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(o=f(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),a=new Array(i=Math.ceil(e-t+1));++s<i;)a[s]=(t+s)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),a=new Array(i=Math.ceil(t-e+1));++s<i;)a[s]=(t-s)/o;return r&&a.reverse(),a};function f(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=s?10:a>=u?5:a>=c?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=s?10:a>=u?5:a>=c?2:1)}var h=function(t,e,n){if(null==n&&(n=a),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),s=+n(t[o],o,t);return s+(+n(t[o+1],o+1,t)-s)*(i-o)}},d=function(t,e){var n,r,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=n;++a<i;)null!=(n=t[a])&&n>r&&(r=n)}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=n;++a<i;)null!=(n=e(t[a],a,t))&&n>r&&(r=n);return r},p=Array.prototype.slice,g=function(t){return t},y=1,m=2,v=3,b=4,_=1e-6;function w(t){return"translate("+(t+.5)+",0)"}function x(t){return"translate(0,"+(t+.5)+")"}function M(){return!this.__axis}function T(t,e){var n=[],r=null,i=null,a=6,o=6,s=3,u=t===y||t===b?-1:1,c=t===b||t===m?"x":"y",l=t===y||t===v?w:x;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):g:i,p=Math.max(a,0)+s,w=e.range(),x=+w[0]+.5,T=+w[w.length-1]+.5,A=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),S=f.selection?f.selection():f,C=S.selectAll(".domain").data([null]),k=S.selectAll(".tick").data(h,e).order(),P=k.exit(),N=k.enter().append("g").attr("class","tick"),E=k.select("line"),L=k.select("text");C=C.merge(C.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),k=k.merge(N),E=E.merge(N.append("line").attr("stroke","#000").attr(c+"2",u*a)),L=L.merge(N.append("text").attr("fill","#000").attr(c,u*p).attr("dy",t===y?"0em":t===v?"0.71em":"0.32em")),f!==S&&(C=C.transition(f),k=k.transition(f),E=E.transition(f),L=L.transition(f),P=P.transition(f).attr("opacity",_).attr("transform",function(t){return isFinite(t=A(t))?l(t):this.getAttribute("transform")}),N.attr("opacity",_).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:A(t))})),P.remove(),C.attr("d",t===b||t==m?"M"+u*o+","+x+"H0.5V"+T+"H"+u*o:"M"+x+","+u*o+"V0.5H"+T+"V"+u*o),k.attr("opacity",1).attr("transform",function(t){return l(A(t))}),E.attr(c+"2",u*a),L.attr(c,u*p).text(d),S.filter(M).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===m?"start":t===b?"end":"middle"),S.each(function(){this.__axis=A})}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=p.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:p.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:p.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(a=o=+t,f):a},f.tickSizeInner=function(t){return arguments.length?(a=+t,f):a},f.tickSizeOuter=function(t){return arguments.length?(o=+t,f):o},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}var A={value:function(){}};function S(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new C(r)}function C(t){this._=t}function k(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function P(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=A,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}C.prototype=S.prototype={constructor:C,on:function(t,e){var n,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,s=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<s;)if(n=(t=a[o]).type)i[n]=P(i[n],t.name,e);else if(null==e)for(n in i)i[n]=P(i[n],t.name,null);return this}for(;++o<s;)if((n=(t=a[o]).type)&&(n=k(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new C(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var N="http://www.w3.org/1999/xhtml",E={svg:"http://www.w3.org/2000/svg",xhtml:N,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},L=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),E.hasOwnProperty(e)?{space:E[e],local:t}:t};var D=function(t){var e=L(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===N&&e.documentElement.namespaceURI===N?e.createElement(t):e.createElementNS(n,t)}})(e)};function B(){}var F=function(t){return null==t?B:function(){return this.querySelector(t)}};function U(){return[]}var I=function(t){return null==t?U:function(){return this.querySelectorAll(t)}},R=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var H=document.documentElement;if(!H.matches){var O=H.webkitMatchesSelector||H.msMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector;R=function(t){return function(){return O.call(this,t)}}}}var j=R,Y=function(t){return new Array(t.length)};function V(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}V.prototype={constructor:V,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var G="$";function X(t,e,n,r,i,a){for(var o,s=0,u=e.length,c=a.length;s<c;++s)(o=e[s])?(o.__data__=a[s],r[s]=o):n[s]=new V(t,a[s]);for(;s<u;++s)(o=e[s])&&(i[s]=o)}function q(t,e,n,r,i,a,o){var s,u,c,l={},f=e.length,h=a.length,d=new Array(f);for(s=0;s<f;++s)(u=e[s])&&(d[s]=c=G+o.call(u,u.__data__,s,e),c in l?i[s]=u:l[c]=u);for(s=0;s<h;++s)(u=l[c=G+o.call(t,a[s],s,a)])?(r[s]=u,u.__data__=a[s],l[c]=null):n[s]=new V(t,a[s]);for(s=0;s<f;++s)(u=e[s])&&l[d[s]]===u&&(i[s]=u)}function z(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var W=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Z(t,e){return t.style.getPropertyValue(e)||W(t).getComputedStyle(t,null).getPropertyValue(e)}function J(t){return t.trim().split(/^|\s+/)}function Q(t){return t.classList||new K(t)}function K(t){this._node=t,this._names=J(t.getAttribute("class")||"")}function tt(t,e){for(var n=Q(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function et(t,e){for(var n=Q(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}K.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function nt(){this.textContent=""}function rt(){this.innerHTML=""}function it(){this.nextSibling&&this.parentNode.appendChild(this)}function at(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ot(){return null}function st(){var t=this.parentNode;t&&t.removeChild(this)}function ut(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function ct(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var lt={},ft=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(lt={mouseenter:"mouseover",mouseleave:"mouseout"}));function ht(t,e,n){return t=dt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function dt(t,e,n){return function(r){var i=ft;ft=r;try{t.call(this,this.__data__,e,n)}finally{ft=i}}}function pt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function gt(t,e,n){var r=lt.hasOwnProperty(t.type)?ht:dt;return function(i,a,o){var s,u=this.__on,c=r(e,a,o);if(u)for(var l=0,f=u.length;l<f;++l)if((s=u[l]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=c,s.capture=n),void(s.value=e);this.addEventListener(t.type,c,n),s={type:t.type,name:t.name,value:e,listener:c,capture:n},u?u.push(s):this.__on=[s]}}function yt(t,e,n){var r=W(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var mt=[null];function vt(t,e){this._groups=t,this._parents=e}function bt(){return new vt([[document.documentElement]],mt)}vt.prototype=bt.prototype={constructor:vt,select:function(t){"function"!=typeof t&&(t=F(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o,s=e[i],u=s.length,c=r[i]=new Array(u),l=0;l<u;++l)(a=s[l])&&(o=t.call(a,a.__data__,l,s))&&("__data__"in a&&(o.__data__=a.__data__),c[l]=o);return new vt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=I(t));for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var o,s=e[a],u=s.length,c=0;c<u;++c)(o=s[c])&&(r.push(t.call(o,o.__data__,c,s)),i.push(o));return new vt(r,i)},filter:function(t){"function"!=typeof t&&(t=j(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],s=o.length,u=r[i]=[],c=0;c<s;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&u.push(a);return new vt(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),l=-1,this.each(function(t){p[++l]=t}),p;var n,r=e?q:X,i=this._parents,a=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=a.length,s=new Array(o),u=new Array(o),c=new Array(o),l=0;l<o;++l){var f=i[l],h=a[l],d=h.length,p=t.call(f,f&&f.__data__,l,i),g=p.length,y=u[l]=new Array(g),m=s[l]=new Array(g);r(f,h,y,m,c[l]=new Array(d),p,e);for(var v,b,_=0,w=0;_<g;++_)if(v=y[_]){for(_>=w&&(w=_+1);!(b=m[w])&&++w<g;);v._next=b||null}}return(s=new vt(s,i))._enter=u,s._exit=c,s},enter:function(){return new vt(this._enter||this._groups.map(Y),this._parents)},exit:function(){return new vt(this._exit||this._groups.map(Y),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var u,c=e[s],l=n[s],f=c.length,h=o[s]=new Array(f),d=0;d<f;++d)(u=c[d]||l[d])&&(h[d]=u);for(;s<r;++s)o[s]=e[s];return new vt(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=z);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var o,s=n[a],u=s.length,c=i[a]=new Array(u),l=0;l<u;++l)(o=s[l])&&(c[l]=o);c.sort(e)}return new vt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],o=0,s=a.length;o<s;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,e){var n=L(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):Z(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=J(t+"");if(arguments.length<2){for(var r=Q(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?tt:et)(this,t)}}:e?function(t){return function(){tt(this,t)}}:function(t){return function(){et(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?nt:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?rt:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(it)},lower:function(){return this.each(at)},append:function(t){var e="function"==typeof t?t:D(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:D(t),r=null==e?ot:"function"==typeof e?e:F(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(st)},clone:function(t){return this.select(t?ct:ut)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=a.length;if(!(arguments.length<2)){for(s=e?gt:pt,null==n&&(n=!1),r=0;r<o;++r)this.each(s(a[r],e,n));return this}var s=this.node().__on;if(s)for(var u,c=0,l=s.length;c<l;++c)for(r=0,u=s[c];r<o;++r)if((i=a[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return yt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return yt(this,t,e)}})(t,e))}};var _t=function(t){return"string"==typeof t?new vt([[document.querySelector(t)]],[document.documentElement]):new vt([[t]],mt)},wt=function(t){return"string"==typeof t?new vt([document.querySelectorAll(t)],[document.documentElement]):new vt([null==t?[]:t],mt)};var xt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Mt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Tt(){}var At="\\s*([+-]?\\d+)\\s*",St="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ct="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",kt=/^#([0-9a-f]{3})$/,Pt=/^#([0-9a-f]{6})$/,Nt=new RegExp("^rgb\\("+[At,At,At]+"\\)$"),Et=new RegExp("^rgb\\("+[Ct,Ct,Ct]+"\\)$"),Lt=new RegExp("^rgba\\("+[At,At,At,St]+"\\)$"),$t=new RegExp("^rgba\\("+[Ct,Ct,Ct,St]+"\\)$"),Dt=new RegExp("^hsl\\("+[St,Ct,Ct]+"\\)$"),Bt=new RegExp("^hsla\\("+[St,Ct,Ct,St]+"\\)$"),Ft={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ut(t){var e;return t=(t+"").trim().toLowerCase(),(e=kt.exec(t))?new jt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Pt.exec(t))?It(parseInt(e[1],16)):(e=Nt.exec(t))?new jt(e[1],e[2],e[3],1):(e=Et.exec(t))?new jt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Lt.exec(t))?Rt(e[1],e[2],e[3],e[4]):(e=$t.exec(t))?Rt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Dt.exec(t))?Yt(e[1],e[2]/100,e[3]/100,1):(e=Bt.exec(t))?Yt(e[1],e[2]/100,e[3]/100,e[4]):Ft.hasOwnProperty(t)?It(Ft[t]):"transparent"===t?new jt(NaN,NaN,NaN,0):null}function It(t){return new jt(t>>16&255,t>>8&255,255&t,1)}function Rt(t,e,n,r){return r<=0&&(t=e=n=NaN),new jt(t,e,n,r)}function Ht(t){return t instanceof Tt||(t=Ut(t)),t?new jt((t=t.rgb()).r,t.g,t.b,t.opacity):new jt}function Ot(t,e,n,r){return 1===arguments.length?Ht(t):new jt(t,e,n,null==r?1:r)}function jt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Yt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Vt(t,e,n,r)}function Vt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Gt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}xt(Tt,Ut,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),xt(jt,Ot,Mt(Tt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),xt(Vt,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Vt)return new Vt(t.h,t.s,t.l,t.opacity);if(t instanceof Tt||(t=Ut(t)),!t)return new Vt;if(t instanceof Vt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),o=NaN,s=a-i,u=(a+i)/2;return s?(o=e===a?(n-r)/s+6*(n<r):n===a?(r-e)/s+2:(e-n)/s+4,s/=u<.5?a+i:2-a-i,o*=60):s=u>0&&u<1?0:o,new Vt(o,s,u,t.opacity)}(t):new Vt(t,e,n,null==r?1:r)},Mt(Tt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Vt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Vt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new jt(Gt(t>=240?t-240:t+120,i,r),Gt(t,i,r),Gt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Xt=Math.PI/180,qt=180/Math.PI,zt=.95047,Wt=1,Zt=1.08883,Jt=4/29,Qt=6/29,Kt=3*Qt*Qt,te=Qt*Qt*Qt;function ee(t){if(t instanceof ne)return new ne(t.l,t.a,t.b,t.opacity);if(t instanceof se){var e=t.h*Xt;return new ne(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof jt||(t=Ht(t));var n=oe(t.r),r=oe(t.g),i=oe(t.b),a=re((.4124564*n+.3575761*r+.1804375*i)/zt),o=re((.2126729*n+.7151522*r+.072175*i)/Wt);return new ne(116*o-16,500*(a-o),200*(o-re((.0193339*n+.119192*r+.9503041*i)/Zt)),t.opacity)}function ne(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function re(t){return t>te?Math.pow(t,1/3):t/Kt+Jt}function ie(t){return t>Qt?t*t*t:Kt*(t-Jt)}function ae(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function oe(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function se(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}xt(ne,function(t,e,n,r){return 1===arguments.length?ee(t):new ne(t,e,n,null==r?1:r)},Mt(Tt,{brighter:function(t){return new ne(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ne(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return t=Wt*ie(t),new jt(ae(3.2404542*(e=zt*ie(e))-1.5371385*t-.4985314*(n=Zt*ie(n))),ae(-.969266*e+1.8760108*t+.041556*n),ae(.0556434*e-.2040259*t+1.0572252*n),this.opacity)}})),xt(se,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof se)return new se(t.h,t.c,t.l,t.opacity);t instanceof ne||(t=ee(t));var e=Math.atan2(t.b,t.a)*qt;return new se(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new se(t,e,n,null==r?1:r)},Mt(Tt,{brighter:function(t){return new se(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new se(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return ee(this).rgb()}}));var ue=-.14861,ce=1.78277,le=-.29227,fe=-.90649,he=1.97294,de=he*fe,pe=he*ce,ge=ce*le-fe*ue;function ye(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof me)return new me(t.h,t.s,t.l,t.opacity);t instanceof jt||(t=Ht(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(ge*r+de*e-pe*n)/(ge+de-pe),a=r-i,o=(he*(n-i)-le*a)/fe,s=Math.sqrt(o*o+a*a)/(he*i*(1-i)),u=s?Math.atan2(o,a)*qt-120:NaN;return new me(u<0?u+360:u,s,i,t.opacity)}(t):new me(t,e,n,null==r?1:r)}function me(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}xt(me,ye,Mt(Tt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new me(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new me(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Xt,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new jt(255*(e+n*(ue*r+ce*i)),255*(e+n*(le*r+fe*i)),255*(e+n*(he*r)),this.opacity)}}));var ve=function(t){return function(){return t}};function be(t,e){return function(n){return t+n*e}}function _e(t){return 1==(t=+t)?we:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):ve(isNaN(e)?n:e)}}function we(t,e){var n=e-t;return n?be(t,n):ve(isNaN(t)?e:t)}var xe=function t(e){var n=_e(e);function r(t,e){var r=n((t=Ot(t)).r,(e=Ot(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),o=we(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1),Me=function(t,e){return e-=t=+t,function(n){return t+e*n}},Te=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ae=new RegExp(Te.source,"g");var Se,Ce,ke,Pe,Ne=function(t,e){var n,r,i,a=Te.lastIndex=Ae.lastIndex=0,o=-1,s=[],u=[];for(t+="",e+="";(n=Te.exec(t))&&(r=Ae.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),s[o]?s[o]+=i:s[++o]=i),(n=n[0])===(r=r[0])?s[o]?s[o]+=r:s[++o]=r:(s[++o]=null,u.push({i:o,x:Me(n,r)})),a=Ae.lastIndex;return a<e.length&&(i=e.slice(a),s[o]?s[o]+=i:s[++o]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})},Ee=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?ve(e):("number"===r?Me:"string"===r?(n=Ut(e))?(e=n,xe):Ne:e instanceof Ut?xe:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(n=0;n<i;++n)a[n]=Ee(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<i;++n)o[n]=a[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ee(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}:Me)(t,e)},Le=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},$e=180/Math.PI,De={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Be=function(t,e,n,r,i,a){var o,s,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*$e,skewX:Math.atan(u)*$e,scaleX:o,scaleY:s}};function Fe(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var s=[],u=[];return a=t(a),o=t(o),function(t,r,i,a,o,s){if(t!==i||r!==a){var u=o.push("translate(",null,e,null,n);s.push({i:u-4,x:Me(t,i)},{i:u-2,x:Me(r,a)})}else(i||a)&&o.push("translate("+i+e+a+n)}(a.translateX,a.translateY,o.translateX,o.translateY,s,u),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Me(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,o.rotate,s,u),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Me(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,o.skewX,s,u),function(t,e,n,r,a,o){if(t!==n||e!==r){var s=a.push(i(a)+"scale(",null,",",null,")");o.push({i:s-4,x:Me(t,n)},{i:s-2,x:Me(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,s,u),a=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var Ue=Fe(function(t){return"none"===t?De:(Se||(Se=document.createElement("DIV"),Ce=document.documentElement,ke=document.defaultView),Se.style.transform=t,t=ke.getComputedStyle(Ce.appendChild(Se),null).getPropertyValue("transform"),Ce.removeChild(Se),t=t.slice(7,-1).split(","),Be(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Ie=Fe(function(t){return null==t?De:(Pe||(Pe=document.createElementNS("http://www.w3.org/2000/svg","g")),Pe.setAttribute("transform",t),(t=Pe.transform.baseVal.consolidate())?(t=t.matrix,Be(t.a,t.b,t.c,t.d,t.e,t.f)):De)},", ",")",")");function Re(t){return function e(n){function r(e,r){var i=t((e=ye(e)).h,(r=ye(r)).h),a=we(e.s,r.s),o=we(e.l,r.l),s=we(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=o(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,r.gamma=e,r}(1)}Re(function(t,e){var n=e-t;return n?be(t,n>180||n<-180?n-360*Math.round(n/360):n):ve(isNaN(t)?e:t)});var He,Oe,je=Re(we),Ye=0,Ve=0,Ge=0,Xe=1e3,qe=0,ze=0,We=0,Ze="object"==typeof performance&&performance.now?performance:Date,Je="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Qe(){return ze||(Je(Ke),ze=Ze.now()+We)}function Ke(){ze=0}function tn(){this._call=this._time=this._next=null}function en(t,e,n){var r=new tn;return r.restart(t,e,n),r}function nn(){ze=(qe=Ze.now())+We,Ye=Ve=0;try{!function(){Qe(),++Ye;for(var t,e=He;e;)(t=ze-e._time)>=0&&e._call.call(null,t),e=e._next;--Ye}()}finally{Ye=0,function(){var t,e,n=He,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:He=e);Oe=t,an(r)}(),ze=0}}function rn(){var t=Ze.now(),e=t-qe;e>Xe&&(We-=e,qe=t)}function an(t){Ye||(Ve&&(Ve=clearTimeout(Ve)),t-ze>24?(t<1/0&&(Ve=setTimeout(nn,t-Ze.now()-We)),Ge&&(Ge=clearInterval(Ge))):(Ge||(qe=Ze.now(),Ge=setInterval(rn,Xe)),Ye=1,Je(nn)))}tn.prototype=en.prototype={constructor:tn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Qe():+n)+(null==e?0:+e),this._next||Oe===this||(Oe?Oe._next=this:He=this,Oe=this),this._call=t,this._time=n,an()},stop:function(){this._call&&(this._call=null,this._time=1/0,an())}};var on=function(t,e,n){var r=new tn;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},sn=S("start","end","interrupt"),un=[],cn=0,ln=1,fn=2,hn=3,dn=4,pn=5,gn=6,yn=function(t,e,n,r,i,a){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function a(u){var c,l,f,h;if(n.state!==ln)return s();for(c in i)if((h=i[c]).name===n.name){if(h.state===hn)return on(a);h.state===dn?(h.state=gn,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<e&&(h.state=gn,h.timer.stop(),delete i[c])}if(on(function(){n.state===hn&&(n.state=dn,n.timer.restart(o,n.delay,n.time),o(u))}),n.state=fn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===fn){for(n.state=hn,r=new Array(f=n.tween.length),c=0,l=-1;c<f;++c)(h=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=h);r.length=l+1}}function o(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=pn,1),a=-1,o=r.length;++a<o;)r[a].call(null,i);n.state===pn&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=gn,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=en(function(t){n.state=ln,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:i,on:sn,tween:un,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:cn})};function mn(t,e){var n=bn(t,e);if(n.state>cn)throw new Error("too late; already scheduled");return n}function vn(t,e){var n=bn(t,e);if(n.state>fn)throw new Error("too late; already started");return n}function bn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function _n(t,e,n){var r=t._id;return t.each(function(){var t=vn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return bn(t,r).value[e]}}var wn=function(t,e){var n;return("number"==typeof e?Me:e instanceof Ut?xe:(n=Ut(e))?(e=n,xe):Ne)(t,e)};var xn=bt.prototype.constructor;var Mn=0;function Tn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function An(){return++Mn}var Sn=bt.prototype;Tn.prototype=function(t){return bt().transition(t)}.prototype={constructor:Tn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=F(t));for(var r=this._groups,i=r.length,a=new Array(i),o=0;o<i;++o)for(var s,u,c=r[o],l=c.length,f=a[o]=new Array(l),h=0;h<l;++h)(s=c[h])&&(u=t.call(s,s.__data__,h,c))&&("__data__"in s&&(u.__data__=s.__data__),f[h]=u,yn(f[h],e,n,h,f,bn(s,n)));return new Tn(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=I(t));for(var r=this._groups,i=r.length,a=[],o=[],s=0;s<i;++s)for(var u,c=r[s],l=c.length,f=0;f<l;++f)if(u=c[f]){for(var h,d=t.call(u,u.__data__,f,c),p=bn(u,n),g=0,y=d.length;g<y;++g)(h=d[g])&&yn(h,e,n,g,d,p);a.push(d),o.push(u)}return new Tn(a,o,e,n)},filter:function(t){"function"!=typeof t&&(t=j(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],s=o.length,u=r[i]=[],c=0;c<s;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&u.push(a);return new Tn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var u,c=e[s],l=n[s],f=c.length,h=o[s]=new Array(f),d=0;d<f;++d)(u=c[d]||l[d])&&(h[d]=u);for(;s<r;++s)o[s]=e[s];return new Tn(o,this._parents,this._name,this._id)},selection:function(){return new xn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=An(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],u=s.length,c=0;c<u;++c)if(o=s[c]){var l=bn(o,e);yn(o,t,n,c,s,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Tn(r,this._parents,t,n)},call:Sn.call,nodes:Sn.nodes,node:Sn.node,size:Sn.size,empty:Sn.empty,each:Sn.each,on:function(t,e){var n=this._id;return arguments.length<2?bn(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?mn:vn;return function(){var o=a(this,t),s=o.on;s!==r&&(i=(r=s).copy()).on(e,n),o.on=i}}(n,t,e))},attr:function(t,e){var n=L(t),r="transform"===n?Ie:wn;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,i,a;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===s?null:o===r&&s===i?a:a=e(r=o,i=s);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,i,a;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttribute(t))===s?null:o===r&&s===i?a:a=e(r=o,i=s);this.removeAttribute(t)}})(n,r,_n(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,i;return function(){var a=this.getAttributeNS(t.space,t.local);return a===n?null:a===r?i:i=e(r=a,n)}}:function(t,e,n){var r,i;return function(){var a=this.getAttribute(t);return a===n?null:a===r?i:i=e(r=a,n)}})(n,r,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=L(t);return this.tween(n,(r.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Ue:wn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var a=Z(this,t),o=(this.style.removeProperty(t),Z(this,t));return a===o?null:a===n&&o===r?i:i=e(n=a,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,i,a;return function(){var o=Z(this,t),s=n(this);return null==s&&(this.style.removeProperty(t),s=Z(this,t)),o===s?null:o===r&&s===i?a:a=e(r=o,i=s)}}(t,r,_n(this,"style."+t,e)):function(t,e,n){var r,i;return function(){var a=Z(this,t);return a===n?null:a===r?i:i=e(r=a,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,i=e.apply(r,arguments);return i&&function(e){r.style.setProperty(t,i(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(_n(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=bn(this.node(),n).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var i=vn(this,t),a=i.tween;if(a!==n)for(var o=0,s=(r=n=a).length;o<s;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}i.tween=r}}:function(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=vn(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var s={name:e,value:n},u=0,c=i.length;u<c;++u)if(i[u].name===e){i[u]=s;break}u===c&&i.push(s)}a.tween=i}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){mn(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){mn(this,t).delay=e}})(e,t)):bn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){vn(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){vn(this,t).duration=e}})(e,t)):bn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){vn(this,t).ease=e}}(e,t)):bn(this.node(),e).ease}};var Cn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function kn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Cn.time=Qe(),Cn;return n}bt.prototype.interrupt=function(t){return this.each(function(){!function(t,e){var n,r,i,a=t.__transition,o=!0;if(a){for(i in e=null==e?null:e+"",a)(n=a[i]).name===e?(r=n.state>fn&&n.state<pn,n.state=gn,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete a[i]):o=!1;o&&delete t.__transition}}(this,t)})},bt.prototype.transition=function(t){var e,n;t instanceof Tn?(e=t._id,t=t._name):(e=An(),(n=Cn).time=Qe(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],u=s.length,c=0;c<u;++c)(o=s[c])&&yn(o,t,e,c,s,n||kn(o,e));return new Tn(r,this._parents,t,e)};["e","w"].map(Pn),["n","s"].map(Pn),["n","e","s","w","nw","ne","se","sw"].map(Pn);function Pn(t){return{type:t}}function Nn(){}function En(t,e){var n=new Nn;if(t instanceof Nn)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==e)for(;++i<a;)n.set(i,t[i]);else for(;++i<a;)n.set(e(r=t[i],i,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}Nn.prototype=En.prototype={constructor:Nn,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Ln=function(){var t,e,n,r=[],i=[];function a(n,i,o,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var u,c,l,f=-1,h=n.length,d=r[i++],p=En(),g=o();++f<h;)(l=p.get(u=d(c=n[f])+""))?l.push(c):p.set(u,[c]);return p.each(function(t,e){s(g,e,a(t,i,o,s))}),g}return n={object:function(t){return a(t,0,$n,Dn)},map:function(t){return a(t,0,Bn,Fn)},entries:function(t){return function t(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=e&&a>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,a)})})),null!=s?o.sort(function(t,e){return s(t.key,e.key)}):o}(a(t,0,Bn,Fn),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function $n(){return{}}function Dn(t,e,n){t[e]=n}function Bn(){return En()}function Fn(t,e,n){t.set(e,n)}var Un=function(t){var e=[];for(var n in t)e.push(n);return e},In=function(t){var e=[];for(var n in t)e.push(t[n]);return e},Rn={},Hn={},On=34,jn=10,Yn=13;function Vn(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var Gn=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],a=t.length,o=0,s=0,u=a<=0,c=!1;function l(){if(u)return Hn;if(c)return c=!1,Rn;var e,r,i=o;if(t.charCodeAt(i)===On){for(;o++<a&&t.charCodeAt(o)!==On||t.charCodeAt(++o)===On;);return(e=o)>=a?u=!0:(r=t.charCodeAt(o++))===jn?c=!0:r===Yn&&(c=!0,t.charCodeAt(o)===jn&&++o),t.slice(i+1,e-1).replace(/""/g,'"')}for(;o<a;){if((r=t.charCodeAt(e=o++))===jn)c=!0;else if(r===Yn)c=!0,t.charCodeAt(o)===jn&&++o;else if(r!==n)continue;return t.slice(i,e)}return u=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===jn&&--a,t.charCodeAt(a-1)===Yn&&--a;(r=l())!==Hn;){for(var f=[];r!==Rn&&r!==Hn;)f.push(r),r=l();e&&null==(f=e(f,s++))||i.push(f)}return i}function i(e){return e.map(a).join(t)}function a(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,a=r(t,function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=Vn(t);return function(r,i){return e(n(r),i,t)}}(t,e):Vn(t)});return a.columns=i||[],a},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(a).join(t)].concat(e.map(function(e){return n.map(function(t){return a(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},Xn=Gn(",").parse,qn=Gn("\t").parse;function zn(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,a,o,s,u,c,l,f,h,d=t._root,p={data:r},g=t._x0,y=t._y0,m=t._x1,v=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=e>=(a=(g+m)/2))?g=a:m=a,(l=n>=(o=(y+v)/2))?y=o:v=o,i=d,!(d=d[f=l<<1|c]))return i[f]=p,t;if(s=+t._x.call(null,d.data),u=+t._y.call(null,d.data),e===s&&n===u)return p.next=d,i?i[f]=p:t._root=p,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=e>=(a=(g+m)/2))?g=a:m=a,(l=n>=(o=(y+v)/2))?y=o:v=o}while((f=l<<1|c)==(h=(u>=o)<<1|s>=a));return i[h]=d,i[f]=p,t}var Wn=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function Zn(t){return t[0]}function Jn(t){return t[1]}function Qn(t,e,n,r,i,a){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function Kn(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var tr=function(t,e,n){var r=new Qn(null==e?Zn:e,null==n?Jn:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}.prototype=Qn.prototype;tr.copy=function(){var t,e,n=new Qn(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Kn(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=Kn(e));return n},tr.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return zn(this.cover(e,n),e,n,t)},tr.addAll=function(t){var e,n,r,i,a=t.length,o=new Array(a),s=new Array(a),u=1/0,c=1/0,l=-1/0,f=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(o[n]=r,s[n]=i,r<u&&(u=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));for(l<u&&(u=this._x0,l=this._x1),f<c&&(c=this._y0,f=this._y1),this.cover(u,c).cover(l,f),n=0;n<a;++n)zn(this,o[n],s[n],t[n]);return this},tr.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,a=(r=Math.floor(e))+1;else{if(!(n>t||t>i||r>e||e>a))return this;var o,s,u=i-n,c=this._root;switch(s=(e<(r+a)/2)<<1|t<(n+i)/2){case 0:do{(o=new Array(4))[s]=c,c=o}while(a=r+(u*=2),t>(i=n+u)||e>a);break;case 1:do{(o=new Array(4))[s]=c,c=o}while(a=r+(u*=2),(n=i-u)>t||e>a);break;case 2:do{(o=new Array(4))[s]=c,c=o}while(r=a-(u*=2),t>(i=n+u)||r>e);break;case 3:do{(o=new Array(4))[s]=c,c=o}while(r=a-(u*=2),(n=i-u)>t||r>e)}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=i,this._y1=a,this},tr.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},tr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},tr.find=function(t,e,n){var r,i,a,o,s,u,c,l=this._x0,f=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new Wn(g,l,f,h,d)),null==n?n=1/0:(l=t-n,f=e-n,h=t+n,d=e+n,n*=n);u=p.pop();)if(!(!(g=u.node)||(i=u.x0)>h||(a=u.y0)>d||(o=u.x1)<l||(s=u.y1)<f))if(g.length){var y=(i+o)/2,m=(a+s)/2;p.push(new Wn(g[3],y,m,o,s),new Wn(g[2],i,m,y,s),new Wn(g[1],y,a,o,m),new Wn(g[0],i,a,y,m)),(c=(e>=m)<<1|t>=y)&&(u=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=u)}else{var v=t-+this._x.call(null,g.data),b=e-+this._y.call(null,g.data),_=v*v+b*b;if(_<n){var w=Math.sqrt(n=_);l=t-w,f=e-w,h=t+w,d=e+w,r=g.data}}return r},tr.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var e,n,r,i,a,o,s,u,c,l,f,h,d=this._root,p=this._x0,g=this._y0,y=this._x1,m=this._y1;if(!d)return this;if(d.length)for(;;){if((c=a>=(s=(p+y)/2))?p=s:y=s,(l=o>=(u=(g+m)/2))?g=u:m=u,e=d,!(d=d[f=l<<1|c]))return this;if(!d.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[h]=d:this._root=d),this):(this._root=i,this)},tr.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},tr.root=function(){return this._root},tr.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},tr.visit=function(t){var e,n,r,i,a,o,s=[],u=this._root;for(u&&s.push(new Wn(u,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(u=e.node,r=e.x0,i=e.y0,a=e.x1,o=e.y1)&&u.length){var c=(r+a)/2,l=(i+o)/2;(n=u[3])&&s.push(new Wn(n,c,l,a,o)),(n=u[2])&&s.push(new Wn(n,r,l,c,o)),(n=u[1])&&s.push(new Wn(n,c,i,a,l)),(n=u[0])&&s.push(new Wn(n,r,i,c,l))}return this},tr.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Wn(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var a,o=e.x0,s=e.y0,u=e.x1,c=e.y1,l=(o+u)/2,f=(s+c)/2;(a=i[0])&&n.push(new Wn(a,o,s,l,f)),(a=i[1])&&n.push(new Wn(a,l,s,u,f)),(a=i[2])&&n.push(new Wn(a,o,f,l,c)),(a=i[3])&&n.push(new Wn(a,l,f,u,c))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},tr.x=function(t){return arguments.length?(this._x=t,this):this._x},tr.y=function(t){return arguments.length?(this._y=t,this):this._y};var er,nr=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},rr=function(t){return(t=nr(Math.abs(t)))?t[1]:NaN},ir=function(t,e){var n=nr(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},ar={"":function(t,e){t=t.toPrecision(e);t:for(var n,r=t.length,i=1,a=-1;i<r;++i)switch(t[i]){case".":a=n=i;break;case"0":0===a&&(a=i),n=i;break;case"e":break t;default:a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(n+1):t},"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return ir(100*t,e)},r:ir,s:function(t,e){var n=nr(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(er=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+nr(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},or=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function sr(t){return new ur(t)}function ur(t){if(!(e=or.exec(t)))throw new Error("invalid format: "+t);var e,n=e[1]||" ",r=e[2]||">",i=e[3]||"-",a=e[4]||"",o=!!e[5],s=e[6]&&+e[6],u=!!e[7],c=e[8]&&+e[8].slice(1),l=e[9]||"";"n"===l?(u=!0,l="g"):ar[l]||(l=""),(o||"0"===n&&"="===r)&&(o=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=i,this.symbol=a,this.zero=o,this.width=s,this.comma=u,this.precision=c,this.type=l}sr.prototype=ur.prototype,ur.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var cr,lr,fr,hr=function(t){return t},dr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];cr=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var i=t.length,a=[],o=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),a.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[o=(o+1)%e.length];return a.reverse().join(n)}):hr,i=t.currency,a=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):hr,s=t.percent||"%";function u(t){var e=(t=sr(t)).fill,n=t.align,u=t.sign,c=t.symbol,l=t.zero,f=t.width,h=t.comma,d=t.precision,p=t.type,g="$"===c?i[0]:"#"===c&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",y="$"===c?i[1]:/[%p]/.test(p)?s:"",m=ar[p],v=!p||/[defgprs%]/.test(p);function b(t){var i,s,c,b=g,_=y;if("c"===p)_=m(t)+_,t="";else{var w=(t=+t)<0;if(t=m(Math.abs(t),d),w&&0==+t&&(w=!1),b=(w?"("===u?u:"-":"-"===u||"("===u?"":u)+b,_=("s"===p?dr[8+er/3]:"")+_+(w&&"("===u?")":""),v)for(i=-1,s=t.length;++i<s;)if(48>(c=t.charCodeAt(i))||c>57){_=(46===c?a+t.slice(i+1):t.slice(i))+_,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var x=b.length+t.length+_.length,M=x<f?new Array(f-x+1).join(e):"";switch(h&&l&&(t=r(M+t,M.length?f-_.length:1/0),M=""),n){case"<":t=b+t+_+M;break;case"=":t=b+M+t+_;break;case"^":t=M.slice(0,x=M.length>>1)+b+t+_+M.slice(x);break;default:t=M+b+t+_}return o(t)}return d=null==d?p?6:12:/[gprs]/.test(p)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),b.toString=function(){return t+""},b}return{format:u,formatPrefix:function(t,e){var n=u(((t=sr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(rr(e)/3))),i=Math.pow(10,-r),a=dr[8+r/3];return function(t){return n(i*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),lr=cr.format,fr=cr.formatPrefix;var pr=function(){return new gr};function gr(){this.reset()}gr.prototype={constructor:gr,reset:function(){this.s=this.t=0},add:function(t){mr(yr,t,this.t),mr(this,yr.s,this.s),this.s?this.t+=yr.t:this.s=yr.t},valueOf:function(){return this.s}};var yr=new gr;function mr(t,e,n){var r=t.s=e+n,i=r-e,a=r-i;t.t=e-a+(n-i)}var vr=Math.PI,br=vr/2,_r=Math.atan,wr=Math.atan2,xr=Math.cos,Mr=Math.sin,Tr=Math.sqrt;function Ar(t){return t>1?br:t<-1?-br:Math.asin(t)}pr(),pr(),pr(),pr(),pr(),pr(),pr(),pr();function Sr(t){return function(e,n){var r=xr(e),i=xr(n),a=t(r*i);return[a*i*Mr(e),a*Mr(n)]}}function Cr(t){return function(e,n){var r=Tr(e*e+n*n),i=t(r),a=Mr(i),o=xr(i);return[wr(e*a,r*o),Ar(r&&n*a/r)]}}function kr(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}Sr(function(t){return Tr(2/(1+t))}).invert=Cr(function(t){return 2*Ar(t/2)}),Sr(function(t){return(t=(e=t)>1?0:e<-1?vr:Math.acos(e))&&t/Mr(t);var e}).invert=Cr(function(t){return t}),Cr(_r),Cr(Ar),Cr(function(t){return 2*_r(t)});function Pr(t,e){var n,r,i,a,o,s=new $r(t),u=+t.value&&(s.value=t.value),c=[s];for(null==e&&(e=Nr);n=c.pop();)if(u&&(n.value=+n.data.value),(i=e(n.data))&&(o=i.length))for(n.children=new Array(o),a=o-1;a>=0;--a)c.push(r=n.children[a]=new $r(i[a])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(Lr)}function Nr(t){return t.children}function Er(t){t.data=t.data.data}function Lr(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function $r(t){this.data=t,this.depth=this.height=0,this.parent=null}$r.prototype=Pr.prototype={constructor:$r,count:function(){return this.eachAfter(kr)},each:function(t){var e,n,r,i,a=this,o=[a];do{for(e=o.reverse(),o=[];a=e.pop();)if(t(a),n=a.children)for(r=0,i=n.length;r<i;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,i=this,a=[i],o=[];i=a.pop();)if(o.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)a.push(e[n]);for(;i=o.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return Pr(this).eachBefore(Er)}};var Dr=[].slice,Br={};function Fr(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function Ur(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var e=t._ended+t._active,n=t._tasks[e],r=n.length-1,i=n[r];n[r]=Ir(t,e),--t._waiting,++t._active,n=i.apply(null,n),t._tasks[e]&&(t._tasks[e]=n||Br)}}(t)}catch(e){if(t._tasks[t._ended+t._active-1])Rr(t,e);else if(!t._data)throw e}}function Ir(t,e){return function(n,r){t._tasks[e]&&(--t._active,++t._ended,t._tasks[e]=null,null==t._error&&(null!=n?Rr(t,n):(t._data[e]=r,t._waiting?Ur(t):Hr(t))))}}function Rr(t,e){var n,r=t._tasks.length;for(t._error=e,t._data=void 0,t._waiting=NaN;--r>=0;)if((n=t._tasks[r])&&(t._tasks[r]=null,n.abort))try{n.abort()}catch(e){}t._active=NaN,Hr(t)}function Hr(t){if(!t._active&&t._call){var e=t._data;t._data=void 0,t._call(t._error,e)}}function Or(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new Fr(t)}Fr.prototype=Or.prototype={constructor:Fr,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var e=Dr.call(arguments,1);return e.push(t),++this._waiting,this._tasks.push(e),Ur(this),this},abort:function(){return null==this._error&&Rr(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(e,n){t.apply(null,[e].concat(n))},Hr(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Hr(this),this}};var jr=function(t,e){var n,r,i,a,o=S("beforesend","progress","load","error"),s=En(),u=new XMLHttpRequest,c=null,l=null,f=0;function h(t){var e,r=u.status;if(!r&&function(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}(u)||r>=200&&r<300||304===r){if(i)try{e=i.call(n,u)}catch(t){return void o.call("error",n,t)}else e=u;o.call("load",n,e)}else o.call("error",n,t)}if("undefined"==typeof XDomainRequest||"withCredentials"in u||!/^(http(s)?:)?\/\//.test(t)||(u=new XDomainRequest),"onload"in u?u.onload=u.onerror=u.ontimeout=h:u.onreadystatechange=function(t){u.readyState>3&&h(t)},u.onprogress=function(t){o.call("progress",n,t)},n={header:function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?s.get(t):(null==e?s.remove(t):s.set(t,e+""),n)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",n):r},responseType:function(t){return arguments.length?(a=t,n):a},timeout:function(t){return arguments.length?(f=+t,n):f},user:function(t){return arguments.length<1?c:(c=null==t?null:t+"",n)},password:function(t){return arguments.length<1?l:(l=null==t?null:t+"",n)},response:function(t){return i=t,n},get:function(t,e){return n.send("GET",t,e)},post:function(t,e){return n.send("POST",t,e)},send:function(e,i,h){return u.open(e,t,!0,c,l),null==r||s.has("accept")||s.set("accept",r+",*/*"),u.setRequestHeader&&s.each(function(t,e){u.setRequestHeader(e,t)}),null!=r&&u.overrideMimeType&&u.overrideMimeType(r),null!=a&&(u.responseType=a),f>0&&(u.timeout=f),null==h&&"function"==typeof i&&(h=i,i=null),null!=h&&1===h.length&&(h=function(t){return function(e,n){t(null==e?n:null)}}(h)),null!=h&&n.on("error",h).on("load",function(t){h(null,t)}),o.call("beforesend",n,u),u.send(null==i?null:i),n},abort:function(){return u.abort(),n},on:function(){var t=o.on.apply(o,arguments);return t===o?n:t}},null!=e){if("function"!=typeof e)throw new Error("invalid callback: "+e);return n.get(e)}return n};var Yr=function(t,e){return function(n,r){var i=jr(n).mimeType(t).response(e);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}};Yr("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)});var Vr=Yr("application/json",function(t){return JSON.parse(t.responseText)});Yr("text/plain",function(t){return t.responseText}),Yr("application/xml",function(t){var e=t.responseXML;if(!e)throw new Error("parse error");return e});var Gr=function(t,e){return function(n,r,i){arguments.length<3&&(i=r,r=null);var a=jr(n).mimeType(t);return a.row=function(t){return arguments.length?a.response(function(t,e){return function(n){return t(n.responseText,e)}}(e,r=t)):r},a.row(r),i?a.get(i):a}};Gr("text/csv",Xn);var Xr=Gr("text/tab-separated-values",qn),qr=Array.prototype,zr=qr.map,Wr=qr.slice,Zr={name:"implicit"};function Jr(){var t,e,n=function t(e){var n=En(),r=[],i=Zr;function a(t){var a=t+"",o=n.get(a);if(!o){if(i!==Zr)return i;n.set(a,o=r.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:Wr.call(e),a.domain=function(t){if(!arguments.length)return r.slice();r=[],n=En();for(var e,i,o=-1,s=t.length;++o<s;)n.has(i=(e=t[o])+"")||n.set(i,r.push(e));return a},a.range=function(t){return arguments.length?(e=Wr.call(t),a):e.slice()},a.unknown=function(t){return arguments.length?(i=t,a):i},a.copy=function(){return t().domain(r).range(e).unknown(i)},a}().unknown(void 0),r=n.domain,i=n.range,a=[0,1],s=!1,u=0,c=0,l=.5;function f(){var n=r().length,f=a[1]<a[0],h=a[f-0],d=a[1-f];t=(d-h)/Math.max(1,n-u+2*c),s&&(t=Math.floor(t)),h+=(d-h-t*(n-u))*l,e=t*(1-u),s&&(h=Math.round(h),e=Math.round(e));var p=o(n).map(function(e){return h+t*e});return i(f?p.reverse():p)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),f()):r()},n.range=function(t){return arguments.length?(a=[+t[0],+t[1]],f()):a.slice()},n.rangeRound=function(t){return a=[+t[0],+t[1]],s=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(s=!!t,f()):s},n.padding=function(t){return arguments.length?(u=c=Math.max(0,Math.min(1,t)),f()):u},n.paddingInner=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),f()):u},n.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),f()):c},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),f()):l},n.copy=function(){return Jr().domain(r()).range(a).round(s).paddingInner(u).paddingOuter(c).align(l)},f()}var Qr=function(t){return function(){return t}},Kr=function(t){return+t},ti=[0,1];function ei(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Qr(e)}function ni(t,e,n,r){var i=t[0],a=t[1],o=e[0],s=e[1];return a<i?(i=n(a,i),o=r(s,o)):(i=n(i,a),o=r(o,s)),function(t){return o(i(t))}}function ri(t,e,n,r){var a=Math.min(t.length,e.length)-1,o=new Array(a),s=new Array(a),u=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++u<a;)o[u]=n(t[u],t[u+1]),s[u]=r(e[u],e[u+1]);return function(e){var n=i(t,e,1,a)-1;return s[n](o[n](e))}}var ii=function(t,e,n){var r,i=t[0],a=t[t.length-1],o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=s?i*=10:a>=u?i*=5:a>=c&&(i*=2),e<t?-i:i}(i,a,null==e?10:e);switch((n=sr(null==n?",f":n)).type){case"s":var l=Math.max(Math.abs(i),Math.abs(a));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(rr(e)/3)))-rr(Math.abs(t)))}(o,l))||(n.precision=r),fr(n,l);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,rr(e)-rr(t))+1}(o,Math.max(Math.abs(i),Math.abs(a))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-rr(Math.abs(t)))}(o))||(n.precision=r-2*("%"===n.type))}return lr(n)};function ai(){var t=function(t,e){var n,r,i,a=ti,o=ti,s=Ee,u=!1;function c(){return n=Math.min(a.length,o.length)>2?ri:ni,r=i=null,l}function l(e){return(r||(r=n(a,o,u?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,s)))(+e)}return l.invert=function(t){return(i||(i=n(o,a,ei,u?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},l.domain=function(t){return arguments.length?(a=zr.call(t,Kr),c()):a.slice()},l.range=function(t){return arguments.length?(o=Wr.call(t),c()):o.slice()},l.rangeRound=function(t){return o=Wr.call(t),s=Le,c()},l.clamp=function(t){return arguments.length?(u=!!t,c()):u},l.interpolate=function(t){return arguments.length?(s=t,c()):s},c()}(ei,Me);return t.copy=function(){return e=t,ai().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp());var e},function(t){var e=t.domain;return t.ticks=function(t){var n=e();return l(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return ii(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),a=0,o=i.length-1,s=i[a],u=i[o];return u<s&&(r=s,s=u,u=r,r=a,a=o,o=r),(r=f(s,u,n))>0?r=f(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=f(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[a]=Math.floor(s/r)*r,i[o]=Math.ceil(u/r)*r,e(i)):r<0&&(i[a]=Math.ceil(s*r)/r,i[o]=Math.floor(u*r)/r,e(i)),t},t}(t)}var oi=new Date,si=new Date;function ui(t,e,n,r){function i(e){return t(e=new Date(+e)),e}return i.floor=i,i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var o,s=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return s;do{s.push(o=new Date(+n)),e(n,a),t(n)}while(o<n&&n<r);return s},i.filter=function(n){return ui(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return oi.setTime(+e),si.setTime(+r),t(oi),t(si),Math.floor(n(oi,si))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var ci=ui(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});ci.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ui(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):ci:null};var li=6e4,fi=6048e5,hi=(ui(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),ui(function(t){t.setTime(Math.floor(t/li)*li)},function(t,e){t.setTime(+t+e*li)},function(t,e){return(e-t)/li},function(t){return t.getMinutes()}),ui(function(t){var e=t.getTimezoneOffset()*li%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),ui(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*li)/864e5},function(t){return t.getDate()-1}));function di(t){return ui(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*li)/fi})}var pi=di(0),gi=di(1),yi=(di(2),di(3),di(4)),mi=(di(5),di(6),ui(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),ui(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));mi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ui(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};ui(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*li)},function(t,e){return(e-t)/li},function(t){return t.getUTCMinutes()}),ui(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var vi=ui(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function bi(t){return ui(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/fi})}var _i=bi(0),wi=bi(1),xi=(bi(2),bi(3),bi(4)),Mi=(bi(5),bi(6),ui(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),ui(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Ti(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ai(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Si(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Mi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ui(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Ci,ki,Pi,Ni={"-":"",_:" ",0:"0"},Ei=/^\s*\d+/,Li=/^%/,$i=/[\\^$*+?|[\]().{}]/g;function Di(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function Bi(t){return t.replace($i,"\\$&")}function Fi(t){return new RegExp("^(?:"+t.map(Bi).join("|")+")","i")}function Ui(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Ii(t,e,n){var r=Ei.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ri(t,e,n){var r=Ei.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Hi(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Oi(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function ji(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Yi(t,e,n){var r=Ei.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Vi(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Gi(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Xi(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function qi(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function zi(t,e,n){var r=Ei.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Wi(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Zi(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ji(t,e,n){var r=Ei.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Qi(t,e,n){var r=Ei.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Ki(t,e,n){var r=Ei.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ta(t,e,n){var r=Li.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function ea(t,e,n){var r=Ei.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function na(t,e,n){var r=Ei.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function ra(t,e){return Di(t.getDate(),e,2)}function ia(t,e){return Di(t.getHours(),e,2)}function aa(t,e){return Di(t.getHours()%12||12,e,2)}function oa(t,e){return Di(1+hi.count(mi(t),t),e,3)}function sa(t,e){return Di(t.getMilliseconds(),e,3)}function ua(t,e){return sa(t,e)+"000"}function ca(t,e){return Di(t.getMonth()+1,e,2)}function la(t,e){return Di(t.getMinutes(),e,2)}function fa(t,e){return Di(t.getSeconds(),e,2)}function ha(t){var e=t.getDay();return 0===e?7:e}function da(t,e){return Di(pi.count(mi(t),t),e,2)}function pa(t,e){var n=t.getDay();return t=n>=4||0===n?yi(t):yi.ceil(t),Di(yi.count(mi(t),t)+(4===mi(t).getDay()),e,2)}function ga(t){return t.getDay()}function ya(t,e){return Di(gi.count(mi(t),t),e,2)}function ma(t,e){return Di(t.getFullYear()%100,e,2)}function va(t,e){return Di(t.getFullYear()%1e4,e,4)}function ba(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Di(e/60|0,"0",2)+Di(e%60,"0",2)}function _a(t,e){return Di(t.getUTCDate(),e,2)}function wa(t,e){return Di(t.getUTCHours(),e,2)}function xa(t,e){return Di(t.getUTCHours()%12||12,e,2)}function Ma(t,e){return Di(1+vi.count(Mi(t),t),e,3)}function Ta(t,e){return Di(t.getUTCMilliseconds(),e,3)}function Aa(t,e){return Ta(t,e)+"000"}function Sa(t,e){return Di(t.getUTCMonth()+1,e,2)}function Ca(t,e){return Di(t.getUTCMinutes(),e,2)}function ka(t,e){return Di(t.getUTCSeconds(),e,2)}function Pa(t){var e=t.getUTCDay();return 0===e?7:e}function Na(t,e){return Di(_i.count(Mi(t),t),e,2)}function Ea(t,e){var n=t.getUTCDay();return t=n>=4||0===n?xi(t):xi.ceil(t),Di(xi.count(Mi(t),t)+(4===Mi(t).getUTCDay()),e,2)}function La(t){return t.getUTCDay()}function $a(t,e){return Di(wi.count(Mi(t),t),e,2)}function Da(t,e){return Di(t.getUTCFullYear()%100,e,2)}function Ba(t,e){return Di(t.getUTCFullYear()%1e4,e,4)}function Fa(){return"+0000"}function Ua(){return"%"}function Ia(t){return+t}function Ra(t){return Math.floor(+t/1e3)}!function(t){Ci=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,o=t.shortDays,s=t.months,u=t.shortMonths,c=Fi(i),l=Ui(i),f=Fi(a),h=Ui(a),d=Fi(o),p=Ui(o),g=Fi(s),y=Ui(s),m=Fi(u),v=Ui(u),b={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:ra,e:ra,f:ua,H:ia,I:aa,j:oa,L:sa,m:ca,M:la,p:function(t){return i[+(t.getHours()>=12)]},Q:Ia,s:Ra,S:fa,u:ha,U:da,V:pa,w:ga,W:ya,x:null,X:null,y:ma,Y:va,Z:ba,"%":Ua},_={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:_a,e:_a,f:Aa,H:wa,I:xa,j:Ma,L:Ta,m:Sa,M:Ca,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Ia,s:Ra,S:ka,u:Pa,U:Na,V:Ea,w:La,W:$a,x:null,X:null,y:Da,Y:Ba,Z:Fa,"%":Ua},w={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return T(t,e,n,r)},d:qi,e:qi,f:Ki,H:Wi,I:Wi,j:zi,L:Qi,m:Xi,M:Zi,p:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:ea,s:na,S:Ji,u:Ri,U:Hi,V:Oi,w:Ii,W:ji,x:function(t,e,r){return T(t,n,e,r)},X:function(t,e,n){return T(t,r,e,n)},y:Vi,Y:Yi,Z:Gi,"%":ta};function x(t,e){return function(n){var r,i,a,o=[],s=-1,u=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++s<c;)37===t.charCodeAt(s)&&(o.push(t.slice(u,s)),null!=(i=Ni[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),o.push(r),u=s+1);return o.push(t.slice(u,s)),o.join("")}}function M(t,e){return function(n){var r,i,a=Si(1900);if(T(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(r=(i=(r=Ai(Si(a.y))).getUTCDay())>4||0===i?wi.ceil(r):wi(r),r=vi.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(r=(i=(r=e(Si(a.y))).getDay())>4||0===i?gi.ceil(r):gi(r),r=hi.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?Ai(Si(a.y)).getUTCDay():e(Si(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Ai(a)):e(a)}}function T(t,e,n,r){for(var i,a,o=0,s=e.length,u=n.length;o<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(o++))){if(i=e.charAt(o++),!(a=w[i in Ni?e.charAt(o++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return b.x=x(n,b),b.X=x(r,b),b.c=x(e,b),_.x=x(n,_),_.X=x(r,_),_.c=x(e,_),{format:function(t){var e=x(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Ti);return e.toString=function(){return t},e},utcFormat:function(t){var e=x(t+="",_);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,Ai);return e.toString=function(){return t},e}}}(t),ki=Ci.utcFormat,Pi=Ci.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||ki("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Pi("%Y-%m-%dT%H:%M:%S.%LZ");var Ha=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})};Ha("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ha("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),Ha("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),Ha("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),je(ye(300,.5,0),ye(-240,.5,1));je(ye(-100,.75,.35),ye(80,1.5,.8)),je(ye(260,.75,.35),ye(80,1.5,.8)),ye();function Oa(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}Oa(Ha("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));Oa(Ha("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Oa(Ha("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Oa(Ha("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function ja(t){return t<0?-1:1}function Ya(t,e,n){var r=t._x1-t._x0,i=e-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),o=(n-t._y1)/(i||r<0&&-0),s=(a*i+o*r)/(r+i);return(ja(a)+ja(o))*Math.min(Math.abs(a),Math.abs(o),.5*Math.abs(s))||0}function Va(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Ga(t,e,n){var r=t._x0,i=t._y0,a=t._x1,o=t._y1,s=(a-r)/3;t._context.bezierCurveTo(r+s,i+s*e,a-s,o-s*n,a,o)}function Xa(t){this._context=t}function qa(t){this._context=t}function za(){const t="https://dev.gtexportal.org/rest/v1/";return{geneId:t+"reference/geneId?format=json&geneId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",tissue:t+"dataset/color",topInTissue:t+"expression/topExpressedGenes?datasetId=gtex_v7&filterMtGene=true&sort_by=median&sortDirection=desc&page_size=50&tissueId=",medExpById:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&page_size=10000&gencodeId=",exonExp:t+"expression/exonExpression?datasetId=gtex_v7&gencodeId=",junctionExp:t+"expression/junctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",isoformExp:t+"expression/isoformExpression?datasetId=gtex_v7&boxplotDetail=median&gencodeId=",geneModel:t+"reference/collapsedGeneModel?unfiltered=false&release=v7&gencode_id=",geneModelUnfiltered:t+"reference/collapsedGeneModel?unfiltered=true&release=v7&gencode_id=",isoform:t+"reference/transcript?release=v7&gencode_id=",liverGeneExp:"data/top50.genes.liver.genomic.median.tpm.json",cerebellumGeneExp:"data/top.gtex.cerebellum.genes.median.tpm.tsv",mayoGeneExp:"data/gtex+mayo.top.cerebellum_ad.genes.median.tpm.tsv"}}function Wa(t){if(!t.hasOwnProperty("color"))throw"parseTissues input error.";return t.color}function Za(t,e,n=!1,r="grey",i){let a=function(t,e){let n={exp:{},geneSymbol:""};return e.geneExpression.forEach(e=>{e.gencodeId==t&&(n.exp[e.tissueId]=e.data,""==n.geneSymbol&&(n.geneSymbol=e.geneSymbol))}),n}(t,e),o=[],s=[];return i.forEach(t=>{void 0===a.exp[t.id]?(o=o.concat([t.name]),s=s.concat([-1])):(o=o.concat(Array(a.exp[t.id].length).fill(t.name)),s=s.concat(a.exp[t.id]))}),{x:o,y:s,name:a.geneSymbol,type:"box",line:{width:1},marker:{color:r}}}function Ja(t=!0){const e=["crimson","palevioletred","deeppink","mediumvioletred","orchid","fuchsia","darkmagenta","darkviolet","indigo","blueviolet","blue","mediumslateblue","darkslateblue","mediumblue","midnightblue","royalblue","dodgerblue","deppskyblue","darkturquoise","steelblue","darkcyan","darkslategray","seagreen","limegreen","darkgreen","mediumspringgreen","darkseagreen","green","olivedrab","darkkhaki","darkolivegreen","yellowgreen","olive","goldenrod","darkgoldenrod","orange","tan","peru","sandybrown","chocolate","saddlebrown","sienna","coral","orangered","tomato","rosybrown","firebrick","indianred","red","brown","gray","black"];return t?function(t){let e=t.length;for(;e>0;){let n=Math.floor(Math.random()*e),r=t[--e];t[e]=t[n],t[n]=r}return t}(e):e}function Qa(t,n,r=0){let a=Math.round(d(t));return function t(){var n=[],r=[],a=[];function o(){var t=0,e=Math.max(1,r.length);for(a=new Array(e-1);++t<e;)a[t-1]=h(n,t/e);return s}function s(t){if(!isNaN(t=+t))return r[i(a,t)]}return s.invertExtent=function(t){var e=r.indexOf(t);return e<0?[NaN,NaN]:[e>0?a[e-1]:n[0],e<a.length?a[e]:n[n.length-1]]},s.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var r,i=0,a=t.length;i<a;++i)null==(r=t[i])||isNaN(r=+r)||n.push(r);return n.sort(e),o()},s.range=function(t){return arguments.length?(r=Wr.call(t),o()):r.slice()},s.quantiles=function(){return a.slice()},s.copy=function(){return t().domain(n).range(r)},s}().domain([r,a]).range(n)}function Ka(t,e,n){console.log(t);var r=t.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var i=n[r].cssRules,a=0;a<i.length;a++){var o=i[a];if(void 0!==o.style){var s;try{s=$(t).find(o.selectorText)}catch(t){s=[]}s.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+e+"\n]]>",u}(t.get());r.prepend(i),$("#"+n).html("").hide();var a=$("#"+n).append(r).html(),o=new Blob([a],{type:"image/svg+xml"});saveAs(o,e),$("#"+n).html("").hide()}Xa.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ga(this,this._t0,Va(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Ga(this,Va(this,n=Ya(this,t,e)),n);break;default:Ga(this,this._t0,n=Ya(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new qa(t)}.prototype=Object.create(Xa.prototype)).point=function(t,e){Xa.prototype.point.call(this,e,t)},qa.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,a){this._context.bezierCurveTo(e,t,r,n,a,i)}};class to{constructor(t="chart"){this.id=t,this.margin={left:10,top:10,right:250,bottom:170},this.cell={w:void 0,h:12},this.topTreePanel={x:100,y:0,h:60,w:window.innerWidth-550,id:"topTree"};this.leftTreePanel={x:this.margin.left,y:this.margin.top+this.topTreePanel.h,h:void 0,w:85,id:"leftTree"},this.heatmapPanel={x:100,y:this.margin.top+this.topTreePanel.h,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:100,y:this.margin.top+this.topTreePanel.h+150,h:50,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}setId(t="chart"){this.id=t}setMargin(t={left:10,top:10,right:250,bottom:170}){this.margin=t}setMainPanelWidth(t){this.heatmapPanel.w=t}noTopTreePanel(t=window.innerWidth-350){this.topTreePanel={x:0,y:0,h:20,w:0},this.leftTreePanel.y=2*this.margin.top,this.heatmapPanel.y=2*this.margin.top,this.heatmapPanel.w=t,this.legendPanel.y=0}get(){return{id:this.id,margin:this.margin,cell:this.cell,w:window.innerWidth,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}const eo=!1;class no{constructor(t,n="h"){this.newick=t,this.orientation=n,this.postorder=[],this.root=Pr(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),i=0;i<r.length;i++){var a=r[i];switch(a){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var s=r[i-1];")"==s||"("==s||","==s?n.name=a:":"==s&&(n.length=parseFloat(a))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,n)=>t.value-n.value||e(t.data.length,n.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n,r=!0){this.width=e,this.height=n,this._setXScale(),this._setYScale(),r&&("h"==this.orientation?this._drawHTree(t):this._drawVTree(t))}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var a;t.selectAll(".arm").data(i).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","axis").attr("transform","translate(0,"+this.height+")").call((a=this.xScale,T(v,a)).tickValues([Math.floor(this._getMaxBranchLength()/2),Math.floor(this._getMaxBranchLength())]))}_sortNodesByLevel(){return this.root.descendants().sort((t,n)=>t.height-n.height||e(t.data.length,n.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const i=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var a;t.selectAll(".arm").data(i).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(i).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","axis").call((a=this.yScale,T(b,a)).tickValues([Math.floor(this._getMaxBranchLength()/2),Math.floor(this._getMaxBranchLength())]))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=ai().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),eo&&console.log(this.postorder),this.xScale=Jr().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),eo&&console.log(this.postorder),this.yScale=Jr().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=ai().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}class ro{constructor(t,e=!0,n="gnbu",r=2){this.data=t,this.useLog=e,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=r,this.colors=function(t){const e={ylgnbu:["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58","#040e29"],orrd:["#edf8b1","#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000","#4c0000"],gnbu:["#f0f0f0","#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081","#052851"],rdpu:["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"],reds:["#FFE4DE","#FFC6BA","#F7866E","#d9745e","#D25C43","#b6442c","#9b3a25","#712a1c","#562015","#2d110b"],purples:["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"],reds2:["#f0f0f0","#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"]};if(!e.hasOwnProperty(t))throw"Color theme not found: "+t;return e[t]}(n)}redraw(t,e,n,r={w:1e3,h:600},i=30){this._setXList(r.w,e),this._setYList(r.h,n),this.draw(t,r,i)}drawColorLegend(t,e={x:0,y:0}){!function(t,e,n,r,i,a={h:5,w:50}){const o=[0].concat(n.quantiles());e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",a.h).attr("transform",`translate(${r.x}, ${r.y})`);const s=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(o).enter().append("g").classed("legend",!0);s.append("rect").attr("x",(t,e)=>a.w*e).attr("y",5).attr("width",a.w).attr("height",a.h).style("fill",t=>n(t)),s.append("text").attr("class","color-legend").text(t=>i?(Math.pow(10,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>a.w*e).attr("y",0)}(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog)}draw(t,e={w:1e3,h:600},n=30){void 0===this.xList&&this._setXList(e.w),void 0===this.yList&&this._setYList(e.h),void 0===this.colorScale&&(this.colorScale=Qa(this.data.map(t=>t.value),this.colors));const r=t.selectAll(".exp-map-xlabel").data(this.xList);r.attr("transform",t=>{return`translate(${this.xScale(t)+this.xScale.bandwidth()/2+1}, ${this.yScale.range()[1]+17}) rotate(${n})`}),r.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("cursor","pointer").style("text-anchor","start").attr("transform",t=>{return`translate(${this.xScale(t)+this.xScale.bandwidth()/2+1}, ${this.yScale.range()[1]+17}) rotate(${n})`}).merge(r).text(t=>t),r.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).style("cursor","pointer").style("text-anchor","start").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){_t(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){_t(this).classed("normal",!0).classed("highlighted",!1)});const i=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);i.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`),i.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class",t=>"exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill",t=>this.colors[0]).on("mouseover",function(t){const e=_t(this),n=e.attr("row"),r=e.attr("col");wt(".exp-map-xlabel").filter(`.${n}`).classed("highlighted",!0),wt(".exp-map-ylabel").filter(`.${r}`).classed("highlighted",!0),e.classed("highlighted",!0),console.log(`Row: ${t.x}, Column: ${t.y}, Value: ${t.originalValue}`)}).on("mouseout",function(e){t.selectAll("*").classed("highlighted",!1)}).merge(i).transition().duration(2e3).style("fill",t=>this.colorScale(t.value)),i.exit().remove()}_setXList(t,e){this.xList=void 0!==e?e:replace().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=Jr().domain(this.xList).range([0,t]).padding(.05)}_setYList(t,e){this.yList=void 0!==e?e:Ln().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=Jr().domain(this.yList).range([0,t]).padding(.05)}}class io{constructor(t,e=!0,n=30,r=-40,i=500){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),_t("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){_t("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=ft.pageX,e=ft.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;_t("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){_t("#"+this.id).html(t)}}class ao{constructor(t,e,n,r="gnbu",i=2,a=new to,o=!0){this.config=a.get(),this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:new no(this.data.columnTree,"v"),rowTree:new no(this.data.rowTree,"h"),heatmap:new ro(this.data.heatmap,o,r,i)},this.visualComponents={tooltip:new io("tooltip",!0),svg:void 0}}render(t,e=!0,n=!0,r="bottom"){this._updateConfig(this.objects.columnTree,this.objects.rowTree,r);let i=(a=t,o=this.config.w,s=this.config.h,u=this.config.margin,_t("#"+a).append("svg").attr("width",o).attr("height",s).append("g").attr("transform",`translate(${u.left}, ${u.top})`));var a,o,s,u;this._renderTree(i,this.objects.columnTree,this.config.panels.top,e),this._renderTree(i,this.objects.rowTree,this.config.panels.left,n);const c=e?this.objects.columnTree.xScale.domain():this.objects.columnTree.xScale.domain().sort(),l=n?this.objects.rowTree.yScale.domain():this.objects.rowTree.yScale.domain().sort();this._renderHeatmap(i,this.objects.heatmap,c,l),this.visualComponents.svg=i}_renderHeatmap(t,e,n,r){const i=this.config.panels.main,a=t.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);e.redraw(a,n,r,{w:i.w,h:i.h}),e.drawColorLegend(t,this.config.panels.legend)}_renderTree(t,e,n,r=!0){const i=this.visualComponents.tooltip,a=t.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(a,n.w,n.h,r);a.selectAll(".node").on("mouseover",function(t){_t(this).attr("r",6).attr("fill","red");const e=t.leaves().map(t=>t.data.name);i.show(`${e.join("<br>")}`)}).on("mouseout",function(t){_t(this).attr("r",2).attr("fill","#333");t.leaves().map(t=>t.data.name);i.hide()})}_updateConfig(t,e,n){const r=e.leaves.length;this.config.panels.left.h=this.config.cell.h*r,"bottom"==n&&(this.config.panels.legend.y+=this.config.panels.left.h),this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h}}function oo(t,e,n,r,i=za()){if(_t(`#${e}`).empty())throw`Fatal Error: DOM element with id ${e} does not exist;`;let a="";Or().defer(Vr,i.tissue).defer(Vr,i.geneId+t.join(",")).await(function(o,s,u){const c=Wa(s);if(!u.hasOwnProperty("geneId"))throw"gene web service parsing error";let l=u.geneId;if(0==l.length)a="Fatal Error: the gene list is empty.<br/>";else{if(l.length<t.length){const e=l.map(t=>t.gencodeId).concat(l.map(t=>t.geneSymbolUpper)),n=t.filter(t=>!e.includes(t));a=`Warning: Not all genes are found: ${n.join(",")}<br/>`}l.length>50&&(a+="Warning: Too many genes. Input list truncated to the first 50.<br/>",l=l.slice(0,50));const r=l.map(t=>t.gencodeId);Vr(i.medExpById+r.join(","),function(t){const r=t.clusters.tissue,i=t.clusters.gene,a=function(t,e=!0){const n="medianGeneExpression";if(!t.hasOwnProperty(n))throw"parseMedianExpression input error.";return t.medianGeneExpression.forEach(function(t){t.value=e?Math.log10(Number(t.median)+1):Number(t.median),t.x=t.tissueId,t.y=t.gencodeId,t.originalValue=Number(t.median),t.id=t.gencodeId}),t[n]}(t),o=new ao(r,i,a);o.render(e),so(o,c,n)})}$(`#${r}`).html(a),$("#spinner").hide()})}function so(t,e,n){const r=t.data.heatmap,i=e.reduce((t,e)=>(t[e.tissue_id]=e,t),{}),a=r.reduce((t,e,n)=>(t[e.gencodeId]=e,t),{});_t("#"+t.config.panels.main.id).selectAll(".exp-map-xlabel").text(t=>void 0===i[t]?t:i[t].tissue_name),_t("#"+t.config.panels.main.id).selectAll(".exp-map-ylabel").text(t=>void 0===a[t]?t:a[t].geneSymbol),uo(t,i),function(t,e,n){const r=t.visualComponents.svg,i=t.visualComponents.tooltip,a=Ja();Un(n).forEach((t,e)=>{n[t].color=a[e]});r.selectAll(".exp-map-cell").on("mouseover",function(t){const a=_t(this);a.classed("highlighted",!0);const o=a.attr("row"),s=a.attr("col");r.selectAll(".exp-map-xlabel").filter(`.${o}`).classed("highlighted",!0),wt(".exp-map-ylabel").filter(`.${s}`).classed("highlighted",!0);let u=void 0===e[t.x]?t.x:e[t.x].tissue_name,c=void 0===n[t.y]?t.y:n[t.y].geneSymbol;i.show(`Tissue: ${u} <br> Gene: ${c} <br> Median (${t.unit?t.unit:"TPM"}): ${parseFloat(t.originalValue.toExponential()).toPrecision(4)}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),i.hide()}),r.selectAll(".exp-map-ylabel").on("click",function(r){let i=_t(this),a="";ft.altKey?(i.classed("clicked")||i.classed("clicked",!0),a="add"):i.classed("clicked")?(i.classed("clicked",!1),a="delete"):(wt(".clicked").classed("clicked",!1),i.classed("clicked",!0),t.data.external={},a="add");console.log(n[r].color),co(a,r,n,e,t)})}(t,i,a),function(t,e,n){$(`#${t}`).show();let r=$("<div/>").addClass("btn-group btn-group-sm").appendTo(`#${t}`);const i="sortTissues";let a=$("<a/>").attr("id",i).attr("href",`#${i}`).addClass("btn btn-default").appendTo(r);$("<i/>").addClass("fa fa-sort-alpha-down").appendTo(a),_t(`#${i}`).on("click",function(){_t("#"+e.config.panels.top.id).style("display","None");let t=e.objects.heatmap.xList.sort();lo(t,e,n)}).on("mouseover",function(){e.visualComponents.tooltip.show("Sort Tissues Alphabetically")}).on("mouseout",function(){e.visualComponents.tooltip.hide()});const o="clusterTissues";let s=$("<a/>").attr("id",o).attr("href",`#${o}`).addClass("btn btn-default").appendTo(r);$("<i/>").addClass("fa fa-code-branch").appendTo(s),_t(`#${o}`).on("click",function(){_t("#"+e.config.panels.top.id).style("display","Block");let t=e.objects.columnTree.xScale.domain();lo(t,e,n)}).on("mouseover",function(){e.visualComponents.tooltip.show("Cluster Tissues")}).on("mouseout",function(){e.visualComponents.tooltip.hide()});const u="expMapDownload";let c=$("<a/>").attr("id",u).attr("href",`#${u}`).addClass("btn btn-default").appendTo(r);$("<i/>").addClass("fa fa-save").appendTo(c),_t(`#${u}`).on("click",function(){let t=$($($(`${"#"+e.config.id} svg`))[0]);Ka(t,"heatmap.svg","downloadTempDiv")}).on("mouseover",function(){e.visualComponents.tooltip.show("Download Heatmap")}).on("mouseout",function(){e.visualComponents.tooltip.hide()})}(n,t,i)}function uo(t,e){const n=t.config.panels.main.id,r=t.objects.heatmap;let i=_t("#"+n).selectAll(".exp-map-xcolor").data(r.xList);i.attr("fill",t=>void 0===e[t]?"#000000":`#${e[t].tissue_color_hex}`),i.enter().append("circle").attr("cx",t=>r.xScale(t)+r.xScale.bandwidth()/2).attr("cy",r.yScale.range()[1]+10).attr("r",3).attr("fill",t=>void 0===e[t]?"#000000":`#${e[t].tissue_color_hex}`).attr("opacity",.75).attr("class","exp-map-xcolor"),i.exit().remove()}function co(t,e,n,r,i){let a=i.objects.heatmap.xScale.domain().map((t,e)=>{return{id:t,name:r[t].tissue_name}}),o=i.data.external;const s={useLog:false,id:"boxplot"},u={title:"",font:{family:"Libre Franklin",size:11},yaxis:{title:"TPM",zeroline:false},boxmode:"group",margin:{t:0},showlegend:true};switch(t){case"delete":{delete o[e];Plotly.newPlot(s.id,In(o),u);if(Un(o).length==0){_t("#"+s.id).style("opacity",0)}else{_t("#"+s.id).style("opacity",1)}break}case"add":{const t=za().geneExp+e;Vr(t,function(t,r){let i=n[e].color||"black";o[e]=Za(e,r,s.useLog,i,a);Plotly.newPlot(s.id,In(o),u);_t("#"+s.id).style("opacity",1)});break}default:{console.warn("action not understood.");break}}}function lo(t,e,n){const r=_t("#"+e.config.panels.main.id),i=e.config.panels.main;e.objects.heatmap.redraw(r,t,e.objects.heatmap.yList,i),wt(".exp-map-xlabel").text(t=>void 0===n[t]?t:n[t].tissue_name),uo(e,n),_t("#boxplot").style("opacity",0),wt(".exp-map-ylabel").classed("clicked",!1),e.data.external={}}return t.renderMayo=function(t,e,n=za()){const r="(((((((((((((((((((Vagina:0.64,Cervix_Ectocervix:0.64):0.25,Cervix_Endocervix:0.89):0.36,Bladder:1.25):0.24,(((Breast_Mammary_Tissue:0.73,Adipose_Visceral_Omentum:0.73):0.07,Adipose_Subcutaneous:0.80):0.39,Lung:1.19):0.30):0.01,Thyroid:1.50):0.15,((Uterus:0.88,Fallopian_Tube:0.88):0.34,Prostate:1.22):0.43):0.14,((Artery_Coronary:1.05,Artery_Aorta:1.05):0.18,Artery_Tibial:1.23):0.55):0.37,((Esophagus_Muscularis:0.37,Esophagus_Gastroesophageal_Junction:0.37):0.81,Colon_Sigmoid:1.19):0.97):0.07,(((Minor_Salivary_Gland:1.44,Esophagus_Mucosa:1.44):0.39,(Skin_Sun_Exposed_Lower_leg:0.54,Skin_Not_Sun_Exposed_Suprapubic:0.54):1.30):0.14,((Small_Intestine_Terminal_Ileum:1.43,Colon_Transverse:1.43):0.16,Stomach:1.60):0.37):0.25):0.36,Ovary:2.59):0.28,Spleen:2.86):0.25,Nerve_Tibial:3.11):0.29,(Testis:2.72,Adrenal_Gland:2.72):0.68):0.10,((((Heart_Left_Ventricle:1.81,Heart_Atrial_Appendage:1.81):0.68,Kidney_Cortex:2.49):0.62,Muscle_Skeletal:3.11):0.20,Pancreas:3.31):0.18):0.22,Pituitary:3.71):0.73,Liver:4.44):0.05,(Cells_Transformed_fibroblasts:3.59,Cells_EBV-transformed_lymphocytes:3.59):0.90):0.64,Whole_Blood:5.14):2.17,((((Brain_Cerebellum_Mayo:0.77,Brain_Cerebellum_AD_Mayo:0.77):1.09,(Brain_Cortex_Mayo:0.65,Brain_Cortex_AD_Mayo:0.65):1.21):0.44,(Brain_Cerebellum:0.92,Brain_Cerebellar_Hemisphere:0.92):1.38):0.85,((((((Brain_Hippocampus:0.58,Brain_Amygdala:0.58):0.36,Brain_Nucleus_accumbens_basal_ganglia:0.94):0.02,(Brain_Putamen_basal_ganglia:0.57,Brain_Caudate_basal_ganglia:0.57):0.39):0.33,(Brain_Substantia_nigra:0.89,Brain_Hypothalamus:0.89):0.39):0.19,((Brain_Cortex:0.78,Brain_Anterior_cingulate_cortex_BA24:0.78):0.23,Brain_Frontal_Cortex_BA9:1.01):0.46):0.69,Brain_Spinal_cord_cervical_c-1:2.17):0.98):4.15);",i=function(t){return{top50Liver:"(((((((MT2A:2.81,MT1X:2.81):1.63,PEBP1:4.44):0.77,(TPT1:3.87,IFITM3:3.87):1.34):0.89,((SERPING1:2.08,IGFBP4:2.08):2.29,C3:4.36):1.75):1.04,APOE:7.15):1.92,(MTATP6P1:3.41,FTL:3.41):5.65):6.96,((((RBP4:5.67,MT1G:5.67):0.22,((TF:5.18,APOC1:5.18):0.43,AGT:5.62):0.28):0.66,((((((ITIH4:3.11,CFB:3.11):0.50,ATF5:3.61):0.55,(SERPINF2:3.20,CYP2E1:3.20):0.97):0.79,SERPINA1:4.96):0.35,SERPINA3:5.30):0.28,SAA1:5.59):0.98):0.99,(((((((HPD:3.31,ALB:3.31):0.26,VTN:3.57):0.20,(((((((((FGB:1.14,FGA:1.14):0.15,CRP:1.29):0.14,FGG:1.43):0.16,((((((SERPINC1:0.64,AHSG:0.64):0.16,APCS:0.80):0.07,APOA2:0.87):0.12,AGXT:0.98):0.35,ORM2:1.33):0.02,(GC:1.06,APOH:1.06):0.29):0.23):0.40,(FGL1:1.20,AMBP:1.20):0.78):0.11,ORM1:2.10):0.23,SAA4:2.33):0.34,APOC3:2.67):0.07,HPX:2.74):1.03):0.28,APOA1:4.04):0.14,(SAA2:3.73,HP:3.73):0.46):0.12,TTR:4.30):0.42,ALDOB:4.73):2.82):8.47);",top50Cerebellum_AD:"((((((((PRNP:2.82,CALM1:2.82):0.74,NDRG2:3.57):0.25,CPE:3.82):0.22,CKB:4.03):1.10,APOE:5.13):0.77,(((ZBTB18:2.45,RN7SK:2.45):1.36,(RN7SL2:1.42,RN7SL1:1.42):2.39):0.40,(ENO2:3.29,ALDOC:3.29):0.92):1.69):2.70,(((((((((HSPA8:1.36,HSP90AA1:1.36):0.08,(EIF4A2:1.23,AES:1.23):0.21):0.72,LDHB:2.16):0.20,ITM2B:2.36):0.09,(PEBP1:1.99,CALM2:1.99):0.45):0.32,MALAT1:2.76):1.47,CLU:4.23):0.25,((((PSAP:1.47,HSP90AB1:1.47):0.35,(((RPS25:0.89,EEF2:0.89):0.41,RPL3:1.30):0.09,(((((RPS27A:0.60,RPL9:0.60):0.08,RPL17:0.68):0.11,RPS13:0.79):0.03,RPL5:0.82):0.16,(RPL24:0.43,RPL21:0.43):0.55):0.42):0.43):0.87,GAPDH:2.69):0.12,((((RPS18:0.62,RPL13A:0.62):0.12,(RPS12:0.59,RPS11:0.59):0.15):0.47,EEF1A1:1.21):1.08,ACTB:2.29):0.52):1.67):1.30,(MTATP6P1:3.49,FTL:3.49):2.29):2.83):5.85,(((((STMN2:2.71,ATP6V1G2:2.71):0.73,SNAP25:3.45):0.28,TUBB4A:3.72):0.41,CDR1:4.13):0.34,(MT3:3.04,GFAP:3.04):1.44):9.97);",top50Cerebellum_gtex:"(((((((ENO2:3.29,ALDOC:3.29):0.84,((PHYHIP:2.68,CA11:2.68):0.58,PRRT2:3.25):0.88):1.10,CPE:5.24):1.69,EEF1A2:6.93):0.47,APOE:7.40):1.12,(((((((TMEM59L:2.32,ATP6V1G2:2.32):0.67,STMN2:2.99):0.36,SNAP25:3.35):0.43,TUBB4A:3.78):0.67,((LINC00599:1.89,GABRD:1.89):1.53,SNCB:3.41):1.03):0.87,GFAP:5.31):1.45,((PVALB:3.57,CBLN1:3.57):1.27,CBLN3:4.84):1.92):1.76):5.74,(((MTATP6P1:3.49,FTL:3.49):1.08,((((PSAP:1.47,HSP90AB1:1.47):0.45,(((RPS25:0.89,EEF2:0.89):0.40,((RPS27A:0.60,RPL9:0.60):0.08,RPL17:0.68):0.60):0.03,RPL3:1.32):0.61):0.70,GAPDH:2.62):0.13,((((RPS18:0.62,RPL13A:0.62):0.12,(RPS12:0.59,RPS11:0.59):0.15):0.47,EEF1A1:1.21):1.08,ACTB:2.29):0.46):1.82):0.83,((CLU:4.08,CKB:4.08):0.29,((((SNRNP70:1.90,PTMS:1.90):0.42,(((EIF4A2:1.23,AES:1.23):0.22,HSPA8:1.45):0.35,ATP5B:1.80):0.52):0.61,(CALM3:1.68,CALM1:1.68):1.26):0.14,((PEBP1:1.99,CALM2:1.99):0.31,MTND2P28:2.30):0.78):1.28):1.03):8.86);"}[t]}("top50Cerebellum_AD");Or().defer(Vr,n.tissue).defer(Xr,n.mayoGeneExp).await(function(n,a,o){const s=Wa(a),u=function(t,e=!0){return t.forEach(function(t){t.value=e?Math.log10(+t.medianTPM+1):+t.medianTPM,t.x=t.tissueId,t.y=t.geneSymbol,t.originalValue=parseFloat(t.medianTPM),t.id=t.gencodeId}),t}(o,!0),c=new ao(r,i,u);c.render(t),so(c,s,e),$("#spinner").hide()})},t.createDatasetMenu=function(t,e=za()){Vr(e.tissue,function(e,n){let r=n.color;r.forEach(t=>{t.id=t.tissue_id,t.text=t.tissue_name}),r.sort((t,e)=>t.tissue_name<e.tissue_name?-1:t.tissue_name>e.tissue_name?1:0),$(`#${t}`).select2({placeholder:"Select a data set",data:r})})},t.renderTopExpressed=function(t,e,n,r=za()){Vr(r.topInTissue+t,function(t,i){oo(i.topExpressedGene.map(t=>t.gencodeId),e,n,void 0,r)})},t.searchById=oo,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
