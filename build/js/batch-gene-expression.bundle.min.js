var BatchGeneExpression=function(t){"use strict";var e={},n={},r=34,a=10,i=13;function o(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function c(t){var c=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);function f(t,o){var c,f=[],l=t.length,u=0,d=0,h=l<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,e;var o,c,f=u;if(t.charCodeAt(f)===r){for(;u++<l&&t.charCodeAt(u)!==r||t.charCodeAt(++u)===r;);return(o=u)>=l?h=!0:(c=t.charCodeAt(u++))===a?b=!0:c===i&&(b=!0,t.charCodeAt(u)===a&&++u),t.slice(f+1,o-1).replace(/""/g,'"')}for(;u<l;){if((c=t.charCodeAt(o=u++))===a)b=!0;else if(c===i)b=!0,t.charCodeAt(u)===a&&++u;else if(c!==s)continue;return t.slice(f,o)}return h=!0,t.slice(f,l)}for(t.charCodeAt(l-1)===a&&--l,t.charCodeAt(l-1)===i&&--l;(c=p())!==n;){for(var g=[];c!==e&&c!==n;)g.push(c),c=p();o&&null==(g=o(g,d++))||f.push(g)}return f}function l(e){return e.map(u).join(t)}function u(t){return null==t?"":c.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,a=f(t,function(t,a){if(n)return n(t,a-1);r=t,n=e?function(t,e){var n=o(t);return function(r,a){return e(n(r),a,t)}}(t,e):o(t)});return a.columns=r||[],a},parseRows:f,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(u).join(t)].concat(e.map(function(e){return n.map(function(t){return u(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(l).join("\n")}}}var s=c(","),f=(s.parse,s.parseRows,s.format,s.formatRows,c("\t"));f.parse,f.parseRows,f.format,f.formatRows;function l(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function u(t,e){return fetch(t,e).then(l)}var d="http://www.w3.org/1999/xhtml",h={svg:"http://www.w3.org/2000/svg",xhtml:d,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function b(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),h.hasOwnProperty(e)?{space:h[e],local:t}:t}function p(t){var e=b(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===d&&e.documentElement.namespaceURI===d?e.createElement(t):e.createElementNS(n,t)}})(e)}function g(){}function v(t){return null==t?g:function(){return this.querySelector(t)}}function m(){return[]}function y(t){return null==t?m:function(){return this.querySelectorAll(t)}}var w=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var x=document.documentElement;if(!x.matches){var _=x.webkitMatchesSelector||x.msMatchesSelector||x.mozMatchesSelector||x.oMatchesSelector;w=function(t){return function(){return _.call(this,t)}}}}var M=w;function T(t){return new Array(t.length)}function S(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}S.prototype={constructor:S,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var k="$";function A(t,e,n,r,a,i){for(var o,c=0,s=e.length,f=i.length;c<f;++c)(o=e[c])?(o.__data__=i[c],r[c]=o):n[c]=new S(t,i[c]);for(;c<s;++c)(o=e[c])&&(a[c]=o)}function C(t,e,n,r,a,i,o){var c,s,f,l={},u=e.length,d=i.length,h=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(h[c]=f=k+o.call(s,s.__data__,c,e),f in l?a[c]=s:l[f]=s);for(c=0;c<d;++c)(s=l[f=k+o.call(t,i[c],c,i)])?(r[c]=s,s.__data__=i[c],l[f]=null):n[c]=new S(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&l[h[c]]===s&&(a[c]=s)}function E(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function D(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function N(t,e){return t.style.getPropertyValue(e)||D(t).getComputedStyle(t,null).getPropertyValue(e)}function I(t){return t.trim().split(/^|\s+/)}function P(t){return t.classList||new U(t)}function U(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function L(t,e){for(var n=P(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function j(t,e){for(var n=P(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function z(){this.textContent=""}function F(){this.innerHTML=""}function Y(){this.nextSibling&&this.parentNode.appendChild(this)}function O(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function B(){return null}function H(){var t=this.parentNode;t&&t.removeChild(this)}function G(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function q(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}U.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var R={},V=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(R={mouseenter:"mouseover",mouseleave:"mouseout"}));function X(t,e,n){return t=W(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function W(t,e,n){return function(r){var a=V;V=r;try{t.call(this,this.__data__,e,n)}finally{V=a}}}function Z(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function Q(t,e,n){var r=R.hasOwnProperty(t.type)?X:W;return function(a,i,o){var c,s=this.__on,f=r(e,i,o);if(s)for(var l=0,u=s.length;l<u;++l)if((c=s[l]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=f,c.capture=n),void(c.value=e);this.addEventListener(t.type,f,n),c={type:t.type,name:t.name,value:e,listener:f,capture:n},s?s.push(c):this.__on=[c]}}function J(t,e,n){var r=D(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}var K=[null];function tt(t,e){this._groups=t,this._parents=e}function et(){return new tt([[document.documentElement]],K)}function nt(t){return"string"==typeof t?new tt([[document.querySelector(t)]],[document.documentElement]):new tt([[t]],K)}function rt(){for(var t,e=V;t=e.sourceEvent;)e=t;return e}function at(t){var e=rt();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}(t,e)}function it(t){return"string"==typeof t?new tt([document.querySelectorAll(t)],[document.documentElement]):new tt([null==t?[]:t],K)}tt.prototype=et.prototype={constructor:tt,select:function(t){"function"!=typeof t&&(t=v(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,c=e[a],s=c.length,f=r[a]=new Array(s),l=0;l<s;++l)(i=c[l])&&(o=t.call(i,i.__data__,l,c))&&("__data__"in i&&(o.__data__=i.__data__),f[l]=o);return new tt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=y(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,c=e[i],s=c.length,f=0;f<s;++f)(o=c[f])&&(r.push(t.call(o,o.__data__,f,c)),a.push(o));return new tt(r,a)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new tt(r,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),l=-1,this.each(function(t){b[++l]=t}),b;var n,r=e?C:A,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),s=new Array(o),f=new Array(o),l=0;l<o;++l){var u=a[l],d=i[l],h=d.length,b=t.call(u,u&&u.__data__,l,a),p=b.length,g=s[l]=new Array(p),v=c[l]=new Array(p);r(u,d,g,v,f[l]=new Array(h),b,e);for(var m,y,w=0,x=0;w<p;++w)if(m=g[w]){for(w>=x&&(x=w+1);!(y=v[x])&&++x<p;);m._next=y||null}}return(c=new tt(c,a))._enter=s,c._exit=f,c},enter:function(){return new tt(this._enter||this._groups.map(T),this._parents)},exit:function(){return new tt(this._exit||this._groups.map(T),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new tt(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=E);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,c=n[i],s=c.length,f=a[i]=new Array(s),l=0;l<s;++l)(o=c[l])&&(f[l]=o);f.sort(e)}return new tt(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,c=i.length;o<c;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=b(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):N(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=I(t+"");if(arguments.length<2){for(var r=P(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?L:j)(this,t)}}:e?function(t){return function(){L(this,t)}}:function(t){return function(){j(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?z:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Y)},lower:function(){return this.each(O)},append:function(t){var e="function"==typeof t?t:p(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:p(t),r=null==e?B:"function"==typeof e?e:v(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(H)},clone:function(t){return this.select(t?q:G)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?Q:Z,null==n&&(n=!1),r=0;r<o;++r)this.each(c(i[r],e,n));return this}var c=this.node().__on;if(c)for(var s,f=0,l=c.length;f<l;++f)for(r=0,s=c[f];r<o;++r)if((a=i[r]).type===s.type&&a.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return J(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return J(this,t,e)}})(t,e))}};function ot(){}function ct(t,e){var n=new ot;if(t instanceof ot)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}function st(){var t,e,n,r=[],a=[];function i(n,a,o,c){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,f,l,u=-1,d=n.length,h=r[a++],b=ct(),p=o();++u<d;)(l=b.get(s=h(f=n[u])+""))?l.push(f):b.set(s,[f]);return b.each(function(t,e){c(p,e,i(t,a,o,c))}),p}return n={object:function(t){return i(t,0,ft,lt)},map:function(t){return i(t,0,ut,dt)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var o,c=a[i-1];return null!=e&&i>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,ut,dt),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}}function ft(){return{}}function lt(t,e,n){t[e]=n}function ut(){return ct()}function dt(t,e,n){t.set(e,n)}function ht(){}ot.prototype=ct.prototype={constructor:ot,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var bt=ct.prototype;function pt(){const t="https://dev.gtexportal.org/rest/v1/";return{dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"reference/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"reference/collapsedGeneModelExon?unfiltered=false&datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"reference/collapsedGeneModelExon?unfiltered=true&datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&page_size=10000",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sort_by=median&sortDirection=desc&page_size=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sort_by=median&sortDirection=desc&page_size=50&tissueSiteDetailId=",geneId:t+"reference/geneId?format=json&release=v7&geneId=",tissue:t+"metadata/tissueSiteDetail?format=json",tissueSites:t+"metadata/tissueSiteDetail?format=json",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}function gt(t){const e="tissueSiteDetail";if(!t.hasOwnProperty(e))throw"Fatal Error: parseTissues input error.";const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Fatal Error: parseTissue attr not found: "+t}),n}function vt(t,e=!0,n){const r="geneExpression";if(!t.hasOwnProperty(r))throw"Parse Error: required json attribute is missing: "+r;return t[r].forEach(t=>{["data","tissueSiteDetailId","geneSymbol","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: required json attribute is missing: "+e}),t.values=e?t.data.map(t=>Math.log10(+t+1)):t.data,t.group=t.tissueSiteDetailId,t.label=t.geneSymbol,t.color=void 0===n?"#90c1c1":n[t.gencodeId]}),t[r]}function mt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}ht.prototype=function(t,e){var n=new ht;if(t instanceof ht)t.each(function(t){n.add(t)});else if(t){var r=-1,a=t.length;if(null==e)for(;++r<a;)n.add(t[r]);else for(;++r<a;)n.add(e(t[r],r,t))}return n}.prototype={constructor:ht,has:bt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:bt.remove,clear:bt.clear,values:bt.keys,size:bt.size,empty:bt.empty,each:bt.each};var yt,wt,xt=(1===(yt=mt).length&&(wt=yt,yt=function(t,e){return mt(wt(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;yt(t[a],e)<0?n=a+1:r=a}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;yt(t[a],e)>0?r=a:n=a+1}return n}}).right;function _t(t){return null===t?NaN:+t}function Mt(t,e){var n=function(t,e){var n,r,a=t.length,i=0,o=-1,c=0,s=0;if(null==e)for(;++o<a;)isNaN(n=_t(t[o]))||(s+=(r=n-c)*(n-(c+=r/++i)));else for(;++o<a;)isNaN(n=_t(e(t[o],o,t)))||(s+=(r=n-c)*(n-(c+=r/++i)));if(i>1)return s/(i-1)}(t,e);return n?Math.sqrt(n):n}function Tt(t,e){var n,r,a,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=a=n;++o<i;)null!=(n=t[o])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=a=n;++o<i;)null!=(n=e(t[o],o,t))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]}function St(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}var kt=Math.sqrt(50),At=Math.sqrt(10),$t=Math.sqrt(2);function Ct(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=kt?10:i>=At?5:i>=$t?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=kt?10:i>=At?5:i>=$t?2:1)}function Et(t,e,n){if(null==n&&(n=_t),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,a=(r-1)*e,i=Math.floor(a),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(a-i)}}function Dt(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r}function Nt(t,e){var n,r=t.length,a=-1,i=[];if(null==e)for(;++a<r;)isNaN(n=_t(t[a]))||i.push(n);else for(;++a<r;)isNaN(n=_t(e(t[a],a,t)))||i.push(n);return Et(i.sort(mt),.5)}var It=Array.prototype,Pt=It.map,Ut=It.slice,Lt={name:"implicit"};function jt(){var t,e,n=function t(e){var n=ct(),r=[],a=Lt;function i(t){var i=t+"",o=n.get(i);if(!o){if(a!==Lt)return a;n.set(i,o=r.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:Ut.call(e),i.domain=function(t){if(!arguments.length)return r.slice();r=[],n=ct();for(var e,a,o=-1,c=t.length;++o<c;)n.has(a=(e=t[o])+"")||n.set(a,r.push(e));return i},i.range=function(t){return arguments.length?(e=Ut.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(a=t,i):a},i.copy=function(){return t().domain(r).range(e).unknown(a)},i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,c=0,s=0,f=.5;function l(){var n=r().length,l=i[1]<i[0],u=i[l-0],d=i[1-l];t=(d-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(d-u-t*(n-c))*f,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var h=St(n).map(function(e){return u+t*e});return a(l?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],l()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,l()):o},n.padding=function(t){return arguments.length?(c=s=Math.max(0,Math.min(1,t)),l()):c},n.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},n.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),l()):f},n.copy=function(){return jt().domain(r()).range(i).round(o).paddingInner(c).paddingOuter(s).align(f)},l()}function zt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Ft(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Yt(){}var Ot="\\s*([+-]?\\d+)\\s*",Bt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ht="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Gt=/^#([0-9a-f]{3})$/,qt=/^#([0-9a-f]{6})$/,Rt=new RegExp("^rgb\\("+[Ot,Ot,Ot]+"\\)$"),Vt=new RegExp("^rgb\\("+[Ht,Ht,Ht]+"\\)$"),Xt=new RegExp("^rgba\\("+[Ot,Ot,Ot,Bt]+"\\)$"),Wt=new RegExp("^rgba\\("+[Ht,Ht,Ht,Bt]+"\\)$"),Zt=new RegExp("^hsl\\("+[Bt,Ht,Ht]+"\\)$"),Qt=new RegExp("^hsla\\("+[Bt,Ht,Ht,Bt]+"\\)$"),Jt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Kt(t){var e;return t=(t+"").trim().toLowerCase(),(e=Gt.exec(t))?new ae((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=qt.exec(t))?te(parseInt(e[1],16)):(e=Rt.exec(t))?new ae(e[1],e[2],e[3],1):(e=Vt.exec(t))?new ae(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Xt.exec(t))?ee(e[1],e[2],e[3],e[4]):(e=Wt.exec(t))?ee(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Zt.exec(t))?oe(e[1],e[2]/100,e[3]/100,1):(e=Qt.exec(t))?oe(e[1],e[2]/100,e[3]/100,e[4]):Jt.hasOwnProperty(t)?te(Jt[t]):"transparent"===t?new ae(NaN,NaN,NaN,0):null}function te(t){return new ae(t>>16&255,t>>8&255,255&t,1)}function ee(t,e,n,r){return r<=0&&(t=e=n=NaN),new ae(t,e,n,r)}function ne(t){return t instanceof Yt||(t=Kt(t)),t?new ae((t=t.rgb()).r,t.g,t.b,t.opacity):new ae}function re(t,e,n,r){return 1===arguments.length?ne(t):new ae(t,e,n,null==r?1:r)}function ae(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function ie(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function oe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ce(t,e,n,r)}function ce(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function se(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}zt(Yt,Kt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),zt(ae,re,Ft(Yt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ae(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ae(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+ie(this.r)+ie(this.g)+ie(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),zt(ce,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof ce)return new ce(t.h,t.s,t.l,t.opacity);if(t instanceof Yt||(t=Kt(t)),!t)return new ce;if(t instanceof ce)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,c=i-a,s=(i+a)/2;return c?(o=e===i?(n-r)/c+6*(n<r):n===i?(r-e)/c+2:(e-n)/c+4,c/=s<.5?i+a:2-i-a,o*=60):c=s>0&&s<1?0:o,new ce(o,c,s,t.opacity)}(t):new ce(t,e,n,null==r?1:r)},Ft(Yt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ce(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ce(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new ae(se(t>=240?t-240:t+120,a,r),se(t,a,r),se(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var fe=Math.PI/180,le=180/Math.PI,ue=.96422,de=1,he=.82521,be=4/29,pe=6/29,ge=3*pe*pe,ve=pe*pe*pe;function me(t){if(t instanceof ye)return new ye(t.l,t.a,t.b,t.opacity);if(t instanceof Te){if(isNaN(t.h))return new ye(t.l,0,0,t.opacity);var e=t.h*fe;return new ye(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof ae||(t=ne(t));var n,r,a=Me(t.r),i=Me(t.g),o=Me(t.b),c=we((.2225045*a+.7168786*i+.0606169*o)/de);return a===i&&i===o?n=r=c:(n=we((.4360747*a+.3850649*i+.1430804*o)/ue),r=we((.0139322*a+.0971045*i+.7141733*o)/he)),new ye(116*c-16,500*(n-c),200*(c-r),t.opacity)}function ye(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function we(t){return t>ve?Math.pow(t,1/3):t/ge+be}function xe(t){return t>pe?t*t*t:ge*(t-be)}function _e(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Me(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Te(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}zt(ye,function(t,e,n,r){return 1===arguments.length?me(t):new ye(t,e,n,null==r?1:r)},Ft(Yt,{brighter:function(t){return new ye(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ye(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ae(_e(3.1338561*(e=ue*xe(e))-1.6168667*(t=de*xe(t))-.4906146*(n=he*xe(n))),_e(-.9787684*e+1.9161415*t+.033454*n),_e(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),zt(Te,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Te)return new Te(t.h,t.c,t.l,t.opacity);if(t instanceof ye||(t=me(t)),0===t.a&&0===t.b)return new Te(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*le;return new Te(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new Te(t,e,n,null==r?1:r)},Ft(Yt,{brighter:function(t){return new Te(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Te(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return me(this).rgb()}}));var Se=-.14861,ke=1.78277,Ae=-.29227,$e=-.90649,Ce=1.97294,Ee=Ce*$e,De=Ce*ke,Ne=ke*Ae-$e*Se;function Ie(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Pe)return new Pe(t.h,t.s,t.l,t.opacity);t instanceof ae||(t=ne(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(Ne*r+Ee*e-De*n)/(Ne+Ee-De),i=r-a,o=(Ce*(n-a)-Ae*i)/$e,c=Math.sqrt(o*o+i*i)/(Ce*a*(1-a)),s=c?Math.atan2(o,i)*le-120:NaN;return new Pe(s<0?s+360:s,c,a,t.opacity)}(t):new Pe(t,e,n,null==r?1:r)}function Pe(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ue(t){return function(){return t}}function Le(t,e){return function(n){return t+n*e}}function je(t){return 1==(t=+t)?ze:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ue(isNaN(e)?n:e)}}function ze(t,e){var n=e-t;return n?Le(t,n):Ue(isNaN(t)?e:t)}zt(Pe,Ie,Ft(Yt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Pe(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Pe(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*fe,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new ae(255*(e+n*(Se*r+ke*a)),255*(e+n*(Ae*r+$e*a)),255*(e+n*(Ce*r)),this.opacity)}}));var Fe=function t(e){var n=je(e);function r(t,e){var r=n((t=re(t)).r,(e=re(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=ze(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);var Ye,Oe=(Ye=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,c=r<e-1?t[r+2]:2*i-a;return function(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}((n-r/e)*e,o,a,i,c)}},function(t){var e,n,r=t.length,a=new Array(r),i=new Array(r),o=new Array(r);for(e=0;e<r;++e)n=re(t[e]),a[e]=n.r||0,i[e]=n.g||0,o[e]=n.b||0;return a=Ye(a),i=Ye(i),o=Ye(o),n.opacity=1,function(t){return n.r=a(t),n.g=i(t),n.b=o(t),n+""}});function Be(t,e){return e-=t=+t,function(n){return t+e*n}}var He=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ge=new RegExp(He.source,"g");function qe(t,e){var n,r,a,i=He.lastIndex=Ge.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=He.exec(t))&&(r=Ge.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),c[o]?c[o]+=a:c[++o]=a),(n=n[0])===(r=r[0])?c[o]?c[o]+=r:c[++o]=r:(c[++o]=null,s.push({i:o,x:Be(n,r)})),i=Ge.lastIndex;return i<e.length&&(a=e.slice(i),c[o]?c[o]+=a:c[++o]=a),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)c[(n=s[r]).i]=n.x(t);return c.join("")})}function Re(t,e){var n,r=typeof e;return null==e||"boolean"===r?Ue(e):("number"===r?Be:"string"===r?(n=Kt(e))?(e=n,Fe):qe:e instanceof Kt?Fe:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Re(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Re(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}:Be)(t,e)}function Ve(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}}var Xe,We,Ze,Qe,Je=180/Math.PI,Ke={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function tn(t,e,n,r,a,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,s/=c),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*Je,skewX:Math.atan(s)*Je,scaleX:o,scaleY:c}}function en(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,r,a,i,o,c){if(t!==a||r!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:Be(t,a)},{i:s-2,x:Be(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:Be(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:Be(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,c,s),function(t,e,n,r,i,o){if(t!==n||e!==r){var c=i.push(a(i)+"scale(",null,",",null,")");o.push({i:c-4,x:Be(t,n)},{i:c-2,x:Be(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var nn=en(function(t){return"none"===t?Ke:(Xe||(Xe=document.createElement("DIV"),We=document.documentElement,Ze=document.defaultView),Xe.style.transform=t,t=Ze.getComputedStyle(We.appendChild(Xe),null).getPropertyValue("transform"),We.removeChild(Xe),tn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),rn=en(function(t){return null==t?Ke:(Qe||(Qe=document.createElementNS("http://www.w3.org/2000/svg","g")),Qe.setAttribute("transform",t),(t=Qe.transform.baseVal.consolidate())?tn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Ke)},", ",")",")");Math.SQRT2;function an(t){return function e(n){function r(e,r){var a=t((e=Ie(e)).h,(r=Ie(r)).h),i=ze(e.s,r.s),o=ze(e.l,r.l),c=ze(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,r.gamma=e,r}(1)}an(function(t,e){var n=e-t;return n?Le(t,n>180||n<-180?n-360*Math.round(n/360):n):Ue(isNaN(t)?e:t)});var on=an(ze);function cn(t){return+t}var sn=[0,1];function fn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=e,function(){return n});var n}function ln(t,e,n,r){var a=t[0],i=t[1],o=e[0],c=e[1];return i<a?(a=n(i,a),o=r(c,o)):(a=n(a,i),o=r(o,c)),function(t){return o(a(t))}}function un(t,e,n,r){var a=Math.min(t.length,e.length)-1,i=new Array(a),o=new Array(a),c=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<a;)i[c]=n(t[c],t[c+1]),o[c]=r(e[c],e[c+1]);return function(e){var n=xt(t,e,1,a)-1;return o[n](i[n](e))}}function dn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function hn(t){return(t=dn(Math.abs(t)))?t[1]:NaN}var bn,pn=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function gn(t){return new vn(t)}function vn(t){if(!(e=pn.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}function mn(t,e){var n=dn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}gn.prototype=vn.prototype,vn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var yn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return mn(100*t,e)},r:mn,s:function(t,e){var n=dn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(bn=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+dn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function wn(t){return t}var xn,_n,Mn,Tn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Sn(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var a=t.length,i=[],o=0,c=e[0],s=0;a>0&&c>0&&(s+c+1>r&&(c=Math.max(1,r-s)),i.push(t.substring(a-=c,a+c)),!((s+=c+1)>r));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):wn,a=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):wn,c=t.percent||"%";function s(t){var e=(t=gn(t)).fill,n=t.align,s=t.sign,f=t.symbol,l=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):yn[p]||(null==h&&(h=12),b=!0,p="g"),(l||"0"===e&&"="===n)&&(l=!0,e="0",n="=");var g="$"===f?a[0]:"#"===f&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",v="$"===f?a[1]:/[%p]/.test(p)?c:"",m=yn[p],y=/[defgprs%]/.test(p);function w(t){var a,c,f,w=g,x=v;if("c"===p)x=m(t)+x,t="";else{var _=(t=+t)<0;if(t=m(Math.abs(t),h),b&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(a>0){if(!+t[r])break t;a=0}}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),_&&0==+t&&(_=!1),w=(_?"("===s?s:"-":"-"===s||"("===s?"":s)+w,x=("s"===p?Tn[8+bn/3]:"")+x+(_&&"("===s?")":""),y)for(a=-1,c=t.length;++a<c;)if(48>(f=t.charCodeAt(a))||f>57){x=(46===f?i+t.slice(a+1):t.slice(a))+x,t=t.slice(0,a);break}}d&&!l&&(t=r(t,1/0));var M=w.length+t.length+x.length,T=M<u?new Array(u-M+1).join(e):"";switch(d&&l&&(t=r(T+t,T.length?u-x.length:1/0),T=""),n){case"<":t=w+t+x+T;break;case"=":t=w+T+t+x;break;case"^":t=T.slice(0,M=T.length>>1)+w+t+x+T.slice(M);break;default:t=T+w+t+x}return o(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return t+""},w}return{format:s,formatPrefix:function(t,e){var n=s(((t=gn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(hn(e)/3))),a=Math.pow(10,-r),i=Tn[8+r/3];return function(t){return n(a*t)+i}}}}function kn(t,e,n){var r,a=t[0],i=t[t.length-1],o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=kt?a*=10:i>=At?a*=5:i>=$t&&(a*=2),e<t?-a:a}(a,i,null==e?10:e);switch((n=gn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(a),Math.abs(i));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(hn(e)/3)))-hn(Math.abs(t)))}(o,c))||(n.precision=r),Mn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,hn(e)-hn(t))+1}(o,Math.max(Math.abs(a),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-hn(Math.abs(t)))}(o))||(n.precision=r-2*("%"===n.type))}return _n(n)}function An(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,a,i,o,c=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=Ct(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(t-c)/o;return r&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return kn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,o=a.length-1,c=a[i],s=a[o];return s<c&&(r=c,c=s,s=r,r=i,i=o,o=r),(r=Ct(c,s,n))>0?r=Ct(c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=Ct(c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[o]=Math.ceil(s/r)*r,e(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[o]=Math.floor(s*r)/r,e(a)),t},t}function $n(){var t=function(t,e){var n,r,a,i=sn,o=sn,c=Re,s=!1;function f(){return n=Math.min(i.length,o.length)>2?un:ln,r=a=null,l}function l(e){return(r||(r=n(i,o,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,c)))(+e)}return l.invert=function(t){return(a||(a=n(o,i,fn,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},l.domain=function(t){return arguments.length?(i=Pt.call(t,cn),f()):i.slice()},l.range=function(t){return arguments.length?(o=Ut.call(t),f()):o.slice()},l.rangeRound=function(t){return o=Ut.call(t),c=Ve,f()},l.clamp=function(t){return arguments.length?(s=!!t,f()):s},l.interpolate=function(t){return arguments.length?(c=t,f()):c},f()}(fn,Be);return t.copy=function(){return e=t,$n().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp());var e},An(t)}xn=Sn({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),_n=xn.format,Mn=xn.formatPrefix;var Cn=new Date,En=new Date;function Dn(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return c},a.filter=function(n){return Dn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(a.count=function(e,r){return Cn.setTime(+e),En.setTime(+r),t(Cn),t(En),Math.floor(n(Cn,En))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var Nn=Dn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Nn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Dn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Nn:null};Nn.range;var In=6e4,Pn=6048e5,Un=(Dn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}).range,Dn(function(t){t.setTime(Math.floor(t/In)*In)},function(t,e){t.setTime(+t+e*In)},function(t,e){return(e-t)/In},function(t){return t.getMinutes()}).range,Dn(function(t){var e=t.getTimezoneOffset()*In%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}).range,Dn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*In)/864e5},function(t){return t.getDate()-1}));Un.range;function Ln(t){return Dn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*In)/Pn})}var jn=Ln(0),zn=Ln(1),Fn=(Ln(2),Ln(3),Ln(4)),Yn=(Ln(5),Ln(6),jn.range,Dn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}).range,Dn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Yn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Dn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Yn.range,Dn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*In)},function(t,e){return(e-t)/In},function(t){return t.getUTCMinutes()}).range,Dn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()}).range;var On=Dn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});On.range;function Bn(t){return Dn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Pn})}var Hn=Bn(0),Gn=Bn(1),qn=(Bn(2),Bn(3),Bn(4)),Rn=(Bn(5),Bn(6),Hn.range,Dn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}).range,Dn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Rn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Dn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};Rn.range;function Vn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Xn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Wn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Zn,Qn,Jn,Kn={"-":"",_:" ",0:"0"},tr=/^\s*\d+/,er=/^%/,nr=/[\\^$*+?|[\]().{}]/g;function rr(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function ar(t){return t.replace(nr,"\\$&")}function ir(t){return new RegExp("^(?:"+t.map(ar).join("|")+")","i")}function or(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function cr(t,e,n){var r=tr.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function sr(t,e,n){var r=tr.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function fr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function lr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function ur(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function dr(t,e,n){var r=tr.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function hr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function br(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function pr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function gr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function vr(t,e,n){var r=tr.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function mr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function yr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function wr(t,e,n){var r=tr.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function xr(t,e,n){var r=tr.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function _r(t,e,n){var r=tr.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Mr(t,e,n){var r=er.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Tr(t,e,n){var r=tr.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Sr(t,e,n){var r=tr.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function kr(t,e){return rr(t.getDate(),e,2)}function Ar(t,e){return rr(t.getHours(),e,2)}function $r(t,e){return rr(t.getHours()%12||12,e,2)}function Cr(t,e){return rr(1+Un.count(Yn(t),t),e,3)}function Er(t,e){return rr(t.getMilliseconds(),e,3)}function Dr(t,e){return Er(t,e)+"000"}function Nr(t,e){return rr(t.getMonth()+1,e,2)}function Ir(t,e){return rr(t.getMinutes(),e,2)}function Pr(t,e){return rr(t.getSeconds(),e,2)}function Ur(t){var e=t.getDay();return 0===e?7:e}function Lr(t,e){return rr(jn.count(Yn(t),t),e,2)}function jr(t,e){var n=t.getDay();return t=n>=4||0===n?Fn(t):Fn.ceil(t),rr(Fn.count(Yn(t),t)+(4===Yn(t).getDay()),e,2)}function zr(t){return t.getDay()}function Fr(t,e){return rr(zn.count(Yn(t),t),e,2)}function Yr(t,e){return rr(t.getFullYear()%100,e,2)}function Or(t,e){return rr(t.getFullYear()%1e4,e,4)}function Br(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+rr(e/60|0,"0",2)+rr(e%60,"0",2)}function Hr(t,e){return rr(t.getUTCDate(),e,2)}function Gr(t,e){return rr(t.getUTCHours(),e,2)}function qr(t,e){return rr(t.getUTCHours()%12||12,e,2)}function Rr(t,e){return rr(1+On.count(Rn(t),t),e,3)}function Vr(t,e){return rr(t.getUTCMilliseconds(),e,3)}function Xr(t,e){return Vr(t,e)+"000"}function Wr(t,e){return rr(t.getUTCMonth()+1,e,2)}function Zr(t,e){return rr(t.getUTCMinutes(),e,2)}function Qr(t,e){return rr(t.getUTCSeconds(),e,2)}function Jr(t){var e=t.getUTCDay();return 0===e?7:e}function Kr(t,e){return rr(Hn.count(Rn(t),t),e,2)}function ta(t,e){var n=t.getUTCDay();return t=n>=4||0===n?qn(t):qn.ceil(t),rr(qn.count(Rn(t),t)+(4===Rn(t).getUTCDay()),e,2)}function ea(t){return t.getUTCDay()}function na(t,e){return rr(Gn.count(Rn(t),t),e,2)}function ra(t,e){return rr(t.getUTCFullYear()%100,e,2)}function aa(t,e){return rr(t.getUTCFullYear()%1e4,e,4)}function ia(){return"+0000"}function oa(){return"%"}function ca(t){return+t}function sa(t){return Math.floor(+t/1e3)}!function(t){Zn=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,f=ir(a),l=or(a),u=ir(i),d=or(i),h=ir(o),b=or(o),p=ir(c),g=or(c),v=ir(s),m=or(s),y={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:kr,e:kr,f:Dr,H:Ar,I:$r,j:Cr,L:Er,m:Nr,M:Ir,p:function(t){return a[+(t.getHours()>=12)]},Q:ca,s:sa,S:Pr,u:Ur,U:Lr,V:jr,w:zr,W:Fr,x:null,X:null,y:Yr,Y:Or,Z:Br,"%":oa},w={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Hr,e:Hr,f:Xr,H:Gr,I:qr,j:Rr,L:Vr,m:Wr,M:Zr,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:ca,s:sa,S:Qr,u:Jr,U:Kr,V:ta,w:ea,W:na,x:null,X:null,y:ra,Y:aa,Z:ia,"%":oa},x={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return T(t,e,n,r)},d:gr,e:gr,f:_r,H:mr,I:mr,j:vr,L:xr,m:pr,M:yr,p:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:Tr,s:Sr,S:wr,u:sr,U:fr,V:lr,w:cr,W:ur,x:function(t,e,r){return T(t,n,e,r)},X:function(t,e,n){return T(t,r,e,n)},y:hr,Y:dr,Z:br,"%":Mr};function _(t,e){return function(n){var r,a,i,o=[],c=-1,s=0,f=t.length;for(n instanceof Date||(n=new Date(+n));++c<f;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(a=Kn[r=t.charAt(++c)])?r=t.charAt(++c):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function M(t,e){return function(n){var r,a,i=Wn(1900);if(T(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=(r=Xn(Wn(i.y))).getUTCDay())>4||0===a?Gn.ceil(r):Gn(r),r=On.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(a=(r=e(Wn(i.y))).getDay())>4||0===a?zn.ceil(r):zn(r),r=Un.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Xn(Wn(i.y)).getUTCDay():e(Wn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Xn(i)):e(i)}}function T(t,e,n,r){for(var a,i,o=0,c=e.length,s=n.length;o<c;){if(r>=s)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=x[a in Kn?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return y.x=_(n,y),y.X=_(r,y),y.c=_(e,y),w.x=_(n,w),w.X=_(r,w),w.c=_(e,w),{format:function(t){var e=_(t+="",y);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Vn);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,Xn);return e.toString=function(){return t},e}}}(t),Zn.format,Zn.parse,Qn=Zn.utcFormat,Jn=Zn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Qn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Jn("%Y-%m-%dT%H:%M:%S.%LZ");function fa(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function la(t){return Oe(t[t.length-1])}fa("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),fa("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),fa("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),fa("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),fa("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),fa("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),fa("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),fa("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),fa("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),la(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(fa)),la(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(fa)),la(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(fa)),la(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(fa)),la(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(fa)),la(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(fa)),la(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(fa)),la(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(fa)),la(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(fa));var ua=la(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(fa));la(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(fa)),la(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(fa));var da=la(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(fa));la(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(fa));var ha=la(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(fa));la(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(fa)),la(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(fa));var ba=la(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(fa));la(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(fa)),la(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(fa)),la(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(fa));var pa=la(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(fa)),ga=la(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(fa)),va=la(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(fa)),ma=la(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(fa)),ya=la(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(fa)),wa=la(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(fa));on(Ie(300,.5,0),Ie(-240,.5,1));on(Ie(-100,.75,.35),Ie(80,1.5,.8)),on(Ie(260,.75,.35),Ie(80,1.5,.8)),Ie(),re(),Math.PI,Math.PI;function xa(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}xa(fa("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));xa(fa("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),xa(fa("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),xa(fa("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function _a(t=!0){const e=["rgb(100,118,120)","rgb(101,141,145)","rgb(103,126,82)","rgb(103,184,222)","rgb(108,110,88)","rgb(108,147,128)","rgb(119,144,182)","rgb(126,130,122)","rgb(133,173,186)","rgb(137,114,91)","rgb(145,170,157)","rgb(145,201,232)","rgb(147,105,66)","rgb(159,114,116)","rgb(159,188,191)","rgb(159,229,194)","rgb(163,163,171)","rgb(164,207,190)","rgb(172,108,130)","rgb(173,84,114)","rgb(174,195,222)","rgb(176,204,153)","rgb(179,180,150)","rgb(180,220,237)","rgb(183,202,121)","rgb(192,202,85)","rgb(193,191,193","rgb(195,97,136)","rgb(199,121,102)","rgb(207,202,76)","rgb(209,219,189)","rgb(213,251,255)","rgb(215,94,56)","rgb(218,114,126)","rgb(223,90,73)","rgb(224,247,217)","rgb(227,205,164)","rgb(228,168,185)","rgb(230,176,152)","rgb(232,212,175)","rgb(239,201,76)","rgb(240,124,108)","rgb(246,232,177)","rgb(249,228,173)","rgb(252,245,191)","rgb(255,188,103)","rgb(45,94,110)","rgb(51,153,204)","rgb(60,124,145)","rgb(62,87,145)","rgb(65,115,120)","rgb(89,216,229)","rgb(94,178,153)","rgb(95,124,134)"];return t?function(t){let e=t.length;for(;e>0;){let n=Math.floor(Math.random()*e),r=t[--e];t[e]=t[n],t[n]=r}return t}(e):e}function Ma(t,e="YlGnBu",n=0){let r=Dt(t);const a=function t(e){var n=0,r=1,a=1,i=!1;function o(t){var r=(t-n)*a;return e(i?Math.max(0,Math.min(1,r)):r)}return o.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],a=n===r?0:1/(r-n),o):[n,r]},o.clamp=function(t){return arguments.length?(i=!!t,o):i},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return t(e).domain([n,r]).clamp(i)},An(o)}(function(t){const e={BuGn:ua,OrRd:da,PuBu:ha,YlGnBu:ba,Blues:pa,Oranges:wa,Greens:ga,Purples:ma,Reds:ya,Greys:va,Grays:va};if(!e.hasOwnProperty(t)){const e="Color Interpolator Error "+t;throw console.error(e),e}return e[t]}(e));return a.domain([n,r]),a}class Ta{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},a=12,i=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:a},this.topTreePanel={x:r.left+e,y:r.top,h:n-i,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function Sa(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ka(t,e){var n,r,a,i,o,c=new Ea(t),s=+t.value&&(c.value=t.value),f=[c];for(null==e&&(e=Aa);n=f.pop();)if(s&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)f.push(r=n.children[i]=new Ea(a[i])),r.parent=n,r.depth=n.depth+1;return c.eachBefore(Ca)}function Aa(t){return t.children}function $a(t){t.data=t.data.data}function Ca(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Ea(t){this.data=t,this.depth=this.height=0,this.parent=null}Ea.prototype=ka.prototype={constructor:Ea,count:function(){return this.eachAfter(Sa)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;for(t=n.pop(),e=r.pop();t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return ka(this).eachBefore($a)}};var Da=Array.prototype.slice;function Na(t){return t}var Ia=1,Pa=2,Ua=3,La=4,ja=1e-6;function za(t){return"translate("+(t+.5)+",0)"}function Fa(t){return"translate(0,"+(t+.5)+")"}function Ya(){return!this.__axis}function Oa(t,e){var n=[],r=null,a=null,i=6,o=6,c=3,s=t===Ia||t===La?-1:1,f=t===La||t===Pa?"x":"y",l=t===Ia||t===Ua?za:Fa;function u(u){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==a?e.tickFormat?e.tickFormat.apply(e,n):Na:a,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,v=+p[p.length-1]+.5,m=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),y=u.selection?u.selection():u,w=y.selectAll(".domain").data([null]),x=y.selectAll(".tick").data(d,e).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),T=x.select("line"),S=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),T=T.merge(M.append("line").attr("stroke","#000").attr(f+"2",s*i)),S=S.merge(M.append("text").attr("fill","#000").attr(f,s*b).attr("dy",t===Ia?"0em":t===Ua?"0.71em":"0.32em")),u!==y&&(w=w.transition(u),x=x.transition(u),T=T.transition(u),S=S.transition(u),_=_.transition(u).attr("opacity",ja).attr("transform",function(t){return isFinite(t=m(t))?l(t):this.getAttribute("transform")}),M.attr("opacity",ja).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:m(t))})),_.remove(),w.attr("d",t===La||t==Pa?"M"+s*o+","+g+"H0.5V"+v+"H"+s*o:"M"+g+","+s*o+"V0.5H"+v+"V"+s*o),x.attr("opacity",1).attr("transform",function(t){return l(m(t))}),T.attr(f+"2",s*i),S.attr(f,s*b).text(h),y.filter(Ya).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Pa?"start":t===La?"end":"middle"),y.each(function(){this.__axis=m})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=Da.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:Da.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(r=null==t?null:Da.call(t),u):r&&r.slice()},u.tickFormat=function(t){return arguments.length?(a=t,u):a},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}function Ba(t){return Oa(Ua,t)}function Ha(t){return Oa(La,t)}class Ga{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=ka(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),a=0;a<r.length;a++){var i=r[a];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=r[a-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||mt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call(Ba(this.xScale).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||mt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").call(Ha(this.yScale).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=$n().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),this.xScale=jt().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),this.yScale=jt().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=$n().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var qa={value:function(){}};function Ra(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Va(r)}function Va(t){this._=t}function Xa(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function Wa(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=qa,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Va.prototype=Ra.prototype={constructor:Va,on:function(t,e){var n,r,a=this._,i=(r=a,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)a[n]=Wa(a[n],t.name,e);else if(null==e)for(n in a)a[n]=Wa(a[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=Xa(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Va(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var Za,Qa,Ja=0,Ka=0,ti=0,ei=1e3,ni=0,ri=0,ai=0,ii="object"==typeof performance&&performance.now?performance:Date,oi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ci(){return ri||(oi(si),ri=ii.now()+ai)}function si(){ri=0}function fi(){this._call=this._time=this._next=null}function li(t,e,n){var r=new fi;return r.restart(t,e,n),r}function ui(){ri=(ni=ii.now())+ai,Ja=Ka=0;try{!function(){ci(),++Ja;for(var t,e=Za;e;)(t=ri-e._time)>=0&&e._call.call(null,t),e=e._next;--Ja}()}finally{Ja=0,function(){var t,e,n=Za,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Za=e);Qa=t,hi(r)}(),ri=0}}function di(){var t=ii.now(),e=t-ni;e>ei&&(ai-=e,ni=t)}function hi(t){Ja||(Ka&&(Ka=clearTimeout(Ka)),t-ri>24?(t<1/0&&(Ka=setTimeout(ui,t-ii.now()-ai)),ti&&(ti=clearInterval(ti))):(ti||(ni=ii.now(),ti=setInterval(di,ei)),Ja=1,oi(ui)))}function bi(t,e,n){var r=new fi;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r}fi.prototype=li.prototype={constructor:fi,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ci():+n)+(null==e?0:+e),this._next||Qa===this||(Qa?Qa._next=this:Za=this,Qa=this),this._call=t,this._time=n,hi()},stop:function(){this._call&&(this._call=null,this._time=1/0,hi())}};var pi=Ra("start","end","interrupt"),gi=[],vi=0,mi=1,yi=2,wi=3,xi=4,_i=5,Mi=6;function Ti(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(s){var f,l,u,d;if(n.state!==mi)return c();for(f in a)if((d=a[f]).name===n.name){if(d.state===wi)return bi(i);d.state===xi?(d.state=Mi,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete a[f]):+f<e&&(d.state=Mi,d.timer.stop(),delete a[f])}if(bi(function(){n.state===wi&&(n.state=xi,n.timer.restart(o,n.delay,n.time),o(s))}),n.state=yi,n.on.call("start",t,t.__data__,n.index,n.group),n.state===yi){for(n.state=wi,r=new Array(u=n.tween.length),f=0,l=-1;f<u;++f)(d=n.tween[f].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=d);r.length=l+1}}function o(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=_i,1),i=-1,o=r.length;++i<o;)r[i].call(null,a);n.state===_i&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var r in n.state=Mi,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=li(function(t){n.state=mi,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:a,on:pi,tween:gi,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:vi})}function Si(t,e){var n=Ai(t,e);if(n.state>vi)throw new Error("too late; already scheduled");return n}function ki(t,e){var n=Ai(t,e);if(n.state>yi)throw new Error("too late; already started");return n}function Ai(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function $i(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>yi&&n.state<_i,n.state=Mi,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}function Ci(t,e,n){var r=t._id;return t.each(function(){var t=ki(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Ai(t,r).value[e]}}function Ei(t,e){var n;return("number"==typeof e?Be:e instanceof Kt?Fe:(n=Kt(e))?(e=n,Fe):qe)(t,e)}var Di=et.prototype.constructor;var Ni=0;function Ii(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Pi(){return++Ni}var Ui=et.prototype;Ii.prototype=function(t){return et().transition(t)}.prototype={constructor:Ii,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=v(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var c,s,f=r[o],l=f.length,u=i[o]=new Array(l),d=0;d<l;++d)(c=f[d])&&(s=t.call(c,c.__data__,d,f))&&("__data__"in c&&(s.__data__=c.__data__),u[d]=s,Ti(u[d],e,n,d,u,Ai(c,n)));return new Ii(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=y(t));for(var r=this._groups,a=r.length,i=[],o=[],c=0;c<a;++c)for(var s,f=r[c],l=f.length,u=0;u<l;++u)if(s=f[u]){for(var d,h=t.call(s,s.__data__,u,f),b=Ai(s,n),p=0,g=h.length;p<g;++p)(d=h[p])&&Ti(d,e,n,p,h,b);i.push(h),o.push(s)}return new Ii(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new Ii(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new Ii(o,this._parents,this._name,this._id)},selection:function(){return new Di(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Pi(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)if(o=c[f]){var l=Ai(o,e);Ti(o,t,n,f,c,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ii(r,this._parents,t,n)},call:Ui.call,nodes:Ui.nodes,node:Ui.node,size:Ui.size,empty:Ui.empty,each:Ui.each,on:function(t,e){var n=this._id;return arguments.length<2?Ai(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Si:ki;return function(){var o=i(this,t),c=o.on;c!==r&&(a=(r=c).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=b(t),r="transform"===n?rn:Ei;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttribute(t))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttribute(t)}})(n,r,Ci(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,a;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?a:a=e(r=i,n)}}:function(t,e,n){var r,a;return function(){var i=this.getAttribute(t);return i===n?null:i===r?a:a=e(r=i,n)}})(n,r,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=b(t);return this.tween(n,(r.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?nn:Ei;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=N(this,t),o=(this.style.removeProperty(t),N(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,a,i;return function(){var o=N(this,t),c=n(this);return null==c&&(this.style.removeProperty(t),c=N(this,t)),o===c?null:o===r&&c===a?i:i=e(r=o,a=c)}}(t,r,Ci(this,"style."+t,e)):function(t,e,n){var r,a;return function(){var i=N(this,t);return i===n?null:i===r?a:a=e(r=i,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,a=e.apply(r,arguments);return a&&function(e){r.style.setProperty(t,a(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ci(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=Ai(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var a=ki(this,t),i=a.tween;if(i!==n)for(var o=0,c=(r=n=i).length;o<c;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}:function(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=ki(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var c={name:e,value:n},s=0,f=a.length;s<f;++s)if(a[s].name===e){a[s]=c;break}s===f&&a.push(c)}i.tween=a}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Si(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Si(this,t).delay=e}})(e,t)):Ai(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){ki(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){ki(this,t).duration=e}})(e,t)):Ai(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){ki(this,t).ease=e}}(e,t)):Ai(this.node(),e).ease}};Math.PI,Math.PI;var Li={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ji(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Li.time=ci(),Li;return n}et.prototype.interrupt=function(t){return this.each(function(){$i(this,t)})},et.prototype.transition=function(t){var e,n;t instanceof Ii?(e=t._id,t=t._name):(e=Pi(),(n=Li).time=ci(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)(o=c[f])&&Ti(o,t,e,f,c,n||ji(o,e));return new Ii(r,this._parents,t,e)};class zi{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,a="fa-download"){this.createButton(t,a);nt(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);nt(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),a=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var a=n[r].cssRules,i=0;i<a.length;i++){var o=a[i];if(void 0!==o.style){var c;try{c=$(t).find(o.selectorText)}catch(t){c=[]}c.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var s=document.createElement("style");return s.setAttribute("type","text/css"),s.innerHTML="<![CDATA[\n"+e+"\n]]>",s}(r.get());a.prepend(i),$("#"+n).html("").hide();let o=$(`#${n}`).append(a).html(),c=new Blob([o],{type:"image/svg+xml"});saveAs(c,e),$(`#${n}`).html("").hide()}}class Fi{constructor(t,e=!1,n=30,r=-40,a=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=a}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),nt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){nt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=V.pageX,e=V.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;nt("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){nt("#"+this.id).html(t)}}class Yi{constructor(t,e="YlGnBu",n=!0,r=10,a=2){this.data=t,this.useLog=n,this.base=r,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=a,this.colorScheme=e,this.toolbar=void 0,this.tooltip=void 0}createToolbar(t,e){return this.toolbar=new zi(t,e),this.toolbar}createTooltip(t){return this.tooltip=new Fi(t),nt(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}drawColorLegend(t,e={x:0,y:0},n=5){!function(t,e,n,r,a,i=10,o=10,c={h:10,w:50},s="h"){const f=[0].concat(n.ticks(i).slice(1)),l=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"==s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${r.x}, ${r.y})`),l.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),l.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+c.h*f.length})rotate(90)`),l.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),l.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.base)}redraw(t,e,n,r={w:1e3,h:1e3},a=30){this._setXList(r.w,e),this._setYList(r.h,n),this.draw(t,r,a)}draw(t,e={w:1e3,h:600},n=30,r=!0){void 0===this.xList&&this._setXList(e.w),void 0===this.yList&&this._setYList(e.h),void 0===this.colorScale&&(this.colorScale=Ma(this.data.map(t=>t.value),this.colorScheme));const a=t.selectAll(".exp-map-xlabel").data(this.xList),i=this.yScale.range()[1]+2*this.yScale.bandwidth();a.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}),a.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}).merge(a).text(t=>t),a.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).style("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){nt(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){nt(this).classed("normal",!0).classed("highlighted",!1)});const o=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);o.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const c=this;o.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class",t=>"exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill",t=>"#eeeeee").on("mouseover",function(t){const e=nt(this);c.cellMouseover(e)}).on("mouseout",function(t){nt(this);c.cellMouseout()}).merge(o).style("fill",t=>r&&0==t.originalValue?"#DDDDDD":this.colorScale(t.value)),o.exit().remove()}cellMouseout(t){it("*").classed("highlighted",!1)}cellMouseover(t){const e=t.attr("row"),n=t.attr("col");it(".exp-map-xlabel").filter(`.${e}`).classed("highlighted",!0),it(".exp-map-ylabel").filter(`.${n}`).classed("highlighted",!0),t.classed("highlighted",!0)}_setXList(t,e){this.xList=void 0!==e?e:st().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=jt().domain(this.xList).range([0,t]).padding(.05)}_setYList(t,e){this.yList=void 0!==e?e:st().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=jt().domain(this.yList).range([0,t]).padding(.05)}}class Oi{constructor(t,e,n,r="YlGnBu",a=2,i=new Ta,o=!0,c=10,s=""){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new Ga(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new Ga(this.data.rowTree,"h"),heatmap:new Yi(this.data.heatmap,r,o,c,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=s,this.tooltip=void 0,this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new zi(t,e),this.toolbar}createTooltip(t){return this.tooltip=new Fi(t),nt(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}render(t,e,n=!0,r=!0,a="top",i=5){this._updateConfig(a),this.visualComponents.svg=function(t,e,n,r,a){return void 0===a&&(a=`${t}-svg`),nt("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),""!=this.title&&(console.log(this.title),nt(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title)),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let r=this.visualComponents.svg;const a="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=(this.visualComponents.tooltip,r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`));e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",function(t){nt(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);r.selectAll(a).filter(t=>e.includes(t)).classed("highlighted",!0),r.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)}).on("mouseout",function(){nt(this).attr("r",2).attr("fill","#333"),r.selectAll(a).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)}),i}_renderHeatmap(t,e,n,r=5){let a=this.visualComponents.svg;const i=this.config.panels.main,o=a.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(a,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var Bi=Math.PI,Hi=2*Bi,Gi=Hi-1e-6;function qi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ri(){return new qi}function Vi(t){return function(){return t}}qi.prototype=Ri.prototype={constructor:qi,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,c=n-t,s=r-e,f=i-t,l=o-e,u=f*f+l*l;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(l*c-s*f)>1e-6&&a){var d=n-i,h=r-o,b=c*c+s*s,p=d*d+h*h,g=Math.sqrt(b),v=Math.sqrt(u),m=a*Math.tan((Bi-Math.acos((b+u-p)/(2*g*v)))/2),y=m/v,w=m/g;Math.abs(y-1)>1e-6&&(this._+="L"+(t+y*f)+","+(e+y*l)),this._+="A"+a+","+a+",0,0,"+ +(l*d>f*h)+","+(this._x1=t+w*c)+","+(this._y1=e+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e;var o=(n=+n)*Math.cos(r),c=n*Math.sin(r),s=t+o,f=e+c,l=1^i,u=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+f:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+s+","+f),n&&(u<0&&(u=u%Hi+Hi),u>Gi?this._+="A"+n+","+n+",0,1,"+l+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=f):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=Bi)+","+l+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};Math.PI;function Xi(t){this._context=t}function Wi(t){return new Xi(t)}function Zi(t){return t[0]}function Qi(t){return t[1]}function Ji(){var t=Zi,e=null,n=Vi(0),r=Qi,a=Vi(!0),i=null,o=Wi,c=null;function s(s){var f,l,u,d,h,b=s.length,p=!1,g=new Array(b),v=new Array(b);for(null==i&&(c=o(h=Ri())),f=0;f<=b;++f){if(!(f<b&&a(d=s[f],f,s))===p)if(p=!p)l=f,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),u=f-1;u>=l;--u)c.point(g[u],v[u]);c.lineEnd(),c.areaEnd()}p&&(g[f]=+t(d,f,s),v[f]=+n(d,f,s),c.point(e?+e(d,f,s):g[f],r?+r(d,f,s):v[f]))}if(h)return c=null,h+""||null}function f(){return function(){var t=Zi,e=Qi,n=Vi(!0),r=null,a=Wi,i=null;function o(o){var c,s,f,l=o.length,u=!1;for(null==r&&(i=a(f=Ri())),c=0;c<=l;++c)!(c<l&&n(s=o[c],c,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(s,c,o),+e(s,c,o));if(f)return i=null,f+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Vi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Vi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Vi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o}().defined(a).curve(o).context(i)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:Vi(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:Vi(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Vi(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:Vi(+t),r=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:Vi(+t),s):n},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Vi(+t),s):r},s.lineX0=s.lineY0=function(){return f().x(t).y(n)},s.lineY1=function(){return f().x(t).y(r)},s.lineX1=function(){return f().x(e).y(n)},s.defined=function(t){return arguments.length?(a="function"==typeof t?t:Vi(!!t),s):a},s.curve=function(t){return arguments.length?(o=t,null!=i&&(c=o(i)),s):o},s.context=function(t){return arguments.length?(null==t?i=c=null:c=o(i=t),s):i},s}function Ki(t){return t<0?-1:1}function to(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),c=(i*a+o*r)/(r+a);return(Ki(i)+Ki(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function eo(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function no(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,c=(i-r)/3;t._context.bezierCurveTo(r+c,a+c*e,i-c,o-c*n,i,o)}function ro(t){this._context=t}function ao(t){this._context=t}function io(){V.preventDefault(),V.stopImmediatePropagation()}function oo(t){return function(){return t}}function co(){V.stopImmediatePropagation()}function so(){V.preventDefault(),V.stopImmediatePropagation()}Xi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},ro.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:no(this,this._t0,eo(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,no(this,eo(this,n=to(this,t,e)),n);break;default:no(this,this._t0,n=to(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new ao(t)}.prototype=Object.create(ro.prototype)).point=function(t,e){ro.prototype.point.call(this,e,t)},ao.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}};var fo={name:"drag"},lo={name:"space"},uo={name:"handle"},ho={name:"center"},bo={name:"x",handles:["e","w"].map(_o),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},po={name:"y",handles:["n","s"].map(_o),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},go={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(_o),input:function(t){return t},output:function(t){return t}},vo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},mo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},yo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},wo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},xo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function _o(t){return{type:t}}function Mo(){return!V.button}function To(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function So(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function ko(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Ao(){return function(t){var e,n=To,r=Mo,a=Ra(o,"start","brush","end"),i=6;function o(e){var n=e.property("__brush",u).selectAll(".overlay").data([_o("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",vo.overlay).merge(n).each(function(){var t=So(this).extent;nt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([_o("selection")]).enter().append("rect").attr("class","selection").attr("cursor",vo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return vo[t.type]}),e.each(c).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function c(){var t=nt(this),e=So(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,e){return t.__brush.emitter||new f(t,e)}function f(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function l(){if(V.touches){if(V.changedTouches.length<V.touches.length)return so()}else if(e)return;if(r.apply(this,arguments)){var n,a,i,o,f,l,u,d,h,b,p,g,v,m=this,y=V.target.__data__.type,w="selection"===(V.metaKey?y="overlay":y)?fo:V.altKey?ho:uo,x=t===po?null:wo[y],_=t===bo?null:xo[y],M=So(m),T=M.extent,S=M.selection,k=T[0][0],A=T[0][1],$=T[1][0],C=T[1][1],E=x&&_&&V.shiftKey,D=at(m),N=D,I=s(m,arguments).beforestart();"overlay"===y?M.selection=S=[[n=t===po?k:D[0],i=t===bo?A:D[1]],[f=t===po?$:n,u=t===bo?C:i]]:(n=S[0][0],i=S[0][1],f=S[1][0],u=S[1][1]),a=n,o=i,l=f,d=u;var P=nt(m).attr("pointer-events","none"),U=P.selectAll(".overlay").attr("cursor",vo[y]);if(V.touches)P.on("touchmove.brush",j,!0).on("touchend.brush touchcancel.brush",F,!0);else{var L=nt(V.view).on("keydown.brush",function(){switch(V.keyCode){case 16:E=x&&_;break;case 18:w===uo&&(x&&(f=l-h*x,n=a+h*x),_&&(u=d-b*_,i=o+b*_),w=ho,z());break;case 32:w!==uo&&w!==ho||(x<0?f=l-h:x>0&&(n=a-h),_<0?u=d-b:_>0&&(i=o-b),w=lo,U.attr("cursor",vo.selection),z());break;default:return}so()},!0).on("keyup.brush",function(){switch(V.keyCode){case 16:E&&(g=v=E=!1,z());break;case 18:w===ho&&(x<0?f=l:x>0&&(n=a),_<0?u=d:_>0&&(i=o),w=uo,z());break;case 32:w===lo&&(V.altKey?(x&&(f=l-h*x,n=a+h*x),_&&(u=d-b*_,i=o+b*_),w=ho):(x<0?f=l:x>0&&(n=a),_<0?u=d:_>0&&(i=o),w=uo),U.attr("cursor",vo[y]),z());break;default:return}so()},!0).on("mousemove.brush",j,!0).on("mouseup.brush",F,!0);!function(t){var e=t.document.documentElement,n=nt(t).on("dragstart.drag",io,!0);"onselectstart"in e?n.on("selectstart.drag",io,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(V.view)}co(),$i(m),c.call(m),I.start()}function j(){var t=at(m);!E||g||v||(Math.abs(t[0]-N[0])>Math.abs(t[1]-N[1])?v=!0:g=!0),N=t,p=!0,so(),z()}function z(){var t;switch(h=N[0]-D[0],b=N[1]-D[1],w){case lo:case fo:x&&(h=Math.max(k-n,Math.min($-f,h)),a=n+h,l=f+h),_&&(b=Math.max(A-i,Math.min(C-u,b)),o=i+b,d=u+b);break;case uo:x<0?(h=Math.max(k-n,Math.min($-n,h)),a=n+h,l=f):x>0&&(h=Math.max(k-f,Math.min($-f,h)),a=n,l=f+h),_<0?(b=Math.max(A-i,Math.min(C-i,b)),o=i+b,d=u):_>0&&(b=Math.max(A-u,Math.min(C-u,b)),o=i,d=u+b);break;case ho:x&&(a=Math.max(k,Math.min($,n-h*x)),l=Math.max(k,Math.min($,f+h*x))),_&&(o=Math.max(A,Math.min(C,i-b*_)),d=Math.max(A,Math.min(C,u+b*_)))}l<a&&(x*=-1,t=n,n=f,f=t,t=a,a=l,l=t,y in mo&&U.attr("cursor",vo[y=mo[y]])),d<o&&(_*=-1,t=i,i=u,u=t,t=o,o=d,d=t,y in yo&&U.attr("cursor",vo[y=yo[y]])),M.selection&&(S=M.selection),g&&(a=S[0][0],l=S[1][0]),v&&(o=S[0][1],d=S[1][1]),S[0][0]===a&&S[0][1]===o&&S[1][0]===l&&S[1][1]===d||(M.selection=[[a,o],[l,d]],c.call(m),I.brush())}function F(){if(co(),V.touches){if(V.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),P.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,r=nt(t).on("dragstart.drag",null);e&&(r.on("click.drag",io,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(V.view,p),L.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),U.attr("cursor",vo.overlay),M.selection&&(S=M.selection),ko(S)&&(M.selection=null,c.call(m)),I.end()}}function u(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return o.move=function(e,n){e.selection?e.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,a=s(e,arguments),i=r.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),f=Re(i,o);function l(t){r.selection=1===t&&ko(o)?null:f(t),c.call(e),a.brush()}return i&&o?l:l(1)}):e.each(function(){var e=arguments,r=this.__brush,a=t.input("function"==typeof n?n.apply(this,e):n,r.extent),i=s(this,e).beforestart();$i(this),r.selection=null==a||ko(a)?null:a,c.call(this),i.start().brush().end()})},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,r){var a=V;t.sourceEvent=V,V=t;try{e.apply(n,r)}finally{V=a}}(new function(t,e,n){this.target=t,this.type=e,this.selection=n}(o,e,t.output(this.state.selection)),a.apply,a,[e,this.that,this.args])}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:oo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):n},o.filter=function(t){return arguments.length?(r="function"==typeof t?t:oo(!!t),o):r},o.handleSize=function(t){return arguments.length?(i=+t,o):i},o.on=function(){var t=a.on.apply(a,arguments);return t===a?o:t},o}(go)}const $o={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},Co={nrd:function(t){let e=(Et(t,.75)-Et(t,.25))/1.34;return 1.06*Math.min(Mt(t),e)*Math.pow(t.length,-.2)}};function Eo(t,e,n){return function(r){return e.map(e=>[e,function(t,e){var n,r=t.length,a=r,i=-1,o=0;if(null==e)for(;++i<r;)isNaN(n=_t(t[i]))?--a:o+=n;else for(;++i<r;)isNaN(n=_t(e(t[i],i,t)))?--a:o+=n;if(a)return o/a}(r,r=>t((e-r)/n))/n])}}class Do{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,r=.05,a,i=[-3,3],o="Y axis",c=!0,s=!0,f=0,l=!1,u=!1,d=!1,h=!1){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,e,n,r,a,i,o,c,s,f,l,u,d)}),void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=Tt(t)}this.groups=st().key(t=>t.group).entries(this.data),this.scale={x:jt().rangeRound([0,e]).domain(a||this.groups.map(t=>t.key)).paddingInner(r),subx:jt(),y:$n().rangeRound([n,0]).domain(i),z:$n()},this.groups.forEach(e=>{let r=e.key,a=e.values,o=this.groupInfo[r];if(e.index=this.scale.x.domain().indexOf(r),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}this.scale.subx.domain(a.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),a.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(mt),this._drawViolin(t,n,l,e.index))});var c=15;if(h){const e=jt().domain(a.map(t=>void 0==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(Ba(e))}if(s){c=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(Ba(this.scale.subx));f>0&&e.selectAll("text").style("text-anchor","start").attr("transform",`rotate(${f}, 2, 10)`)}});let b=s?55:0;if(this.xAxis=c?Ba(this.scale.x):Ba(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+b})`).call(this.xAxis).selectAll("text").style("text-anchor","start").attr("transform","rotate(30, -10, 10)"),b=5,this.yAxis=Ha(this.scale.y).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${b}, 0)`).call(this.yAxis),t.append("text").attr("y",-40).attr("x",-40).attr("class","violin-axis-label").attr("text-anchor","start").attr("transform","rotate(-90)").text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),u&&this._addGroupDivider(t),d){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}createTooltip(t){return this.tooltip=new Fi(t),nt(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new zi(t,e),this.toolbar}addBrush(t){const e=Ao();e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,r=V.selection;if(void 0===e)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),a=Math.floor(r[1][0]/this.scale.x.bandwidth());return e>=n&&e<=a}));const n=Math.floor(this.scale.y.invert(r[1][1])),a=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,a]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let a=t.transition().duration(750);t.select(".axis--x").transition(a).call(this.xAxis),t.select(".axis--y").transition(a).call(this.yAxis),this.groups.forEach((e,n)=>{let r=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(a).attr("d",Ji().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=Et(n.values,.25),c=Et(n.values,.75);i.select(".violin-ir").transition(a).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(o)));const s=Nt(n.values);i.select(".violin-median").transition(a).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(s)).attr("y2",this.scale.y(s))})})}_drawViolin(t,e,n,r){let a=Eo($o.gaussian,this.scale.y.ticks(100),Co.nrd(e.values));const i=Tt(e.values),o=a(e.values).filter(t=>t[0]>i[0]&&t[0]<i[1]);let c=Dt(o,t=>Math.abs(t[1]));this.scale.z.domain([-c,c]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const s=t.append("g").attr("id",`violin${r}-${e.label}`);let f=Ji().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const l=s.append("path").datum(o).attr("d",f).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:r%2==0?"#90c1c1":"#94a8b8"),u=Et(e.values,.25),d=Et(e.values,.75),h=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(d-u),r=Dt(e.values.filter(t=>t<d+1.5*n)),a=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r}(e.values.filter(t=>t>u-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(a)).style("stroke","#fff")}s.append("rect").attr("x",this.scale.z(-h)).attr("y",this.scale.y(d)).attr("width",Math.abs(this.scale.z(-h)-this.scale.z(h))).attr("height",Math.abs(this.scale.y(d)-this.scale.y(u))).attr("class","violin-ir");const b=Nt(e.values);s.append("line").attr("x1",this.scale.z(-h)).attr("x2",this.scale.z(h)).attr("y1",this.scale.y(b)).attr("y2",this.scale.y(b)).attr("class","violin-median"),s.on("mouseover",()=>{l.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+b.toPrecision(4)+"<br/>")}),s.on("mouseout",()=>{l.classed("highlighted",!1)})}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}}function No(t,e,n,r=pt(),a=!0){const i=a?r.topInTissueFiltered:r.topInTissue,o=0==$("#filterInfo").length?$("<div/>").attr("id","filterInfo").appendTo("#messageBox"):$("#filterInfo");a?o.html("Mitochondrial genes are excluded.<br/>"):o.html("Mitochondrial genes are included.<br/>"),u(i+t).then(function(i){const o="topExpressedGene";if(!i.hasOwnProperty(o))throw console.error(i),"Parse Error: required json attribute is missing: "+o;const c=i[o].map(t=>{if(!t.hasOwnProperty("gencodeId"))throw console.error(t),"Parse Error: required json attribute is missing: gencodeId";return t.gencodeId});Io(e,n,c,void 0,r,a,function(){Po(t)},t)}).catch(function(t){console.error(t)})}function Io(t,e,n,r,a=pt(),i,o,c){$("#spinner").show(),$(`#${t}`).empty(),$(`#${e}`).empty();const s=$("<div/><br/>").attr("class","col-xs-12 col-md-12").css("color","firebrick").appendTo(`#${t}`);let f="";n.length>50&&(f="Warning: Too many genes. Input list truncated to the first 50. <br/>",n=n.slice(0,50)),Promise.all([u(a.tissue),u(a.geneId+n.join(","))]).then(function(l){const d=gt(l[0]),h=function(t){if(!t.hasOwnProperty("geneId"))throw"Gene web service parsing error";return t.geneId}(l[1]);f+=function(t,e,n){let r="";if(0==e.length)r="Fatal Error: the gene list is empty.<br/>";else if(e.length<n.length){let t=[];e.forEach(e=>{t.push(e.gencodeId),t.push(e.geneSymbolUpper),t.push(e.ensemblId)});let a=n.filter(e=>!t.includes(e.toLowerCase())&&!t.includes(e.toUpperCase()));a.length>0&&(r=`Warning: Not all genes are found: ${a.join(",")}<br/>`)}return r}(0,h,n);const b=h.map(t=>t.gencodeId).join(","),p=void 0===r?void 0:r.join(",");u(void 0===p?a.medGeneExp+"&gencodeId="+b:a.medGeneExp+"&gencodeId="+b+"&tissueSiteDetailId="+p).then(function(n){$("#spinner").hide();const l=function(t){const e="medianGeneExpression";if(!t.hasOwnProperty(e))throw"expression data json format error.";return 0==t[e].length?"No expression data found.":void 0}(n);if(void 0!==l)s.html(f+l);else{s.html(f);const l=function(t,e=!0){const n="medianGeneExpression";if(!t.hasOwnProperty(n))throw"Parse Error: required json attribute is missing: "+n;if(0==t[n].length)throw"parseMedianExpression finds no data.";["median","tissueSiteDetailId","gencodeId"].forEach(e=>{if(!t[n][0].hasOwnProperty(e))throw console.error(t[n][0]),`Parse Error: required json attribute is missingp: ${e}`});let r=t[n];return r.forEach(function(t){t.value=e?Math.log10(Number(t.median)+1):Number(t.median),t.x=t.tissueSiteDetailId,t.y=t.gencodeId,t.originalValue=Number(t.median),t.id=t.gencodeId}),r}(n),u={root:t,violin:e,svg:`${t}-svg`,tooltip:"heatmapTooltip",toolbar:"heatmapToolbar",clone:"heatmapClone",buttons:{save:"heatmapSave",filter:"heatmapFilter",sort:"heatmapSortTissue",cluster:"heatmapClusterTissue"}};0==$(`#${u.tooltip}`).length&&$("<div/>").attr("id",u.tooltip).appendTo($("body")),["toolbar","clone"].forEach(t=>{$("<div/>").attr("id",u[t]).appendTo($(`#${u.root}`))});const b=25,p=25;let g=void 0===r?Math.ceil(window.innerWidth/d.length):Math.ceil(window.innerWidth/r.length);g=g>b?b:g<p?p:g;let v={top:50,right:250,bottom:170,left:10},m=100,y=void 0===r?g*d.length+m+v.right+v.left:g*r.length+m+v.right+v.left;const w=new Ta(y,m,100,v,12,10),x=new Oi(n.clusters.tissue,n.clusters.gene,l,"YlGnBu",2,w);h.length<3?x.render(u.root,u.svg,!0,!1):x.render(u.root,u.svg);const _=d.reduce((t,e)=>{if(!e.hasOwnProperty("tissueSiteDetailId"))throw"tissue has not attr tissueSiteDetailId";return t[e.tissueSiteDetailId]=e,t},{}),M=x.data.heatmap.reduce((t,e,n)=>{if(!e.hasOwnProperty("gencodeId"))throw"gene has no attr gencodeId";return t[e.gencodeId]=e,t},{});x.createTooltip(u.tooltip),nt("#"+x.config.panels.main.id).selectAll(".exp-map-xlabel").text(t=>void 0===_[t]?t:_[t].tissueSiteDetail),nt("#"+x.config.panels.main.id).selectAll(".exp-map-ylabel").text(t=>void 0===M[t]?t:M[t].geneSymbol),Uo(x,_),function(t,e,n,r=pt(),a,i){let o=t.createToolbar(e.toolbar,t.tooltip);o.createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone);void 0!==a&&(()=>{const t=e.buttons.filter;o.createButton(t,"fa-filter"),nt(`#${t}`).on("click",function(){No(i,e.root,e.violin,r,!a)}).on("mouseover",function(){a?o.tooltip.show("Include Mitochondrial Genes"):o.tooltip.show("Exclude Mitochondrial Genes")}).on("mouseout",function(){o.tooltip.hide()})})();(()=>{const r=e.buttons.sort;o.createButton(r,"fa-sort-alpha-down"),nt(`#${r}`).on("click",function(){nt("#"+t.config.panels.top.id).style("display","None");let e=t.objects.heatmap.xList.sort();zo(e,t,n)}).on("mouseover",function(){o.tooltip.show("Sort Tissues Alphabetically")}).on("mouseout",function(){o.tooltip.hide()})})(),(()=>{const r=e.buttons.cluster;o.createButton(r,"fa-code-branch"),nt(`#${r}`).on("click",function(){nt("#"+t.config.panels.top.id).style("display","Block");let e=t.objects.columnTree.xScale.domain();zo(e,t,n)}).on("mouseover",function(){o.tooltip.show("Cluster Tissues")}).on("mouseout",function(){o.tooltip.hide()})})()}(x,u,_,a,i,c),function(t,e,n,r=pt()){const a=t.visualComponents.svg,i=t.tooltip;t.data.external=[];const o=_a();(function(t){var e=[];for(var n in t)e.push(n);return e})(n).forEach((t,e)=>{n[t].color=o[e]});a.selectAll(".exp-map-cell").on("mouseover",function(r){const a=nt(this);t.objects.heatmap.cellMouseover(a);let o=void 0===e[r.x]?r.x:e[r.x].tissueSiteDetail,c=void 0===n[r.y]?r.y:n[r.y].geneSymbol;i.show(`Tissue: ${o}<br/> Gene: ${c}<br/> Median TPM: ${parseFloat(r.originalValue.toExponential()).toPrecision(4)}`)}).on("mouseout",function(t){a.selectAll("*").classed("highlighted",!1),i.hide()}),a.selectAll(".exp-map-ylabel").style("cursor","pointer").on("click",function(a){let i=nt(this),o="";i.classed("clicked")?(i.classed("clicked",!1),o="delete"):(i.classed("clicked",!0),o="add");Lo(o,a,n,e,t,r)})}(x,_,M,a),void 0!=o&&o()}}).catch(function(t){console.error(t)})}).catch(function(t){console.error(t)})}function Po(t){it(".exp-map-xlabel").filter(e=>e==t).classed("query",!0)}function Uo(t,e){const n=t.config.panels.main.id,r=t.objects.heatmap;let a=nt(`#${n}`).selectAll(".exp-map-xcolor").data(r.xList),i=nt(`#${n}`).selectAll(".leaf-color").data(r.xList);a.attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[1]+5),i.attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[0]-10),a.enter().append("rect").attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[1]+5).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("exp-map-xcolor",!0).merge(a).style("fill",t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`),a.exit().remove(),t.objects.heatmap.yScale.domain().length>15&&(i.enter().append("rect").attr("x",t=>r.xScale(t)).attr("y",t=>r.yScale.range()[0]-10).attr("width",r.xScale.bandwidth()).attr("height",.5*r.yScale.bandwidth()).classed("leaf-color",!0).merge(i).style("fill",t=>void 0===e[t]?"#000000":`#${e[t].colorHex}`),i.exit().remove())}function Lo(t,e,n,r,a,i=pt()){switch(t){case"delete":{a.data.external=a.data.external.filter(t=>t.gencodeId!=e);jo(a.data.external,a,r);break}case"add":{const t=i.geneExp+e;const o={};o[e]=n[e].color;const c=a.objects.heatmap.xScale.domain();u(t).then(function(t){if(a.data.external===undefined)a.data.external=[];a.data.external=a.data.external.concat(vt(t,true,o)).filter(t=>{return c.indexOf(t.group)>-1});jo(a.data.external,a,r)}).catch(function(t){console.error(t)});break}default:{console.warn("action not understood.");break}}}function jo(t,e,n){const r={root:"violinRoot",tooltip:"violinTooltip",toolbar:"violinToolbar",clone:"violinClone",chart:"violinPlot",svg:"violinSvg",buttons:{save:"violinSave"}},a=`#${r.root}`,i=`#${r.tooltip}`;if(0==$(a).length)throw"Violin Plot Error: rootId does not exist.";if(0==$(i).length&&$("<div/>").attr("id",r.tooltip).appendTo($("body")),nt(a).selectAll("*").remove(),["toolbar","chart","clone"].forEach(t=>{$("<div/>").attr("id",r[t]).appendTo($(a))}),0==t.length)return void nt(a).style("opacity",0);let o=e.objects.heatmap.xScale.domain().map((t,e)=>({id:t,name:n[t].tissueSiteDetail}));const c=t.reduce((t,e)=>(t[e.label]=1,t),{}),s=Object.keys(c).length;if(0==s)return void nt(a).style("opacity",0);nt(a).style("opacity",1);const f=function(t=50,e=50,n=50,r=50){return{top:t,right:e,bottom:n,left:r}}(50,50,150,e.config.panels.main.x);let l=20*Object.keys(c).length*o.length;const u=function(t=1200,e=250,n=_setMargins()){return{width:t,height:e,outerWidth:t+(n.left+n.right),outerHeight:e+(n.top+n.bottom)}}(l=l<e.config.panels.main.w?e.config.panels.main.w:l,150,f),d=nt(`#${r.chart}`).append("svg").attr("width",u.outerWidth).attr("height",u.outerHeight).attr("id",r.svg).append("g").attr("transform",`translate(${f.left}, ${f.top})`),h=new Do(t),b=h.createTooltip(r.tooltip);h.createToolbar(r.toolbar,b).createDownloadSvgButton(r.buttons.save,r.svg,`${r.root}-save.svg`,r.clone);const p=1!=s;h.render(d,u.width,u.height,.3,o.map(t=>t.id),[],"log10(TPM)",!0,!1,0,!1,p,!0);const g=Number(d.select("#violinLegend").select("rect").attr("width"));let v=Number(nt(`#${r.chart}`).select("svg").attr("width"));v=v<g+150?g+150:v,nt(`#${r.chart}`).select("svg").attr("width",v),function(t,e,n,r="top"){e.append("g").selectAll(".tcolor").data(t.scale.x.domain()).enter().append("rect").classed("tcolor",!0).attr("x",e=>t.scale.x(e)).attr("y",e=>"top"==r?t.scale.y.range()[1]-5:t.scale.y.range()[0]-5).attr("width",e=>t.scale.x.bandwidth()).attr("height",5).style("stroke-width",0).style("fill",t=>`#${n[t].colorHex}`).style("opacity",.7)}(h,d,n,"bottom"),function(t,e){t.select(".violin-x-axis").selectAll("text").text(t=>void 0===e[t]?t:e[t].tissueSiteDetail)}(d,n)}function zo(t,e,n){let r=void 0;const a=nt(".exp-map-xlabel.query");a.empty()||(r=a.datum());const i=nt("#"+e.config.panels.main.id),o=e.config.panels.main;e.objects.heatmap.redraw(i,t,e.objects.heatmap.yList,o),it(".exp-map-xlabel").text(t=>void 0===n[t]?t:n[t].tissueSiteDetail).classed("query",!1),Uo(e,n),void 0!==r&&Po(r),nt("#violinRoot").style("opacity",0),it(".exp-map-ylabel").classed("clicked",!1),e.data.external=void 0}return t.createDatasetMenu=function(t,e=pt().tissue){!function(t,e=pt().tissue){u(e).then(function(e){let n=gt(e);n.forEach(t=>{t.id=t.tissueSiteDetailId,t.text=t.tissueSiteDetail}),n.sort((t,e)=>t.tissueSiteDetail<e.tissueSiteDetail?-1:t.tissueSiteDetail>e.tissueSiteDetail?1:0),$(`#${t}`).select2({placeholder:"Select a data set",data:n})}).catch(function(t){console.error(t)})}(t,e)},t.launchTopExpressed=No,t.launch=function(t,e,n,r,a,i=pt()){u(i.tissueSites).then(function(o){let c=function(t,e=!1){const n=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueSiteDetail";if(!t.hasOwnProperty(r))throw"Fatal Error: parseTissueSites input error.";const a=0==e?t[r]:t[r].filter(t=>!n.includes(t.tissueSiteDetailId));["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!a[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`});let i=a.reduce((t,e)=>{let n=e.tissueSite,r={id:e.tissueSiteDetailId,name:e.tissueSiteDetail};return t.hasOwnProperty(n)||(t[n]=[]),t[n].push(r),t},{});return Object.keys(i).forEach(t=>{if(1==i[t].length){let e=i[t][0];delete i[t],i[e.name]=[e]}}),i}(o,!1);!function(t,e,n=!1){const r="tissue-group-main-level";nt(`#${e}`).selectAll("*").remove();const a=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${e}`));n?$(`<label class=${r}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a):$(`<label class=${r}>`+'<input type="radio" name="allTissues" value="all"> All </label> '+`<label class=${r}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(a),$('input[name="allTissues"]').change(function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}});let i=Object.keys(t).sort();const o=St(0,4).map(t=>$(`<div id="section${t}" class="col-xs-12 col-md-3">`).appendTo($(`#${e}`)));i.forEach(function(e){let n=t[e];const a=e.replace(/ /g,"_");let i=o[3];"Brain"==e?i=o[0]:e.match(/^[A-D]/)?i=o[1]:e.match(/^[E-P]/)&&(i=o[2]),$(`<label class=${r}>`+`<input type="checkbox" id="${a}" class="tissueGroup"> `+'<span class="checkmark"></span>'+`<span>${e}</span>`+"</label><br/>").appendTo(i),n.length>1&&n.sort((t,e)=>t.id>e.id?1:t.id<e.id?-1:0).forEach(function(t,e){let r=$("<label class=tissue-group-sub-level>"+`<input type="checkbox" id="${t.id}" class="tissueSubGroup"> `+'<span class="checkmark"></span>'+`<span>${t.name}</span>`+"</label><br/>").appendTo(i);e==n.length-1&&r.addClass("last-site"),r.click(function(){$('input[name="allTissues"]').prop("checked",!1)})}),$("#"+a).click(function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+a).is(":checked")?n.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)}):n.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)})})})}(c,e),$(`#${n}`).click(function(){$(`#${t}`).removeClass("show"),$(`#${t}`).removeClass("in");let n=$("#genes").val().replace(/ /g,"").toUpperCase().split(",").filter(t=>""!=t);if(0==n.length)throw alert("Input Error: At least one gene must be provided."),"Gene input error";let o=function(t,e){let n=[];return $(`#${e}`).find(":input").each(function(){if($(this).is(":checked")){const e=$(this).attr("id");if($(this).hasClass("tissueGroup")){let r=e.replace(/_/g," ");1==t[r].length&&n.push(t[r][0].id)}else n.push(e)}}),n.filter(t=>void 0!==t)}(c,e);if(0==o.length)throw alert("Input Error: At least one tissue must be selected."),"Tissue input error";Io(r,a,n,o,i)})}).catch(function(t){console.error(t)})},t.searchById=Io,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gtZ2VuZS1leHByZXNzaW9uLmJ1bmRsZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL3Rzdi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvanNvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc291cmNlRXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tb3VzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvZ3RleERhdGFQYXJzZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvb3JkaW5hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYmFuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbWF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbGFiLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kdXJhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvc2Vjb25kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9ob3VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjSG91ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb0Zvcm1hdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvUGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jb2xvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9yYW1wLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvY2F0ZWdvcnkxMC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL0FjY2VudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL0RhcmsyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFpcmVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1Bhc3RlbDIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQxLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0Mi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QUkduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1BpWUcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkR3kuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9TcGVjdHJhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVQdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvR25CdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvT3JSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdUduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdVJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9SZFB1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxPclJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvQmx1ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmV5cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1B1cnBsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9SZWRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvT3Jhbmdlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9yYWluYm93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9zaW5lYm93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS92aXJpZGlzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9jb2xvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3NlcXVlbnRpYWwuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQWZ0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEJlZm9yZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zdW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9wYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2FuY2VzdG9ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9kZXNjZW5kYW50cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9sZWF2ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGlua3MuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvRGVuZHJvZ3JhbS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvbmV3aWNrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvc2luLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2VsYXN0aWMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL3RyYW5zaXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY3ViaWMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL1Rvb2xiYXIuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL3V0aWxzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9Ub29sdGlwLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9IZWF0bWFwLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9EZW5kcm9IZWF0bWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9tb25vdG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvbm9ldmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9kcmFnLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ldmVudC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMva2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWFuLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9Hcm91cGVkVmlvbGluLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9CYXRjaEdlbmVFeHByZXNzaW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2tleXMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2d0ZXhNZW51QnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHRleHQgKz0gXCJcIikgPyBcIlxcXCJcIiArIHRleHQucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdGV4dDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsInZhciBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCFlbGVtZW50Lm1hdGNoZXMpIHtcbiAgICB2YXIgdmVuZG9yTWF0Y2hlcyA9IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmVuZG9yTWF0Y2hlcy5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBtYXRjaGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHtFbnRlck5vZGV9IGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4uL2NvbnN0YW50XCI7XG5cbnZhciBrZXlQcmVmaXggPSBcIiRcIjsgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG5cbmZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIG5vZGUsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxuICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgLy8gUHV0IGFueSByZW1haW5pbmcgZGF0YSBpbnRvIGVudGVyLlxuICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGRvbuKAmXQgZml0IGludG8gZXhpdC5cbiAgZm9yICg7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRLZXkocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSwga2V5KSB7XG4gIHZhciBpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVCeUtleVZhbHVlID0ge30sXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgICAgaWYgKGtleVZhbHVlIGluIG5vZGVCeUtleVZhbHVlKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZXNbaV1dID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIGRhdGEgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBqID0gLTE7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGQpIHsgZGF0YVsrK2pdID0gZDsgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICBwYXJlbnRzID0gdGhpcy5fcGFyZW50cyxcbiAgICAgIGdyb3VwcyA9IHRoaXMuX2dyb3VwcztcblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQodmFsdWUpO1xuXG4gIGZvciAodmFyIG0gPSBncm91cHMubGVuZ3RoLCB1cGRhdGUgPSBuZXcgQXJyYXkobSksIGVudGVyID0gbmV3IEFycmF5KG0pLCBleGl0ID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdLFxuICAgICAgICBncm91cCA9IGdyb3Vwc1tqXSxcbiAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgIGRhdGEgPSB2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cyksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyZShhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVWYWx1ZShub2RlLCBuYW1lKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIHx8IGRlZmF1bHRWaWV3KG5vZGUpLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZShmYWxzZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZSh0cnVlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJ2YXIgZmlsdGVyRXZlbnRzID0ge307XG5cbmV4cG9ydCB2YXIgZXZlbnQgPSBudWxsO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQpKSB7XG4gICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICB2YXIgZXZlbnQwID0gZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXZlbnQgPSBldmVudDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB3cmFwID0gZmlsdGVyRXZlbnRzLmhhc093blByb3BlcnR5KHR5cGVuYW1lLnR5cGUpID8gZmlsdGVyQ29udGV4dExpc3RlbmVyIDogY29udGV4dExpc3RlbmVyO1xuICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gd3JhcCh2YWx1ZSwgaSwgZ3JvdXApO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8uY2FwdHVyZSA9IGNhcHR1cmUpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBjYXB0dXJlOiBjYXB0dXJlfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21FdmVudChldmVudDEsIGxpc3RlbmVyLCB0aGF0LCBhcmdzKSB7XG4gIHZhciBldmVudDAgPSBldmVudDtcbiAgZXZlbnQxLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gIGV2ZW50ID0gZXZlbnQxO1xuICB0cnkge1xuICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBldmVudCA9IGV2ZW50MDtcbiAgfVxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmRcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcIi4vc2VsZWN0aW9uL29uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VycmVudCA9IGV2ZW50LCBzb3VyY2U7XG4gIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xuICByZXR1cm4gY3VycmVudDtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSBldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICByZXR1cm4gcG9pbnQobm9kZSwgZXZlbnQpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgZXZlbnQpIHtcbiAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG5cbiAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgfVxuXG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBub2RlLm5leHRTaWJsaW5nKSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2VcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEd0ZXhVcmxzKCl7XG4gICAgY29uc3QgaG9zdCA9ICdodHRwczovL2Rldi5ndGV4cG9ydGFsLm9yZy9yZXN0L3YxLyc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gZXF0bCBEYXNoYm9hcmQgc3BlY2lmaWNcbiAgICAgICAgZHluZXF0bDogaG9zdCArICdhc3NvY2lhdGlvbi9keW5lcXRsJyxcbiAgICAgICAgc25wOiBob3N0ICsgJ3JlZmVyZW5jZS92YXJpYW50P2Zvcm1hdD1qc29uJnNucElkPScsXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArICdyZWZlcmVuY2UvdmFyaWFudD9mb3JtYXQ9anNvbiZ2YXJpYW50SWQ9JyxcblxuICAgICAgICAvLyB0cmFuc2NyaXB0LCBleG9uLCBqdW5jdGlvbiBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5FeG9uRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuICAgICAgICB0cmFuc2NyaXB0RXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAganVuY3Rpb25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdDogaG9zdCArICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZXhvbjogaG9zdCArICdyZWZlcmVuY2UvZXhvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsOiBob3N0ICsgJ3JlZmVyZW5jZS9jb2xsYXBzZWRHZW5lTW9kZWxFeG9uP3VuZmlsdGVyZWQ9ZmFsc2UmZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbFVuZmlsdGVyZWQ6IGhvc3QgKyAncmVmZXJlbmNlL2NvbGxhcHNlZEdlbmVNb2RlbEV4b24/dW5maWx0ZXJlZD10cnVlJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiB2aW9saW4gcGxvdCBzcGVjaWZpY1xuICAgICAgICBnZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vZ2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgLy8gZ2VuZSBleHByZXNzaW9uIGhlYXQgbWFwIHNwZWNpZmljXG4gICAgICAgIG1lZEdlbmVFeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5HZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZoY2x1c3Rlcj10cnVlJnBhZ2Vfc2l6ZT0xMDAwMCcsXG5cbiAgICAgICAgLy8gdG9wIGV4cHJlc3NlZCBnZW5lIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgdG9wSW5UaXNzdWVGaWx0ZXJlZDogaG9zdCArICdleHByZXNzaW9uL3RvcEV4cHJlc3NlZEdlbmU/ZGF0YXNldElkPWd0ZXhfdjcmZmlsdGVyTXRHZW5lPXRydWUmc29ydF9ieT1tZWRpYW4mc29ydERpcmVjdGlvbj1kZXNjJnBhZ2Vfc2l6ZT01MCZ0aXNzdWVTaXRlRGV0YWlsSWQ9JyxcbiAgICAgICAgdG9wSW5UaXNzdWU6IGhvc3QgKyAnZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lP2RhdGFzZXRJZD1ndGV4X3Y3JnNvcnRfYnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlX3NpemU9NTAmdGlzc3VlU2l0ZURldGFpbElkPScsXG5cbiAgICAgICAgZ2VuZUlkOiBob3N0ICsgJ3JlZmVyZW5jZS9nZW5lSWQ/Zm9ybWF0PWpzb24mcmVsZWFzZT12NyZnZW5lSWQ9JyxcblxuICAgICAgICAvLyB0aXNzdWUgbWVudSBzcGVjaWZpY1xuICAgICAgICB0aXNzdWU6ICBob3N0ICsgJ21ldGFkYXRhL3Rpc3N1ZVNpdGVEZXRhaWw/Zm9ybWF0PWpzb24nLFxuXG4gICAgICAgIHRpc3N1ZVNpdGVzOiBob3N0ICsgJ21ldGFkYXRhL3Rpc3N1ZVNpdGVEZXRhaWw/Zm9ybWF0PWpzb24nLFxuXG4gICAgICAgIC8vIGxvY2FsIHN0YXRpYyBmaWxlc1xuICAgICAgICBzYW1wbGU6ICd0bXBTdW1tYXJ5RGF0YS9ndGV4LlNhbXBsZS5jc3YnLFxuICAgICAgICBybmFzZXFDcmFtOiAndG1wU3VtbWFyeURhdGEvcm5hc2VxX2NyYW1fZmlsZXNfdjdfZGJHYVBfMDExNTE2LnR4dCcsXG4gICAgICAgIHdnc0NyYW06ICd0bXBTdW1tYXJ5RGF0YS93Z3NfY3JhbV9maWxlc192N19oZzM4X2RiR2FQXzAxMTUxNi50eHQnLFxuXG4gICAgICAgIC8vIGZpcmVDbG91ZFxuICAgICAgICBmY0JpbGxpbmc6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS9wcm9maWxlL2JpbGxpbmcnLFxuICAgICAgICBmY1dvcmtTcGFjZTogJ2h0dHBzOi8vYXBpLmZpcmVjbG91ZC5vcmcvYXBpL3dvcmtzcGFjZXMnLFxuICAgICAgICBmY1BvcnRhbFdvcmtTcGFjZTogJ2h0dHBzOi8vcG9ydGFsLmZpcmVjbG91ZC5vcmcvI3dvcmtzcGFjZXMnXG4gICAgfVxufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnZW5lcyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVzKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUlkJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ0dlbmUgd2ViIHNlcnZpY2UgcGFyc2luZyBlcnJvcic7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIHRpc3N1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlcyhkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVNpdGVEZXRhaWwnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlVGlzc3VlcyBpbnB1dCBlcnJvci4nO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAndGlzc3VlU2l0ZURldGFpbCcsICdjb2xvckhleCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZVRpc3N1ZSBhdHRyIG5vdCBmb3VuZDogJyArIGQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGlzc3Vlcztcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlIGdyb3Vwc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gZm9yRXF0bCB7Qm9vbGVhbn1cbiAqIEByZXR1cm5zIHtEaWN0aW9uYXJ5fSBvZiBsaXN0cyBvZiB0aXNzdWVzIGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZVNpdGVzKGRhdGEsIGZvckVxdGw9ZmFsc2Upe1xuICAgIC8vIHRoZSBsaXN0IG9mIGludmFsaWRlIGVxdGwgdGlzc3VlcyBkdWUgdG8gc2FtcGxlIHNpemUgPCA3MFxuICAgIC8vIGEgaGFyZC1jb2RlZCBsaXN0IGJlY2F1c2UgdGhlIHNhbXBsZSBzaXplIGlzIG5vdCBlYXN5IHRvIHJldHJpZXZlXG4gICAgY29uc3QgaW52YWxpZFRpc3N1ZXMgPSBbJ0JsYWRkZXInLCAnQ2Vydml4X0VjdG9jZXJ2aXgnLCAnQ2Vydml4X0VuZG9jZXJ2aXgnLCAnRmFsbG9waWFuX1R1YmUnLCAnS2lkbmV5X0NvcnRleCddO1xuXG4gICAgY29uc3QgYXR0ciA9ICd0aXNzdWVTaXRlRGV0YWlsJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZVRpc3N1ZVNpdGVzIGlucHV0IGVycm9yLic7XG4gICAgY29uc3QgdGlzc3VlcyA9IGZvckVxdGw9PWZhbHNlP2RhdGFbYXR0cl06ZGF0YVthdHRyXS5maWx0ZXIoKGQpPT57cmV0dXJuICFpbnZhbGlkVGlzc3Vlcy5pbmNsdWRlcyhkLnRpc3N1ZVNpdGVEZXRhaWxJZCl9KTsgLy8gYW4gYXJyYXkgb2YgdGlzc3VlU2l0ZURldGFpbElkIG9iamVjdHNcblxuICAgIC8vIGJ1aWxkIHRoZSB0aXNzdWVHcm91cHMgbG9va3VwIGRpY3Rpb25hcnkgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWUgKGkuZS4gdGhlIHRpc3N1ZSBtYWluIHNpdGUgbmFtZSlcbiAgICBbJ3Rpc3N1ZVNpdGUnLCAndGlzc3VlU2l0ZURldGFpbElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWwnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IGBwYXJzZVRpc3N1ZVNpdGVzIGF0dHIgZXJyb3IuICR7ZH0gaXMgbm90IGZvdW5kYDtcbiAgICB9KTtcbiAgICBsZXQgdGlzc3VlR3JvdXBzID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PntcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IGQudGlzc3VlU2l0ZTtcbiAgICAgICAgbGV0IHNpdGUgPSB7XG4gICAgICAgICAgICBpZDogZC50aXNzdWVTaXRlRGV0YWlsSWQsXG4gICAgICAgICAgICBuYW1lOiBkLnRpc3N1ZVNpdGVEZXRhaWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhcnIuaGFzT3duUHJvcGVydHkoZ3JvdXBOYW1lKSkgYXJyW2dyb3VwTmFtZV0gPSBbXTsgLy8gaW5pdGlhdGUgYW4gYXJyYXlcbiAgICAgICAgYXJyW2dyb3VwTmFtZV0ucHVzaChzaXRlKTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCB7fSk7XG5cbiAgICAvLyBtb2RpZnkgdGhlIHRpc3N1ZSBncm91cHMgdGhhdCBoYXZlIG9ubHkgYSBzaW5nbGUgc2l0ZVxuICAgIC8vIGJ5IHJlcGxhY2luZyB0aGUgZ3JvdXAncyBuYW1lIHdpdGggdGhlIHNpbmdsZSBzaXRlJ3MgbmFtZSAtLSBmb3IgYSBiZXR0ZXIgQWxwaGFiZXRpY2FsIG9yZGVyIG9mIHRoZSB0aXNzdWUgZ3JvdXBzXG5cbiAgICBPYmplY3Qua2V5cyh0aXNzdWVHcm91cHMpLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICh0aXNzdWVHcm91cHNbZF0ubGVuZ3RoID09IDEpeyAvLyBhIHNpbmdsZS1zaXRlIGdyb3VwXG4gICAgICAgICAgICBsZXQgc2l0ZSA9IHRpc3N1ZUdyb3Vwc1tkXVswXTsgLy8gdGhlIHNpbmdsZSBzaXRlXG4gICAgICAgICAgICBkZWxldGUgdGlzc3VlR3JvdXBzW2RdOyAvLyByZW1vdmUgdGhlIG9sZCBncm91cCBpbiB0aGUgZGljdGlvbmFyeVxuICAgICAgICAgICAgdGlzc3VlR3JvdXBzW3NpdGUubmFtZV0gPSBbc2l0ZV07IC8vIGNyZWF0ZSBhIG5ldyBncm91cCB3aXRoIHRoZSBzaXRlJ3MgbmFtZVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGlzc3VlR3JvdXBzO1xuXG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4b25zXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNb2RlbEV4b25zKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnY29sbGFwc2VkR2VuZU1vZGVsRXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpe1xuICAgICAgICBjb25zb2xlLmVycm9yKGpzb24pO1xuICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IFJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIH1cbiAgICAvLyBzYW5pdHkgY2hlY2tcbiAgICBbJ3N0YXJ0JywgJ2VuZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghanNvblthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ1BhcnNlIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICB9KTtcbiAgICByZXR1cm4ganNvblthdHRyXS5tYXAoKGQpPT57XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGp1bmN0aW9uc1xuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBqdW5jdGlvbnNcbiAqIC8vIGp1bmN0aW9uIGFubm90YXRpb25zIGFyZSBub3Qgc3RvcmVkIGluIE1vbmdvXG4gICAgLy8gc28gaGVyZSB3ZSB1c2UgdGhlIGp1bmN0aW9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2UgdG8gcGFyc2UgdGhlIGp1bmN0aW9uIElEIGZvciBpdHMgZ2Vub21pYyBsb2NhdGlvblxuICAgIC8vIGFzc3VtaW5nIHRoYXQgZWFjaCB0aXNzdWUgaGFzIHRoZSBzYW1lIGp1bmN0aW9ucyxcbiAgICAvLyB0byBncmFiIGFsbCB0aGUga25vd24ganVuY3Rpb25zIG9mIGEgZ2VuZSwgd2Ugb25seSBuZWVkIHRvIHF1ZXJ5IG9uZSB0aXNzdWVcbiAgICAvLyBoZXJlIHdlIGFyYml0cmFyaWx5IHBpY2sgTGl2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUp1bmN0aW9ucyhqc29uKXtcblxuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNlIEVycm9yOiBwYXJzZUp1bmN0aW9ucyBpbnB1dCBlcnJvci4gJyArIGF0dHI7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgLy8gdXNlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBqc29uIG9iamVjdHMgYXMgYSB0ZXN0IGNhc2VcbiAgICAgICAgaWYoIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqc29uW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganVuY3Rpb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBkO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0uZmlsdGVyKChkKT0+ZC50aXNzdWVTaXRlRGV0YWlsSWQ9PSdMaXZlcicpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSBkLmp1bmN0aW9uSWQuc3BsaXQoJ18nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb206IHBvc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbVN0YXJ0OiBwb3NbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21FbmQ6IHBvc1syXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdW5jdGlvbklkOiBkLmp1bmN0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBpc29mb3JtcyBmcm9tIHRoZSBHVEV4IHdlYiBzZXJ2aWNlOiAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/cmVsZWFzZT12NyZnZW5jb2RlX2lkPSdcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogcmV0dXJucyBhIGRpY3Rpb25hcnkgb2YgdHJhbnNjcmlwdCBleG9uIG9iamVjdCBsaXN0cyBpbmRleGVkIGJ5IHRyYW5zY3JpcHQgSURzIC0tIEVOU1QgSURzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAnZXhvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogZXhvbic7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzXG4gICAgICAgIFsndHJhbnNjcmlwdElkJywgJ2Nocm9tb3NvbWUnLCAnc3RhcnQnLCAnZW5kJywgJ2V4b25OdW1iZXInLCAnZXhvbklkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYVtkLnRyYW5zY3JpcHRJZF0gPT09IHVuZGVmaW5lZCkgYVtkLnRyYW5zY3JpcHRJZF0gPSBbXTtcbiAgICAgICAgZC5jaHJvbSA9IGQuY2hyb21vc29tZTtcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZC5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGQuZW5kO1xuICAgICAgICBhW2QudHJhbnNjcmlwdElkXS5wdXNoKGQpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9LCB7fSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBpc29mb3Jtc1xuICogQHBhcmFtIGRhdGEge0pzb259IGZyb20gR1RFeCB3ZWIgc2VydmljZSAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/cmVsZWFzZT12NyZnZW5jb2RlX2lkPSdcbiAqIHJldHVybnMgYSBsaXN0IG9mIGlzb2Zvcm0gb2JqZWN0cyBzb3J0ZWQgYnkgbGVuZ3RoIGluIGRlc2NlbmRpbmcgb3JkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdHMoanNvbil7XG4gICAgY29uc3QgYXR0ciA9ICd0cmFuc2NyaXB0JztcbiAgICBpZighanNvbi5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSXNvZm9ybXMgaW5wdXQgZXJyb3InKTtcblxuICAgIC8vIGNoZWNrIHJlcXVpcmVkIGF0dHJpYnV0ZXMsIHVzZSB0aGUgZmlyc3QgdHJhbnNjcmlwdCBhcyB0aGUgdGVzdCBjYXNlXG4gICAgWyd0cmFuc2NyaXB0SWQnLCAnc3RhcnQnLCAnZW5kJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgaWYoIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqc29uW2F0dHJdLnNvcnQoKGEsIGIpPT57XG4gICAgICAgIGNvbnN0IGwxID0gTWF0aC5hYnMoYS5lbmQgLSBhLnN0YXJ0KSArIDE7XG4gICAgICAgIGNvbnN0IGwyID0gTWF0aC5hYnMoYi5lbmQgLSBiLnN0YXJ0KSArIDE7XG4gICAgICAgIHJldHVybiAtKGwxLWwyKTsgLy8gc29ydCBieSBpc29mb3JtIGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgZmluYWwgKG1hc2tlZCkgZ2VuZSBtb2RlbCBleG9uIGV4cHJlc3Npb25cbiAqIGV4cHJlc3Npb24gaXMgbm9ybWFsaXplZCB0byByZWFkcyBwZXIga2JcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiBleG9uIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBleG9ucyB7TGlzdH0gb2YgZXhvbnMgd2l0aCBwb3NpdGlvbnNcbiAqIEBwYXJhbSB1c2VMb2cge2Jvb2xlYW59IHVzZSBsb2cyIHRyYW5zZm9ybWF0aW9uXG4gKiBAcGFyYW0gYWRqdXN0IHtOdW1iZXJ9IGRlZmF1bHQgMC4wMVxuICogQHJldHVybnMge0xpc3R9IG9mIGV4b24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9uRXhwcmVzc2lvbihkYXRhLCBleG9ucywgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBleG9uRGljdCA9IGV4b25zLnJlZHVjZSgoYSwgZCk9PnthW2QuZXhvbklkXSA9IGQ7IHJldHVybiBhO30sIHt9KTtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkV4b25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlRXhvbkV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcblxuICAgIGNvbnN0IGV4b25PYmplY3RzID0gZGF0YVthdHRyXTtcbiAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgIFsnbWVkaWFuJywgJ2V4b25JZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWV4b25PYmplY3RzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGV4b24gY291bnRzXG4gICAgZXhvbk9iamVjdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBjb25zdCBleG9uID0gZXhvbkRpY3RbZC5leG9uSWRdOyAvLyBmb3IgcmV0cmlldmluZyBleG9uIHBvc2l0aW9uc1xuICAgICAgICAvLyBlcnJvci1jaGVja2luZ1xuICAgICAgICBbJ2VuZCcsICdzdGFydCddLmZvckVhY2goKHApPT57XG4gICAgICAgICAgICBpZiAoIWV4b24uaGFzT3duUHJvcGVydHkocCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VFeG9uRXhwcmVzc2lvbiBwb3NpdGlvbiBhdHRyIG5vdCBmb3VuZDogJyArIHA7XG4gICAgICAgIH0pO1xuICAgICAgICBkLmwgPSBleG9uLmVuZCAtIGV4b24uc3RhcnQgKyAxO1xuICAgICAgICBkLnZhbHVlID0gTnVtYmVyKGQubWVkaWFuKS9kLmw7XG4gICAgICAgIGQub3JpZ2luYWxWYWx1ZSA9IE51bWJlcihkLm1lZGlhbikvZC5sO1xuICAgICAgICBpZiAodXNlTG9nKSBkLnZhbHVlID0gTWF0aC5sb2cyKGQudmFsdWUgKyAxKTtcbiAgICAgICAgZC54ID0gZC5leG9uSWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGV4b24uc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBleG9uLmVuZDtcbiAgICAgICAgZC51bml0ID0gJ21lZGlhbiAnICsgZC51bml0ICsgJyBwZXIgYmFzZSc7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcbiAgICByZXR1cm4gZXhvbk9iamVjdHMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PGIuY2hyb21TdGFydCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PmIuY2hyb21TdGFydCkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pOyAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG59XG5cbi8qKlxuICogUGFyc2UganVuY3Rpb24gbWVkaWFuIHJlYWQgY291bnQgZGF0YVxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gdXNlTG9nIHtCb29sZWFufSBwZXJmb3JtIGxvZyB0cmFuc2Zvcm1hdGlvblxuICogQHBhcmFtIGFkanVzdCB7TnVtYmVyfSBmb3IgaGFuZGxpbmcgMCdzIHdoZW4gdXNlTG9nIGlzIHRydWVcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBqdW5jdGlvbiBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbihkYXRhLCB1c2VMb2c9dHJ1ZSwgYWRqdXN0PTEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBpZiAoanVuY3Rpb25zID09PSB1bmRlZmluZWQgfHwganVuY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTm8ganVuY3Rpb24gZGF0YSBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuXG4gICAgLy8gcGFyc2UgR1RFeCBtZWRpYW4ganVuY3Rpb24gcmVhZCBjb3VudHNcbiAgICBqdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBbJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdqdW5jdGlvbklkJywgJ21lZGlhbicsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2VyIEVycm9yOiBwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbiBhdHRyIG5vdCBmb3VuZDogJyArIGs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbWVkaWFuID0gZC5tZWRpYW47XG4gICAgICAgIGxldCB0aXNzdWVJZCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC54ID0gZC5qdW5jdGlvbklkO1xuICAgICAgICBkLnkgPSB0aXNzdWVJZDtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihtZWRpYW4gKyBhZGp1c3QpKTpOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKG1lZGlhbik7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG4gICAgcmV0dXJuIGp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmIChhLmp1bmN0aW9uSWQ+Yi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5qdW5jdGlvbklkPGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0gdXNlTG9nXG4gKiBAcGFyYW0gYWRqdXN0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24oZGF0YSwgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ1BhcnNlIEVycm9yOiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzZSBFcnJvcjogcmVxdWlyZWQgdHJhbnNjaXB0IGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnZhbHVlID0gdXNlTG9nP01hdGgubG9nMTAoTnVtYmVyKGQubWVkaWFuICsgYWRqdXN0KSk6TnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC54ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZShkYXRhLCB1c2VMb2c9dHJ1ZSwgYWRqdXN0PTEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZGF0YSk7XG4gICAgICAgIHRocm93KCdQYXJzZSBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSBpbnB1dCBlcnJvci4nKTtcbiAgICB9XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWydtZWRpYW4nLCAndHJhbnNjcmlwdElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgIHRocm93KCdQYXJzZSBFcnJvcjogUmVxdWlyZWQgdHJhbnNjcmlwdCBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVkaWFuID0gZC5tZWRpYW47XG4gICAgICAgIGNvbnN0IHRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQudmFsdWUgPSB1c2VMb2c/TWF0aC5sb2cxMChOdW1iZXIobWVkaWFuICsgYWRqdXN0KSk6TnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQub3JpZ2luYWxWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLnkgPSBkLnRyYW5zY3JpcHRJZDtcbiAgICAgICAgZC54ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogcGFyc2UgbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0ciBtZWRpYW5HZW5lRXhwcmVzc2lvblxuICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn0gcGVyZm9ybXMgbG9nMTAgdHJhbnNmb3JtYXRpb25cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNZWRpYW5FeHByZXNzaW9uKGRhdGEsIHVzZUxvZz10cnVlKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkdlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVzOlxuICAgIGlmIChkYXRhW2F0dHJdLmxlbmd0aCA9PSAwKSB0aHJvdyAncGFyc2VNZWRpYW5FeHByZXNzaW9uIGZpbmRzIG5vIGRhdGEuJztcbiAgICBbJ21lZGlhbicsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFkYXRhW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGRhdGFbYXR0cl1bMF0pO1xuICAgICAgICAgICAgdGhyb3cgYFBhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5ncDogJHtkfWA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgcmVzdWx0cyA9IGRhdGFbYXR0cl07XG4gICAgcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKGQpe1xuICAgICAgICBkLnZhbHVlID0gdXNlTG9nP01hdGgubG9nMTAoTnVtYmVyKGQubWVkaWFuKSArIGFkanVzdCk6TnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC54ID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQueSA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgZXhwcmVzc2lvbiBkYXRhIG9mIGEgZ2VuZSBmb3IgYSBncm91cGVkIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGdlbmUgZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIGNvbG9ycyB7RGljdGlvbmFyeX0gdGhlIHZpb2xpbiBjb2xvciBmb3IgZ2VuZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZUV4cHJlc3Npb25Gb3JWaW9saW4oZGF0YSwgdXNlTG9nPXRydWUsIGNvbG9ycz11bmRlZmluZWQpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgWydkYXRhJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICdnZW5lU3ltYm9sJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC52YWx1ZXMgPSB1c2VMb2c/ZC5kYXRhLm1hcCgoZGQpPT57cmV0dXJuIE1hdGgubG9nMTAoK2RkKzEpfSk6ZC5kYXRhO1xuICAgICAgICBkLmdyb3VwID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgIGQubGFiZWwgPSBkLmdlbmVTeW1ib2w7XG4gICAgICAgIGQuY29sb3IgPSBjb2xvcnM9PT11bmRlZmluZWQ/JyM5MGMxYzEnOmNvbG9yc1tkLmdlbmNvZGVJZF07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3JcIjtcblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xufVxuIiwiaW1wb3J0IHZhcmlhbmNlIGZyb20gXCIuL3ZhcmlhbmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IDAsXG4gICAgICBpID0gLTEsXG4gICAgICBtZWFuID0gMCxcbiAgICAgIHZhbHVlLFxuICAgICAgZGVsdGEsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG0gPiAxKSByZXR1cm4gc3VtIC8gKG0gLSAxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbixcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbbWluLCBtYXhdO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHZhbHVlb2YgPSBudW1iZXI7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1swXSwgMCwgdmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1tuIC0gMV0sIG4gLSAxLCB2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgdmFsdWUxID0gK3ZhbHVlb2YodmFsdWVzW2kwICsgMV0sIGkwICsgMSwgdmFsdWVzKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4O1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5pbXBvcnQgcXVhbnRpbGUgZnJvbSBcIi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbnVtYmVycyA9IFtdO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcXVhbnRpbGUobnVtYmVycy5zb3J0KGFzY2VuZGluZyksIDAuNSk7XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuXG5leHBvcnQgdmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGluYWwocmFuZ2UpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICByYW5nZSA9IHJhbmdlID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwocmFuZ2UpO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJpbXBvcnQge3JhbmdlIGFzIHNlcXVlbmNlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBvcmRpbmFsIGZyb20gXCIuL29yZGluYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gcGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdPdXRlcjtcbiAgfTtcblxuICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKCkpXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZCgpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC8sXG4gICAgcmVIZXg2ID0gL14jKFswLTlhLWZdezZ9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5oZXgoKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbTtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4MGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSkgLy8gI2YwMFxuICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5yICYmIHRoaXMuciA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuZyAmJiB0aGlzLmcgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2J9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxuLy8gaHR0cHM6Ly9iZXRhLm9ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG52YXIgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHtcbiAgICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICAgIHZhciBoID0gby5oICogZGVnMnJhZDtcbiAgICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbiAgfVxuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCwgby5sLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxjaChsLCBjLCBoLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChsKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGFiQ29udmVydCh0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2IsIGRhcmtlciwgYnJpZ2h0ZXJ9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxudmFyIEEgPSAtMC4xNDg2MSxcbiAgICBCID0gKzEuNzgyNzcsXG4gICAgQyA9IC0wLjI5MjI3LFxuICAgIEQgPSAtMC45MDY0OSxcbiAgICBFID0gKzEuOTcyOTQsXG4gICAgRUQgPSBFICogRCxcbiAgICBFQiA9IEUgKiBCLFxuICAgIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgbCA9ICt0aGlzLmwsXG4gICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgIHNpbmggPSBNYXRoLnNpbihoKTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoQyAqIGNvc2ggKyBEICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWRcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2JcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZVwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0XCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZ1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2VcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlclwiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgcmhvID0gTWF0aC5TUVJUMixcbiAgICByaG8yID0gMixcbiAgICByaG80ID0gNCxcbiAgICBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG4vLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4vLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICByZXR1cm4gaTtcbn1cbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWludGVycG9sYXRlTGluZWFyKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChiKTtcbn1cblxuZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgZCA9IGRlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB4IDw9IGEgPyAwIDogeCA+PSBiID8gMSA6IGQoeCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHIgPSByZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IGRlaW50ZXJwb2xhdGUoZDEsIGQwKSwgcjAgPSByZWludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBkZWludGVycG9sYXRlKGQwLCBkMSksIHIwID0gcmVpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBkZWludGVycG9sYXRlKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IHJlaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSk7XG59XG5cbi8vIGRlaW50ZXJwb2xhdGUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIHJlaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBkb21haW4gdmFsdWUgeCBpbiBbYSxiXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4sIHJhbmdlLCBjbGFtcCA/IGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlKSA6IGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSkpKCt4KTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLCBkZWludGVycG9sYXRlTGluZWFyLCBjbGFtcCA/IHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSA6IHJlaW50ZXJwb2xhdGUpKSkoK3kpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlLmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCByZXNjYWxlKCkpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtXFwoIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5mdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICB0aGlzLmZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIjtcbiAgdGhpcy5hbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiO1xuICB0aGlzLnNpZ24gPSBtYXRjaFszXSB8fCBcIi1cIjtcbiAgdGhpcy5zeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiO1xuICB0aGlzLnplcm8gPSAhIW1hdGNoWzVdO1xuICB0aGlzLndpZHRoID0gbWF0Y2hbNl0gJiYgK21hdGNoWzZdO1xuICB0aGlzLmNvbW1hID0gISFtYXRjaFs3XTtcbiAgdGhpcy5wcmVjaXNpb24gPSBtYXRjaFs4XSAmJiArbWF0Y2hbOF0uc2xpY2UoMSk7XG4gIHRoaXMudHJpbSA9ICEhbWF0Y2hbOV07XG4gIHRoaXMudHlwZSA9IG1hdGNoWzEwXSB8fCBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT0gbnVsbCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT0gbnVsbCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0b1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXBcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFsc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXJcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW1cIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0b1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgJiYgbG9jYWxlLnRob3VzYW5kcyA/IGZvcm1hdEdyb3VwKGxvY2FsZS5ncm91cGluZywgbG9jYWxlLnRob3VzYW5kcykgOiBpZGVudGl0eSxcbiAgICAgIGN1cnJlbmN5ID0gbG9jYWxlLmN1cnJlbmN5LFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPyBmb3JtYXROdW1lcmFscyhsb2NhbGUubnVtZXJhbHMpIDogaWRlbnRpdHksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgfHwgXCIlXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT0gbnVsbCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzBdIDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwO1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBkdXJpbmcgZm9ybWF0dGluZywgdHJlYXQgYXMgcG9zaXRpdmUuXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCkgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmIChpMCA+IDApIHsgaWYgKCErc1tpXSkgYnJlYWsgb3V0OyBpMCA9IDA7IH0gYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZG9tYWluLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGFydCA9IGRvbWFpblswXSxcbiAgICAgIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLFxuICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyIGFzIHJlaW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIGNvbnRpbnVvdXMsIGNvcHksIGRlaW50ZXJwb2xhdGVMaW5lYXIgYXMgZGVpbnRlcnBvbGF0ZX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHRpY2tGb3JtYXQoZG9tYWluKCksIGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxpbmVhcigpKTtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGludGVydmFsO1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiZXhwb3J0IHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbmV4cG9ydCB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XG5leHBvcnQgdmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvblNlY29uZCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvbk1pbnV0ZSkgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIHZhciBvZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiBkdXJhdGlvbk1pbnV0ZSAlIGR1cmF0aW9uSG91cjtcbiAgaWYgKG9mZnNldCA8IDApIG9mZnNldCArPSBkdXJhdGlvbkhvdXI7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKCgrZGF0ZSAtIG9mZnNldCkgLyBkdXJhdGlvbkhvdXIpICogZHVyYXRpb25Ib3VyICsgb2Zmc2V0KTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuZXhwb3J0IHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IHtcbiAgdGltZURheSxcbiAgdGltZVN1bmRheSxcbiAgdGltZU1vbmRheSxcbiAgdGltZVRodXJzZGF5LFxuICB0aW1lWWVhcixcbiAgdXRjRGF5LFxuICB1dGNTdW5kYXksXG4gIHV0Y01vbmRheSxcbiAgdXRjVGh1cnNkYXksXG4gIHV0Y1llYXJcbn0gZnJvbSBcImQzLXRpbWVcIjtcblxuZnVuY3Rpb24gbG9jYWxEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbn1cblxuZnVuY3Rpb24gdXRjRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbn1cblxuZnVuY3Rpb24gbmV3WWVhcih5KSB7XG4gIHJldHVybiB7eTogeSwgbTogMCwgZDogMSwgSDogMCwgTTogMCwgUzogMCwgTDogMH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgdmFyIGxvY2FsZV9kYXRlVGltZSA9IGxvY2FsZS5kYXRlVGltZSxcbiAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgbG9jYWxlX3BlcmlvZHMgPSBsb2NhbGUucGVyaW9kcyxcbiAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgbG9jYWxlX21vbnRocyA9IGxvY2FsZS5tb250aHMsXG4gICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgcGVyaW9kTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICBtb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgdmFyIGZvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0U2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdE1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhcixcbiAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFVUQ1Nob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0VVRDTW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwiUVwiOiBwYXJzZVVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICBcInVcIjogcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IHBhcnNlV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgbmV3RGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3WWVhcigxOTAwKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgaWYgKFwiVlwiIGluIGQpIHtcbiAgICAgICAgaWYgKGQuViA8IDEgfHwgZC5WID4gNTMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gMTtcbiAgICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldFVUQ0RheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHV0Y01vbmRheS5jZWlsKHdlZWspIDogdXRjTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXRVVENEYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdlZWsgPSBuZXdEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0RGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdGltZU1vbmRheS5jZWlsKHdlZWspIDogdGltZU1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdGltZURheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0TW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldERhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcInVcIiBpbiBkID8gZC51ICUgNyA6IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3WWVhcihkLnkpKS5nZXRVVENEYXkoKSA6IG5ld0RhdGUobmV3WWVhcihkLnkpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIG5ld0RhdGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGMsXG4gICAgICAgIHBhcnNlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICBjID0gc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICBwYXJzZSA9IHBhcnNlc1tjIGluIHBhZHMgPyBzcGVjaWZpZXIuY2hhckF0KGkrKykgOiBjXTtcbiAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gd2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV90aW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBsb2NhbERhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcbiAgICB1dGNGb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICB1dGNQYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciwgdXRjRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBwYWRzID0ge1wiLVwiOiBcIlwiLCBcIl9cIjogXCIgXCIsIFwiMFwiOiBcIjBcIn0sXG4gICAgbnVtYmVyUmUgPSAvXlxccypcXGQrLywgLy8gbm90ZTogaWdub3JlcyBuZXh0IGRpcmVjdGl2ZVxuICAgIHBlcmNlbnRSZSA9IC9eJS8sXG4gICAgcmVxdW90ZVJlID0gL1tcXFxcXiQqKz98W1xcXSgpLnt9XS9nO1xuXG5mdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJJU08oZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5WID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRnVsbFllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdICsgKCtuWzBdID4gNjggPyAxOTAwIDogMjAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPy8uZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSAoK25bMF0pICogMTAwMCwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB0aW1lVGh1cnNkYXkoZCkgOiB0aW1lVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcbiAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICArIHBhZCh6IC8gNjAgfCAwLCBcIjBcIiwgMilcbiAgICAgICsgcGFkKHogJSA2MCwgXCIwXCIsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0RhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHV0Y0RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRvdyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBkb3cgPT09IDAgPyA3IDogZG93O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNTdW5kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlXCI7XG5cbmV4cG9ydCB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IHV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRJc287XG4iLCJpbXBvcnQge2lzb1NwZWNpZmllcn0gZnJvbSBcIi4vaXNvRm9ybWF0XCI7XG5pbXBvcnQge3V0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiB1dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUlzbztcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICB2YXIgbiA9IHNwZWNpZmllci5sZW5ndGggLyA2IHwgMCwgY29sb3JzID0gbmV3IEFycmF5KG4pLCBpID0gMDtcbiAgd2hpbGUgKGkgPCBuKSBjb2xvcnNbaV0gPSBcIiNcIiArIHNwZWNpZmllci5zbGljZShpICogNiwgKytpICogNik7XG4gIHJldHVybiBjb2xvcnM7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlUmdiQmFzaXN9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzY2hlbWUpIHtcbiAgcmV0dXJuIGludGVycG9sYXRlUmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjdmYzk3ZmJlYWVkNGZkYzA4NmZmZmY5OTM4NmNiMGYwMDI3ZmJmNWIxNzY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxYjllNzdkOTVmMDI3NTcwYjNlNzI5OGE2NmE2MWVlNmFiMDJhNjc2MWQ2NjY2NjZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYTZjZWUzMWY3OGI0YjJkZjhhMzNhMDJjZmI5YTk5ZTMxYTFjZmRiZjZmZmY3ZjAwY2FiMmQ2NmEzZDlhZmZmZjk5YjE1OTI4XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImZiYjRhZWIzY2RlM2NjZWJjNWRlY2JlNGZlZDlhNmZmZmZjY2U1ZDhiZGZkZGFlY2YyZjJmMlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJiM2UyY2RmZGNkYWNjYmQ1ZThmNGNhZTRlNmY1YzlmZmYyYWVmMWUyY2NjY2NjY2NcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZTQxYTFjMzc3ZWI4NGRhZjRhOTg0ZWEzZmY3ZjAwZmZmZjMzYTY1NjI4Zjc4MWJmOTk5OTk5XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjY2YzJhNWZjOGQ2MjhkYTBjYmU3OGFjM2E2ZDg1NGZmZDkyZmU1YzQ5NGIzYjNiM1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI4ZGQzYzdmZmZmYjNiZWJhZGFmYjgwNzI4MGIxZDNmZGI0NjJiM2RlNjlmY2NkZTVkOWQ5ZDliYzgwYmRjY2ViYzVmZmVkNmZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkOGIzNjVmNWY1ZjU1YWI0YWNcIixcbiAgXCJhNjYxMWFkZmMyN2Q4MGNkYzEwMTg1NzFcIixcbiAgXCJhNjYxMWFkZmMyN2RmNWY1ZjU4MGNkYzEwMTg1NzFcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNmNWY1ZjVjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiYWY4ZGMzZjdmN2Y3N2ZiZjdiXCIsXG4gIFwiN2IzMjk0YzJhNWNmYTZkYmEwMDA4ODM3XCIsXG4gIFwiN2IzMjk0YzJhNWNmZjdmN2Y3YTZkYmEwMDA4ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZjdmN2Y3ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZjdmN2Y3NjdhOWNmXCIsXG4gIFwiY2EwMDIwZjRhNTgyOTJjNWRlMDU3MWIwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZjdmN2Y3OTJjNWRlMDU3MWIwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZjdmN2Y3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFjZjYwXCIsXG4gIFwiZDcxOTFjZmRhZTYxYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZmZmZmJmZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjk5ZDU5NFwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZGRhNDJiODNiYVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZGRhNDJiODNiYVwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmZmZmZiZmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1Zjk5OWQ4YzkyY2EyNWZcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyMzhiNDVcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBlY2Y0OWViY2RhODg1NmE3XCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg0MTlkXCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkODEwZjdjNGQwMDRiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZjNkYmE4ZGRiNTQzYTJjYVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDJiOGNiZVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NjhhYzA4NDA4MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU4YzhmZGJiODRlMzRhMzNcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTlkNzMwMWZcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWZiMzAwMDA3ZjAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlMmYwYTZiZGRiMWM5MDk5XCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMDI4MThhXCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2YzU5MDE0NjM2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTdmMmE2YmRkYjJiOGNiZVwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjA1NzBiMFwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDA0NWE4ZDAyMzg1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlN2UxZWZjOTk0YzdkZDFjNzdcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBjZTEyNTZcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5ODAwNDM2NzAwMWZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmN2ZjYjlhZGRkOGUzMWEzNTRcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkyMzg0NDNcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDY4MzcwMDQ1MjlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZmN2JjZmVjNDRmZDk1ZjBlXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5Y2M0YzAyXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOTkzNDA0NjYyNTA2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkZWViZjc5ZWNhZTEzMTgyYmRcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYyMTcxYjVcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODUxOWMwODMwNmJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlMGQyZmM5MjcyZGUyZDI2XCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhY2IxODFkXCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkYTUwZjE1NjcwMDBkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMzAwLCAwLjUsIDAuMCksIGN1YmVoZWxpeCgtMjQwLCAwLjUsIDEuMCkpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG5leHBvcnQgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciBjID0gY3ViZWhlbGl4KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKHQgPCAwIHx8IHQgPiAxKSB0IC09IE1hdGguZmxvb3IodCk7XG4gIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICBjLmggPSAzNjAgKiB0IC0gMTAwO1xuICBjLnMgPSAxLjUgLSAxLjUgKiB0cztcbiAgYy5sID0gMC44IC0gMC45ICogdHM7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCB7cmdifSBmcm9tIFwiZDMtY29sb3JcIjtcblxudmFyIGMgPSByZ2IoKSxcbiAgICBwaV8xXzMgPSBNYXRoLlBJIC8gMyxcbiAgICBwaV8yXzMgPSBNYXRoLlBJICogMiAvIDM7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgdmFyIHg7XG4gIHQgPSAoMC41IC0gdCkgKiBNYXRoLlBJO1xuICBjLnIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQpKSAqIHg7XG4gIGMuZyA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzFfMykpICogeDtcbiAgYy5iID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMl8zKSkgKiB4O1xuICByZXR1cm4gYyArIFwiXCI7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZnVuY3Rpb24gcmFtcChyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCByYW1wKGNvbG9ycyhcIjQ0MDE1NDQ0MDI1NjQ1MDQ1NzQ1MDU1OTQ2MDc1YTQ2MDg1YzQ2MGE1ZDQ2MGI1ZTQ3MGQ2MDQ3MGU2MTQ3MTA2MzQ3MTE2NDQ3MTM2NTQ4MTQ2NzQ4MTY2ODQ4MTc2OTQ4MTg2YTQ4MWE2YzQ4MWI2ZDQ4MWM2ZTQ4MWQ2ZjQ4MWY3MDQ4MjA3MTQ4MjE3MzQ4MjM3NDQ4MjQ3NTQ4MjU3NjQ4MjY3NzQ4Mjg3ODQ4Mjk3OTQ3MmE3YTQ3MmM3YTQ3MmQ3YjQ3MmU3YzQ3MmY3ZDQ2MzA3ZTQ2MzI3ZTQ2MzM3ZjQ2MzQ4MDQ1MzU4MTQ1Mzc4MTQ1Mzg4MjQ0Mzk4MzQ0M2E4MzQ0M2I4NDQzM2Q4NDQzM2U4NTQyM2Y4NTQyNDA4NjQyNDE4NjQxNDI4NzQxNDQ4NzQwNDU4ODQwNDY4ODNmNDc4ODNmNDg4OTNlNDk4OTNlNGE4OTNlNGM4YTNkNGQ4YTNkNGU4YTNjNGY4YTNjNTA4YjNiNTE4YjNiNTI4YjNhNTM4YjNhNTQ4YzM5NTU4YzM5NTY4YzM4NTg4YzM4NTk4YzM3NWE4YzM3NWI4ZDM2NWM4ZDM2NWQ4ZDM1NWU4ZDM1NWY4ZDM0NjA4ZDM0NjE4ZDMzNjI4ZDMzNjM4ZDMyNjQ4ZTMyNjU4ZTMxNjY4ZTMxNjc4ZTMxNjg4ZTMwNjk4ZTMwNmE4ZTJmNmI4ZTJmNmM4ZTJlNmQ4ZTJlNmU4ZTJlNmY4ZTJkNzA4ZTJkNzE4ZTJjNzE4ZTJjNzI4ZTJjNzM4ZTJiNzQ4ZTJiNzU4ZTJhNzY4ZTJhNzc4ZTJhNzg4ZTI5Nzk4ZTI5N2E4ZTI5N2I4ZTI4N2M4ZTI4N2Q4ZTI3N2U4ZTI3N2Y4ZTI3ODA4ZTI2ODE4ZTI2ODI4ZTI2ODI4ZTI1ODM4ZTI1ODQ4ZTI1ODU4ZTI0ODY4ZTI0ODc4ZTIzODg4ZTIzODk4ZTIzOGE4ZDIyOGI4ZDIyOGM4ZDIyOGQ4ZDIxOGU4ZDIxOGY4ZDIxOTA4ZDIxOTE4YzIwOTI4YzIwOTI4YzIwOTM4YzFmOTQ4YzFmOTU4YjFmOTY4YjFmOTc4YjFmOTg4YjFmOTk4YTFmOWE4YTFlOWI4YTFlOWM4OTFlOWQ4OTFmOWU4OTFmOWY4ODFmYTA4ODFmYTE4ODFmYTE4NzFmYTI4NzIwYTM4NjIwYTQ4NjIxYTU4NTIxYTY4NTIyYTc4NTIyYTg4NDIzYTk4MzI0YWE4MzI1YWI4MjI1YWM4MjI2YWQ4MTI3YWQ4MTI4YWU4MDI5YWY3ZjJhYjA3ZjJjYjE3ZTJkYjI3ZDJlYjM3YzJmYjQ3YzMxYjU3YjMyYjY3YTM0YjY3OTM1Yjc3OTM3Yjg3ODM4Yjk3NzNhYmE3NjNiYmI3NTNkYmM3NDNmYmM3MzQwYmQ3MjQyYmU3MTQ0YmY3MDQ2YzA2ZjQ4YzE2ZTRhYzE2ZDRjYzI2YzRlYzM2YjUwYzQ2YTUyYzU2OTU0YzU2ODU2YzY2NzU4Yzc2NTVhYzg2NDVjYzg2MzVlYzk2MjYwY2E2MDYzY2I1ZjY1Y2I1ZTY3Y2M1YzY5Y2Q1YjZjY2Q1YTZlY2U1ODcwY2Y1NzczZDA1Njc1ZDA1NDc3ZDE1MzdhZDE1MTdjZDI1MDdmZDM0ZTgxZDM0ZDg0ZDQ0Yjg2ZDU0OTg5ZDU0ODhiZDY0NjhlZDY0NTkwZDc0MzkzZDc0MTk1ZDg0MDk4ZDgzZTliZDkzYzlkZDkzYmEwZGEzOWEyZGEzN2E1ZGIzNmE4ZGIzNGFhZGMzMmFkZGMzMGIwZGQyZmIyZGQyZGI1ZGUyYmI4ZGUyOWJhZGUyOGJkZGYyNmMwZGYyNWMyZGYyM2M1ZTAyMWM4ZTAyMGNhZTExZmNkZTExZGQwZTExY2QyZTIxYmQ1ZTIxYWQ4ZTIxOWRhZTMxOWRkZTMxOGRmZTMxOGUyZTQxOGU1ZTQxOWU3ZTQxOWVhZTUxYWVjZTUxYmVmZTUxY2YxZTUxZGY0ZTYxZWY2ZTYyMGY4ZTYyMWZiZTcyM2ZkZTcyNVwiKSk7XG5cbmV4cG9ydCB2YXIgbWFnbWEgPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwOTAyMDIwYjAyMDIwZDAzMDMwZjAzMDMxMjA0MDQxNDA1MDQxNjA2MDUxODA2MDUxYTA3MDYxYzA4MDcxZTA5MDcyMDBhMDgyMjBiMDkyNDBjMDkyNjBkMGEyOTBlMGIyYjEwMGIyZDExMGMyZjEyMGQzMTEzMGQzNDE0MGUzNjE1MGUzODE2MGYzYjE4MGYzZDE5MTAzZjFhMTA0MjFjMTA0NDFkMTE0NzFlMTE0OTIwMTE0YjIxMTE0ZTIyMTE1MDI0MTI1MzI1MTI1NTI3MTI1ODI5MTE1YTJhMTE1YzJjMTE1ZjJkMTE2MTJmMTE2MzMxMTE2NTMzMTA2NzM0MTA2OTM2MTA2YjM4MTA2YzM5MGY2ZTNiMGY3MDNkMGY3MTNmMGY3MjQwMGY3NDQyMGY3NTQ0MGY3NjQ1MTA3NzQ3MTA3ODQ5MTA3ODRhMTA3OTRjMTE3YTRlMTE3YjRmMTI3YjUxMTI3YzUyMTM3YzU0MTM3ZDU2MTQ3ZDU3MTU3ZTU5MTU3ZTVhMTY3ZTVjMTY3ZjVkMTc3ZjVmMTg3ZjYwMTg4MDYyMTk4MDY0MWE4MDY1MWE4MDY3MWI4MDY4MWM4MTZhMWM4MTZiMWQ4MTZkMWQ4MTZlMWU4MTcwMWY4MTcyMWY4MTczMjA4MTc1MjE4MTc2MjE4MTc4MjI4MTc5MjI4MjdiMjM4MjdjMjM4MjdlMjQ4MjgwMjU4MjgxMjU4MTgzMjY4MTg0MjY4MTg2Mjc4MTg4Mjc4MTg5Mjg4MThiMjk4MThjMjk4MThlMmE4MTkwMmE4MTkxMmI4MTkzMmI4MDk0MmM4MDk2MmM4MDk4MmQ4MDk5MmQ4MDliMmU3ZjljMmU3ZjllMmY3ZmEwMmY3ZmExMzA3ZWEzMzA3ZWE1MzE3ZWE2MzE3ZGE4MzI3ZGFhMzM3ZGFiMzM3Y2FkMzQ3Y2FlMzQ3YmIwMzU3YmIyMzU3YmIzMzY3YWI1MzY3YWI3Mzc3OWI4Mzc3OWJhMzg3OGJjMzk3OGJkMzk3N2JmM2E3N2MwM2E3NmMyM2I3NWM0M2M3NWM1M2M3NGM3M2Q3M2M4M2U3M2NhM2U3MmNjM2Y3MWNkNDA3MWNmNDA3MGQwNDE2ZmQyNDI2ZmQzNDM2ZWQ1NDQ2ZGQ2NDU2Y2Q4NDU2Y2Q5NDY2YmRiNDc2YWRjNDg2OWRlNDk2OGRmNGE2OGUwNGM2N2UyNGQ2NmUzNGU2NWU0NGY2NGU1NTA2NGU3NTI2M2U4NTM2MmU5NTQ2MmVhNTY2MWViNTc2MGVjNTg2MGVkNWE1ZmVlNWI1ZWVmNWQ1ZWYwNWY1ZWYxNjA1ZGYyNjI1ZGYyNjQ1Y2YzNjU1Y2Y0Njc1Y2Y0Njk1Y2Y1NmI1Y2Y2NmM1Y2Y2NmU1Y2Y3NzA1Y2Y3NzI1Y2Y4NzQ1Y2Y4NzY1Y2Y5Nzg1ZGY5Nzk1ZGY5N2I1ZGZhN2Q1ZWZhN2Y1ZWZhODE1ZmZiODM1ZmZiODU2MGZiODc2MWZjODk2MWZjOGE2MmZjOGM2M2ZjOGU2NGZjOTA2NWZkOTI2NmZkOTQ2N2ZkOTY2OGZkOTg2OWZkOWE2YWZkOWI2YmZlOWQ2Y2ZlOWY2ZGZlYTE2ZWZlYTM2ZmZlYTU3MWZlYTc3MmZlYTk3M2ZlYWE3NGZlYWM3NmZlYWU3N2ZlYjA3OGZlYjI3YWZlYjQ3YmZlYjY3Y2ZlYjc3ZWZlYjk3ZmZlYmI4MWZlYmQ4MmZlYmY4NGZlYzE4NWZlYzI4N2ZlYzQ4OGZlYzY4YWZlYzg4Y2ZlY2E4ZGZlY2M4ZmZlY2Q5MGZlY2Y5MmZlZDE5NGZlZDM5NWZlZDU5N2ZlZDc5OWZlZDg5YWZkZGE5Y2ZkZGM5ZWZkZGVhMGZkZTBhMWZkZTJhM2ZkZTNhNWZkZTVhN2ZkZTdhOWZkZTlhYWZkZWJhY2ZjZWNhZWZjZWViMGZjZjBiMmZjZjJiNGZjZjRiNmZjZjZiOGZjZjdiOWZjZjliYmZjZmJiZGZjZmRiZlwiKSk7XG5cbmV4cG9ydCB2YXIgaW5mZXJubyA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTBhMDIwMjBjMDIwMjBlMDMwMjEwMDQwMzEyMDQwMzE0MDUwNDE3MDYwNDE5MDcwNTFiMDgwNTFkMDkwNjFmMGEwNzIyMGIwNzI0MGMwODI2MGQwODI5MGUwOTJiMTAwOTJkMTEwYTMwMTIwYTMyMTQwYjM0MTUwYjM3MTYwYjM5MTgwYzNjMTkwYzNlMWIwYzQxMWMwYzQzMWUwYzQ1MWYwYzQ4MjEwYzRhMjMwYzRjMjQwYzRmMjYwYzUxMjgwYjUzMjkwYjU1MmIwYjU3MmQwYjU5MmYwYTViMzEwYTVjMzIwYTVlMzQwYTVmMzYwOTYxMzgwOTYyMzkwOTYzM2IwOTY0M2QwOTY1M2UwOTY2NDAwYTY3NDIwYTY4NDQwYTY4NDUwYTY5NDcwYjZhNDkwYjZhNGEwYzZiNGMwYzZiNGQwZDZjNGYwZDZjNTEwZTZjNTIwZTZkNTQwZjZkNTUwZjZkNTcxMDZlNTkxMDZlNWExMTZlNWMxMjZlNWQxMjZlNWYxMzZlNjExMzZlNjIxNDZlNjQxNTZlNjUxNTZlNjcxNjZlNjkxNjZlNmExNzZlNmMxODZlNmQxODZlNmYxOTZlNzExOTZlNzIxYTZlNzQxYTZlNzUxYjZlNzcxYzZkNzgxYzZkN2ExZDZkN2MxZDZkN2QxZTZkN2YxZTZjODAxZjZjODIyMDZjODQyMDZiODUyMTZiODcyMTZiODgyMjZhOGEyMjZhOGMyMzY5OGQyMzY5OGYyNDY5OTAyNTY4OTIyNTY4OTMyNjY3OTUyNjY3OTcyNzY2OTgyNzY2OWEyODY1OWIyOTY0OWQyOTY0OWYyYTYzYTAyYTYzYTIyYjYyYTMyYzYxYTUyYzYwYTYyZDYwYTgyZTVmYTkyZTVlYWIyZjVlYWQzMDVkYWUzMDVjYjAzMTViYjEzMjVhYjMzMjVhYjQzMzU5YjYzNDU4YjczNTU3YjkzNTU2YmEzNjU1YmMzNzU0YmQzODUzYmYzOTUyYzAzYTUxYzEzYTUwYzMzYjRmYzQzYzRlYzYzZDRkYzczZTRjYzgzZjRiY2E0MDRhY2I0MTQ5Y2M0MjQ4Y2U0MzQ3Y2Y0NDQ2ZDA0NTQ1ZDI0NjQ0ZDM0NzQzZDQ0ODQyZDU0YTQxZDc0YjNmZDg0YzNlZDk0ZDNkZGE0ZTNjZGI1MDNiZGQ1MTNhZGU1MjM4ZGY1MzM3ZTA1NTM2ZTE1NjM1ZTI1NzM0ZTM1OTMzZTQ1YTMxZTU1YzMwZTY1ZDJmZTc1ZTJlZTg2MDJkZTk2MTJiZWE2MzJhZWI2NDI5ZWI2NjI4ZWM2NzI2ZWQ2OTI1ZWU2YTI0ZWY2YzIzZWY2ZTIxZjA2ZjIwZjE3MTFmZjE3MzFkZjI3NDFjZjM3NjFiZjM3ODE5ZjQ3OTE4ZjU3YjE3ZjU3ZDE1ZjY3ZTE0ZjY4MDEzZjc4MjEyZjc4NDEwZjg4NTBmZjg4NzBlZjg4OTBjZjk4YjBiZjk4YzBhZjk4ZTA5ZmE5MDA4ZmE5MjA3ZmE5NDA3ZmI5NjA2ZmI5NzA2ZmI5OTA2ZmI5YjA2ZmI5ZDA3ZmM5ZjA3ZmNhMTA4ZmNhMzA5ZmNhNTBhZmNhNjBjZmNhODBkZmNhYTBmZmNhYzExZmNhZTEyZmNiMDE0ZmNiMjE2ZmNiNDE4ZmJiNjFhZmJiODFkZmJiYTFmZmJiYzIxZmJiZTIzZmFjMDI2ZmFjMjI4ZmFjNDJhZmFjNjJkZjljNzJmZjljOTMyZjljYjM1ZjhjZDM3ZjhjZjNhZjdkMTNkZjdkMzQwZjZkNTQzZjZkNzQ2ZjVkOTQ5ZjVkYjRjZjRkZDRmZjRkZjUzZjRlMTU2ZjNlMzVhZjNlNTVkZjJlNjYxZjJlODY1ZjJlYTY5ZjFlYzZkZjFlZDcxZjFlZjc1ZjFmMTc5ZjJmMjdkZjJmNDgyZjNmNTg2ZjNmNjhhZjRmODhlZjVmOTkyZjZmYTk2ZjhmYjlhZjlmYzlkZmFmZGExZmNmZmE0XCIpKTtcblxuZXhwb3J0IHZhciBwbGFzbWEgPSByYW1wKGNvbG9ycyhcIjBkMDg4NzEwMDc4ODEzMDc4OTE2MDc4YTE5MDY4YzFiMDY4ZDFkMDY4ZTIwMDY4ZjIyMDY5MDI0MDY5MTI2MDU5MTI4MDU5MjJhMDU5MzJjMDU5NDJlMDU5NTJmMDU5NjMxMDU5NzMzMDU5NzM1MDQ5ODM3MDQ5OTM4MDQ5YTNhMDQ5YTNjMDQ5YjNlMDQ5YzNmMDQ5YzQxMDQ5ZDQzMDM5ZTQ0MDM5ZTQ2MDM5ZjQ4MDM5ZjQ5MDNhMDRiMDNhMTRjMDJhMTRlMDJhMjUwMDJhMjUxMDJhMzUzMDJhMzU1MDJhNDU2MDFhNDU4MDFhNDU5MDFhNTViMDFhNTVjMDFhNjVlMDFhNjYwMDFhNjYxMDBhNzYzMDBhNzY0MDBhNzY2MDBhNzY3MDBhODY5MDBhODZhMDBhODZjMDBhODZlMDBhODZmMDBhODcxMDBhODcyMDFhODc0MDFhODc1MDFhODc3MDFhODc4MDFhODdhMDJhODdiMDJhODdkMDNhODdlMDNhODgwMDRhODgxMDRhNzgzMDVhNzg0MDVhNzg2MDZhNjg3MDdhNjg4MDhhNjhhMDlhNThiMGFhNThkMGJhNThlMGNhNDhmMGRhNDkxMGVhMzkyMGZhMzk0MTBhMjk1MTFhMTk2MTNhMTk4MTRhMDk5MTU5ZjlhMTY5ZjljMTc5ZTlkMTg5ZDllMTk5ZGEwMWE5Y2ExMWI5YmEyMWQ5YWEzMWU5YWE1MWY5OWE2MjA5OGE3MjE5N2E4MjI5NmFhMjM5NWFiMjQ5NGFjMjY5NGFkMjc5M2FlMjg5MmIwMjk5MWIxMmE5MGIyMmI4ZmIzMmM4ZWI0MmU4ZGI1MmY4Y2I2MzA4YmI3MzE4YWI4MzI4OWJhMzM4OGJiMzQ4OGJjMzU4N2JkMzc4NmJlMzg4NWJmMzk4NGMwM2E4M2MxM2I4MmMyM2M4MWMzM2Q4MGM0M2U3ZmM1NDA3ZWM2NDE3ZGM3NDI3Y2M4NDM3YmM5NDQ3YWNhNDU3YWNiNDY3OWNjNDc3OGNjNDk3N2NkNGE3NmNlNGI3NWNmNGM3NGQwNGQ3M2QxNGU3MmQyNGY3MWQzNTE3MWQ0NTI3MGQ1NTM2ZmQ1NTQ2ZWQ2NTU2ZGQ3NTY2Y2Q4NTc2YmQ5NTg2YWRhNWE2YWRhNWI2OWRiNWM2OGRjNWQ2N2RkNWU2NmRlNWY2NWRlNjE2NGRmNjI2M2UwNjM2M2UxNjQ2MmUyNjU2MWUyNjY2MGUzNjg1ZmU0Njk1ZWU1NmE1ZGU1NmI1ZGU2NmM1Y2U3NmU1YmU3NmY1YWU4NzA1OWU5NzE1OGU5NzI1N2VhNzQ1N2ViNzU1NmViNzY1NWVjNzc1NGVkNzk1M2VkN2E1MmVlN2I1MWVmN2M1MWVmN2U1MGYwN2Y0ZmYwODA0ZWYxODE0ZGYxODM0Y2YyODQ0YmYzODU0YmYzODc0YWY0ODg0OWY0ODk0OGY1OGI0N2Y1OGM0NmY2OGQ0NWY2OGY0NGY3OTA0NGY3OTE0M2Y3OTM0MmY4OTQ0MWY4OTU0MGY5OTczZmY5OTgzZWY5OWEzZWZhOWIzZGZhOWMzY2ZhOWUzYmZiOWYzYWZiYTEzOWZiYTIzOGZjYTMzOGZjYTUzN2ZjYTYzNmZjYTgzNWZjYTkzNGZkYWIzM2ZkYWMzM2ZkYWUzMmZkYWYzMWZkYjEzMGZkYjIyZmZkYjQyZmZkYjUyZWZlYjcyZGZlYjgyY2ZlYmEyY2ZlYmIyYmZlYmQyYWZlYmUyYWZlYzAyOWZkYzIyOWZkYzMyOGZkYzUyN2ZkYzYyN2ZkYzgyN2ZkY2EyNmZkY2IyNmZjY2QyNWZjY2UyNWZjZDAyNWZjZDIyNWZiZDMyNGZiZDUyNGZiZDcyNGZhZDgyNGZhZGEyNGY5ZGMyNGY5ZGQyNWY4ZGYyNWY4ZTEyNWY3ZTIyNWY3ZTQyNWY2ZTYyNmY2ZTgyNmY1ZTkyNmY1ZWIyN2Y0ZWQyN2YzZWUyN2YzZjAyN2YyZjIyN2YxZjQyNmYxZjUyNWYwZjcyNGYwZjkyMVwiKSk7XG4iLCJpbXBvcnQge21heH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NjYWxlU2VxdWVudGlhbH0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQgKiBhcyBkM0Nocm9tYXRpYyBmcm9tIFwiZDMtc2NhbGUtY2hyb21hdGljXCI7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbG9yQ2hhcnQoc2h1ZmZsZT10cnVlKXtcbiAgICAvLyByZWYgaWxsdXN0cmF0b3IgY29sb3IgdGhlbWVzXG4gICAgY29uc3QgY29sb3JzID0gW1xuICAgICAgICBcInJnYigxMDAsMTE4LDEyMClcIixcbiAgICAgICAgXCJyZ2IoMTAxLDE0MSwxNDUpXCIsXG4gICAgICAgIFwicmdiKDEwMywxMjYsODIpXCIsXG4gICAgICAgIFwicmdiKDEwMywxODQsMjIyKVwiLFxuICAgICAgICBcInJnYigxMDgsMTEwLDg4KVwiLFxuXG4gICAgICAgIFwicmdiKDEwOCwxNDcsMTI4KVwiLFxuICAgICAgICBcInJnYigxMTksMTQ0LDE4MilcIixcbiAgICAgICAgXCJyZ2IoMTI2LDEzMCwxMjIpXCIsXG4gICAgICAgIFwicmdiKDEzMywxNzMsMTg2KVwiLFxuICAgICAgICBcInJnYigxMzcsMTE0LDkxKVwiLFxuICAgICAgICBcInJnYigxNDUsMTcwLDE1NylcIixcblxuICAgICAgICBcInJnYigxNDUsMjAxLDIzMilcIixcbiAgICAgICAgXCJyZ2IoMTQ3LDEwNSw2NilcIixcbiAgICAgICAgXCJyZ2IoMTU5LDExNCwxMTYpXCIsXG4gICAgICAgIFwicmdiKDE1OSwxODgsMTkxKVwiLFxuICAgICAgICBcInJnYigxNTksMjI5LDE5NClcIixcbiAgICAgICAgXCJyZ2IoMTYzLDE2MywxNzEpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTY0LDIwNywxOTApXCIsXG4gICAgICAgIFwicmdiKDE3MiwxMDgsMTMwKVwiLFxuICAgICAgICBcInJnYigxNzMsODQsMTE0KVwiLFxuICAgICAgICBcInJnYigxNzQsMTk1LDIyMilcIixcbiAgICAgICAgXCJyZ2IoMTc2LDIwNCwxNTMpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTc5LDE4MCwxNTApXCIsXG4gICAgICAgIFwicmdiKDE4MCwyMjAsMjM3KVwiLFxuICAgICAgICBcInJnYigxODMsMjAyLDEyMSlcIixcbiAgICAgICAgXCJyZ2IoMTkyLDIwMiw4NSlcIixcbiAgICAgICAgXCJyZ2IoMTkzLDE5MSwxOTNcIixcbiAgICAgICAgXCJyZ2IoMTk1LDk3LDEzNilcIixcblxuICAgICAgICBcInJnYigxOTksMTIxLDEwMilcIixcbiAgICAgICAgXCJyZ2IoMjA3LDIwMiw3NilcIixcbiAgICAgICAgXCJyZ2IoMjA5LDIxOSwxODkpXCIsXG4gICAgICAgIFwicmdiKDIxMywyNTEsMjU1KVwiLFxuICAgICAgICBcInJnYigyMTUsOTQsNTYpXCIsXG5cbiAgICAgICAgXCJyZ2IoMjE4LDExNCwxMjYpXCIsXG4gICAgICAgIFwicmdiKDIyMyw5MCw3MylcIixcbiAgICAgICAgXCJyZ2IoMjI0LDI0NywyMTcpXCIsXG4gICAgICAgIFwicmdiKDIyNywyMDUsMTY0KVwiLFxuICAgICAgICBcInJnYigyMjgsMTY4LDE4NSlcIixcblxuICAgICAgICBcInJnYigyMzAsMTc2LDE1MilcIixcbiAgICAgICAgXCJyZ2IoMjMyLDIxMiwxNzUpXCIsXG4gICAgICAgIFwicmdiKDIzOSwyMDEsNzYpXCIsXG4gICAgICAgIFwicmdiKDI0MCwxMjQsMTA4KVwiLFxuICAgICAgICBcInJnYigyNDYsMjMyLDE3NylcIixcblxuICAgICAgICBcInJnYigyNDksMjI4LDE3MylcIixcbiAgICAgICAgXCJyZ2IoMjUyLDI0NSwxOTEpXCIsXG4gICAgICAgIFwicmdiKDI1NSwxODgsMTAzKVwiLFxuICAgICAgICBcInJnYig0NSw5NCwxMTApXCIsXG4gICAgICAgIFwicmdiKDUxLDE1MywyMDQpXCIsXG5cbiAgICAgICAgXCJyZ2IoNjAsMTI0LDE0NSlcIixcbiAgICAgICAgXCJyZ2IoNjIsODcsMTQ1KVwiLFxuICAgICAgICBcInJnYig2NSwxMTUsMTIwKVwiLFxuICAgICAgICBcInJnYig4OSwyMTYsMjI5KVwiLFxuICAgICAgICBcInJnYig5NCwxNzgsMTUzKVwiLFxuICAgICAgICBcInJnYig5NSwxMjQsMTM0KVwiXG4gICAgXTtcblxuICAgIGlmIChzaHVmZmxlKSByZXR1cm4gc2h1ZmZsZUNvbG9ycyhjb2xvcnMpO1xuICAgIHJldHVybiBjb2xvcnM7XG59XG5cbmZ1bmN0aW9uIHNodWZmbGVDb2xvcnMoYXJyYXkpIHtcbiAgICAvLyBGaXNoZXItWWF0ZXMgc2h1ZmZsZVxuICAgIGxldCBjb3VudGVyID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgLy8gV2hpbGUgdGhlcmUgYXJlIGVsZW1lbnRzIGluIHRoZSBhcnJheVxuICAgIHdoaWxlIChjb3VudGVyID4gMCkge1xuICAgICAgICAvLyBQaWNrIGEgcmFuZG9tIGluZGV4XG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvdW50ZXIpO1xuXG4gICAgICAgIC8vIERlY3JlYXNlIGNvdW50ZXIgYnkgMVxuICAgICAgICBjb3VudGVyLS07XG5cbiAgICAgICAgLy8gQW5kIHN3YXAgdGhlIGxhc3QgZWxlbWVudCB3aXRoIGl0XG4gICAgICAgIGxldCB0ZW1wID0gYXJyYXlbY291bnRlcl07XG4gICAgICAgIGFycmF5W2NvdW50ZXJdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB0ZW1wO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBnZXQgYSBjb2xvciBpbnRlcnBvbGF0b3JcbiAqIEBwYXJhbSBuYW1lIHtlbnVtfTogQnVHbiwgT3JSZC4uLi5cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JJbnRlcnBvbGF0b3IobmFtZSl7XG4gICAgLy8gcmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtc2NhbGUtY2hyb21hdGljL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCNzZXF1ZW50aWFsLW11bHRpLWh1ZVxuICAgIGNvbnN0IGludGVycG9sYXRvcnMgPSB7XG4gICAgICAgIEJ1R246IGQzQ2hyb21hdGljLmludGVycG9sYXRlQnVHbixcbiAgICAgICAgT3JSZDogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPclJkLFxuICAgICAgICBQdUJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVB1QnUsXG4gICAgICAgIFlsR25CdTogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVZbEduQnUsXG4gICAgICAgIEJsdWVzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUJsdWVzLFxuICAgICAgICBPcmFuZ2VzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yYW5nZXMsXG4gICAgICAgIEdyZWVuczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmVlbnMsXG4gICAgICAgIFB1cnBsZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVycGxlcyxcbiAgICAgICAgUmVkczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVSZWRzLFxuICAgICAgICBHcmV5czogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyxcbiAgICAgICAgR3JheXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlR3JleXNcbiAgICB9O1xuICAgIGlmICghaW50ZXJwb2xhdG9ycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb25zdCBlcnIgPSBcIkNvbG9yIEludGVycG9sYXRvciBFcnJvciBcIiArIG5hbWU7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhyb3coZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVycG9sYXRvcnNbbmFtZV07XG5cbn1cblxuLyoqXG4gKiByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZVxuICogcmVmZXJlbmNlOiBodHRwOi8vYmwub2Nrcy5vcmcvY3VycmFuLzMwOTRiMzdlNjNiOTE4YmFiMGEwNjc4N2UxNjE2MDdiXG4gKiBzY2FsZVNlcXVlbnRpYWwgbWFwcyB0aGUgY29udGludW91cyBkb21haW4gdG8gYSBjb250aW51b3VzIGNvbG9yIHNjYWxlXG4gKiBAcGFyYW0gZGF0YSB7TGlzdH0gb2YgbnVtZXJpY2FsIGRhdGFcbiAqIEBwYXJhbSBjb2xvcnMge1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQgaXMgYXZhaWxhYmxlIGluIGdldENvbG9ySW50ZXJwb2xhdG9yKClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yU2NhbGUoZGF0YSwgY29sb3JzPVwiWWxHbkJ1XCIsIGRtaW4gPSAwKSB7XG4gICAgLy8gbGV0IGRtYXggPSBNYXRoLnJvdW5kKG1heChkYXRhKSk7XG4gICAgbGV0IGRtYXggPSBtYXgoZGF0YSk7XG4gICAgY29uc3Qgc2NhbGUgPSBzY2FsZVNlcXVlbnRpYWwoZ2V0Q29sb3JJbnRlcnBvbGF0b3IoY29sb3JzKSk7XG4gICAgc2NhbGUuZG9tYWluKFtkbWluLCBkbWF4XSk7XG4gICAgcmV0dXJuIHNjYWxlO1xufVxuXG4vKipcbiAqIERyYXcgYSBjb2xvciBsZWdlbmQgYmFyLlxuICogRGVwZW5kZW5jaWVzOiBleHByZXNzaW9uTWFwLmNzc1xuICogQHBhcmFtIHRpdGxlIHtTdHJpbmd9XG4gKiBAcGFyYW0gZG9tIHtvYmplY3R9IEQzIGRvbSBvYmplY3RcbiAqIEBwYXJhbSBzY2FsZSB7T2JqZWN0fSBEMyBzY2FsZSBvZiB0aGUgY29sb3JcbiAqIEBwYXJhbSBjb25maWcge09iamVjdH0gd2l0aCBhdHRyOiB4LCB5XG4gKiBAcGFyYW0gdXNlTG9nIHtCb29sZWFufVxuICogQHBhcmFtIG9yaWVudGF0aW9uIHtlbnVtfSBoIG9yIHYsIGkuZS4gaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbFxuICogQHBhcmFtIGNlbGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyYXdDb2xvckxlZ2VuZCh0aXRsZSwgZG9tLCBzY2FsZSwgY29uZmlnLCB1c2VMb2csIHRpY2tzPTEwLCBiYXNlPTEwLCBjZWxsPXtoOjEwLCB3OjUwfSwgb3JpZW50YXRpb249XCJoXCIpe1xuXG4gICAgY29uc3QgZGF0YSA9IFswXS5jb25jYXQoc2NhbGUudGlja3ModGlja3MpLnNsaWNlKDEpKTsgLy8gd2h5IGRvZXNuJ3QgdGhpcyBwcm92aWRlIGNvbnNpc3RlbnQgbnVtYmVyIG9mIHRpY2tzPz9cblxuXG4gICAgLy8gbGVnZW5kIGdyb3Vwc1xuICAgIGNvbnN0IGxlZ2VuZHMgPSBkb20uYXBwZW5kKFwiZ1wiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnl9KWApXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCIubGVnZW5kXCIpLmRhdGEoZGF0YSk7XG5cbiAgICBjb25zdCBnID0gbGVnZW5kcy5lbnRlcigpLmFwcGVuZChcImdcIikuY2xhc3NlZChcImxlZ2VuZFwiLCB0cnVlKTtcblxuICAgIGlmIChvcmllbnRhdGlvbiA9PSAnaCcpe1xuICAgICAgICAgLy8gbGVnZW5kIHRpdGxlXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCh0aXRsZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAtMTApXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG5cbiAgICAgICAgLy8gdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAgICBnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCwgaSkgPT4gY2VsbC53KmkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgNSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY2VsbC53KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBzY2FsZSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gdXNlTG9nPyhNYXRoLnBvdyhiYXNlLCBkKS0xKS50b1ByZWNpc2lvbigyKTpkLnRvUHJlY2lzaW9uKDIpKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiBjZWxsLncgKiBpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICAvLyBsZWdlbmQgdGl0bGVcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KHRpdGxlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDUpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueSArIGNlbGwuaCAqIGRhdGEubGVuZ3RofSlyb3RhdGUoOTApYCk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCwgaSkgPT4gY2VsbC5oKmkpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGNlbGwudylcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGNlbGwuaClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgc2NhbGUpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IHVzZUxvZz8oTWF0aC5wb3coYmFzZSwgZCktMSkudG9QcmVjaXNpb24oMik6ZC50b1ByZWNpc2lvbigyKSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAxNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCwgaSkgPT4gY2VsbC5oICogaSArIChjZWxsLmgvMikpO1xuICAgIH1cblxuXG5cbn0iLCJpbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNlcXVlbnRpYWwoaW50ZXJwb2xhdG9yKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICBrMTAgPSAxLFxuICAgICAgY2xhbXAgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgdmFyIHQgPSAoeCAtIHgwKSAqIGsxMDtcbiAgICByZXR1cm4gaW50ZXJwb2xhdG9yKGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpIDogdCk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgazEwID0geDAgPT09IHgxID8gMCA6IDEgLyAoeDEgLSB4MCksIHNjYWxlKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpLmRvbWFpbihbeDAsIHgxXSkuY2xhbXAoY2xhbXApO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiLyoqXG4gKiBUT0RPOiBjb2RlIHJldmlldyBvZiBob3cgdG8gcHJlc2V0IHBhcmFtZXRlciB2YWx1ZXNcbiAqIHJldmlldyBhbGwgdGhlIHBvc2l0aW9uIGNhbGN1bGF0aW9uc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZW5kcm9IZWF0bWFwQ29uZmlnIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbWFpblBhbmVsVyB7TnVtYmVyfSwgc2V0IHRoaXMgdG8gZGV0ZXJtaW5lIHRoZSBjZWxsV1xuICAgICAqIEBwYXJhbSBsZWZ0UGFuZWxXIHtJbnRlZ2VyfSwgc2V0IHRvIDAgaWYgdGhlcmUncyBubyBsZWZ0IHBhbmVsXG4gICAgICogQHBhcmFtIHRvcFBhbmVsSCB7SW50ZWdlcn0sIHNldCB0byAwIGlmIHRoZXJlJ3Mgbm8gdG9wIHBhbmVsXG4gICAgICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc21hbGxlciB2YWx1ZXMgdGhhbiB0aGUgZGVmYXVsdCBhcmUgbm90IHJlY29tbWVuZGVkIGZvciB0aGUgaGVhdG1hcCwgdG9wIG1hcmdpbiBzaG91bGQgYmUgYXQgbGVhc3QgNTBcbiAgICAgKiBAcGFyYW0gY2VsbEgge0ludGVnZXJ9XG4gICAgICogQHBhcmFtIGFkanVzdCB7SW50ZWdlcn0sIGFkanVzdGVkIHNwYWNpbmcgYmV0d2VlbiB0aGUgaGVhdG1hcCBhbmQgdGhlIGRlbmRyb2dyYW1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihyb290Vz13aW5kb3cuaW5uZXJXaWR0aCwgbGVmdFBhbmVsVz0xMDAsIHRvcFBhbmVsSD0xMDAsIG1hcmdpbj17dG9wOjUwLCByaWdodDoyNTAsIGJvdHRvbToxNzAsIGxlZnQ6MTB9LCBjZWxsSD0xMiwgYWRqdXN0PTEwKSB7XG4gICAgICAgIHRoaXMubWFyZ2luID0gbWFyZ2luO1xuICAgICAgICB0aGlzLnJvb3RXID0gcm9vdFc7XG5cbiAgICAgICAgdGhpcy5sZWZ0VHJlZVBhbmVsID0geyAvLyB0aGUgcm93IGRlbmRyb2dyYW0gcGFuZWxcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0LFxuICAgICAgICAgICAgeTogbWFyZ2luLnRvcCArIHRvcFBhbmVsSCxcbiAgICAgICAgICAgIGg6IHVuZGVmaW5lZCwgLy8gdW5kZWZpbmVkIGluaXRpYWxseSwgYmVjYXVzZSBpdCdzIGRhdGEtZGVwZW5kZW50XG4gICAgICAgICAgICB3OiBsZWZ0UGFuZWxXIC0gYWRqdXN0LFxuICAgICAgICAgICAgaWQ6IFwibGVmdFRyZWVcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY2VsbCA9IHtcbiAgICAgICAgICAgIHc6IHVuZGVmaW5lZCwgLy8gdG8gYmUgY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgZGF0YSBhbmQgcm9vdFdcbiAgICAgICAgICAgIGg6IGNlbGxIXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50b3BUcmVlUGFuZWwgPSB7IC8vIHRoZSBjb2x1bW4gZGVuZHJvZ3JhbSBwYW5lbFxuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXLFxuICAgICAgICAgICAgeTogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgIGg6IHRvcFBhbmVsSCAtIGFkanVzdCxcbiAgICAgICAgICAgIHc6IHRoaXMucm9vdFcgLSAobWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXICsgbWFyZ2luLnJpZ2h0KSwgLy8gaGFyZC1jb2RlZCB2YWx1ZXM/XG4gICAgICAgICAgICBpZDogXCJ0b3BUcmVlXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmhlYXRtYXBQYW5lbCA9IHtcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyxcbiAgICAgICAgICAgIHk6IG1hcmdpbi50b3AgKyB0b3BQYW5lbEgsXG4gICAgICAgICAgICBoOiB0aGlzLmxlZnRUcmVlUGFuZWwuaCxcbiAgICAgICAgICAgIHc6IHRoaXMudG9wVHJlZVBhbmVsLncsXG4gICAgICAgICAgICBpZDogXCJoZWF0bWFwXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxlZ2VuZFBhbmVsID0geyAvLyB0aGUgY29sb3IgbGVnZW5kIHBhbmVsXG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcsXG4gICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgaDogbWFyZ2luLnRvcC8yLFxuICAgICAgICAgICAgdzogdGhpcy50b3BUcmVlUGFuZWwudyxcbiAgICAgICAgICAgIGNlbGw6IHt3OiA2MH0sXG4gICAgICAgICAgICBpZDogXCJsZWdlbmRcIlxuICAgICAgICB9O1xuXG5cbiAgICB9XG5cbiAgICBnZXQoKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hcmdpbjogdGhpcy5tYXJnaW4sXG4gICAgICAgICAgICBjZWxsOiB0aGlzLmNlbGwsXG4gICAgICAgICAgICB3OiB0aGlzLnJvb3RXLFxuICAgICAgICAgICAgaDogdGhpcy5tYXJnaW4udG9wICsgdGhpcy50b3BUcmVlUGFuZWwuaCArIHRoaXMubGVnZW5kUGFuZWwuaCArIHRoaXMubWFyZ2luLmJvdHRvbSwgLy8gaW5pdGlhbCBoZWlnaHRcbiAgICAgICAgICAgIHBhbmVsczoge1xuICAgICAgICAgICAgICAgIHRvcDogdGhpcy50b3BUcmVlUGFuZWwsXG4gICAgICAgICAgICAgICAgbGVmdDogdGhpcy5sZWZ0VHJlZVBhbmVsLFxuICAgICAgICAgICAgICAgIG1haW46IHRoaXMuaGVhdG1hcFBhbmVsLFxuICAgICAgICAgICAgICAgIGxlZ2VuZDogdGhpcy5sZWdlbmRQYW5lbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuIiwiZnVuY3Rpb24gY291bnQobm9kZSkge1xuICB2YXIgc3VtID0gMCxcbiAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gIGlmICghaSkgc3VtID0gMTtcbiAgZWxzZSB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgbm9kZS52YWx1ZSA9IHN1bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG59XG4iLCJpbXBvcnQgbm9kZV9jb3VudCBmcm9tIFwiLi9jb3VudFwiO1xuaW1wb3J0IG5vZGVfZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgbm9kZV9lYWNoQmVmb3JlIGZyb20gXCIuL2VhY2hCZWZvcmVcIjtcbmltcG9ydCBub2RlX2VhY2hBZnRlciBmcm9tIFwiLi9lYWNoQWZ0ZXJcIjtcbmltcG9ydCBub2RlX3N1bSBmcm9tIFwiLi9zdW1cIjtcbmltcG9ydCBub2RlX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IG5vZGVfcGF0aCBmcm9tIFwiLi9wYXRoXCI7XG5pbXBvcnQgbm9kZV9hbmNlc3RvcnMgZnJvbSBcIi4vYW5jZXN0b3JzXCI7XG5pbXBvcnQgbm9kZV9kZXNjZW5kYW50cyBmcm9tIFwiLi9kZXNjZW5kYW50c1wiO1xuaW1wb3J0IG5vZGVfbGVhdmVzIGZyb20gXCIuL2xlYXZlc1wiO1xuaW1wb3J0IG5vZGVfbGlua3MgZnJvbSBcIi4vbGlua3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIHZhciByb290ID0gbmV3IE5vZGUoZGF0YSksXG4gICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3Jvb3RdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHMsXG4gICAgICBpLFxuICAgICAgbjtcblxuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCA9IDA7XG4gIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmRlcHRoID1cbiAgdGhpcy5oZWlnaHQgPSAwO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG59XG5cbk5vZGUucHJvdG90eXBlID0gaGllcmFyY2h5LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE5vZGUsXG4gIGNvdW50OiBub2RlX2NvdW50LFxuICBlYWNoOiBub2RlX2VhY2gsXG4gIGVhY2hBZnRlcjogbm9kZV9lYWNoQWZ0ZXIsXG4gIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgc3VtOiBub2RlX3N1bSxcbiAgc29ydDogbm9kZV9zb3J0LFxuICBwYXRoOiBub2RlX3BhdGgsXG4gIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICBsaW5rczogbm9kZV9saW5rcyxcbiAgY29weTogbm9kZV9jb3B5XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG47XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGg7XG4gICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgbm9kZS52YWx1ZSA9IHN1bTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVuZCkge1xuICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgbm9kZXMucHVzaChzdGFydCk7XG4gIH1cbiAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgZW5kID0gZW5kLnBhcmVudDtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIGxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gIHZhciBhTm9kZXMgPSBhLmFuY2VzdG9ycygpLFxuICAgICAgYk5vZGVzID0gYi5hbmNlc3RvcnMoKSxcbiAgICAgIGMgPSBudWxsO1xuICBhID0gYU5vZGVzLnBvcCgpO1xuICBiID0gYk5vZGVzLnBvcCgpO1xuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGMgPSBhO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgfVxuICByZXR1cm4gYztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gW107XG4gIHRoaXMuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbGVhdmVzID0gW107XG4gIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBsZWF2ZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGVhdmVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByb290ID0gdGhpcywgbGlua3MgPSBbXTtcbiAgcm9vdC5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZSAhPT0gcm9vdCkgeyAvLyBEb27igJl0IGluY2x1ZGUgdGhlIHJvb3TigJlzIHBhcmVudCwgaWYgYW55LlxuICAgICAgbGlua3MucHVzaCh7c291cmNlOiBub2RlLnBhcmVudCwgdGFyZ2V0OiBub2RlfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbmtzO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciB0b3AgPSAxLFxuICAgIHJpZ2h0ID0gMixcbiAgICBib3R0b20gPSAzLFxuICAgIGxlZnQgPSA0LFxuICAgIGVwc2lsb24gPSAxZS02O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVYKHgpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKHggKyAwLjUpICsgXCIsMClcIjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKHkgKyAwLjUpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgMC41LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpKSxcbiAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjMDAwXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzAwMFwiKVxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiMC43MWVtXCIgOiBcIjAuMzJlbVwiKSk7XG5cbiAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGljayA9IHRpY2sudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBpc0Zpbml0ZShkID0gcG9zaXRpb24oZCkpID8gdHJhbnNmb3JtKGQpIDogdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7IH0pO1xuXG4gICAgICB0aWNrRW50ZXJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpczsgcmV0dXJuIHRyYW5zZm9ybShwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSk7IH0pO1xuICAgIH1cblxuICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgcGF0aFxuICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PSByaWdodFxuICAgICAgICAgICAgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyXG4gICAgICAgICAgICA6IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwiLypcbiAgICBEZW5kcm9ncmFtIHZpc3VhbGl6ZXMgYSB0ZXh0LWJhc2VkIE5ld2ljayB0cmVlIHVzaW5nIEQzIFY1LlxuXG4gICAgZGVwZW5kZW5jaWVzOlxuICAgIGQzIHY1XG4gICAgdGhlIG5ld2ljayBwYXJzZXI6IG5ld2ljay5qc1xuXG4gICAgcmVmZXJlbmNlczpcbiAgICBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtaGllcmFyY2h5XG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL25ld2ljay5qcy9cblxuICAgIG5vdGVzIG9uIHRoZSB1bmRlcmx5aW5nIGRhdGEgc3RydWN0dXJlczpcbiAgICAtIGl0IHVzZXMgcGFyc2VOZXdpY2soKSB0byBjb252ZXJ0IHRoZSBuZXdpY2sgdHJlZSBpbnRvIHRoZSBmb2xsb3dpbmcganNvbjpcbiAgICAgICAge1xuICAgICAgICAgICAgYnJhbmNoc2V0OltjaGlsZCBub2RlIGpzb24gb2JqZWN0c10sXG4gICAgICAgICAgICBuYW1lOiBcIlwiIC8vIGludGVybmFsIG5vZGVzIHdvdWxkIGhhdmUgbm8gcmVhbCBsYWJlbHNcbiAgICAgICAgfVxuICAgICAgIFRoaXMganNvbiBzdHJ1Y3R1cmUgaXMgdGhlIGlucHV0IGRhdGEgb2YgZDMuaGllcmFyY2h5KClcblxuICAgIC0gSW4gdGhlIGQzLmhpZXJhcmNoeSgpLCB0aGUgcm9vdCBub2RlIG9iamVjdCBoYXMgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbY28sIGNvXSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBicmFuY2hzZXQ6IEFycmF5KDIpLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibm9kZSBuYW1lXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogaW50ZWdlcixcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiA5XG4gICAgICAgIH1cbiAqL1xuXG4vLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZXNcblxuaW1wb3J0IHtoaWVyYXJjaHl9IGZyb20gXCJkMy1oaWVyYXJjaHlcIjtcbmltcG9ydCB7YXNjZW5kaW5nfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7YXhpc0JvdHRvbSwgYXhpc0xlZnR9IGZyb20gXCJkMy1heGlzXCI7XG5pbXBvcnQge3NjYWxlTGluZWFyLCBzY2FsZUJhbmR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHtwYXJzZU5ld2lja30gZnJvbSBcIi4vbmV3aWNrXCI7XG5jb25zdCB2ZXJib3NlID0gZmFsc2U7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZW5kcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcihuZXdpY2ssIG9yaWVudGF0aW9uPSdoJyl7XG4gICAgICAgIHRoaXMubmV3aWNrID0gbmV3aWNrO1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgICAgIHRoaXMucG9zdG9yZGVyID0gW107XG4gICAgICAgIHRoaXMucm9vdCA9IGhpZXJhcmNoeShwYXJzZU5ld2ljayhuZXdpY2spLCAoZCkgPT4gZC5icmFuY2hzZXQpXG4gICAgICAgICAgICAuc3VtKChkKT0+ZC5icmFuY2hzZXQ/MDoxKVxuICAgICAgICAgICAgLnNvcnQoKGEsYik9PmEudmFsdWUtYi52YWx1ZXx8YS5kYXRhLmxlbmd0aC1iLmRhdGEubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5sZWF2ZXMgPSB0aGlzLnJvb3QubGVhdmVzKCkuc29ydCgoYSwgYikgPT4gKGEudmFsdWUgLSBiLnZhbHVlKSB8fCBhc2NlbmRpbmcoYS5kYXRhLmxlbmd0aCwgYi5kYXRhLmxlbmd0aCkpO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueVNjYWxlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGRyYXcoZG9tLCB3aWR0aCwgaGVpZ2h0KXtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fc2V0WFNjYWxlKCk7XG4gICAgICAgIHRoaXMuX3NldFlTY2FsZSgpO1xuICAgICAgICBpZiAoJ2gnID09IHRoaXMub3JpZW50YXRpb24pIHRoaXMuX2RyYXdIVHJlZShkb20pO1xuICAgICAgICBlbHNlIHRoaXMuX2RyYXdWVHJlZShkb20pO1xuICAgIH1cblxuICAgIC8vLy8vLy8gcHJpdmF0ZSBtZXRob2RzIC8vLy8vLy9cblxuICAgIF9kcmF3SFRyZWUoZG9tKXtcbiAgICAgICAgY29uc3Qgc2V0WSA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBsZWFmIG5vZGVcbiAgICAgICAgICAgICAgICBub2RlLnkgPSB0aGlzLnlTY2FsZShub2RlLmRhdGEubmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFuIGludGVybmFsIG5vZGVcbiAgICAgICAgICAgICAgICAvLyB0aGUgeSBjb29yZGluYXRlIG9mIGFuIGludGVybmFsIG5vZGUgaXMgdGhlIGF2ZXJhZ2UgeSBmcm9tIGl0cyBjaGlsZHJlblxuICAgICAgICAgICAgICAgIG5vZGUueSA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKChzdW0sIGQpPT5zdW0rZC55LCAwKS9ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2V0WCA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLnggPSB0aGlzLnhTY2FsZSh0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZyb20gdGhlIGxlYWYgbGV2ZWwgLT4gcm9vdFxuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuX3NvcnROb2Rlc0J5TGV2ZWwoKTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgc2V0WChub2RlKTtcbiAgICAgICAgICAgIHNldFkobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5icmFuY2gnKVxuICAgICAgICAgICAgLmRhdGEobm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLmRhdGEubGVuZ3RoP2QueCAtIHRoaXMueFNjYWxlKGQuZGF0YS5sZW5ndGgpOmQueClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKSA9PiBkLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICAvLyBmb3IgYWxsIGludGVybmFsIG5vZGVzXG4gICAgICAgIGNvbnN0IGlub2RlcyA9IHRoaXMucm9vdC5kZXNjZW5kYW50cygpLmZpbHRlcigoZCk9PmQuaGVpZ2h0KS5zb3J0KChhLGIpPT5iLmhlaWdodC1hLmhlaWdodCk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5hcm0nKVxuICAgICAgICAgICAgLmRhdGEoaW5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC5jaGlsZHJlblswXS55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQuY2hpbGRyZW5bMV0ueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5ub2RlJylcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzMzMycpXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMC41KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiclwiLCAzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkLmxlYXZlcygpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGF4aXNcbiAgICAgICAgLy8gQWRkIHRoZSB4IEF4aXNcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLWF4aXNcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyB0aGlzLmhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgLmNhbGwoXG4gICAgICAgICAgICAgICAgYXhpc0JvdHRvbSh0aGlzLnhTY2FsZSlcbiAgICAgICAgICAgICAgICAgICAgLnRpY2tzKDMpXG4gICAgICAgICAgICAgICAgLy8gLnRpY2tWYWx1ZXMoW01hdGguZmxvb3IodGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCkvMiksIE1hdGguZmxvb3IodGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCkpXSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgX3NvcnROb2Rlc0J5TGV2ZWwoKXtcbiAgICAgICAgLy8gcmV0dXJucyBhIGxpc3Qgb2Ygbm9kZXMgb3JkZXJlZCBieSBhbmNlc3RyYWwgbGV2ZWwsIHRoZW4gYnkgYnJhbmNoIGxlbmd0aFxuICAgICAgICByZXR1cm4gdGhpcy5yb290LmRlc2NlbmRhbnRzKCkuc29ydCgoYSwgYikgPT4gKGEuaGVpZ2h0IC0gYi5oZWlnaHQpIHx8IGFzY2VuZGluZyhhLmRhdGEubGVuZ3RoLCBiLmRhdGEubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgX2RyYXdWVHJlZShkb20pe1xuICAgICAgICBjb25zdCBzZXRYID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBhIGxlYWYgbm9kZVxuICAgICAgICAgICAgICAgIG5vZGUueCA9IHRoaXMueFNjYWxlKG5vZGUuZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYW4gaW50ZXJuYWwgbm9kZVxuICAgICAgICAgICAgICAgIC8vIHRoZSB5IGNvb3JkaW5hdGUgb2YgYW4gaW50ZXJuYWwgbm9kZSBpcyB0aGUgYXZlcmFnZSB5IGZyb20gaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgbm9kZS54ID0gbm9kZS5jaGlsZHJlbi5yZWR1Y2UoKHN1bSwgZCk9PnN1bStkLngsIDApL25vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXRZID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUueSA9IHRoaXMueVNjYWxlKHRoaXMuX2dldEJyYW5jaExlbmd0aFRvUm9vdChub2RlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGZyb20gdGhlIGxlYWYgbGV2ZWwgLT4gcm9vdFxuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuX3NvcnROb2Rlc0J5TGV2ZWwoKTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgc2V0WChub2RlKTtcbiAgICAgICAgICAgIHNldFkobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkb20uc2VsZWN0QWxsKCcuYnJhbmNoJylcbiAgICAgICAgICAgIC5kYXRhKG5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC5kYXRhLmxlbmd0aD9kLnkgLSB0aGlzLnlTY2FsZShkLmRhdGEubGVuZ3RoKTpkLnkpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSk7XG5cbiAgICAgICAgLy8gZm9yIGFsbCBpbnRlcm5hbCBub2Rlc1xuICAgICAgICBjb25zdCBpbm9kZXMgPSB0aGlzLnJvb3QuZGVzY2VuZGFudHMoKS5maWx0ZXIoKGQpPT5kLmhlaWdodCkuc29ydCgoYSxiKT0+Yi5oZWlnaHQtYS5oZWlnaHQpO1xuICAgICAgICBkb20uc2VsZWN0QWxsKCcuYXJtJylcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQuY2hpbGRyZW5bMF0ueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLmNoaWxkcmVuWzFdLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKCcubm9kZScpXG4gICAgICAgICAgICAuZGF0YShpbm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IGQueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKSA9PiBkLnkpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJyMzMzMnKVxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDAuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLW5vZGVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInJcIiwgMyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZC5sZWF2ZXMoKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJyXCIsIDIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBheGlzXG4gICAgICAgIC8vIEFkZCB0aGUgeCBBeGlzXG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAvLyAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7dGhpcy53aWR0aH0sIDApYClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLWF4aXNcIilcbiAgICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgICAgIGF4aXNMZWZ0KHRoaXMueVNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja3MoMylcbiAgICAgICAgICAgICAgICAvLyAudGlja1ZhbHVlcyhbTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKS8yKSwgTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKSldKVxuICAgICAgICAgICAgKTtcblxuICAgIH1cblxuICAgIF9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkge1xuICAgICAgICAvLyBub2RlOiBhIGQzLmhpZXJhcmNoeSBub2RlXG4gICAgICAgIHJldHVybiBub2RlLnBhdGgodGhpcy5yb290KVxuICAgICAgICAgICAgLnJlZHVjZSgoc3VtLCBkKSA9PiBkLmRhdGEubGVuZ3RoP3N1bStkLmRhdGEubGVuZ3RoOnN1bSwgMCk7XG4gICAgfVxuXG4gICAgX2dldE1heEJyYW5jaExlbmd0aCgpIHtcbiAgICAgICAgLy8gdGhlIGFzc3VtcHRpb24gaGVyZSBpcyB0aGF0IGFsbCBsZWFmIG5vZGVzIGhhdmUgdGhlIHNhbWUgZGlzdGFuY2UgdG8gdGhlIHJvb3QuXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5sZWF2ZXNbMF07IC8vIHJhbmRvbWx5IHBpY2tzIGEgbGVhZiBub2RlXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSk7XG4gICAgfVxuXG4gICAgX2Fzc2lnblBvc3RvcmRlcihub2RlKXtcbiAgICAgICAgLy8gYXNzaWducyBwb3N0LW9yZGVyIG9mIGFsbCBsZWFmIG5vZGVzXG4gICAgICAgIGlmKG5vZGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAvLyBiYXNlIGNhc2VcbiAgICAgICAgICAgIHRoaXMucG9zdG9yZGVyLnB1c2gobm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIobm9kZS5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIobm9kZS5jaGlsZHJlblsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0WFNjYWxlKCl7XG4gICAgICAgIGlmICgnaCcgPT0gdGhpcy5vcmllbnRhdGlvbil7XG4gICAgICAgICAgICB0aGlzLnhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKFswLCB0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKV0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLndpZHRoXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcih0aGlzLnJvb3QpO1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpIGNvbnNvbGUubG9nKHRoaXMucG9zdG9yZGVyKTtcbiAgICAgICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMucG9zdG9yZGVyLm1hcCgoZCkgPT4gZC5kYXRhLm5hbWUpKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy53aWR0aF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRZU2NhbGUoKXtcbiAgICAgICAgaWYgKCdoJyA9PSB0aGlzLm9yaWVudGF0aW9uKXtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcih0aGlzLnJvb3QpO1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpIGNvbnNvbGUubG9nKHRoaXMucG9zdG9yZGVyKTtcbiAgICAgICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMucG9zdG9yZGVyLm1hcCgoZCkgPT4gZC5kYXRhLm5hbWUpKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy5oZWlnaHRdKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnlTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKFswLCB0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKV0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLmhlaWdodF0pXG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCIvLyBDb3B5cmlnaHQgMjAxMSBKYXNvbiBEYXZpZXMgaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL25ld2ljay5qc1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOZXdpY2socykge1xuICAgIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgICB2YXIgdHJlZSA9IHt9O1xuICAgIHZhciB0b2tlbnMgPSBzLnNwbGl0KC9cXHMqKDt8XFwofFxcKXwsfDopXFxzKi8pO1xuICAgIGZvciAodmFyIGk9MDsgaTx0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnKCc6IC8vIG5ldyBicmFuY2hzZXRcbiAgICAgICAgICB2YXIgc3VidHJlZSA9IHt9O1xuICAgICAgICAgIHRyZWUuYnJhbmNoc2V0ID0gW3N1YnRyZWVdO1xuICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKHRyZWUpO1xuICAgICAgICAgIHRyZWUgPSBzdWJ0cmVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcsJzogLy8gYW5vdGhlciBicmFuY2hcbiAgICAgICAgICB2YXIgc3VidHJlZSA9IHt9O1xuICAgICAgICAgIGFuY2VzdG9yc1thbmNlc3RvcnMubGVuZ3RoLTFdLmJyYW5jaHNldC5wdXNoKHN1YnRyZWUpO1xuICAgICAgICAgIHRyZWUgPSBzdWJ0cmVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcpJzogLy8gb3B0aW9uYWwgbmFtZSBuZXh0XG4gICAgICAgICAgdHJlZSA9IGFuY2VzdG9ycy5wb3AoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnOic6IC8vIG9wdGlvbmFsIGxlbmd0aCBuZXh0XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdmFyIHggPSB0b2tlbnNbaS0xXTtcbiAgICAgICAgICBpZiAoeCA9PSAnKScgfHwgeCA9PSAnKCcgfHwgeCA9PSAnLCcpIHtcbiAgICAgICAgICAgIHRyZWUubmFtZSA9IHRva2VuO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeCA9PSAnOicpIHtcbiAgICAgICAgICAgIHRyZWUubGVuZ3RoID0gcGFyc2VGbG9hdCh0b2tlbik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJlZTtcbn1cblxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHN0YXJ0ZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGludGVycnVwdCBldmVudC5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgLy8gYmVjYXVzZSB0aGUgY2FuY2VsbGVkIHRyYW5zaXRpb25zIG5ldmVyIHN0YXJ0ZWQuIE5vdGUgdGhhdCB0aGlzIGFsc29cbiAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobnVsbCwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2Vcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZUVuZChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVSZW1vdmUobmFtZSwgaSkpXG4gICAgICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmVFbmQobmFtZSkpXG4gICAgICA6IHRoaXMuc3R5bGVUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICAgICAgOiBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlICsgXCJcIiksIHByaW9yaXR5KTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsIi8qKlxuICogQ3JlYXRlIGEgdG9vbGJhclxuICogVGhpcyBjbGFzcyB1c2VzIGEgbG90IG9mIGpRdWVyeSBmb3IgZG9tIGVsZW1lbnQgbWFuaXB1bGF0aW9uXG4gKi9cblxuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cGFyc2VDc3NTdHlsZXN9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXIge1xuICAgIGNvbnN0cnVjdG9yKGRvbUlkLCB0b29sdGlwPXVuZGVmaW5lZCwgdmVydGljYWw9ZmFsc2Upe1xuICAgICAgICAkKGAjJHtkb21JZH1gKS5zaG93KCk7IC8vIGlmIGhpZGRlblxuXG4gICAgICAgIC8vIGFkZCBhIG5ldyBiYXJncm91cCBkaXYgdG8gZG9tSUQgd2l0aCBib290c3RyYXAgYnV0dG9uIGNsYXNzZXNcbiAgICAgICAgY29uc3QgYnRuQ2xhc3NlcyA9IHZlcnRpY2FsPydidG4tZ3JvdXAtdmVydGljYWwgYnRuLWdyb3VwLXNtJzogJ2J0bi1ncm91cCBidG4tZ3JvdXAtc20nO1xuICAgICAgICB0aGlzLmJhciA9ICQoJzxkaXYvPicpLmFkZENsYXNzKGJ0bkNsYXNzZXMpLmFwcGVuZFRvKGAjJHtkb21JZH1gKTtcbiAgICAgICAgdGhpcy5idXR0b25zID0ge307XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZG93bmxvYWQgYnV0dG9uIGZvciBTVkdcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbiBkb20gSURcbiAgICAgKiBAcGFyYW0gc3ZnSWQge1N0cmluZ30gdGhlIFNWRyBkb20gSUQgdG8gZ3JhYiBhbmQgZG93bmxvYWRcbiAgICAgKiBAcGFyYW0gb3V0ZmlsZU5hbWUge1N0cmluZ30gdGhlIGRvd25sb2FkIGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSBjbG9uZWQgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUncyBpY29uIGNsYXNzIG5hbWVcbiAgICAgKi9cbiAgICBjcmVhdGVEb3dubG9hZFN2Z0J1dHRvbihpZCwgc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkLCBpY29uPSdmYS1kb3dubG9hZCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkU3ZnKHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiRG93bmxvYWRcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVJlc2V0QnV0dG9uKGlkLCBjYWxsYmFjaywgaWNvbj0nZmEtZXhwYW5kLWFycm93cy1hbHQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIGNhbGxiYWNrKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93KFwiUmVzZXQgdGhlIHNjYWxlc1wiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24ncyBpZFxuICAgICAqIEBwYXJhbSBpY29uIHtTdHJpbmd9IGEgZm9udGF3ZXNvbWUgaWNvbiBjbGFzc1xuICAgICAqIERlcGVuZGVuY2llczogQm9vdHN0cmFwLCBqUXVlcnksIEZvbnRhd2Vzb21lXG4gICAgICovXG4gICAgY3JlYXRlQnV0dG9uKGlkLCBpY29uPSdmYS1kb3dubG9hZCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gJCgnPGEvPicpLmF0dHIoJ2lkJywgaWQpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2J0biBidG4tZGVmYXVsdCcpLmFwcGVuZFRvKHRoaXMuYmFyKTtcbiAgICAgICAgJCgnPGkvPicpLmFkZENsYXNzKGBmYSAke2ljb259YCkuYXBwZW5kVG8oJGJ1dHRvbik7XG4gICAgICAgIHRoaXMuYnV0dG9uc1tpZF0gPSAkYnV0dG9uO1xuICAgICAgICByZXR1cm4gJGJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhdHRhY2ggYSB0b29sdGlwIGRvbSB3aXRoIHRoZSB0b29sYmFyXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICovXG4gICAgYXR0YWNoVG9vbHRpcCh0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBTVkcgb2JqXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBvdXRwdXQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIHRlbXBvcmFyeSBkb20gSUQgdG8gY29weSB0aGUgU1ZHIHRvXG4gICAgICogRGVwZW5kZW5jaWVzOiBGaWxlU2F2ZXJcbiAgICAgKi9cbiAgICBkb3dubG9hZFN2ZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpe1xuICAgICAgICAvLyBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfSBzdmdgKSlbMF0pOyAvLyBjb21wbGljYXRlZCBqUXVlcnkgdG8gZ2V0IHRvIHRoZSBTVkcgb2JqZWN0XG4gICAgICAgIGxldCBzdmdPYmogPSAkKCQoJChgJHtcIiNcIiArc3ZnSWR9YCkpWzBdKTtcbiAgICAgICAgbGV0ICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgICAgICAvLyBwYXJzZSBhbmQgYWRkIGFsbCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgICAgIGxldCBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAgICAgJChcIiNcIiArIGNsb25lSWQpLmh0bWwoJycpLmhpZGUoKTsgLy8gbWFrZSBzdXJlIHRoZSBjb3B5SUQgaXMgaW52aXNpYmxlXG4gICAgICAgIGxldCBzdmdIdG1sID0gJChgIyR7Y2xvbmVJZH1gKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgICAgICBsZXQgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgICAgIHNhdmVBcyhzdmdCbG9iLCBmaWxlTmFtZSk7IC8vIHRoaXMgaXMgYSBGaWxlU2F2ZXIgZnVuY3Rpb24uLi4uXG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgICAgICQoYCMke2Nsb25lSWR9YCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZXMgYW4gU1ZHXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gYSBET00gZWxlbWVudCBJRCB0aGF0IHN0YXJ0cyB3aXRoIGEgXCIjXCJcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY31cbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggdHdvIGF0dHJpYnV0ZXM6IHdpZHRoIGFuZCBoZWlnaHRcbiAqIEByZXR1cm4ge1NlbGVjdGlvbn0gdGhlIGQzIHNlbGVjdGlvbiBvYmplY3Qgb2YgdGhlIFNWR1xuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcGFyZW50IGRvbSBJRFxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfVxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY31cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiBsZWZ0LCB0b3BcbiAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdmcoaWQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgc3ZnSWQ9dW5kZWZpbmVkKXtcbiAgICBpZiAoc3ZnSWQ9PT11bmRlZmluZWQpIHN2Z0lkPWAke2lkfS1zdmdgO1xuICAgIHJldHVybiBzZWxlY3QoXCIjXCIraWQpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgc3ZnSWQpXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLnRvcH0pYClcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHN2Z09ialxuICogQHBhcmFtIGRvd25sb2FkRmlsZU5hbWUge1N0cmluZ31cbiAqIEBwYXJhbSB0ZW1wRG93bmxvYWREaXZJZCB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRTdmcoc3ZnT2JqLCBkb3dubG9hZEZpbGVOYW1lLCB0ZW1wRG93bmxvYWREaXZJZCl7XG4gICAgY29uc29sZS5sb2coc3ZnT2JqKTtcbiAgICB2YXIgJHN2Z0NvcHkgPSBzdmdPYmouY2xvbmUoKVxuICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgIC8vIHBhcnNlIGFuZCBhZGQgdGhlIENTUyBzdHlsaW5nIHVzZWQgYnkgdGhlIFNWR1xuICAgIHZhciBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICRzdmdDb3B5LnByZXBlbmQoc3R5bGVzKTtcblxuICAgICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIHZhciBzdmdIdG1sID0gJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgIHZhciBzdmdCbG9iID0gbmV3IEJsb2IoW3N2Z0h0bWxdLCB7dHlwZTogXCJpbWFnZS9zdmcreG1sXCJ9KTtcbiAgICBzYXZlQXMoc3ZnQmxvYiwgZG93bmxvYWRGaWxlTmFtZSk7XG5cbiAgICAvLyBjbGVhciB0aGUgdGVtcCBkb3dubG9hZCBkaXZcbiAgICAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbn1cbi8qKlxuICogQSBmdW5jdGlvbiBmb3IgcGFyc2luZyB0aGUgQ1NTIHN0eWxlIHNoZWV0IGFuZCBpbmNsdWRpbmcgdGhlIHN0eWxlIHByb3BlcnRpZXMgaW4gdGhlIGRvd25sb2FkYWJsZSBTVkcuXG4gKiBAcGFyYW0gZG9tXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzU3R5bGVzIChkb20pIHtcbiAgICB2YXIgdXNlZCA9IFwiXCI7XG4gICAgdmFyIHNoZWV0cyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGVldHMubGVuZ3RoOyBpKyspIHsgLy8gVE9ETzogd2FsayB0aHJvdWdoIHRoaXMgYmxvY2sgb2YgY29kZVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoc2hlZXRzW2ldLmNzc1J1bGVzID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gc2hlZXRzW2ldLmNzc1J1bGVzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJ1bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJ1bGUuc3R5bGUpICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zO1xuICAgICAgICAgICAgICAgICAgICAvL1NvbWUgc2VsZWN0b3JzIHdvbid0IHdvcmssIGFuZCBtb3N0IG9mIHRoZXNlIGRvbid0IG1hdHRlci5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zID0gJChkb20pLmZpbmQocnVsZS5zZWxlY3RvclRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgKz0gcnVsZS5zZWxlY3RvclRleHQgKyBcIiB7IFwiICsgcnVsZS5zdHlsZS5jc3NUZXh0ICsgXCIgfVxcblwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJbiBGaXJlZm94LCBpZiBzdHlsZXNoZWV0IG9yaWdpbmF0ZXMgZnJvbSBhIGRpZmYgZG9tYWluLFxuICAgICAgICAgICAgLy8gdHJ5aW5nIHRvIGFjY2VzcyB0aGUgY3NzUnVsZXMgd2lsbCB0aHJvdyBhIFNlY3VyaXR5RXJyb3IuXG4gICAgICAgICAgICAvLyBIZW5jZSwgd2UgbXVzdCB1c2UgYSB0cnkvY2F0Y2ggdG8gaGFuZGxlIHRoaXMgaW4gRmlyZWZveFxuICAgICAgICAgICAgaWYgKGUubmFtZSAhPT0gJ1NlY3VyaXR5RXJyb3InKSB0aHJvdyBlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICBzLmlubmVySFRNTCA9IFwiPCFbQ0RBVEFbXFxuXCIgKyB1c2VkICsgXCJcXG5dXT5cIjtcblxuICAgIHJldHVybiBzO1xufVxuIiwiaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXAge1xuICAgIGNvbnN0cnVjdG9yKGlkLCB2ZXJib3NlPWZhbHNlLCBvZmZzZXRYPTMwLCBvZmZzZXRZPS00MCwgZHVyYXRpb249MTAwKXtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnZlcmJvc2UgPSB2ZXJib3NlO1xuICAgICAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgfVxuXG4gICAgc2hvdyhpbmZvKSB7XG4gICAgICAgIGlmKHRoaXMudmVyYm9zZSkgY29uc29sZS5sb2coaW5mbyk7XG4gICAgICAgIHRoaXMuZWRpdChpbmZvKTtcbiAgICAgICAgdGhpcy5tb3ZlKCk7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lXCIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMS4wKVxuXG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZXZlbnQucGFnZVgsIHkgPSBldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBjb25zdCB0ID0gc2VsZWN0KCcjJyt0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBgJHt4fXB4YClcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBgJHt5fXB4YClcbiAgICB9XG5cbiAgICBlZGl0KGluZm8pIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5odG1sKGluZm8pXG4gICAgfVxufVxuXG4iLCJpbXBvcnQge3NlbGVjdCwgc2VsZWN0QWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlQmFuZH0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3RyYW5zaXRpb259IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5cbmltcG9ydCB7c2V0Q29sb3JTY2FsZSwgZHJhd0NvbG9yTGVnZW5kfSBmcm9tIFwiLi9jb2xvcnNcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhdG1hcCB7XG4gICAgLyogZGF0YSBpcyBhIGpzb24gd2l0aCB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gICAgICAgIHg6IHRoZSB4IGxhYmVsXG4gICAgICAgIHk6IHRoZSB5IGxhYmVsXG4gICAgICAgIHZhbHVlOiB0aGUgcmVuZGVyZWQgbnVtZXJpY2FsIHZhbHVlICh0cmFuc2Zvcm1lZClcbiAgICAgICAgb3JpZ2luYWxWYWx1ZTogdGhlIG9yaWdpbmFsIG51bWVyaWNhbCB2YWx1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gZGF0YSB7T2JqZWN0fSwgc2VlIGFib3ZlXG4gICAgICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn0gcGVyZm9ybXMgbG9nIHRyYW5zZm9ybWF0aW9uXG4gICAgICogQHBhcmFtIGNvbG9yU2NoZW1lIHtTdHJpbmd9OiByZWNvZ25pemVkIHRlcm1zIGluIENvbG9yczpnZXRDb2xvckludGVycG9sYXRvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGNvbG9yU2NoZW1lPVwiWWxHbkJ1XCIsIHVzZUxvZz10cnVlLCBiYXNlPTEwLCByPTIpe1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnVzZUxvZyA9IHVzZUxvZztcbiAgICAgICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgICAgICAgdGhpcy5udWxsQ29sb3IgPSBcIiNlNmU2ZTZcIjtcbiAgICAgICAgdGhpcy5jb2xvclNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhMaXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlMaXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuY29sb3JTY2hlbWUgPSBjb2xvclNjaGVtZTtcblxuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbHRpcCBvYmplY3RcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2x0aXAncyBkb20gSURcbiAgICAgKiBAcmV0dXJucyB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBjcmVhdGVUb29sdGlwKGRvbUlkKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAoZG9tSWQpO1xuICAgICAgICBzZWxlY3QoYCMke2RvbUlkfWApLmNsYXNzZWQoJ2hlYXRtYXAtdG9vbHRpcCcsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGRyYXcgY29sb3IgbGVnZW5kIGZvciB0aGUgaGVhdCBtYXBcbiAgICAgKiBAcGFyYW0gZG9tIHtTZWxlY3Rpb259IGEgZDMgc2VsZWN0aW9uIG9iamVjdFxuICAgICAqIEBwYXJhbSBsZWdlbmRDb25maWcge09iamVjdH0gd2l0aCBhdHRyOiB4LCB5XG4gICAgICovXG5cbiAgICBkcmF3Q29sb3JMZWdlbmQoZG9tLCBsZWdlbmRDb25maWc9e3g6MCwgeTowfSwgdGlja3M9NSl7XG4gICAgICAgIGRyYXdDb2xvckxlZ2VuZCh0aGlzLmRhdGFbMF0udW5pdHx8XCJWYWx1ZVwiLCBkb20sIHRoaXMuY29sb3JTY2FsZSwgbGVnZW5kQ29uZmlnLCB0aGlzLnVzZUxvZywgdGlja3MsIHRoaXMuYmFzZSk7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIHJlZHJhd3MgdGhlIGhlYXRtYXA6IHdoZW4gdGhlIHhsaXN0IGFuZCB5bGlzdCBhcmUgY2hhbmdlZCwgcmVkcmF3IHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufSBhIGQzIHNlbGVjdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0geExpc3Qge0xpc3R9IGEgbGlzdCBvZiB4IGxhYmVsc1xuICAgICAqIEBwYXJhbSB5TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHkgbGFiZWxzXG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge0RpY3Rpb25hcnl9IHt3OkludGVnZXIsIGg6aW50ZWdlcn0gd2l0aCB0d28gYXR0cmlidXRlczogdyBhbmQgaFxuICAgICAqIEBwYXJhbSBhbmdsZSB7SW50ZWdlcn0gZm9yIHRoZSB5IHRleHQgbGFiZWxzXG4gICAgICovXG4gICAgcmVkcmF3KGRvbSwgeExpc3QsIHlMaXN0LCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6MTAwMH0sIGFuZ2xlPTMwKXtcbiAgICAgICAgdGhpcy5fc2V0WExpc3QoZGltZW5zaW9ucy53LCB4TGlzdCk7XG4gICAgICAgIHRoaXMuX3NldFlMaXN0KGRpbWVuc2lvbnMuaCwgeUxpc3QpO1xuICAgICAgICB0aGlzLmRyYXcoZG9tLCBkaW1lbnNpb25zLCBhbmdsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZHJhd3MgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gZG9tIHtTZWxlY3Rpb259XG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge0RpY3Rpb25hcnl9IHt3OkludGVnZXIsIGg6aW50ZWdlcn0gb2YgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gYW5nbGUge0ludGVnZXJ9IGZvciB0aGUgeSB0ZXh0IGxhYmVsc1xuICAgICAqIEBwYXJhbSB1c2VOdWxsQ29sb3Ige0Jvb2xlYW59IHdoZXRoZXIgdG8gcmVuZGVyIG51bGwgdmFsdWVzIHdpdGggdGhlIHByZS1kZWZpbmVkIG51bGwgY29sb3JcbiAgICAgKi9cblxuICAgIGRyYXcoZG9tLCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwfSwgYW5nbGU9MzAsIHVzZU51bGxDb2xvcj10cnVlKXtcbiAgICAgICAgaWYgKHRoaXMueExpc3QgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WExpc3QoZGltZW5zaW9ucy53KTtcbiAgICAgICAgaWYgKHRoaXMueUxpc3QgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WUxpc3QoZGltZW5zaW9ucy5oKTtcbiAgICAgICAgaWYgKHRoaXMuY29sb3JTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLmNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKHRoaXMuZGF0YS5tYXAoKGQpPT5kLnZhbHVlKSwgdGhpcy5jb2xvclNjaGVtZSk7XG5cbiAgICAgICAgLy8gdGV4dCBsYWJlbHNcbiAgICAgICAgLy8gZGF0YSBqb2luXG4gICAgICAgIGNvbnN0IHhMYWJlbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLnhMaXN0KTtcblxuICAgICAgICAvLyB1cGRhdGUgb2xkIGVsZW1lbnRzXG4gICAgICAgIGNvbnN0IFkgPSB0aGlzLnlTY2FsZS5yYW5nZSgpWzFdICsgKHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpICogMik7XG4gICAgICAgIGNvbnN0IGFkanVzdCA9IDU7XG4gICAgICAgIHhMYWJlbHMuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyBhZGp1c3Q7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBZO1xuICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke2FuZ2xlfSlgO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgZXhwLW1hcC14bGFiZWwgeCR7aX1gKTtcblxuXG4gICAgICAgIC8vIGVudGVycyBuZXcgZWxlbWVudHNcbiAgICAgICAgeExhYmVscy5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQsIGkpID0+IGBleHAtbWFwLXhsYWJlbCB4JHtpfWApXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlKGQpICsgYWRqdXN0O1xuICAgICAgICAgICAgICAgIGxldCB5ID0gWTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoJHthbmdsZX0pYDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2UoeExhYmVscylcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiBkKTtcblxuICAgICAgICAvLyBleGl0IC0tIHJlbW92ZXMgb2xkIGVsZW1lbnRzIGFzIG5lZWRlZFxuICAgICAgICB4TGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICBjb25zdCB5TGFiZWxzID0gZG9tLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy55TGlzdClcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiBkKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMueFNjYWxlLnJhbmdlKClbMV0gKyA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB0aGlzLnlTY2FsZShkKSArIDEwKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCwgaSkgPT4gYGV4cC1tYXAteWxhYmVsIHkke2l9YClcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KGAke2R9IGlzIGNsaWNrZWQuIFRvIGJlIGltcGxlbWVudGVkYClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnbm9ybWFsJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ25vcm1hbCcsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlbmRlcnMgdGhlIGhlYXRtYXAgY2VsbHNcblxuICAgICAgICAvLyBkYXRhIGpvaW5cbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhLCAoZCkgPT4gZC52YWx1ZSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIG9sZCBlbGVtZW50c1xuICAgICAgICBjZWxscy5hdHRyKFwieFwiLCAoZCkgPT4gdGhpcy54U2NhbGUoZC54KSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gdGhpcy55U2NhbGUoZC55KSlcbiAgICAgICAgICAgIC5hdHRyKFwicm93XCIsIChkKSA9PiBgeCR7dGhpcy54TGlzdC5pbmRleE9mKGQueCl9YClcbiAgICAgICAgICAgIC5hdHRyKFwiY29sXCIsIChkKSA9PiBgeSR7dGhpcy55TGlzdC5pbmRleE9mKGQueSl9YCk7XG5cbiAgICAgICAgLy8gZW50ZXIgbmV3IGVsZW1lbnRzXG4gICAgICAgIGNvbnN0IG51bGxDb2xvciA9IFwiI0RERERERFwiO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgY2VsbHMuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInJvd1wiLCAoZCkgPT4gYHgke3RoaXMueExpc3QuaW5kZXhPZihkLngpfWApXG4gICAgICAgICAgICAuYXR0cihcImNvbFwiLCAoZCkgPT4gYHkke3RoaXMueUxpc3QuaW5kZXhPZihkLnkpfWApXG5cbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4gdGhpcy54U2NhbGUoZC54KSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gdGhpcy55U2NhbGUoZC55KSlcbiAgICAgICAgICAgIC5hdHRyKFwicnhcIiwgdGhpcy5yKVxuICAgICAgICAgICAgLmF0dHIoJ3J5JywgdGhpcy5yKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCkgPT4gYGV4cC1tYXAtY2VsbGApXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiBcIiNlZWVlZWVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gTm90ZTogXCJ0aGlzXCIgaGVyZSByZWZlcnMgdG8gdGhlIGRvbSBlbGVtZW50IG5vdCB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgc2VsZi5jZWxsTW91c2VvdmVyKHNlbGVjdGVkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpOyAvLyBOb3RlOiBcInRoaXNcIiBoZXJlIHJlZmVycyB0byB0aGUgZG9tIGVsZW1lbnQgbm90IHRoZSBvYmplY3RcbiAgICAgICAgICAgICAgICBzZWxmLmNlbGxNb3VzZW91dCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm1lcmdlKGNlbGxzKVxuICAgICAgICAgICAgLy8gLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLy8gLmR1cmF0aW9uKDIwMDApXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB1c2VOdWxsQ29sb3ImJmQub3JpZ2luYWxWYWx1ZT09MD9udWxsQ29sb3I6dGhpcy5jb2xvclNjYWxlKGQudmFsdWUpKTsgLy8gVE9ETzogd2hhdCBpZiBudWxsIHZhbHVlIGlzbid0IDA/XG5cbiAgICAgICAgLy8gZXhpdCBhbmQgcmVtb3ZlXG4gICAgICAgIGNlbGxzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBjZWxsTW91c2VvdXQoZCl7XG4gICAgICAgIHNlbGVjdEFsbChcIipcIikuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2VsbE1vdXNlb3ZlciAoc2VsZWN0ZWQpIHtcbiAgICAgICAgY29uc3Qgcm93Q2xhc3MgPSBzZWxlY3RlZC5hdHRyKFwicm93XCIpO1xuICAgICAgICBjb25zdCBjb2xDbGFzcyA9IHNlbGVjdGVkLmF0dHIoXCJjb2xcIik7XG4gICAgICAgIHNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKS5maWx0ZXIoYC4ke3Jvd0NsYXNzfWApXG4gICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpLmZpbHRlcihgLiR7Y29sQ2xhc3N9YClcbiAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICBzZWxlY3RlZC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgIH1cblxuICAgIF9zZXRYTGlzdCh3aWR0aCwgbmV3TGlzdCkge1xuICAgICAgICBpZihuZXdMaXN0ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy54TGlzdCA9IG5ld0xpc3RcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueExpc3QgPSBuZXN0KClcbiAgICAgICAgICAgICAgICAua2V5KChkKSA9PiBkLngpXG4gICAgICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAuZG9tYWluKHRoaXMueExpc3QpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIFRPRE86IGVsaW1pbmF0ZSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG4gICAgX3NldFlMaXN0KGhlaWdodCwgbmV3TGlzdCkge1xuICAgICAgICBpZihuZXdMaXN0ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy55TGlzdCA9IG5ld0xpc3RcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgdGhpcy55TGlzdCA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgLm1hcCgoZCkgPT4gZC5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMueUxpc3QpXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCBoZWlnaHRdKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIFRPRE86IGVsaW1pbmF0ZSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG5cbn0iLCJpbXBvcnQge2NyZWF0ZVN2Z30gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmltcG9ydCBEZW5kcm9IZWF0bWFwQ29uZmlnIGZyb20gXCIuL0RlbmRyb0hlYXRtYXBDb25maWdcIjtcbmltcG9ydCBEZW5kcm9ncmFtIGZyb20gXCIuL0RlbmRyb2dyYW1cIjtcbmltcG9ydCBIZWF0bWFwIGZyb20gXCIuL0hlYXRtYXBcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVuZHJvSGVhdG1hcCB7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBjb2x1bW5UcmVlIHtTdHJpbmd9IGEgbmV3aWNrIHRyZWVcbiAgICAgKiBAcGFyYW0gcm93VHJlZSB7U3RyaW5nfSBhIG5ld2ljayB0cmVlXG4gICAgICogQHBhcmFtIGhlYXRtYXBEYXRhIHtMaXN0fSBvZiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogeDogU3RyaW5nLCB5OlN0cmluZywgdmFsdWU6RmxvYXQsIG9yaWdpbmFsVmFsdWU6RmxvYXRcbiAgICAgKiBAcGFyYW0gY29sb3Ige1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQncyBhdmFpbGFibGUgaW4gQ29sb3JzLmdldENvbG9ySW50ZXJwb2xhdG9yXG4gICAgICogQHBhcmFtIHIge0ludGVnZXJ9IHRoZSBkZWdyZWVzIG9mIHJvdW5kZWQtY29ybmVycyBvZiB0aGUgaGVhdG1hcCBjZWxsc1xuICAgICAqIEBwYXJhbSBjb25maWcge0RlbmRyb0hlYXRtYXBDb25maWd9XG4gICAgICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2x1bW5UcmVlLCByb3dUcmVlLCBoZWF0bWFwRGF0YSwgY29sb3I9XCJZbEduQnVcIiwgcj0yLCBjb25maWc9bmV3IERlbmRyb0hlYXRtYXBDb25maWcoKSwgdXNlTG9nPXRydWUsIGJhc2U9MTAsIHRpdGxlID0gJycpe1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZy5nZXQoKTtcbiAgICAgICAgLy9pbnB1dCBldmFsdWF0aW9uc1xuICAgICAgICBjb2x1bW5UcmVlID0gY29sdW1uVHJlZT09PXVuZGVmaW5lZHx8Y29sdW1uVHJlZS5zdGFydHNXaXRoKFwiTm90IGVub3VnaCBkYXRhXCIpP3VuZGVmaW5lZDpjb2x1bW5UcmVlO1xuICAgICAgICByb3dUcmVlID0gcm93VHJlZT09PXVuZGVmaW5lZHx8cm93VHJlZS5zdGFydHNXaXRoKFwiTm90IGVub3VnaCBkYXRhXCIpP3VuZGVmaW5lZDpyb3dUcmVlO1xuICAgICAgICAvLyBhc3NpZ24gYXR0cmlidXRlIHZhbHVlcyBiYXNlZCBvbiBpbnB1dCBhcmd1bWVudHNcbiAgICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICAgICAgY29sdW1uVHJlZTogY29sdW1uVHJlZSxcbiAgICAgICAgICAgIHJvd1RyZWU6IHJvd1RyZWUsXG4gICAgICAgICAgICBoZWF0bWFwOiBoZWF0bWFwRGF0YSxcbiAgICAgICAgICAgIGV4dGVybmFsOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vYmplY3RzID0ge1xuICAgICAgICAgICAgY29sdW1uVHJlZTogdGhpcy5kYXRhLmNvbHVtblRyZWU9PT11bmRlZmluZWQ/IHVuZGVmaW5lZDpuZXcgRGVuZHJvZ3JhbSh0aGlzLmRhdGEuY29sdW1uVHJlZSwgXCJ2XCIpLFxuICAgICAgICAgICAgcm93VHJlZTogdGhpcy5kYXRhLnJvd1RyZWU9PT11bmRlZmluZWQ/dW5kZWZpbmVkOm5ldyBEZW5kcm9ncmFtKHRoaXMuZGF0YS5yb3dUcmVlLCBcImhcIiksXG4gICAgICAgICAgICBoZWF0bWFwOiBuZXcgSGVhdG1hcCh0aGlzLmRhdGEuaGVhdG1hcCwgY29sb3IsIHVzZUxvZywgYmFzZSwgcilcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzID0ge1xuICAgICAgICAgICAgc3ZnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjb2x1bW5UcmVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByb3dUcmVlOiB1bmRlZmluZWRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG5cbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sYmFyIHBhbmVsXG4gICAgICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSB0b29sYmFyJ3MgZG9tIElEXG4gICAgICogQHBhcmFtIHRvb2x0aXAge1Rvb2x0aXB9XG4gICAgICogQHJldHVybnMge1Rvb2xiYXJ9XG4gICAgICovXG5cbiAgICBjcmVhdGVUb29sYmFyKGRvbUlkLCB0b29sdGlwKXtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2x0aXAgb2JqZWN0XG4gICAgICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSB0b29sdGlwJ3MgZG9tIElEXG4gICAgICogQHJldHVybnMge1Rvb2x0aXB9XG4gICAgICovXG4gICAgY3JlYXRlVG9vbHRpcChkb21JZCl7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgc2VsZWN0KGAjJHtkb21JZH1gKS5jbGFzc2VkKCdoZWF0bWFwLXRvb2x0aXAnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdGhlIGRlbmRyb2dyYW1zIGFuZCBjb3JyZXNwb25kaW5nIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHBhcmVudCBET00gaWQgb2YgdGhlIFNWR1xuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSBvZiB0aGUgU1ZHXG4gICAgICogQHBhcmFtIHNob3dDb2x1bW5UcmVlIHtCb29sZWFufSByZW5kZXIgdGhlIGNvbHVtbiBkZW5kcm9ncmFtXG4gICAgICogQHBhcmFtIHNob3dSb3dUcmVlIHtCb29sZWFufSByZW5kZXIgdGhlIHJvdyBkZW5kcm9ncmFtXG4gICAgICogQHBhcmFtIGxlZ2VuZFBvcyB7RW51bX0gd2hlcmUgdG8gcGxhY2UgdGhlIGNvbG9yIGxlZ2VuZDogYm90dG9tLCB0b3BcbiAgICAgKiBAcGFyYW0gdGlja3Mge0ludGVnZXJ9IG51bWJlciBvZiBiaW5zIG9mIHRoZSBjb2xvciBsZWdlbmRcbiAgICAgKi9cbiAgICByZW5kZXIoZG9tSWQsIHN2Z0lkLCBzaG93Q29sdW1uVHJlZT10cnVlLCBzaG93Um93VHJlZT10cnVlLCBsZWdlbmRQb3M9XCJ0b3BcIiwgdGlja3M9NSl7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNvbmZpZyhsZWdlbmRQb3MpO1xuICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMuc3ZnID0gY3JlYXRlU3ZnKGRvbUlkLCB0aGlzLmNvbmZpZy53LCB0aGlzLmNvbmZpZy5oLCB0aGlzLmNvbmZpZy5tYXJnaW4sIHN2Z0lkKTtcblxuICAgICAgICBsZXQgeGxpc3QgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICB5bGlzdCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc2hvd0NvbHVtblRyZWUgJiYgdGhpcy5vYmplY3RzLmNvbHVtblRyZWUhPT11bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzLmNvbHVtblRyZWUgPSB0aGlzLl9yZW5kZXJUcmVlKFwiY29sdW1uXCIsIHRoaXMub2JqZWN0cy5jb2x1bW5UcmVlLCB0aGlzLmNvbmZpZy5wYW5lbHMudG9wKTtcbiAgICAgICAgICAgIHhsaXN0ID0gdGhpcy5vYmplY3RzLmNvbHVtblRyZWUueFNjYWxlLmRvbWFpbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG93Um93VHJlZSAmJiB0aGlzLm9iamVjdHMucm93VHJlZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cy5yb3dUcmVlID0gdGhpcy5fcmVuZGVyVHJlZShcInJvd1wiLCB0aGlzLm9iamVjdHMucm93VHJlZSwgdGhpcy5jb25maWcucGFuZWxzLmxlZnQpO1xuICAgICAgICAgICAgeWxpc3QgPSB0aGlzLm9iamVjdHMucm93VHJlZS55U2NhbGUuZG9tYWluKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50aXRsZSAhPSAnJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy50aXRsZSk7XG4gICAgICAgICAgICBzZWxlY3QoYCMke2RvbUlkfS1zdmdgKS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgMClcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIDIwKVxuICAgICAgICAgICAgICAgIC50ZXh0KHRoaXMudGl0bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVuZGVySGVhdG1hcCh0aGlzLm9iamVjdHMuaGVhdG1hcCwgeGxpc3QsIHlsaXN0LCB0aWNrcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGEgbmV3aWNrIHRyZWVcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIHtlbnVtfSBjb2x1bW4gb3Igcm93XG4gICAgICogQHBhcmFtIHRyZWUge0RlbmRyb2dyYW19IGEgRGVuZHJvZ3JhbSBvYmplY3RcbiAgICAgKiBAcGFyYW0gY29uZmlnIHtPYmplY3R9IGEgcGFuZWwgY29uZmlnIHdpdGggYXR0cmlidXRlczogeCwgeSwgd2lkdGggYW5kIGhlaWdodFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbmRlclRyZWUoZGlyZWN0aW9uLCB0cmVlLCBjb25maWcpe1xuICAgICAgICBsZXQgc3ZnID0gdGhpcy52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICAgICAgY29uc3QgbGFiZWxDbGFzcyA9IGRpcmVjdGlvbj09XCJyb3dcIj9cIi5leHAtbWFwLXlsYWJlbFwiOlwiLmV4cC1tYXAteGxhYmVsXCI7XG5cbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudmlzdWFsQ29tcG9uZW50cy50b29sdGlwO1xuICAgICAgICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgY29uZmlnLmlkKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG4gICAgICAgIHRyZWUuZHJhdyhnLCBjb25maWcudywgY29uZmlnLmgpO1xuXG4gICAgICAgIGNvbnN0IG1vdXNlb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMzMzNcIik7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKGxhYmVsQ2xhc3MpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBtb3VzZW92ZXIgPSBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCA2KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcInJlZFwiKTtcbiAgICAgICAgICAgIGxldCBpZHMgPSBkLmxlYXZlcygpLm1hcCgobm9kZSk9Pm5vZGUuZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwobGFiZWxDbGFzcylcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChsYWJlbCk9Pmlkcy5pbmNsdWRlcyhsYWJlbCkpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGxhYmVsKT0+aWRzLmluY2x1ZGVzKGxhYmVsKSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGcuc2VsZWN0QWxsKFwiLmRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIG1vdXNlb3ZlcilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIG1vdXNlb3V0KTtcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBoZWF0bWFwIGFuZCBjb2xvciBsZWdlbmRcbiAgICAgKiBAcGFyYW0gaGVhdG1hcCB7SGVhdG1hcH0gYSBIZWF0bWFwIG9iamVjdFxuICAgICAqIEBwYXJhbSB4TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHggbGFiZWxzXG4gICAgICogQHBhcmFtIHlMaXN0IHtMaXN0fSBhIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgKiBAcGFyYW0gdGlja3Mge0ludGVnZXJ9IHRoZSBudW1iZXIgb2YgYmlucyBpbiB0aGUgY29sb3IgbGVnZW5kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVySGVhdG1hcChoZWF0bWFwLCB4TGlzdCwgeUxpc3QsIHRpY2tzPTUpe1xuICAgICAgICBsZXQgZG9tID0gdGhpcy52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcucGFuZWxzLm1haW47XG4gICAgICAgIGNvbnN0IGcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBjb25maWcuaWQpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcbiAgICAgICAgaGVhdG1hcC5yZWRyYXcoZywgeExpc3QsIHlMaXN0LCB7dzogY29uZmlnLncsIGg6IGNvbmZpZy5ofSk7XG4gICAgICAgIGhlYXRtYXAuZHJhd0NvbG9yTGVnZW5kKGRvbSwgdGhpcy5jb25maWcucGFuZWxzLmxlZ2VuZCwgdGlja3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdCB0aGUgbGF5b3V0IGRpbWVuc2lvbnMgYmFzZWQgb24gdGhlIGFjdHVhbCBkYXRhXG4gICAgICogQHBhcmFtIGxlZ2VuZFBvcyB7U3RyaW5nfSBib3R0b20gb3IgdG9wXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyl7XG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLm9iamVjdHMucm93VHJlZT09PXVuZGVmaW5lZD8xOnRoaXMub2JqZWN0cy5yb3dUcmVlLmxlYXZlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gdXBkYXRlcyB0aGUgbGVmdCBwYW5lbCdzIGhlaWdodCBiYXNlZCBvbiB0aGUgZGF0YVxuICAgICAgICB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oID0gdGhpcy5jb25maWcuY2VsbC5oICogcm93czwyMD8yMDp0aGlzLmNvbmZpZy5jZWxsLmggKiByb3dzO1xuICAgICAgICB0aGlzLmNvbmZpZy5oICs9IHRoaXMuY29uZmlnLnBhbmVscy5sZWZ0Lmg7XG4gICAgICAgIHRoaXMuY29uZmlnLnBhbmVscy5tYWluLmggPSB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oO1xuICAgICAgICBpZihsZWdlbmRQb3M9PVwiYm90dG9tXCIpIHRoaXMuY29uZmlnLnBhbmVscy5sZWdlbmQueSArPSB0aGlzLmNvbmZpZy5wYW5lbHMubWFpbi5oICsgdGhpcy5jb25maWcucGFuZWxzLm1haW4ueCArIDUwO1xuXG5cbiAgICB9XG59IiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgZXBzaWxvbiA9IDFlLTYsXG4gICAgdGF1RXBzaWxvbiA9IHRhdSAtIGVwc2lsb247XG5cbmZ1bmN0aW9uIFBhdGgoKSB7XG4gIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgdGhpcy5fID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIG5ldyBQYXRoO1xufVxuXG5QYXRoLnByb3RvdHlwZSA9IHBhdGgucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgIHRoaXMuXyArPSBcIlpcIjtcbiAgICB9XG4gIH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJRXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIkNcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKCt4MikgKyBcIixcIiArICgreTIpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgeDEgPSAreDEsIHkxID0gK3kxLCB4MiA9ICt4MiwgeTIgPSAreTIsIHIgPSArcjtcbiAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgeDIxID0geDIgLSB4MSxcbiAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgZWxzZSBpZiAoIShsMDFfMiA+IGVwc2lsb24pKSB7fVxuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHggLSBkeCkgKyBcIixcIiArICh5IC0gZHkpICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHgwKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTApO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgZWxzZSBpZiAoZGEgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhclwiO1xuaW1wb3J0IGxpbmUgZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSBwb2ludFgsXG4gICAgICB4MSA9IG51bGwsXG4gICAgICB5MCA9IGNvbnN0YW50KDApLFxuICAgICAgeTEgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSB7XG4gICAgICAgICAgaiA9IGk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFTdGFydCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcbiAgICAgICAgICAgIG91dHB1dC5wb2ludCh4MHpba10sIHkweltrXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFFbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSB7XG4gICAgICAgIHgweltpXSA9ICt4MChkLCBpLCBkYXRhKSwgeTB6W2ldID0gK3kwKGQsIGksIGRhdGEpO1xuICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYWxpbmUoKSB7XG4gICAgcmV0dXJuIGxpbmUoKS5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlKS5jb250ZXh0KGNvbnRleHQpO1xuICB9XG5cbiAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHgxID0gbnVsbCwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MTtcbiAgfTtcblxuICBhcmVhLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeTEgPSBudWxsLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkxO1xuICB9O1xuXG4gIGFyZWEubGluZVgwID1cbiAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTEpO1xuICB9O1xuXG4gIGFyZWEubGluZVgxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MSkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGFyZWEpIDogZGVmaW5lZDtcbiAgfTtcblxuICBhcmVhLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGFyZWEpIDogY3VydmU7XG4gIH07XG5cbiAgYXJlYS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBhcmVhKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyZWE7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2N1c3RvbUV2ZW50LCBldmVudCwgbW91c2UsIHNlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBCcnVzaEV2ZW50IGZyb20gXCIuL2V2ZW50XCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnRcIjtcblxudmFyIE1PREVfRFJBRyA9IHtuYW1lOiBcImRyYWdcIn0sXG4gICAgTU9ERV9TUEFDRSA9IHtuYW1lOiBcInNwYWNlXCJ9LFxuICAgIE1PREVfSEFORExFID0ge25hbWU6IFwiaGFuZGxlXCJ9LFxuICAgIE1PREVfQ0VOVEVSID0ge25hbWU6IFwiY2VudGVyXCJ9O1xuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcImVcIiwgXCJ3XCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggJiYgW1t4WzBdLCBlWzBdWzFdXSwgW3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSAmJiBbW2VbMF1bMF0sIHlbMF1dLCBbZVsxXVswXSwgeVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMV0sIHh5WzFdWzFdXTsgfVxufTtcblxudmFyIFhZID0ge1xuICBuYW1lOiBcInh5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJlXCIsIFwic1wiLCBcIndcIiwgXCJud1wiLCBcIm5lXCIsIFwic2VcIiwgXCJzd1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICByZXR1cm4gW1swLCAwXSwgW3N2Zy53aWR0aC5iYXNlVmFsLnZhbHVlLCBzdmcuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbn1cblxuLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUg4oCcX19icnVzaOKAnSByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbmZ1bmN0aW9uIGxvY2FsKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gIHJldHVybiBub2RlLl9fYnJ1c2g7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KGV4dGVudCkge1xuICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgc3RhdGUgPSBub2RlLl9fYnJ1c2g7XG4gIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFgoKSB7XG4gIHJldHVybiBicnVzaChYKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWSgpIHtcbiAgcmV0dXJuIGJydXNoKFkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGJydXNoKFhZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2goZGltKSB7XG4gIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKGJydXNoLCBcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICBoYW5kbGVTaXplID0gNixcbiAgICAgIHRvdWNoZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBncm91cFxuICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgIC5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAubWVyZ2Uob3ZlcmxheSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoIHRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZCk7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIGVtcHR5KHNlbGVjdGlvbjEpID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICYmIHNlbGVjdGlvbjEgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PSBudWxsIHx8IGVtcHR5KHNlbGVjdGlvbjEpID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCh0aGlzKS5zZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgcmV0dXJuIHRoYXQuX19icnVzaC5lbWl0dGVyIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuc3RhdGUgPSB0aGF0Ll9fYnJ1c2g7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zdGFydGluZykgdGhpcy5zdGFydGluZyA9IGZhbHNlLCB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgQnJ1c2hFdmVudChicnVzaCwgdHlwZSwgZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbikpLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoKSB7XG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHsgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm4gbm9ldmVudCgpOyB9XG4gICAgZWxzZSBpZiAodG91Y2hlbmRpbmcpIHJldHVybjtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHR5cGUgPSBldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCxcbiAgICAgICAgZHksXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgbG9ja1gsXG4gICAgICAgIGxvY2tZLFxuICAgICAgICBwb2ludDAgPSBtb3VzZSh0aGF0KSxcbiAgICAgICAgcG9pbnQgPSBwb2ludDAsXG4gICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uID0gW1xuICAgICAgICBbdzAgPSBkaW0gPT09IFkgPyBXIDogcG9pbnQwWzBdLCBuMCA9IGRpbSA9PT0gWCA/IE4gOiBwb2ludDBbMV1dLFxuICAgICAgICBbZTAgPSBkaW0gPT09IFkgPyBFIDogdzAsIHMwID0gZGltID09PSBYID8gUyA6IG4wXVxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XG4gICAgICBuMCA9IHNlbGVjdGlvblswXVsxXTtcbiAgICAgIGUwID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XG4gICAgfVxuXG4gICAgdzEgPSB3MDtcbiAgICBuMSA9IG4wO1xuICAgIGUxID0gZTA7XG4gICAgczEgPSBzMDtcblxuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGF0KVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKTtcblxuICAgIHZhciBvdmVybGF5ID0gZ3JvdXAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IHNlbGVjdChldmVudC52aWV3KVxuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJtb3VzZXVwLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGludGVycnVwdCh0aGF0KTtcbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgIHZhciBwb2ludDEgPSBtb3VzZSh0aGF0KTtcbiAgICAgIGlmIChzaGlmdGluZyAmJiAhbG9ja1ggJiYgIWxvY2tZKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBsb2NrWCA9IHRydWU7XG4gICAgICB9XG4gICAgICBwb2ludCA9IHBvaW50MTtcbiAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBtb3ZlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICAgIHZhciB0O1xuXG4gICAgICBkeCA9IHBvaW50WzBdIC0gcG9pbnQwWzBdO1xuICAgICAgZHkgPSBwb2ludFsxXSAtIHBvaW50MFsxXTtcblxuICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgTU9ERV9TUEFDRTpcbiAgICAgICAgY2FzZSBNT0RFX0RSQUc6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChzaWduWCA8IDApIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gTWF0aC5tYXgoVyAtIGUwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblkgPiAwKSBkeSA9IE1hdGgubWF4KE4gLSBzMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0NFTlRFUjoge1xuICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgbjAgLSBkeSAqIHNpZ25ZKSksIHMxID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvblswXVswXSwgZTEgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgaWYgKHNlbGVjdGlvblswXVswXSAhPT0gdzFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMF1bMV0gIT09IG4xXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gW1t3MSwgbjFdLCBbZTEsIHMxXV07XG4gICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kZWQoKSB7XG4gICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgICBncm91cC5vbihcInRvdWNobW92ZS5icnVzaCB0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgdmlldy5vbihcImtleWRvd24uYnJ1c2gga2V5dXAuYnJ1c2ggbW91c2Vtb3ZlLmJydXNoIG1vdXNldXAuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KTtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIChvbiBzdGFydCkhXG4gICAgICBpZiAoZW1wdHkoc2VsZWN0aW9uKSkgc3RhdGUuc2VsZWN0aW9uID0gbnVsbCwgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICBlbWl0LmVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9TUEFDRSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCBicnVzaCkgOiBleHRlbnQ7XG4gIH07XG5cbiAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuIiwiaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2V2ZW50IGZyb20gXCIuL25vZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmlldykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgfVxuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gcm9vdC5fX25vc2VsZWN0O1xuICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbn1cbiIsImltcG9ydCB7bWVhbiwgcXVhbnRpbGUsIGRldmlhdGlvbn0gZnJvbSBcImQzLWFycmF5XCI7XG5cblxuLy8gcmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9LZXJuZWxfKHN0YXRpc3RpY3MpXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tlcm5lbF9kZW5zaXR5X2VzdGltYXRpb25cbmV4cG9ydCBjb25zdCBrZXJuZWwgPSB7XG4gICAgZXBhbmVjaG5pa292OiBmdW5jdGlvbih1KXtyZXR1cm4gTWF0aC5hYnModSkgPD0gMT8gKDMvNCkqKDEtdSp1KTowfSxcbiAgICBnYXVzc2lhbjogZnVuY3Rpb24odSl7cmV0dXJuIDEvTWF0aC5zcXJ0KDIqTWF0aC5QSSkqTWF0aC5leHAoLS41KnUqdSl9XG59O1xuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbmRhdmllcy9zY2llbmNlLmpzL2Jsb2IvbWFzdGVyL3NyYy9zdGF0cy9iYW5kd2lkdGguanNcbmV4cG9ydCBjb25zdCBrZXJuZWxCYW5kd2lkdGggPSB7XG4gICAgLy8gQmFuZHdpZHRoIHNlbGVjdG9ycyBmb3IgR2F1c3NpYW4ga2VybmVscy5cbiAgICBucmQ6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgbGV0IGlxciA9IHF1YW50aWxlKHgsIDAuNzUpIC0gcXVhbnRpbGUoeCwgMC4yNSk7XG4gICAgICAgIGxldCBoID0gaXFyIC8gMS4zNDtcbiAgICAgICAgcmV0dXJuIDEuMDYgKiBNYXRoLm1pbihkZXZpYXRpb24oeCksIGgpICogTWF0aC5wb3coeC5sZW5ndGgsIC0xLzUpO1xuICAgIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBrZXJuZWw6IHRoZSBrZXJuZWwgZnVuY3Rpb24sIHN1Y2ggYXMgZ2F1c3NpYW5cbiAqIEBwYXJhbSBYOiBsaXN0IG9mIGJpbnNcbiAqIEBwYXJhbSBoOiB0aGUgYmFuZHdpZHRoLCBlaXRoZXIgYSBudW1lcmljYWwgdmFsdWUgZ2l2ZW4gYnkgdGhlIHVzZXIgb3IgY2FsY3VsYXRlZCB1c2luZyB0aGUgZnVuY3Rpb24ga2VybmVsQmFuZHdpZHRoXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259OiB0aGUga2VybmVsIGRlbnNpdHkgZXN0aW1hdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZXJuZWxEZW5zaXR5RXN0aW1hdG9yKGtlcm5lbCwgWCwgaCl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKFYpIHtcbiAgICAgICAgLy8gWCBpcyB0aGUgYmluc1xuICAgICAgICByZXR1cm4gWC5tYXAoKHgpID0+IFt4LCBtZWFuKFYsICh2KSA9PiBrZXJuZWwoKHgtdikvaCkpL2hdKTtcbiAgICB9XG59XG5cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gbixcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHN1bSArPSB2YWx1ZTtcbiAgICAgIGVsc2UgLS1tO1xuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHN1bSArPSB2YWx1ZTtcbiAgICAgIGVsc2UgLS1tO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtKSByZXR1cm4gc3VtIC8gbTtcbn1cbiIsIi8qXG5JbnB1dCBkYXRhIHN0cnVjdHVyZTogYSBsaXN0IG9mIGRhdGEgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG5bXG4gICAge1xuICAgICAgICBncm91cDogXCJncm91cDFcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDFcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAxXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAyXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9LFxuICAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMlwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgM1wiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfVxuXVxuKi9cblxuaW1wb3J0IHtleHRlbnQsIG1lZGlhbiwgYXNjZW5kaW5nLCBxdWFudGlsZSwgbWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmQsIHNjYWxlTGluZWFyfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7YXJlYX0gZnJvbSBcImQzLXNoYXBlXCI7XG5pbXBvcnQge2F4aXNUb3AsIGF4aXNCb3R0b20sIGF4aXNMZWZ0fSBmcm9tIFwiZDMtYXhpc1wiO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7YnJ1c2h9IGZyb20gXCJkMy1icnVzaFwiO1xuXG5pbXBvcnQge2tlcm5lbERlbnNpdHlFc3RpbWF0b3IsIGtlcm5lbCwga2VybmVsQmFuZHdpZHRofSBmcm9tIFwiLi9rZGVcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JvdXBlZFZpb2xpbiB7XG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgZm9yIEdyb3VwZWRWaW9saW5cbiAgICAgKiBAcGFyYW0gZGF0YSB7TGlzdH06IGEgbGlzdCBvZiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogZ3JvdXA6IHtTdHJpbmd9LCBsYWJlbDoge1N0cmluZ30sIHZhbHVlczoge0xpc3R9IG9mIG51bWVyaWNhbCB2YWx1ZXMsIHNpemU6IGludGVnZXIsIG9wdGlvbmFsXG4gICAgICogQHBhcmFtIGdyb3VwSW5mbyB7RGljdGlvbmFyeX06IG1ldGFkYXRhIG9mIHRoZSBncm91cCwgaW5kZXhlZCBieSBncm91cCBJRFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGdyb3VwSW5mbyA9IHt9KXtcbiAgICAgICAgdGhpcy5fc2FuaXR5Q2hlY2soZGF0YSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXBJbmZvID0gZ3JvdXBJbmZvO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb20ge0RPTX0gdGhlIFNWRyBkb20gb2JqZWN0IHRvIGFwcGVuZCB0aGUgdmlvbGluIHBsb3QgdG9cbiAgICAgKiBAcGFyYW0gd2lkdGgge0Zsb2F0fVxuICAgICAqIEBwYXJhbSBoZWlnaHQge0Zsb2F0fVxuICAgICAqIEBwYXJhbSB4UGFkZGluZyB7RmxvYXR9IHBhZGRpbmcgb2YgdGhlIHggYXhpc1xuICAgICAqIEBwYXJhbSB4RG9tYWluIHtMaXN0fSB0aGUgb3JkZXIgb2YgWCBncm91cHNcbiAgICAgKiBAcGFyYW0geURvbWFpbiAge0xpc3R9IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgdGhlIHkgZG9tYWluXG4gICAgICogQHBhcmFtIHlMYWJlbCB7U3RyaW5nfVxuICAgICAqIEBwYXJhbSBzaG93WFxuICAgICAqIEBwYXJhbSBzaG93U3ViWFxuICAgICAqIEBwYXJhbSBzdWJYQW5nbGVcbiAgICAgKiBAcGFyYW0gc2hvd1doaXNrZXJcbiAgICAgKiBAcGFyYW0gc2hvd0RpdmlkZXJcbiAgICAgKiBAcGFyYW0gc2hvd0xlZ2VuZFxuICAgICAqIEBwYXJhbSBzaG93U2l6ZVxuICAgICAqL1xuXG4gICAgcmVuZGVyKGRvbSwgd2lkdGg9NTAwLCBoZWlnaHQ9MzU3LCB4UGFkZGluZz0wLjA1LCB4RG9tYWluPXVuZGVmaW5lZCwgeURvbWFpbj1bLTMsM10sIHlMYWJlbD1cIlkgYXhpc1wiLFxuICAgICAgICAgICBzaG93WD10cnVlLCBzaG93U3ViWD10cnVlLCBzdWJYQW5nbGU9MCxcbiAgICAgICAgICAgc2hvd1doaXNrZXI9ZmFsc2UsIHNob3dEaXZpZGVyPWZhbHNlLCBzaG93TGVnZW5kPWZhbHNlLCBzaG93U2l6ZT1mYWxzZSl7XG5cbiAgICAgICAgLy8gZGVmaW5lIHRoZSByZXNldCBmb3IgdGhpcyBwbG90XG4gICAgICAgIHRoaXMucmVzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIHlEb21haW4sIHlMYWJlbCwgc2hvd1gsIHNob3dTdWJYLCBzdWJYQW5nbGUsIHNob3dXaGlza2VyLCBzaG93RGl2aWRlciwgc2hvd0xlZ2VuZCk7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvLyBkZWZpbmVzIHRoZSBYLCBzdWJYLCBZLCBaIHNjYWxlc1xuICAgICAgICBpZiAoeURvbWFpbj09PXVuZGVmaW5lZCB8fCAwID09IHlEb21haW4ubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBhbGxWID0gW107XG4gICAgICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZCkgPT4gYWxsViA9IGFsbFYuY29uY2F0KGQudmFsdWVzKSk7XG4gICAgICAgICAgICB5RG9tYWluID0gZXh0ZW50KGFsbFYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmUtb3JnYW5pemVkIHRoaXMuZGF0YSBpbmRleGVkIGJ5IGdyb3Vwc1xuICAgICAgICB0aGlzLmdyb3VwcyA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC5ncm91cClcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5zY2FsZSA9IHtcbiAgICAgICAgICAgIHg6IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAuZG9tYWluKHhEb21haW58fHRoaXMuZ3JvdXBzLm1hcCgoZCkgPT4gZC5rZXkpKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nSW5uZXIoeFBhZGRpbmcpLFxuICAgICAgICAgICAgc3VieDogc2NhbGVCYW5kKCksXG4gICAgICAgICAgICB5OiBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih5RG9tYWluKSxcbiAgICAgICAgICAgIHo6IHNjYWxlTGluZWFyKCkgLy8gdGhpcyBpcyB0aGUgdmlvbGluIHdpZHRoLCB0aGUgZG9tYWluIGFuZCByYW5nZSBhcmUgZGV0ZXJtaW5lZCBsYXRlciBpbmRpdmlkdWFsbHkgZm9yIGVhY2ggdmlvbGluXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggZ3JvdXBcbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGcudmFsdWVzO1xuICAgICAgICAgICAgbGV0IGluZm8gPSB0aGlzLmdyb3VwSW5mb1tncm91cF07IC8vIG9wdGlvbmFsXG4gICAgICAgICAgICBnLmluZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG4gICAgICAgICAgICBpZiAoaW5mbyAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgLy8gcmVuZGVycyBncm91cCBpbmZvIHN1Y2ggYXMgcC12YWx1ZSwgZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSW5mb0RvbSA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwTGFiZWxzID0gZ3JvdXBJbmZvRG9tLnNlbGVjdEFsbChcIi52aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoWydwdmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpIC8vIENvZGUgcmV2aWV3OiBjb25zaWRlciBtb3ZpbmcgdGhpcyBwYXJ0IHRvIHRoZSBlUVRMIGRhc2hib2FyZFxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmZvWydwdmFsdWVUaHJlc2hvbGQnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZD09J3B2YWx1ZScmJnBhcnNlRmxvYXQoaW5mb1tkXSk8PXBhcnNlRmxvYXQoaW5mb1sncHZhbHVlVGhyZXNob2xkJ10pP1wib3JhbmdlcmVkXCI6XCJTbGF0ZUdyYXlcIlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpLzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHRoaXMuc2NhbGUueSh5RG9tYWluWzBdKSArIDUwOyAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBgJHtkfTogJHtwYXJzZUZsb2F0KHBhcnNlRmxvYXQoaW5mb1tkXSkudG9QcmVjaXNpb24oMykpLnRvRXhwb25lbnRpYWwoKX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZGVmaW5lcyB0aGUgdGhpcy5zY2FsZS5zdWJ4IGJhc2VkIG9uIHRoaXMuc2NhbGUueFxuICAgICAgICAgICAgdGhpcy5zY2FsZS5zdWJ4XG4gICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4gZC5sYWJlbCkpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChncm91cCksIHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgZW50cnkudmFsdWVzID0gZW50cnkudmFsdWVzLnNvcnQoYXNjZW5kaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3VmlvbGluKGRvbSwgZW50cnksIHNob3dXaGlza2VyLCBnLmluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhZGRzIHRoZSBzdWIteCBheGlzIGlmIHRoZXJlIGFyZSBtb3JlIHRoYW4gb25lIGVudHJpZXNcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSAxNTtcbiAgICAgICAgICAgIGlmIChzaG93U2l6ZSl7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHNpemVTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oZW50cmllcy5tYXAoKGQpID0+IHtyZXR1cm4gZC5zaXplPT11bmRlZmluZWQ/JygwKSc6YCgke2Quc2l6ZXx8MH0pYH0pKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuICAgICAgICAgICAgICAgICBjb25zdCBzaXpleEcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1zaXplLWF4aXNcIilcbiAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgKyBidWZmZXJ9KWApXG4gICAgICAgICAgICAgICAgICAgICAuY2FsbChheGlzQm90dG9tKHNpemVTY2FsZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hvd1N1YlgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gNTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJ4RyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tc3ViLWF4aXNcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwoYXhpc0JvdHRvbSh0aGlzLnNjYWxlLnN1YngpKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdWJYQW5nbGUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnhHLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGByb3RhdGUoJHtzdWJYQW5nbGV9LCAyLCAxMClgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJzIHRoZSB4IGF4aXNcbiAgICAgICAgbGV0IGJ1ZmZlciA9IHNob3dTdWJYPzU1OjA7IC8vIENvZGUgcmV2aWV3OiBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICB0aGlzLnhBeGlzID0gc2hvd1g/YXhpc0JvdHRvbSh0aGlzLnNjYWxlLngpOmF4aXNCb3R0b20odGhpcy5zY2FsZS54KS50aWNrRm9ybWF0KFwiXCIpO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi14LWF4aXMgYXhpcy0teFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgIC5jYWxsKHRoaXMueEF4aXMpIC8vIHNldCB0aWNrRm9ybWF0KFwiXCIpIHRvIHNob3cgdGljayBtYXJrcyB3aXRob3V0IHRleHQgbGFiZWxzXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoMzAsIC0xMCwgMTApXCIpO1xuXG4gICAgICAgIC8vIGFkZHMgdGhlIHkgQXhpc1xuICAgICAgICBidWZmZXIgPSA1O1xuICAgICAgICB0aGlzLnlBeGlzID0gYXhpc0xlZnQodGhpcy5zY2FsZS55KVxuICAgICAgICAgICAgICAgICAgICAudGlja1ZhbHVlcyh0aGlzLnNjYWxlLnkudGlja3MoNSkpO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi15LWF4aXMgYXhpcy0teVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHtidWZmZXJ9LCAwKWApXG4gICAgICAgICAgICAuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgICAgICAvLyBhZGRzIHRoZSB0ZXh0IGxhYmVsIGZvciB0aGUgeSBheGlzXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgLTQwKSAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgLTQwKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1heGlzLWxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcbiAgICAgICAgICAgIC50ZXh0KHlMYWJlbCk7XG5cbiAgICAgICAgLy8gcGxvdCBtb3VzZSBldmVudHNcbiAgICAgICAgZG9tLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgIGlmKHRoaXMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgZ3JvdXAgZGl2aWRlcnNcbiAgICAgICAgaWYoc2hvd0RpdmlkZXIpe1xuICAgICAgICAgICAgdGhpcy5fYWRkR3JvdXBEaXZpZGVyKGRvbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgY29sb3IgbGVnZW5kXG4gICAgICAgIGlmIChzaG93TGVnZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmRHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidmlvbGluTGVnZW5kXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAwKWApO1xuXG4gICAgICAgICAgICBsZWdlbmRHLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0zNSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDYwKih0aGlzLmdyb3Vwc1swXS52YWx1ZXMubGVuZ3RoKSArIDEwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDI0KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwic2lsdmVyXCIpO1xuXG4gICAgICAgICAgICBjb25zdCBsZWdlbmRzID0gbGVnZW5kRy5zZWxlY3RBbGwoXCIudmlvbGluLWxlZ2VuZFwiKS5kYXRhKHRoaXMuZ3JvdXBzWzBdLnZhbHVlcyk7XG5cblxuICAgICAgICAgICAgY29uc3QgZyA9IGxlZ2VuZHMuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoXCJ2aW9saW4tbGVnZW5kXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdyA9IDEwO1xuICAgICAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiA1ICsgNjAqKGkpICArIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjgpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHcpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4gZC5jb2xvcik7XG5cbiAgICAgICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tbGVnZW5kLXRleHRcIilcbiAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gZC5sYWJlbClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IDE3ICsgNjAqKGkpICsgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0yMCk7XG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sdGlwIG9iamVjdFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbHRpcCdzIGRvbSBJRFxuICAgICAqIEByZXR1cm5zIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGNyZWF0ZVRvb2x0aXAoZG9tSWQpe1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChkb21JZCk7XG4gICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuY2xhc3NlZCgndmlvbGluLXRvb2x0aXAnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICAvLyBpZiAodG9vbHRpcCA9PT0gdW5kZWZpbmVkKSB0b29sdGlwID0gdGhpcy5jcmVhdGVUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGJydXNoIHRvIHRoZSBwbG90XG4gICAgICogQHBhcmFtIGRvbSB7RDN9IERvbSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkQnJ1c2goZG9tKXtcbiAgICAgICAgY29uc3QgdGhlQnJ1c2ggPSBicnVzaCgpO1xuICAgICAgICB0aGVCcnVzaC5vbihcImVuZFwiLCAoKT0+e3RoaXMuem9vbShkb20sIHRoZUJydXNoKX0pO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpXG4gICAgICAgICAgICAuY2FsbCh0aGVCcnVzaCk7XG4gICAgfVxuXG4gICAgem9vbShkb20sIHRoZUJydXNoKXtcbiAgICAgICAgbGV0IHMgPSBldmVudC5zZWxlY3Rpb24sXG4gICAgICAgICAgICBpZGVsVGltZW91dCxcbiAgICAgICAgICAgIGlkZWxEZWxheSA9IDM1MDtcbiAgICAgICAgaWYgKHRoZUJydXNoID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFzKSB7XG4gICAgICAgICAgICBpZiAoIWlkZWxUaW1lb3V0KSByZXR1cm4gaWRlbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZGVsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9LCBpZGVsRGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgY3VycmVudCBzY2FsZXMnIGRvbWFpbnMgYmFzZWQgb24gdGhlIGJydXNoZWQgd2luZG93XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnguZG9tYWluKHRoaXMuc2NhbGUueC5kb21haW4oKS5maWx0ZXIoKGQsIGkpPT57XG4gICAgICAgICAgICAgICAgICBjb25zdCBsb3dCb3VuZCA9IE1hdGguZmxvb3Ioc1swXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXBwZXJCb3VuZCA9IE1hdGguZmxvb3Ioc1sxXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPj0gbG93Qm91bmQgJiYgaSA8PXVwcGVyQm91bmQ7XG4gICAgICAgICAgICB9KSk7IC8vIFRPRE86IGFkZCBjb21tZW50c1xuXG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1sxXVsxXSkpO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5mbG9vcih0aGlzLnNjYWxlLnkuaW52ZXJ0KHNbMF1bMV0pKTtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS5kb21haW4oW21pbiwgbWF4XSk7IC8vIHRvZG86IGRlYnVnXG5cbiAgICAgICAgICAgIGRvbS5zZWxlY3QoXCIuYnJ1c2hcIikuY2FsbCh0aGVCcnVzaC5tb3ZlLCBudWxsKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgIC8vIHpvb21cbiAgICAgICAgbGV0IHQgPSBkb20udHJhbnNpdGlvbigpLmR1cmF0aW9uKDc1MCk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teFwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy54QXhpcyk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teVwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZ2csIGkpPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZ2cua2V5O1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBnZy52YWx1ZXM7XG5cbiAgICAgICAgICAgIC8vIHJlLWRlZmluZSB0aGUgc3VieCdzIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnN1YnhcbiAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgZ0luZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG5cbiAgICAgICAgICAgICAgICAvLyByZS1kZWZpbmUgdGhlIHNjYWxlLnoncyByYW5nZVxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUuelxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgdmlvbGluXG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IGRvbS5zZWxlY3QoYCN2aW9saW4ke2dnLmluZGV4fS0ke2VudHJ5LmxhYmVsfWApO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpblwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgYXJlYSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAueDAoKGQpID0+IHRoaXMuc2NhbGUueihkWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC55KChkKSA9PiB0aGlzLnNjYWxlLnkoZFswXSkpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgYm94IHBsb3RcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICAgICAgY29uc3QgcTEgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuMjUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgICAgICBjb25zdCB6ID0gMC4xO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1pclwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRoaXMuc2NhbGUueShxMykpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5hYnModGhpcy5zY2FsZS56KC16KSAtIHRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueShxMykgLSB0aGlzLnNjYWxlLnkocTEpKSk7XG5cbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgICAgICBnLnNlbGVjdChcIi52aW9saW4tbWVkaWFuXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIHZpb2xpbiBhbmQgYm94IHBsb3RzXG4gICAgICogQHBhcmFtIGRvbSB7RDMgRE9NfVxuICAgICAqIEBwYXJhbSBlbnRyeSB7T2JqZWN0fSB3aXRoIGF0dHJzOiB2YWx1ZXMsIGxhYmVsXG4gICAgICogQHBhcmFtIHNob3dXaGlza2VyIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdWaW9saW4oZG9tLCBlbnRyeSwgc2hvd1doaXNrZXIsIGdJbmRleCl7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHZlcnRpY2VzIGZvciB0aGUgdmlvbGluIHBhdGggdXNlIGEga2RlXG4gICAgICAgIGxldCBrZGUgPSBrZXJuZWxEZW5zaXR5RXN0aW1hdG9yKFxuICAgICAgICAgICAga2VybmVsLmdhdXNzaWFuLFxuICAgICAgICAgICAgdGhpcy5zY2FsZS55LnRpY2tzKDEwMCksIC8vIHVzZSB1cCB0byAxMDAgdmVydGljZXMgYWxvbmcgdGhlIFkgYXhpcyAodG8gY3JlYXRlIHRoZSB2aW9saW4gcGF0aClcbiAgICAgICAgICAgIGtlcm5lbEJhbmR3aWR0aC5ucmQoZW50cnkudmFsdWVzKSAvLyBlc3RpbWF0ZSB0aGUgYmFuZHdpZHRoIGJhc2VkIG9uIHRoZSBkYXRhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGVEb21haW4gPSBleHRlbnQoZW50cnkudmFsdWVzKTsgLy8gZ2V0IHRoZSBtYXggYW5kIG1pbiBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBrZGUoZW50cnkudmFsdWVzKS5maWx0ZXIoKGQpPT5kWzBdPmVEb21haW5bMF0mJmRbMF08ZURvbWFpblsxXSk7IC8vIGZpbHRlciB0aGUgdmVydGljZXMgdGhhdCBhcmVuJ3QgaW4gdGhlIGVudHJ5LnZhbHVlc1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgIGxldCB6TWF4ID0gbWF4KHZlcnRpY2VzLCAoZCk9Pk1hdGguYWJzKGRbMV0pKTsgLy8gZmluZCB0aGUgYWJzKHZhbHVlKSBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgdGhpcy5zY2FsZS56XG4gICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAvLyB2aXN1YWwgcmVuZGVyaW5nXG4gICAgICAgIGNvbnN0IHZpb2xpbkcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgYHZpb2xpbiR7Z0luZGV4fS0ke2VudHJ5LmxhYmVsfWApO1xuXG4gICAgICAgIGxldCB2aW9saW4gPSBhcmVhKClcbiAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGRbMV0pKVxuICAgICAgICAgICAgLngxKChkKSA9PiB0aGlzLnNjYWxlLnooLWRbMV0pKVxuICAgICAgICAgICAgLnkoKGQpID0+IHRoaXMuc2NhbGUueShkWzBdKSk7XG5cbiAgICAgICAgY29uc3QgdlBhdGggPSB2aW9saW5HLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgIC5kYXR1bSh2ZXJ0aWNlcylcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2aW9saW4pXG4gICAgICAgICAgICAuY2xhc3NlZChcInZpb2xpblwiLCB0cnVlKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5jb2xvciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZW50cnkuY29sb3I7XG4gICAgICAgICAgICAgICAgLy8gYWx0ZXJuYXRlIHRoZSBvZGQgYW5kIGV2ZW4gY29sb3JzLCBtYXliZSB3ZSBkb24ndCB3YW50IHRoaXMgZmVhdHVyZVxuICAgICAgICAgICAgICAgIGlmKGdJbmRleCUyID09IDApIHJldHVybiBcIiM5MGMxYzFcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIjOTRhOGI4XCI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBib3hwbG90XG4gICAgICAgIGNvbnN0IHExID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjI1KTtcbiAgICAgICAgY29uc3QgcTMgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuNzUpO1xuICAgICAgICBjb25zdCB6ID0gdGhpcy5zY2FsZS56LmRvbWFpbigpWzFdLzM7XG5cbiAgICAgICAgaWYoc2hvd1doaXNrZXIpe1xuICAgICAgICAgICAgLy8gdGhlIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMgb2YgZW50cnkudmFsdWVzXG4gICAgICAgICAgICBjb25zdCBpcXIgPSBNYXRoLmFicyhxMy1xMSk7XG4gICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDxxMysoaXFyKjEuNSkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyID0gbWluKGVudHJ5LnZhbHVlcy5maWx0ZXIoKGQpPT5kPnExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgZG9tLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcIndoaXNrZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigwKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHRoaXMuc2NhbGUueigwKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHRoaXMuc2NhbGUueSh1cHBlcikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobG93ZXIpKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIiNmZmZcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgIHZpb2xpbkcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5hYnModGhpcy5zY2FsZS56KC16KS10aGlzLnNjYWxlLnooeikpKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5hYnModGhpcy5zY2FsZS55KHEzKSAtIHRoaXMuc2NhbGUueShxMSkpKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1pclwiKTtcblxuICAgICAgICAvLyBtZWRpYW5cbiAgICAgICAgY29uc3QgbWVkID0gbWVkaWFuKGVudHJ5LnZhbHVlcyk7XG4gICAgICAgIHZpb2xpbkcuYXBwZW5kKFwibGluZVwiKSAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5zY2FsZS56KHopKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW1lZGlhblwiKTtcblxuICAgICAgICAvLyBtb3VzZSBldmVudHNcbiAgICAgICAgdmlvbGluRy5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgdlBhdGguY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZW50cnkpO1xuICAgICAgICAgICAgaWYodGhpcy50b29sdGlwID09PSB1bmRlZmluZWQpIGNvbnNvbGUud2FybihcIkdyb3VwVmlvbGluIFdhcm5pbmc6IHRvb2x0aXAgbm90IGRlZmluZWRcIik7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZ3JvdXAgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5sYWJlbCArIFwiPGJyLz5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTWVkaWFuOiBcIiArIG1lZC50b1ByZWNpc2lvbig0KSArIFwiPGJyLz5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2aW9saW5HLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9zYW5pdHlDaGVjayhkYXRhKXtcbiAgICAgICAgY29uc3QgYXR0ciA9IFtcImdyb3VwXCIsIFwibGFiZWxcIiwgXCJ2YWx1ZXNcIl07XG5cbiAgICAgICAgZGF0YS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICBhdHRyLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZFthXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBcIkdyb3VwZWRWaW9saW46IGlucHV0IGRhdGEgZXJyb3IuXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaWYgKDAgPT0gZC52YWx1ZXMubGVuZ3RoKSB0aHJvdyBcIlZpb2xpbjogSW5wdXQgZGF0YSBlcnJvclwiO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfYWRkR3JvdXBEaXZpZGVyKGRvbSl7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IHRoaXMuc2NhbGUueC5kb21haW4oKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IE1hdGguYWJzKHRoaXMuc2NhbGUueCh0aGlzLnNjYWxlLnguZG9tYWluKClbMV0pIC0gdGhpcy5zY2FsZS54KHRoaXMuc2NhbGUueC5kb21haW4oKVswXSkgLSB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuXG4gICAgICAgIGNvbnN0IGdldFggPSAoZywgaSk9PiB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZ3JvdXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FsZS54KGcpICsgK3RoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSArIChwYWRkaW5nLzIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLnZsaW5lXCIpLmRhdGEoZ3JvdXBzKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuY2xhc3NlZChcInZsaW5lXCIsIHRydWUpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIGdldFgpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIGdldFgpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIHRoaXMuc2NhbGUueS5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkucmFuZ2UoKVsxXSlcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAoZywgaSk9PmkhPWdyb3Vwcy5sZW5ndGgtMT8xOjApXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJyZ2IoODYsOTgsMTA3KVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjUpXG5cbiAgICB9XG5cblxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7anNvbiwgdHN2fSBmcm9tIFwiZDMtZmV0Y2hcIjtcbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGwsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2tleXMsIHZhbHVlc30gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcblxuaW1wb3J0IHtcbiAgICBnZXRHdGV4VXJscyxcbiAgICBwYXJzZUdlbmVzLFxuICAgIHBhcnNlVGlzc3VlcyxcbiAgICBwYXJzZU1lZGlhbkV4cHJlc3Npb24sXG4gICAgcGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbiwgcGFyc2VUaXNzdWVTaXRlcyxcbn0gZnJvbSBcIi4vbW9kdWxlcy9ndGV4RGF0YVBhcnNlclwiO1xuXG5pbXBvcnQge1xuICAgIGNyZWF0ZVRpc3N1ZUdyb3VwTWVudSxcbiAgICBwYXJzZVRpc3N1ZUdyb3VwTWVudVxufSBmcm9tIFwiLi9tb2R1bGVzL2d0ZXhNZW51QnVpbGRlclwiO1xuXG5pbXBvcnQge2NyZWF0ZVRpc3N1ZU1lbnV9IGZyb20gXCIuL21vZHVsZXMvZ3RleE1lbnVCdWlsZGVyXCI7XG5pbXBvcnQge2NvbG9yQ2hhcnR9IGZyb20gXCIuL21vZHVsZXMvY29sb3JzXCI7XG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWdcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcFwiO1xuaW1wb3J0IEdyb3VwZWRWaW9saW4gZnJvbSBcIi4vbW9kdWxlcy9Hcm91cGVkVmlvbGluXCI7XG5cbi8qKlxuICogQ3JlYXRlIHRoZSB0aXNzdWUgKGRhdGFzZXQpIGRyb3Bkb3duIG1lbnUgdXNpbmcgc2VsZWN0MlxuICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSBkb20gSUQgb2YgdGhlIG1lbnVcbiAqIEBwYXJhbSB1cmwge1N0cmluZ30gdGhlIHRpc3N1ZSB3ZWIgc2VydmljZSB1cmxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURhdGFzZXRNZW51KGRvbUlkLCB1cmw9Z2V0R3RleFVybHMoKS50aXNzdWUpe1xuICAgIGNyZWF0ZVRpc3N1ZU1lbnUoZG9tSWQsIHVybCk7IC8vIGN1cnJlbnRseSBkYXRhc2V0cyBvbmx5IGluY2x1ZGUgR1RFeCB0aXNzdWVzXG59XG5cbi8qKlxuICogUmVuZGVyIHRvcCBleHByZXNzZWQgZ2VuZXMgaW4gYSBnaXZlbiB0aXNzdWVcbiAqIEBwYXJhbSB0aXNzdWVJZFxuICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSBkZW5kcm9oZWF0bWFwJ3MgRElWIElEXG4gKiBAcGFyYW0gdG9vbGJhcklkIHtTdHJpbmd9IHRoZSB0b29sIGJhciBET00gSURcbiAqIEBwYXJhbSBpbmZvSWQge1N0cmluZ30gdGhlIG1lc3NhZ2UgYm94IERPTSBJRFxuICogQHBhcmFtIHVybHMge0RpY3Rpb25hcnl9IG9mIEdURXggd2ViIHNlcnZpY2VzIHVybHNcbiAqIEBwYXJhbSBmaWx0ZXJHZW5lcyB7Qm9vbGVhbn0gdHVybiBvbiB0aGUgZmlsdGVyIG9mIHNwZWNpYWwgY2F0ZWdvcmllcyBvZiBnZW5lcyAoZS5nLiBtaXRvY2hvbmRyaWFsIGdlbmVzKVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGF1bmNoVG9wRXhwcmVzc2VkKHRpc3N1ZUlkLCBoZWF0bWFwUm9vdElkLCB2aW9saW5Sb290SWQsIHVybHM9Z2V0R3RleFVybHMoKSwgZmlsdGVyR2VuZXM9dHJ1ZSl7XG4gICAgLy8gZ2V0dGluZyB0aGUgdG9wIGV4cHJlc3NlZCBnZW5lcyBpbiB0aXNzdWVJZFxuICAgIGNvbnN0IHVybCA9IGZpbHRlckdlbmVzP3VybHMudG9wSW5UaXNzdWVGaWx0ZXJlZDp1cmxzLnRvcEluVGlzc3VlO1xuICAgIGNvbnN0ICRmaWx0ZXJJbmZvRGl2ID0gJChgI2ZpbHRlckluZm9gKS5sZW5ndGg9PTA/JCgnPGRpdi8+JykuYXR0cignaWQnLCAnZmlsdGVySW5mbycpLmFwcGVuZFRvKCcjbWVzc2FnZUJveCcpOiQoYCNmaWx0ZXJJbmZvYCk7XG4gICAgaWYoZmlsdGVyR2VuZXMpICRmaWx0ZXJJbmZvRGl2Lmh0bWwoXCJNaXRvY2hvbmRyaWFsIGdlbmVzIGFyZSBleGNsdWRlZC48YnIvPlwiKTtcbiAgICBlbHNlICRmaWx0ZXJJbmZvRGl2Lmh0bWwoXCJNaXRvY2hvbmRyaWFsIGdlbmVzIGFyZSBpbmNsdWRlZC48YnIvPlwiKTtcblxuICAgIGpzb24odXJsKyB0aXNzdWVJZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0cyl7IC8vIHRvcCA1MCBleHByZXNzZWQgZ2VuZXMgaW4gdGlzc3VlSWRcbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSAndG9wRXhwcmVzc2VkR2VuZSc7XG4gICAgICAgICAgICBpZighcmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShhdHRyKSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXN1bHRzKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdG9wR2VuZUxpc3QgPSByZXN1bHRzW2F0dHJdLm1hcCgoZCk9PntcbiAgICAgICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eSgnZ2VuY29kZUlkJykpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGdlbmNvZGVJZCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkLmdlbmNvZGVJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3N0eWxlU2VsZWN0ZWRUaXNzdWUodGlzc3VlSWQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlYXJjaEJ5SWQoaGVhdG1hcFJvb3RJZCwgdmlvbGluUm9vdElkLCB0b3BHZW5lTGlzdCwgdW5kZWZpbmVkLCB1cmxzLCBmaWx0ZXJHZW5lcywgY2FsbGJhY2ssIHRpc3N1ZUlkKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBsYXVuY2goZm9ybUlkLCBtZW51SWQsIHN1Ym1pdElkLCBoZWF0bWFwUm9vdElkLCB2aW9saW5Sb290SWQsIHVybHM9Z2V0R3RleFVybHMoKSl7XG4gICAgbGV0IHRpc3N1ZUdyb3VwcyA9IHt9OyAvLyBhIGRpY3Rpb25hcnkgb2YgbGlzdHMgb2YgdGlzc3VlIHNpdGVzIGluZGV4ZWQgYnkgdGlzc3VlIGdyb3Vwc1xuXG4gICAganNvbih1cmxzLnRpc3N1ZVNpdGVzKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKXsgLy8gcmV0cmlldmUgYWxsIHRpc3N1ZSAoc3ViKXNpdGVzXG4gICAgICAgICAgICBjb25zdCBmb3JFcXRsID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgdGlzc3VlR3JvdXBzID0gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsKTtcbiAgICAgICAgICAgIGNyZWF0ZVRpc3N1ZUdyb3VwTWVudSh0aXNzdWVHcm91cHMsIG1lbnVJZCk7XG4gICAgICAgICAgICAkKGAjJHtzdWJtaXRJZH1gKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIGhpZGUgdGhlIHNlYXJjaCBmb3JtIGFmdGVyIHRoZSBlUVRMIHZpb2xpbiBwbG90cyBhcmUgcmVwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgJChgIyR7Zm9ybUlkfWApLnJlbW92ZUNsYXNzKFwic2hvd1wiKTsgLy8gZm9yIGJvb3RzdHJhcCA0XG4gICAgICAgICAgICAgICAgICAgICQoYCMke2Zvcm1JZH1gKS5yZW1vdmVDbGFzcyhcImluXCIpOyAvLyBmb3IgYm9vc3RyYXAgM1xuXG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBpbnB1dCBsaXN0IG9mIGdlbmVzXG4gICAgICAgICAgICAgICAgbGV0IGdsaXN0ID0gJCgnI2dlbmVzJykudmFsKCkucmVwbGFjZSgvIC9nLCAnJykudG9VcHBlckNhc2UoKS5zcGxpdCgnLCcpLmZpbHRlcigoZCk9PmQhPScnKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2xpc3QubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgICAgICBhbGVydCgnSW5wdXQgRXJyb3I6IEF0IGxlYXN0IG9uZSBnZW5lIG11c3QgYmUgcHJvdmlkZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93KCdHZW5lIGlucHV0IGVycm9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgaW5wdXQgdGlzc3VlIGxpc3RcbiAgICAgICAgICAgICAgICBsZXQgcXVlcnlUaXNzdWVJZHMgPSBwYXJzZVRpc3N1ZUdyb3VwTWVudSh0aXNzdWVHcm91cHMsIG1lbnVJZCk7XG4gICAgICAgICAgICAgICAgLy8gdGlzc3VlIGlucHV0IGVycm9yLWNoZWNraW5nXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5VGlzc3VlSWRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiSW5wdXQgRXJyb3I6IEF0IGxlYXN0IG9uZSB0aXNzdWUgbXVzdCBiZSBzZWxlY3RlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiVGlzc3VlIGlucHV0IGVycm9yXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2VhcmNoXG4gICAgICAgICAgICAgICAgLy8vLy8vLy8vLyBORVhUIC8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICBzZWFyY2hCeUlkKGhlYXRtYXBSb290SWQsIHZpb2xpblJvb3RJZCwgZ2xpc3QsIHF1ZXJ5VGlzc3VlSWRzLCB1cmxzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9KTtcbn1cbi8qKlxuICogU2VhcmNoIEdlbmUgRXhwcmVzc2lvbiBieSBJRFxuICogQHBhcmFtIGhlYXRtYXBSb290SWQge1N0cmluZ31cbiAqIEBwYXJhbSB2aW9saW5Sb290SWQge1N0cmluZ31cbiAqIEBwYXJhbSBnbGlzdCB7TGlzdH0gb2YgZ2VuZXNcbiAqIEBwYXJhbSB0bGlzdCB7TGlzdH0gb2YgdGlzc3Vlc1xuICogQHBhcmFtIHVybHNcbiAqIEBwYXJhbSBmaWx0ZXJHZW5lcyB7Qm9vbGVhbn0gb3IgdW5kZWZpbmVkIHdoZW4gaXQgaXNuJ3QgYXBwbGljYWJsZVxuICogQHBhcmFtIGNhbGxiYWNrXG4gKiBAcGFyYW0gcVRpc3N1ZSB7U3RyaW5nfTogb25seSBhcHBsaWNhYmxlIGZvciB0aGUgc2VhcmNoIG9mIHRvcCBleHByZXNzZWQgZ2VuZXMgaW4gdGhlIHFUaXNzdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaEJ5SWQoaGVhdG1hcFJvb3RJZCwgdmlvbGluUm9vdElkLCBnbGlzdCwgdGxpc3Q9dW5kZWZpbmVkLCB1cmxzPWdldEd0ZXhVcmxzKCksIGZpbHRlckdlbmVzPXVuZGVmaW5lZCwgY2FsbGJhY2s9dW5kZWZpbmVkLCBxVGlzc3VlPXVuZGVmaW5lZCl7XG4gICAgJCgnI3NwaW5uZXInKS5zaG93KCk7XG4gICAgJChgIyR7aGVhdG1hcFJvb3RJZH1gKS5lbXB0eSgpOyAvLyBjbGVhciB0aGUgcm9vdCBET00gY29udGVudFxuICAgICQoYCMke3Zpb2xpblJvb3RJZH1gKS5lbXB0eSgpOyAvLyBjbGVhciB0aGUgcm9vdCBET00gY29udGVudFxuXG4gICAgY29uc3QgTUFYID0gNTA7XG4gICAgY29uc3QgJG1lc3NhZ2UgPSAkKCc8ZGl2Lz48YnIvPicpLmF0dHIoJ2NsYXNzJywgJ2NvbC14cy0xMiBjb2wtbWQtMTInKS5jc3MoJ2NvbG9yJywgJ2ZpcmVicmljaycpLmFwcGVuZFRvKGAjJHtoZWF0bWFwUm9vdElkfWApO1xuICAgIGxldCBtZXNzYWdlID0gXCJcIjtcbiAgICBpZiAoZ2xpc3QubGVuZ3RoID4gTUFYKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBgV2FybmluZzogVG9vIG1hbnkgZ2VuZXMuIElucHV0IGxpc3QgdHJ1bmNhdGVkIHRvIHRoZSBmaXJzdCAke01BWH0uIDxici8+YDtcbiAgICAgICAgZ2xpc3QgPSBnbGlzdC5zbGljZSgwLCBNQVgpO1xuICAgIH1cbiAgICBQcm9taXNlLmFsbChbanNvbih1cmxzLnRpc3N1ZSksIGpzb24odXJscy5nZW5lSWQrZ2xpc3Quam9pbihcIixcIikpXSlcbiAgICAgICAudGhlbihmdW5jdGlvbihhcmdzKXtcbiAgICAgICAgICAgY29uc3QgdGlzc3VlcyA9IHBhcnNlVGlzc3VlcyhhcmdzWzBdKTtcblxuICAgICAgICAgICAvLyBnZW5lc1xuICAgICAgICAgICBjb25zdCBnZW5lcyA9IHBhcnNlR2VuZXMoYXJnc1sxXSk7XG4gICAgICAgICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgICAgICAgIG1lc3NhZ2UgKz0gX3ZhbGlkYXRlR2VuZXMoaGVhdG1hcFJvb3RJZCwgZ2VuZXMsIGdsaXN0KTtcblxuXG4gICAgICAgICAgIC8vIGdldCBtZWRpYW4gZXhwcmVzc2lvbiBkYXRhIGFuZCBjbHVzdGVycyBvZiB0aGUgaW5wdXQgZ2VuZXMgaW4gYWxsIHRpc3N1ZXNcbiAgICAgICAgICAgY29uc3QgZ1F1ZXJ5ID0gZ2VuZXMubWFwKChnKT0+Zy5nZW5jb2RlSWQpLmpvaW4oXCIsXCIpO1xuICAgICAgICAgICBjb25zdCB0UXVlcnkgPSB0bGlzdD09PXVuZGVmaW5lZD91bmRlZmluZWQ6dGxpc3Quam9pbihcIixcIik7XG4gICAgICAgICAgIGNvbnN0IGZldGNoVXJsID0gdFF1ZXJ5ID09PSB1bmRlZmluZWQ/IHVybHMubWVkR2VuZUV4cCArIFwiJmdlbmNvZGVJZD1cIiArIGdRdWVyeTogdXJscy5tZWRHZW5lRXhwICsgXCImZ2VuY29kZUlkPVwiICsgZ1F1ZXJ5ICsgXCImdGlzc3VlU2l0ZURldGFpbElkPVwiICsgdFF1ZXJ5O1xuICAgICAgICAgICBqc29uKGZldGNoVXJsKVxuICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZURhdGEpe1xuICAgICAgICAgICAgICAgICAgICQoJyNzcGlubmVyJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFNZXNzYWdlID0gX3ZhbGlkYXRlRXhwcmVzc2lvbkRhdGEoZURhdGEpO1xuICAgICAgICAgICAgICAgICAgIGlmIChkYXRhTWVzc2FnZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgJG1lc3NhZ2UuaHRtbChtZXNzYWdlICsgZGF0YU1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgJG1lc3NhZ2UuaHRtbChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgLyoqKioqIHJlbmRlciB0aGUgRGVuZHJvSGVhdG1hcCAqKioqKi9cbiAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHBhcnNlTWVkaWFuRXhwcmVzc2lvbihlRGF0YSk7IC8vIHRoZSBwYXJzZXIgZGV0ZXJtaW5lcyB0aGUgb3JpZW50YXRpb25zIG9mIHRoZSBoZWF0bWFwXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IGhlYXRtYXBSb290SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2aW9saW46IHZpb2xpblJvb3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN2ZzogYCR7aGVhdG1hcFJvb3RJZH0tc3ZnYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IFwiaGVhdG1hcFRvb2x0aXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IFwiaGVhdG1hcFRvb2xiYXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lOiBcImhlYXRtYXBDbG9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmU6IFwiaGVhdG1hcFNhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IFwiaGVhdG1hcEZpbHRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnQ6IFwiaGVhdG1hcFNvcnRUaXNzdWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHVzdGVyOiBcImhlYXRtYXBDbHVzdGVyVGlzc3VlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKioqKiBidWlsZCBkb20gY29tcG9uZW50cyAqKioqKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCQoYCMke2lkcy50b29sdGlwfWApLmxlbmd0aCA9PSAwKSAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGlkcy50b29sdGlwKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgW1widG9vbGJhclwiLCBcImNsb25lXCJdLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2Lz4nKS5hdHRyKFwiaWRcIiwgaWRzW2tleV0pLmFwcGVuZFRvKCQoYCMke2lkcy5yb290fWApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKioqKiogaGVhdG1hcCByZW5kZXJpbmcgKioqKiovXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXhDZWxsVyA9IDI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluQ2VsbFcgPSAyNTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxXID0gdGxpc3Q9PT11bmRlZmluZWQ/TWF0aC5jZWlsKHdpbmRvdy5pbm5lcldpZHRoL3Rpc3N1ZXMubGVuZ3RoKTpNYXRoLmNlaWwod2luZG93LmlubmVyV2lkdGgvdGxpc3QubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxXID0gY2VsbFc+bWF4Q2VsbFc/bWF4Q2VsbFc6KGNlbGxXPG1pbkNlbGxXP21pbkNlbGxXOmNlbGxXKTsgLy8gdGhpcyBlbnN1cmVzIGEgcmVhc29uYWJsZSBjZWxsV1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRtYXBNYXJnaW49e3RvcDo1MCwgcmlnaHQ6MjUwLCBib3R0b206MTcwLCBsZWZ0OjEwfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZWZ0UGFuZWxXID0gMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvb3RXID0gdGxpc3Q9PT11bmRlZmluZWQ/Y2VsbFcgKiB0aXNzdWVzLmxlbmd0aCArIGxlZnRQYW5lbFcgKyBkbWFwTWFyZ2luLnJpZ2h0ICsgZG1hcE1hcmdpbi5sZWZ0OmNlbGxXICogdGxpc3QubGVuZ3RoICsgbGVmdFBhbmVsVyArIGRtYXBNYXJnaW4ucmlnaHQgKyBkbWFwTWFyZ2luLmxlZnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IG5ldyBEZW5kcm9IZWF0bWFwQ29uZmlnKHJvb3RXLCBsZWZ0UGFuZWxXLCAxMDAsIGRtYXBNYXJnaW4sIDEyLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAoZURhdGEuY2x1c3RlcnMudGlzc3VlLCBlRGF0YS5jbHVzdGVycy5nZW5lLCBleHByZXNzaW9uLCBcIllsR25CdVwiLCAyLCBjb25maWcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VuZXMubGVuZ3RoIDwgMyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG9vIGZldyBnZW5lcyB0byBjbHVzdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIHRydWUsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7ZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcpfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdHJ1Y3QgaGFuZHkgZGF0YSBsb29rdXAgdGFibGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXNzdWVEaWN0ID0gdGlzc3Vlcy5yZWR1Y2UoKGEsIGQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkLmhhc093blByb3BlcnR5KFwidGlzc3VlU2l0ZURldGFpbElkXCIpKSB0aHJvdyBcInRpc3N1ZSBoYXMgbm90IGF0dHIgdGlzc3VlU2l0ZURldGFpbElkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW5lRGljdCA9IGRtYXAuZGF0YS5oZWF0bWFwLnJlZHVjZSgoYSwgZCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWQuaGFzT3duUHJvcGVydHkoXCJnZW5jb2RlSWRcIikpIHRocm93IFwiZ2VuZSBoYXMgbm8gYXR0ciBnZW5jb2RlSWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2QuZ2VuY29kZUlkXT1kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKioqKiogY3VzdG9taXphdGlvbiBmb3IgR1RFeCBleHByZXNzaW9uIGhlYXRtYXAgKioqKiovXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0b29sdGlwXG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwLmNyZWF0ZVRvb2x0aXAoaWRzLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2Ugcm93IGFuZCBjb2x1bW4gbGFiZWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2Ugcm93IGxhYmVscyB0byB0aXNzdWUgbmFtZXMgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdChcIiNcIiArIGRtYXAuY29uZmlnLnBhbmVscy5tYWluLmlkKS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gdGlzc3VlRGljdFtkXT09PXVuZGVmaW5lZD9kOnRpc3N1ZURpY3RbZF0udGlzc3VlU2l0ZURldGFpbCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0KFwiI1wiICsgZG1hcC5jb25maWcucGFuZWxzLm1haW4uaWQpLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBnZW5lRGljdFtkXT09PXVuZGVmaW5lZD9kOmdlbmVEaWN0W2RdLmdlbmVTeW1ib2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGlzc3VlIGNvbG9yIGJveGVzIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkVGlzc3VlQ29sb3JzKGRtYXAsIHRpc3N1ZURpY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSB0b29sYmFyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkVG9vbEJhcihkbWFwLCBpZHMsIHRpc3N1ZURpY3QsIHVybHMsIGZpbHRlckdlbmVzLCBxVGlzc3VlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW91c2UgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplTW91c2VFdmVudHMoZG1hcCwgdGlzc3VlRGljdCwgZ2VuZURpY3QsIHVybHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2shPSB1bmRlZmluZWQpIGNhbGxiYWNrKCk7XG5cbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7Y29uc29sZS5lcnJvcihlcnIpfSk7XG4gICAgICAgfSlcbiAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtjb25zb2xlLmVycm9yKGVycil9KTtcbn1cblxuZnVuY3Rpb24gX3ZhbGlkYXRlRXhwcmVzc2lvbkRhdGEoZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9IFwibWVkaWFuR2VuZUV4cHJlc3Npb25cIjtcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgXCJleHByZXNzaW9uIGRhdGEganNvbiBmb3JtYXQgZXJyb3IuXCI7XG4gICAgaWYgKGRhdGFbYXR0cl0ubGVuZ3RoID09IDApIHJldHVybiBcIk5vIGV4cHJlc3Npb24gZGF0YSBmb3VuZC5cIjtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfdmFsaWRhdGVHZW5lcyhkb21JZCwgZ2VuZXMsIGlucHV0KXtcbiAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG5cbiAgICBpZiAoZ2VuZXMubGVuZ3RoID09IDApIG1lc3NhZ2UgPSBcIkZhdGFsIEVycm9yOiB0aGUgZ2VuZSBsaXN0IGlzIGVtcHR5Ljxici8+XCI7XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChnZW5lcy5sZW5ndGggPCBpbnB1dC5sZW5ndGgpe1xuICAgICAgICAgICAgbGV0IGFsbElkcyA9IFtdO1xuICAgICAgICAgICAgZ2VuZXMuZm9yRWFjaCgoZyk9PntcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlIGEgbGlzdCBvZiBhbGwga25vd24gSURzXG4gICAgICAgICAgICAgICAgYWxsSWRzLnB1c2goZy5nZW5jb2RlSWQpO1xuICAgICAgICAgICAgICAgIGFsbElkcy5wdXNoKGcuZ2VuZVN5bWJvbFVwcGVyKTtcbiAgICAgICAgICAgICAgICBhbGxJZHMucHVzaChnLmVuc2VtYmxJZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBtaXNzaW5nR2VuZXMgPSBpbnB1dC5maWx0ZXIoKGcpPT4hYWxsSWRzLmluY2x1ZGVzKGcudG9Mb3dlckNhc2UoKSkmJiFhbGxJZHMuaW5jbHVkZXMoZy50b1VwcGVyQ2FzZSgpKSk7XG4gICAgICAgICAgICBpZiAobWlzc2luZ0dlbmVzLmxlbmd0aCA+IDApIG1lc3NhZ2UgPSBgV2FybmluZzogTm90IGFsbCBnZW5lcyBhcmUgZm91bmQ6ICR7bWlzc2luZ0dlbmVzLmpvaW4oXCIsXCIpfTxici8+YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyoqXG4gKiBGb3IgdG9wIGV4cHJlc3NlZCBxdWVyeSwgaGlnaGxpZ2h0IHRoZSBxdWVyeSB0aXNzdWUgbGFiZWxcbiAqIEBwYXJhbSB0aXNzdWVJZCB7U3RyaW5nfSB0aGUgdGlzc3VlIElEXG4gKiBEZXBlbmRlbmNpZXM6IGV4cHJlc3NNYXAuY3NzXG4gKi9cbmZ1bmN0aW9uIF9zdHlsZVNlbGVjdGVkVGlzc3VlKHRpc3N1ZUlkKXtcbiAgICBzZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIikuZmlsdGVyKChkKT0+ZD09dGlzc3VlSWQpXG4gICAgICAgIC5jbGFzc2VkKFwicXVlcnlcIiwgdHJ1ZSk7XG59XG5cbi8qKlxuICogQWRkcyBHVEV4IHRpc3N1ZSBjb2xvcnMgdG8gdGhlIHRpc3N1ZSBsYWJlbHMgKGNvbHVtbiBuYW1lcyBvZiB0aGUgaGVhdG1hcClcbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHBhcmFtIHRpc3N1ZURpY3Qge0RpY3Rpb25hcnl9IG9mIEdURXggdGlzc3VlIG9iamVjdHMgaW5kZXhlZCBieSB0aXNzdWVfaWRcbiAqL1xuZnVuY3Rpb24gX2FkZFRpc3N1ZUNvbG9ycyhkbWFwLCB0aXNzdWVEaWN0KXtcblxuICAgIGNvbnN0IGlkID0gZG1hcC5jb25maWcucGFuZWxzLm1haW4uaWQ7XG4gICAgY29uc3QgaGVhdG1hcCA9IGRtYXAub2JqZWN0cy5oZWF0bWFwO1xuXG4gICAgbGV0IGNlbGxzID0gc2VsZWN0KGAjJHtpZH1gKS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14Y29sb3JcIikuZGF0YShoZWF0bWFwLnhMaXN0KTtcbiAgICBsZXQgbGVhdmVzID0gc2VsZWN0KGAjJHtpZH1gKS5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKS5kYXRhKGhlYXRtYXAueExpc3QpO1xuXG4gICAgLy8gdXBkYXRlXG4gICAgY2VsbHMuYXR0cihcInhcIiwgKGQpPT5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIChkKT0+aGVhdG1hcC55U2NhbGUucmFuZ2UoKVsxXSArIDUpO1xuICAgIGxlYXZlcy5hdHRyKFwieFwiLCAoZCk9PmhlYXRtYXAueFNjYWxlKGQpKVxuICAgICAgICAuYXR0cihcInlcIiwgKGQpPT5oZWF0bWFwLnlTY2FsZS5yYW5nZSgpWzBdIC0gMTApO1xuXG4gICAgLy8gY3JlYXRlIG5ldyBlbGVtZW50c1xuICAgIGNlbGxzLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgKGQpPT5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIChkKT0+aGVhdG1hcC55U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgaGVhdG1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlYXRtYXAueVNjYWxlLmJhbmR3aWR0aCgpKjAuNSlcbiAgICAgICAgLmNsYXNzZWQoXCJleHAtbWFwLXhjb2xvclwiLCB0cnVlKVxuICAgICAgICAubWVyZ2UoY2VsbHMpXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IHRpc3N1ZURpY3RbZF0gPT09IHVuZGVmaW5lZD8gXCIjMDAwMDAwXCI6IGAjJHt0aXNzdWVEaWN0W2RdLmNvbG9ySGV4fWApO1xuXG4gICAgLy8gZXhpdCBhbmQgcmVtb3ZlXG4gICAgY2VsbHMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaWYgKGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5kb21haW4oKS5sZW5ndGggPiAxNSl7XG4gICAgICAgIGxlYXZlcy5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCk9PmhlYXRtYXAueFNjYWxlKGQpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKT0+aGVhdG1hcC55U2NhbGUucmFuZ2UoKVswXSAtIDEwKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBoZWF0bWFwLnhTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlYXRtYXAueVNjYWxlLmJhbmR3aWR0aCgpKjAuNSlcbiAgICAgICAgICAgIC5jbGFzc2VkKFwibGVhZi1jb2xvclwiLCB0cnVlKVxuICAgICAgICAgICAgLm1lcmdlKGxlYXZlcylcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IHRpc3N1ZURpY3RbZF0gPT09IHVuZGVmaW5lZD8gXCIjMDAwMDAwXCI6IGAjJHt0aXNzdWVEaWN0W2RdLmNvbG9ySGV4fWApO1xuICAgICAgICBsZWF2ZXMuZXhpdCgpLnJlbW92ZSgpO1xuICAgIH1cblxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSB0aGUgZGVuZHJvcEhlYXRtYXAgbW91c2UgZXZlbnRzXG4gKiBkZXBlbmRlbmNpZXM6IENTUyBjbGFzc2VzIGZyb20gZXhwcmVzc01hcC5jc3NcbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHBhcmFtIHRpc3N1ZURpY3Qge0RpY3Rpb25hcnl9OiB0aXNzdWUgb2JqZWN0cyBpbmRleGVkIGJ5IHRpc3N1ZV9pZCwgd2l0aCBhdHRyOiB0aXNzdWVfbmFtZVxuICogQHBhcmFtIGdlbmVEaWN0IHtEaWN0aW9uYXJ5fTogZ2VuZSBvYmplY3RzIGluZGV4ZWQgYnkgZ2VuY29kZSBJRCwgd2l0aCBhdHRyOiBnZW5lU3ltYm9sXG4gKi9cbmZ1bmN0aW9uIF9jdXN0b21pemVNb3VzZUV2ZW50cyhkbWFwLCB0aXNzdWVEaWN0LCBnZW5lRGljdCwgdXJscz1nZXRHdGV4VXJscygpKSB7XG4gICAgY29uc3Qgc3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuICAgIGRtYXAuZGF0YS5leHRlcm5hbCA9IFtdO1xuICAgIGNvbnN0IGNlbGxNb3VzZW92ZXIgPSBmdW5jdGlvbihkKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICBkbWFwLm9iamVjdHMuaGVhdG1hcC5jZWxsTW91c2VvdmVyKHNlbGVjdGVkKTsgLy8gY2FsbCB0aGUgZGVmYXVsdCBoZWF0bWFwIG1vdXNlIG92ZXIgZXZlbnQgZmlyc3RcbiAgICAgICAgbGV0IHRpc3N1ZSA9IHRpc3N1ZURpY3RbZC54XT09PXVuZGVmaW5lZD9kLng6dGlzc3VlRGljdFtkLnhdLnRpc3N1ZVNpdGVEZXRhaWw7XG4gICAgICAgIGxldCBnZW5lID0gZ2VuZURpY3RbZC55XT09PXVuZGVmaW5lZD9kLnk6Z2VuZURpY3RbZC55XS5nZW5lU3ltYm9sO1xuXG4gICAgICAgIHRvb2x0aXAuc2hvdyhgVGlzc3VlOiAke3Rpc3N1ZX08YnIvPiBHZW5lOiAke2dlbmV9PGJyLz4gTWVkaWFuIFRQTTogJHtwYXJzZUZsb2F0KGQub3JpZ2luYWxWYWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDQpfWApXG5cbiAgICB9O1xuXG4gICAgY29uc3QgY2VsbE1vdXNlb3V0ID0gZnVuY3Rpb24oZCl7XG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCIqXCIpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICB9O1xuXG4gICAgLy8gZ2VuZSBib3hwbG90IHByZXA6IGFzc2lnbiBhIGNvbG9ySW5kZXggdG8gZWFjaCBnZW5lXG4gICAgY29uc3QgY29sb3JzID0gY29sb3JDaGFydCgpO1xuICAgIGtleXMoZ2VuZURpY3QpLmZvckVhY2goKGQsIGkpPT57Z2VuZURpY3RbZF0uY29sb3IgPSBjb2xvcnNbaV19KTtcbiAgICBjb25zdCB5bGFiZWxDbGljayA9IGZ1bmN0aW9uKGQpe1xuICAgICAgICBsZXQgcyA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgbGV0IGFjdGlvbiA9IFwiXCI7XG5cbiAgICAgICAgLy8gdG9nZ2xlcyBjbGljay91bmNsaWNrIGV2ZW50c1xuICAgICAgICAvLyBpZiB0aGUgRE9NIGhhcyB0aGUgY2xhc3MgXCJjbGlja2VkXCIsIHRoZW4gdW5jbGljayBpdFxuICAgICAgICBpZiAocy5jbGFzc2VkKFwiY2xpY2tlZFwiKSkge1xuICAgICAgICAgICAgcy5jbGFzc2VkKFwiY2xpY2tlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBhY3Rpb24gPSBcImRlbGV0ZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZWxzZSBjbGljayBpdFxuICAgICAgICAgICAgLy8gc2VsZWN0QWxsKFwiLmNsaWNrZWRcIikuY2xhc3NlZChcImNsaWNrZWRcIiwgZmFsc2UpOyAvLyBmaXJzdCBjbGVhcnMgYWxsIGNsaWNrZWQgbGFiZWxzIGlmIGFueVxuICAgICAgICAgICAgcy5jbGFzc2VkKFwiY2xpY2tlZFwiLCB0cnVlKTsgLy8gY2xpY2sgdGhpcyBET00gZWxlbWVudFxuICAgICAgICAgICAgYWN0aW9uID0gXCJhZGRcIjtcbiAgICAgICAgfVxuICAgICAgICBfcmVuZGVyVmlvbGluUGxvdChhY3Rpb24sIGQsIGdlbmVEaWN0LCB0aXNzdWVEaWN0LCBkbWFwLCB1cmxzKTtcbiAgICB9O1xuXG4gICAgc3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLWNlbGxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGNlbGxNb3VzZW92ZXIpXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGNlbGxNb3VzZW91dCk7XG5cbiAgICBzdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIilcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgeWxhYmVsQ2xpY2spO1xufVxuXG4vKipcbiAqIHJlbmRlcnMgdGhlIGdlbmUgZXhwcmVzc2lvbiB2aW9saW4gcGxvdFxuICogQHBhcmFtIGFjdGlvbiB7RU5VTX0gYWRkLCBuZXcsIG9yIGRlbGV0ZVxuICogQHBhcmFtIGdlbmUge1N0cmluZ30gZ2VuY29kZSBJRFxuICogQHBhcmFtIGdlbmVEaWN0IHtEaWN0aW9uYXJ5fSBnZW5jb2RlIElEID0+IGdlbmUgb2JqZWN0IHdpdGggYXR0cmlidXRlOiBpbmRleFxuICogQHBhcmFtIHRpc3N1ZURpY3Qge0RpY3Rpb25hcnl9IHRpc3N1ZSBvYmplY3RzIGluZGV4ZWQgYnkgdGlzc3VlIElEXG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqL1xuZnVuY3Rpb24gX3JlbmRlclZpb2xpblBsb3QoYWN0aW9uLCBnZW5lLCBnZW5lRGljdCwgdGlzc3VlRGljdCwgZG1hcCwgdXJscz1nZXRHdGV4VXJscygpKSB7XG4gICAgLy8gYWN0aW9uXG4gICAgc3dpdGNoKGFjdGlvbikge1xuICAgICAgICBjYXNlIFwiZGVsZXRlXCI6IHtcbiAgICAgICAgICAgIGRtYXAuZGF0YS5leHRlcm5hbCA9IGRtYXAuZGF0YS5leHRlcm5hbC5maWx0ZXIoKGQpPT5kLmdlbmNvZGVJZCE9Z2VuZSk7XG4gICAgICAgICAgICBfcmVuZGVyVmlvbGluSGVscGVyKGRtYXAuZGF0YS5leHRlcm5hbCwgZG1hcCwgdGlzc3VlRGljdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYWRkXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IHVybHMuZ2VuZUV4cCArIGdlbmU7XG4gICAgICAgICAgICBjb25zdCBjb2xvcnMgPSB7fTtcbiAgICAgICAgICAgIGNvbG9yc1tnZW5lXSA9IGdlbmVEaWN0W2dlbmVdLmNvbG9yO1xuICAgICAgICAgICAgY29uc3QgdGxpc3QgPSBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuZG9tYWluKCk7XG4gICAgICAgICAgICBqc29uKHVybClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG1hcC5kYXRhLmV4dGVybmFsID09PSB1bmRlZmluZWQpIGRtYXAuZGF0YS5leHRlcm5hbCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBkbWFwLmRhdGEuZXh0ZXJuYWwgPSBkbWFwLmRhdGEuZXh0ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQocGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbihkLCB0cnVlLCBjb2xvcnMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoZCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaWx0ZXJpbmcgdGhlIHRpc3N1ZXMgdGhhdCBhcmVuJ3Qgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGxpc3QuaW5kZXhPZihkLmdyb3VwKSA+IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIF9yZW5kZXJWaW9saW5IZWxwZXIoZG1hcC5kYXRhLmV4dGVybmFsLCBkbWFwLCB0aXNzdWVEaWN0KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe2NvbnNvbGUuZXJyb3IoZXJyKX0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiYWN0aW9uIG5vdCB1bmRlcnN0b29kLlwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfcmVuZGVyVmlvbGluSGVscGVyKGRhdGEsIGRtYXAsIHRpc3N1ZURpY3Qpe1xuICAgIC8vIHBsb3QgY29uZmlndXJhdGlvbnNcbiAgICBjb25zdCBpZCA9IHtcbiAgICAgICAgcm9vdDogXCJ2aW9saW5Sb290XCIsIC8vIHRoZSByb290IDxkaXY+IElEXG4gICAgICAgIHRvb2x0aXA6IFwidmlvbGluVG9vbHRpcFwiLFxuICAgICAgICB0b29sYmFyOiBcInZpb2xpblRvb2xiYXJcIixcbiAgICAgICAgY2xvbmU6IFwidmlvbGluQ2xvbmVcIixcbiAgICAgICAgY2hhcnQ6IFwidmlvbGluUGxvdFwiLFxuICAgICAgICBzdmc6IFwidmlvbGluU3ZnXCIsXG4gICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIHNhdmU6IFwidmlvbGluU2F2ZVwiXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmcgdGhlIHJlcXVpcmVkIERPTSBlbGVtZW50c1xuICAgIGNvbnN0IHJvb3RJZCA9IGAjJHtpZC5yb290fWA7XG4gICAgY29uc3QgdG9vbHRpcElkID0gYCMke2lkLnRvb2x0aXB9YDtcbiAgICBpZiAoJChyb290SWQpLmxlbmd0aCA9PSAwKSB0aHJvdyAnVmlvbGluIFBsb3QgRXJyb3I6IHJvb3RJZCBkb2VzIG5vdCBleGlzdC4nO1xuICAgIGlmICgkKHRvb2x0aXBJZCkubGVuZ3RoID09IDApICQoJzxkaXYvPicpLmF0dHIoJ2lkJywgaWQudG9vbHRpcCkuYXBwZW5kVG8oJCgnYm9keScpKTsgLy8gY3JlYXRlIGl0IGlmIG5vdCBhbHJlYWR5IHByZXNlbnQgb24gdGhlIGh0bWwgZG9jdW1lbnRcblxuICAgIC8vIGNsZWFyIHByZXZpb3VzbHkgcmVuZGVyZWQgcGxvdFxuICAgIHNlbGVjdChyb290SWQpLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG5cbiAgICAvLyByZWJ1aWxkIHRoZSBkb20gY29tcG9uZW50cyB3aXRoaW4gdGhlIHJvb3QgZGl2XG4gICAgW1widG9vbGJhclwiLCBcImNoYXJ0XCIsIFwiY2xvbmVcIl0uZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAkKCc8ZGl2Lz4nKS5hdHRyKFwiaWRcIiwgaWRba2V5XSkuYXBwZW5kVG8oJChyb290SWQpKTtcbiAgICB9KTtcblxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID09IDApeyAvLyBubyBleHByZXNzaW9uIGRhdGEsIG5vIG5lZWQgdG8gcHJvY2VlZFxuICAgICAgICBzZWxlY3Qocm9vdElkKS5zdHlsZShcIm9wYWNpdHlcIiwgMC4wKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB0aXNzdWVPcmRlciBpcyBhIGxpc3Qgb2YgdGlzc3VlIG9iamVjdHMge2lkOmRpc3BsYXkgbmFtZX0gaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHggYXhpcyBvZiB0aGUgaGVhdCBtYXAuXG4gICAgbGV0IHRpc3N1ZU9yZGVyID0gZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmRvbWFpbigpLm1hcCgoZCwgaSkgPT4ge3JldHVybiB7aWQ6ZCwgbmFtZTp0aXNzdWVEaWN0W2RdLnRpc3N1ZVNpdGVEZXRhaWx9fSk7XG4gICAgY29uc3QgZ2VuZXMgPSBkYXRhLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLmxhYmVsXT0xOyByZXR1cm4gYXJyfSwge30pO1xuICAgIGNvbnN0IGdDb3VudHMgPSBPYmplY3Qua2V5cyhnZW5lcykubGVuZ3RoO1xuXG5cbiAgICBpZiAoZ0NvdW50cyA9PSAwKXtcbiAgICAgICAgc2VsZWN0KHJvb3RJZCkuc3R5bGUoXCJvcGFjaXR5XCIsIDAuMCk7XG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNlbGVjdChyb290SWQpLnN0eWxlKFwib3BhY2l0eVwiLCAxLjApOyAvLyBtYWtlcyB0aGUgYm94cGxvdCBzZWN0aW9uIHZpc2libGVcbiAgICBjb25zdCBtYXJnaW4gPSBfc2V0VmlvbGluUGxvdE1hcmdpbnMoNTAsIDUwLCAxNTAsIGRtYXAuY29uZmlnLnBhbmVscy5tYWluLngpO1xuICAgIGxldCB3aWR0aCA9IDIwICogT2JqZWN0LmtleXMoZ2VuZXMpLmxlbmd0aCAqIHRpc3N1ZU9yZGVyLmxlbmd0aDtcbiAgICB3aWR0aCA9IHdpZHRoIDwgZG1hcC5jb25maWcucGFuZWxzLm1haW4udz8gZG1hcC5jb25maWcucGFuZWxzLm1haW4udzogd2lkdGg7XG4gICAgLy8gd2lkdGggPSB3aWR0aCA8IDMwMD8zMDA6IHdpZHRoO1xuICAgIGNvbnN0IGRpbSA9IF9zZXRWaW9saW5QbG90RGltZW5zaW9ucyh3aWR0aCwgMTUwLCBtYXJnaW4pO1xuXG5cbiAgICAvLyByZW5kZXIgdGhlIHZpb2xpblxuICAgIGNvbnN0IGRvbSA9IHNlbGVjdChgIyR7aWQuY2hhcnR9YClcbiAgICAgICAgICAgICAgICAvLyAuc3R5bGUoXCJvcGFjaXR5XCIsIDEuMClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBkaW0ub3V0ZXJXaWR0aClcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBkaW0ub3V0ZXJIZWlnaHQpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBpZC5zdmcpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApO1xuXG4gICAgY29uc3QgdmlvbGluID0gbmV3IEdyb3VwZWRWaW9saW4oZGF0YSk7XG4gICAgY29uc3QgdG9vbHRpcCA9IHZpb2xpbi5jcmVhdGVUb29sdGlwKGlkLnRvb2x0aXApO1xuICAgIGNvbnN0IHRvb2xiYXIgPSB2aW9saW4uY3JlYXRlVG9vbGJhcihpZC50b29sYmFyLCB0b29sdGlwKTtcbiAgICB0b29sYmFyLmNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uKGlkLmJ1dHRvbnMuc2F2ZSwgaWQuc3ZnLCBgJHtpZC5yb290fS1zYXZlLnN2Z2AsIGlkLmNsb25lKTtcblxuICAgIGNvbnN0IHNob3dEaXZpZGVyID0gZ0NvdW50cyA9PSAxPyBmYWxzZTogdHJ1ZTtcbiAgICB2aW9saW4ucmVuZGVyKGRvbSwgZGltLndpZHRoLCBkaW0uaGVpZ2h0LCAwLjMwLCB0aXNzdWVPcmRlci5tYXAoKGQpPT5kLmlkKSwgW10sIFwibG9nMTAoVFBNKVwiLCB0cnVlLCBmYWxzZSwgMCwgZmFsc2UsIHNob3dEaXZpZGVyLCB0cnVlKTtcblxuICAgIC8vIGNoZWNrIGFuZCBhZGp1c3QgdGhlIHN2ZyB3aWR0aFxuICAgIGNvbnN0IHZpb2xpbkxlZ2VuZFcgPSBOdW1iZXIoZG9tLnNlbGVjdCgnI3Zpb2xpbkxlZ2VuZCcpLnNlbGVjdCgncmVjdCcpLmF0dHIoJ3dpZHRoJykpO1xuICAgIGxldCBzdmdXID0gTnVtYmVyKHNlbGVjdChgIyR7aWQuY2hhcnR9YCkuc2VsZWN0KCdzdmcnKS5hdHRyKCd3aWR0aCcpKTtcbiAgICBzdmdXID0gc3ZnVyA8IHZpb2xpbkxlZ2VuZFcgKyAxNTA/dmlvbGluTGVnZW5kVyArIDE1MDpzdmdXO1xuICAgIHNlbGVjdChgIyR7aWQuY2hhcnR9YCkuc2VsZWN0KCdzdmcnKS5hdHRyKCd3aWR0aCcsIHN2Z1cpO1xuXG4gICAgX2FkZFZpb2xpblRpc3N1ZUNvbG9yQmFuZCh2aW9saW4sIGRvbSwgdGlzc3VlRGljdCwgXCJib3R0b21cIik7XG4gICAgX2NoYW5nZVZpb2xpblhMYWJlbChkb20sIHRpc3N1ZURpY3QpO1xufVxuXG4vKipcbiAqIFNldCB0aGUgbWFyZ2lucyBvZiB0aGUgdmlvbGluIHBsb3RcbiAqIEBwYXJhbSB0b3Age0ludGVnZXJ9XG4gKiBAcGFyYW0gcmlnaHQge0ludGVnZXJ9XG4gKiBAcGFyYW0gYm90dG9tIHtpbnRlZ2VyfVxuICogQHBhcmFtIGxlZnQge0ludGVnZXJ9XG4gKiBAcmV0dXJucyB7e3RvcDogbnVtYmVyLCByaWdodDogbnVtYmVyLCBib3R0b206IG51bWJlciwgbGVmdDogbnVtYmVyfX1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9zZXRWaW9saW5QbG90TWFyZ2lucyh0b3A9NTAsIHJpZ2h0PTUwLCBib3R0b209NTAsIGxlZnQ9NTApe1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgfTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gd2lkdGgge0ludGVnZXJ9XG4gKiBAcGFyYW0gaGVpZ2h0IHtJbnRlZ2VyfVxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxuICogQHJldHVybnMge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3V0ZXJXaWR0aDogbnVtYmVyLCBvdXRlckhlaWdodDogbnVtYmVyfX1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9zZXRWaW9saW5QbG90RGltZW5zaW9ucyh3aWR0aD0xMjAwLCBoZWlnaHQ9MjUwLCBtYXJnaW49X3NldE1hcmdpbnMoKSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgb3V0ZXJXaWR0aDogd2lkdGggKyAobWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpLFxuICAgICAgICBvdXRlckhlaWdodDogaGVpZ2h0ICsgKG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gX2FkZFZpb2xpblRpc3N1ZUNvbG9yQmFuZChwbG90LCBkb20sIHRpc3N1ZURpY3QsIGxvYz1cInRvcFwiKXtcbiAgICAgLy8vLy8gYWRkIHRpc3N1ZSBjb2xvcnNcbiAgICBjb25zdCB0aXNzdWVHID0gZG9tLmFwcGVuZChcImdcIik7XG5cbiAgICB0aXNzdWVHLnNlbGVjdEFsbChcIi50Y29sb3JcIikuZGF0YShwbG90LnNjYWxlLnguZG9tYWluKCkpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5jbGFzc2VkKFwidGNvbG9yXCIsIHRydWUpXG4gICAgICAgIC5hdHRyKFwieFwiLCAoZyk9PnBsb3Quc2NhbGUueChnKSApXG4gICAgICAgIC5hdHRyKFwieVwiLCAoZyk9PmxvYz09XCJ0b3BcIj9wbG90LnNjYWxlLnkucmFuZ2UoKVsxXS01OnBsb3Quc2NhbGUueS5yYW5nZSgpWzBdLTUpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgKGcpPT5wbG90LnNjYWxlLnguYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDUpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAwKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChnKT0+YCMke3Rpc3N1ZURpY3RbZ10uY29sb3JIZXh9YClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjcpO1xufVxuXG5mdW5jdGlvbiBfY2hhbmdlVmlvbGluWExhYmVsKGRvbSwgdGlzc3VlRGljdCl7XG4gICAgLyoqKioqIENoYW5nZSByb3cgbGFiZWxzIHRvIHRpc3N1ZSBuYW1lcyAqKioqKi9cbiAgICBkb20uc2VsZWN0KFwiLnZpb2xpbi14LWF4aXNcIikuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAudGV4dCgoZCkgPT4gdGlzc3VlRGljdFtkXT09PXVuZGVmaW5lZD9kOnRpc3N1ZURpY3RbZF0udGlzc3VlU2l0ZURldGFpbCk7XG5cbn1cblxuLyoqXG4gKiBBZGQgdGhlIHRvb2xiYXJcbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHBhcmFtIGlkcyB7RGljdGlvbmFyeX0gb2YgZG9tIElEcyB3aXRoIGJ1dHRvbnNcbiAqIEBwYXJhbSB0aXNzdWVEaWN0IHtEaWN0aW9uYXJ5fSBvZiB0aXNzdWUgb2JqZWN0cyBpbmRleGVkIGJ5IHRpc3N1ZSBJRFxuICogQHBhcmFtIHVybHMge0RpY3Rpb25hcnl9IG9mIEdURXggd2ViIHNlcnZpY2UgVVJMc1xuICogQHBhcmFtIGZpbHRlckdlbmVzIHtCb29sZWFufVxuICogQHBhcmFtIHFUaXNzdWUge1N0cmluZ30gb2YgdXNlci1kZWZpbmVkIHF1ZXJ5IHRpc3N1ZXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9hZGRUb29sQmFyKGRtYXAsIGlkcywgdGlzc3VlRGljdCwgdXJscz1nZXRHdGV4VXJscygpLCBmaWx0ZXJHZW5lcz11bmRlZmluZWQsIHFUaXNzdWU9dW5kZWZpbmVkKXtcbiAgICBsZXQgdG9vbGJhciA9IGRtYXAuY3JlYXRlVG9vbGJhcihpZHMudG9vbGJhciwgZG1hcC50b29sdGlwKTtcbiAgICB0b29sYmFyLmNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uKGlkcy5idXR0b25zLnNhdmUsIGlkcy5zdmcsIGAke2lkcy5yb290fS1zYXZlLnN2Z2AsIGlkcy5jbG9uZSk7XG5cbiAgICBjb25zdCBfX2FkZEZpbHRlciA9ICgpPT57XG4gICAgICAgIC8vIHNvIGZhciB0aGlzIGlzIG9ubHkgYXBwbGljYWJsZSBmb3IgdG9wRXhwcmVzc2VkIGdlbmUgaGVhdG1hcFxuICAgICAgICBjb25zdCBpZCA9IGlkcy5idXR0b25zLmZpbHRlcjtcbiAgICAgICAgdG9vbGJhci5jcmVhdGVCdXR0b24oaWQsICdmYS1maWx0ZXInKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyB0b2dnbGUgdGhlIGFwcGxpZWQgZmlsdGVyXG4gICAgICAgICAgICAgICAgbGF1bmNoVG9wRXhwcmVzc2VkKHFUaXNzdWUsIGlkcy5yb290LCBpZHMudmlvbGluLCB1cmxzLCAhZmlsdGVyR2VuZXMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmKGZpbHRlckdlbmVzKSB0b29sYmFyLnRvb2x0aXAuc2hvdyhcIkluY2x1ZGUgTWl0b2Nob25kcmlhbCBHZW5lc1wiKTtcbiAgICAgICAgICAgICAgICBlbHNlIHRvb2xiYXIudG9vbHRpcC5zaG93KFwiRXhjbHVkZSBNaXRvY2hvbmRyaWFsIEdlbmVzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdG9vbGJhci50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBfX2FkZFNvcnRUaXNzdWVzID0gKCk9PntcbiAgICAgICAgY29uc3QgaWQgPSBpZHMuYnV0dG9ucy5zb3J0O1xuICAgICAgICB0b29sYmFyLmNyZWF0ZUJ1dHRvbihpZCwgJ2ZhLXNvcnQtYWxwaGEtZG93bicpO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIGhpZGVzIHRoZSB0aXNzdWUgZGVuZHJvZ3JhbVxuICAgICAgICAgICAgICAgIHNlbGVjdChcIiNcIiArIGRtYXAuY29uZmlnLnBhbmVscy50b3AuaWQpLnN0eWxlKFwiZGlzcGxheVwiLCBcIk5vbmVcIik7XG4gICAgICAgICAgICAgICAgLy8gc29ydCB0aXNzdWVzXG4gICAgICAgICAgICAgICAgbGV0IHhsaXN0ID0gZG1hcC5vYmplY3RzLmhlYXRtYXAueExpc3Quc29ydCgpO1xuICAgICAgICAgICAgICAgIF9zb3J0VGlzc3Vlcyh4bGlzdCwgZG1hcCwgdGlzc3VlRGljdCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdG9vbGJhci50b29sdGlwLnNob3coXCJTb3J0IFRpc3N1ZXMgQWxwaGFiZXRpY2FsbHlcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0b29sYmFyLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgY29uc3QgX19hZGRDbHVzdGVyVGlzc3VlcyA9ICgpPT57XG4gICAgICAgIGNvbnN0IGlkID0gaWRzLmJ1dHRvbnMuY2x1c3RlcjtcbiAgICAgICAgdG9vbGJhci5jcmVhdGVCdXR0b24oaWQsIGBmYS1jb2RlLWJyYW5jaGApO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QoXCIjXCIgKyBkbWFwLmNvbmZpZy5wYW5lbHMudG9wLmlkKS5zdHlsZShcImRpc3BsYXlcIiwgXCJCbG9ja1wiKTsgIC8vIHNob3dzIHRoZSB0aXNzdWUgZGVuZHJvZ3JhbVxuICAgICAgICAgICAgbGV0IHhsaXN0ID0gZG1hcC5vYmplY3RzLmNvbHVtblRyZWUueFNjYWxlLmRvbWFpbigpO1xuICAgICAgICAgICAgX3NvcnRUaXNzdWVzKHhsaXN0LCBkbWFwLCB0aXNzdWVEaWN0KTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0b29sYmFyLnRvb2x0aXAuc2hvdyhcIkNsdXN0ZXIgVGlzc3Vlc1wiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRvb2xiYXIudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKGZpbHRlckdlbmVzICE9PSB1bmRlZmluZWQpIF9fYWRkRmlsdGVyKCk7XG4gICAgX19hZGRTb3J0VGlzc3VlcygpO1xuICAgIF9fYWRkQ2x1c3RlclRpc3N1ZXMoKTtcbn1cblxuLyoqXG4gKiB1cGRhdGUgdGhlIGhlYXRtYXAgYmFzZWQgb24gdGhlIG9yZGVyIG9mIHRoZSB4bGlzdFxuICogZGVwZW5kZW5jaWVzOiBDU1MgY2xhc3NlcyBmcm9tIGV4cHJlc3NNYXAuY3NzXG4gKiBAcGFyYW0geGxpc3Qge0hlYXRtYXAgWExpc3R9XG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSB0aXNzdWVEaWN0IHtEaWN0aW9uYXJ5fSBvZiB0aXNzdWUgb2JqZWN0cyBpbmRleGVkIGJ5IHRpc3N1ZSBJRCB3aXRoIGF0dHIsIHRpc3N1ZV9uYW1lXG4gKi9cbmZ1bmN0aW9uIF9zb3J0VGlzc3VlcyAoeGxpc3QsIGRtYXAsIHRpc3N1ZURpY3Qpe1xuICAgIC8vIGNoZWNrIGlmIHRoZXJlJ3MgYSBxdWVyeSB0aXNzdWUsIGUuZy4gdG9wLWV4cHJlc3NlZCBoZWF0bWFwXG4gICAgbGV0IHFJZCA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBxVGlzc3VlID0gc2VsZWN0KFwiLmV4cC1tYXAteGxhYmVsLnF1ZXJ5XCIpO1xuICAgIGlmICghcVRpc3N1ZS5lbXB0eSgpKSBxSWQgPSBxVGlzc3VlLmRhdHVtKCk7XG5cbiAgICAvLyB1cGRhdGUgdGhlIGhlYXRtYXBcbiAgICBjb25zdCBkb20gPSBzZWxlY3QoXCIjXCIrZG1hcC5jb25maWcucGFuZWxzLm1haW4uaWQpO1xuICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbjtcbiAgICBkbWFwLm9iamVjdHMuaGVhdG1hcC5yZWRyYXcoZG9tLCB4bGlzdCwgZG1hcC5vYmplY3RzLmhlYXRtYXAueUxpc3QsIGRpbWVuc2lvbnMpO1xuXG4gICAgLy8gY2hhbmdlIHRoZSB0aXNzdWUgZGlzcGxheSB0ZXh0IHRvIHRpc3N1ZSBuYW1lc1xuICAgIHNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKVxuICAgICAgICAudGV4dCgoZCkgPT4gdGlzc3VlRGljdFtkXT09PXVuZGVmaW5lZD9kOnRpc3N1ZURpY3RbZF0udGlzc3VlU2l0ZURldGFpbClcbiAgICAgICAgLmNsYXNzZWQoXCJxdWVyeVwiLCBmYWxzZSk7XG4gICAgX2FkZFRpc3N1ZUNvbG9ycyhkbWFwLCB0aXNzdWVEaWN0KTtcblxuICAgIC8vIHN0eWxlIHRoZSBxdWVyeSB0aXNzdWUgaWYgZm91bmRcbiAgICBpZiAocUlkIT09dW5kZWZpbmVkKSBfc3R5bGVTZWxlY3RlZFRpc3N1ZShxSWQpO1xuXG4gICAgLy8gaGlkZSB0aGUgdmlvbGluIHBsb3RcbiAgICBzZWxlY3QoJyN2aW9saW5Sb290Jykuc3R5bGUoXCJvcGFjaXR5XCIsIDAuMCk7XG5cbiAgICAvLyBkZXNlbGVjdCBnZW5lc1xuICAgIHNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCBmYWxzZSk7XG4gICAgZG1hcC5kYXRhLmV4dGVybmFsID0gdW5kZWZpbmVkO1xuXG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7anNvbn0gZnJvbSBcImQzLWZldGNoXCI7XG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtyYW5nZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2dldEd0ZXhVcmxzLCBwYXJzZVRpc3N1ZXN9IGZyb20gXCIuL2d0ZXhEYXRhUGFyc2VyXCI7XG5cbi8qKlxuICogQ3JlYXRlIHRoZSB0aXNzdWUgKGRhdGFzZXQpIGRyb3Bkb3duIG1lbnUgdXNpbmcgc2VsZWN0MlxuICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IHRoZSBkb20gSUQgb2YgdGhlIG1lbnVcbiAqIEBwYXJhbSB1cmwge1N0cmluZ30gdGhlIHRpc3N1ZSB3ZWIgc2VydmljZSB1cmxcbiAqIGRlcGVuZGVuY3k6IHNlbGVjdDJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRpc3N1ZU1lbnUoZG9tSWQsIHVybCA9IGdldEd0ZXhVcmxzKCkudGlzc3VlKXtcbiAgICBqc29uKHVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0cyl7XG4gICAgICAgICAgICBsZXQgdGlzc3VlcyA9IHBhcnNlVGlzc3VlcyhyZXN1bHRzKTtcbiAgICAgICAgICAgIHRpc3N1ZXMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGQuaWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgICAgICAgICBkLnRleHQgPSBkLnRpc3N1ZVNpdGVEZXRhaWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpc3N1ZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGEudGlzc3VlU2l0ZURldGFpbCA8IGIudGlzc3VlU2l0ZURldGFpbCkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIGlmKGEudGlzc3VlU2l0ZURldGFpbCA+IGIudGlzc3VlU2l0ZURldGFpbCkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gZXh0ZXJuYWwgbGlicmFyeSBkZXBlbmRlbmN5OiBzZWxlY3QyXG4gICAgICAgICAgICAkKGAjJHtkb21JZH1gKS5zZWxlY3QyKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhIGRhdGEgc2V0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB0aXNzdWVzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtjb25zb2xlLmVycm9yKGVycil9KTtcbn1cblxuLyoqXG4gKiBCdWlsZCB0aGUgdHdvLWxldmVsIGNoZWNrYm94LXN0eWxlIHRpc3N1ZSBtZW51XG4gKiBkZXBlbmRlbmNpZXM6IHRpc3N1ZUdyb3VwLmNzcyBjbGFzc2VzXG4gKiBAcGFyYW0gZ3JvdXBzIHtEaWN0aW9uYXJ5fSBvZiBsaXN0cyBvZiB0aXNzdWVzIGluZGV4ZWQgYnkgdGhlIGdyb3VwIG5hbWUsIHRoaXMgaXMgY3JlYXRlZCBieSBndGV4RGF0YVBhcnNlcjpwYXJzZVRpc3N1ZVNpdGVzKClcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSA8ZGl2PiBJRFxuICogQHBhcmFtIGZvckVxdGwge0Jvb2xlYW59XG4gKiBEZXBlbmRlbmNpZXM6IGpRdWVyeSwgQm9vdHN0cmFwLCB0aXNzdWVHcm91cC5jc3NcbiAqIHRvZG86IGFkZCByZXNldCBhbmQgc2VsZWN0IGFsbCBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUaXNzdWVHcm91cE1lbnUoZ3JvdXBzLCBkb21JZCwgZm9yRXF0bD1mYWxzZSl7XG4gICAgY29uc3QgbWFpbkNsYXNzPVwidGlzc3VlLWdyb3VwLW1haW4tbGV2ZWxcIjtcbiAgICBjb25zdCBzdWJDbGFzcyA9IFwidGlzc3VlLWdyb3VwLXN1Yi1sZXZlbFwiO1xuICAgIGNvbnN0IGxhc3RTaXRlQ2xhc3MgPSBcImxhc3Qtc2l0ZVwiO1xuXG4gICAgLy8gZXJhc2UgZXZlcnl0aGluZyBpbiBkb21JZCBpbiBjYXNlIGl0IGlzbid0IGVtcHR5XG4gICAgc2VsZWN0KGAjJHtkb21JZH1gKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuXG4gICAgLy8gYWRkIGNoZWNrIGFsbCBhbmQgcmVzZXQgb3B0aW9uc1xuICAgIGNvbnN0ICRhbGxUaXNzdWVEaXYgPSAkKCc8ZGl2Lz4nKS5hdHRyKCdjbGFzcycsICdjb2wteHMtMTIgY29sLW1kLTEyJykuYXBwZW5kVG8oJChgIyR7ZG9tSWR9YCkpO1xuICAgIGlmIChmb3JFcXRsKXtcbiAgICAgICAgJChgPGxhYmVsIGNsYXNzPSR7bWFpbkNsYXNzfT5gICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiYWxsVGlzc3Vlc1wiIHZhbHVlPVwicmVzZXRcIj4gUmVzZXQgJyArXG4gICAgICAgICc8L2xhYmVsPjxici8+JykuYXBwZW5kVG8oJGFsbFRpc3N1ZURpdik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJChgPGxhYmVsIGNsYXNzPSR7bWFpbkNsYXNzfT5gICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiYWxsVGlzc3Vlc1wiIHZhbHVlPVwiYWxsXCI+IEFsbCA8L2xhYmVsPiAnICtcbiAgICAgICAgYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImFsbFRpc3N1ZXNcIiB2YWx1ZT1cInJlc2V0XCI+IFJlc2V0ICcgK1xuICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRhbGxUaXNzdWVEaXYpO1xuICAgIH1cblxuXG4gICAgLy8gY2hlY2sgYWxsIG9yIHJlc2V0IGV2ZW50c1xuICAgICQoJ2lucHV0W25hbWU9XCJhbGxUaXNzdWVzXCJdJykuY2hhbmdlKGZ1bmN0aW9uKCl7XG4gICAgICAgIGxldCB2YWwgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICBzd2l0Y2godmFsKXtcbiAgICAgICAgICAgIGNhc2UgJ2FsbCc6IHtcbiAgICAgICAgICAgICAgICAkKCcudGlzc3VlR3JvdXAnKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgJCgnLnRpc3N1ZVN1Ykdyb3VwJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVzZXQnOiB7XG4gICAgICAgICAgICAgICAgJCgnLnRpc3N1ZUdyb3VwJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAkKCcudGlzc3VlU3ViR3JvdXAnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nXG5cbiAgICAgICAgfVxuICAgICAgICAvLyAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgLy8gc29ydCB0aGUgdGlzc3VlIGdyb3VwcyBhbHBoYWJldGljYWxseVxuICAgIGxldCBncm91cE5hbWVzID0gT2JqZWN0LmtleXMoZ3JvdXBzKS5zb3J0KCk7XG5cbiAgICAvLyBjcmVhdGUgZm91ciA8ZGl2PiBzZWN0aW9ucyBmb3IgdGhlIHRpc3N1ZSBtZW51XG4gICAgLy8gVE9ETzogZmluZCBhIGJldHRlciB3YXkgdG8gb3JnYW5pemUgdGlzc3VlcyBpbnRvIHNlY3Rpb25zXG4gICAgY29uc3QgJHNlY3Rpb25zID0gcmFuZ2UoMCw0KS5tYXAoKGQpPT57XG4gICAgICAgIHJldHVybiAkKGA8ZGl2IGlkPVwic2VjdGlvbiR7ZH1cIiBjbGFzcz1cImNvbC14cy0xMiBjb2wtbWQtM1wiPmApLmFwcGVuZFRvKCQoYCMke2RvbUlkfWApKTtcbiAgICB9KTtcblxuICAgIGdyb3VwTmFtZXMuZm9yRWFjaChmdW5jdGlvbihnbmFtZSl7XG4gICAgICAgIGxldCBzaXRlcyA9IGdyb3Vwc1tnbmFtZV07IC8vIGEgbGlzdCBvZiBzaXRlIG9iamVjdHMgd2l0aCBhdHRyOiBuYW1lIGFuZCBpZFxuICAgICAgICBjb25zdCBnSWQgPSBnbmFtZS5yZXBsYWNlKC8gL2csIFwiX1wiKTsgLy8gcmVwbGFjZSB0aGUgc3BhY2VzIHdpdGggZGFzaGVzIHRvIGNyZWF0ZSBhIGdyb3VwIDxET00+IGlkXG4gICAgICAgIC8vIGZpZ3VyZSBvdXQgd2hpY2ggZG9tIHNlY3Rpb24gdG8gYXBwZW5kIHRoaXMgdGlzc3VlIHNpdGVcbiAgICAgICAgbGV0ICRjdXJyZW50RG9tID0gJHNlY3Rpb25zWzNdO1xuICAgICAgICBpZihcIkJyYWluXCIgPT0gZ25hbWUpICRjdXJyZW50RG9tID0gJHNlY3Rpb25zWzBdO1xuICAgICAgICBlbHNlIGlmIChnbmFtZS5tYXRjaCgvXltBLURdLykpICRjdXJyZW50RG9tID0gJHNlY3Rpb25zWzFdO1xuICAgICAgICBlbHNlIGlmIChnbmFtZS5tYXRjaCgvXltFLVBdLykpICRjdXJyZW50RG9tID0gJHNlY3Rpb25zWzJdO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgPGxhYmVsPiBmb3IgdGhlIHRpc3N1ZSBncm91cFxuICAgICAgICAkKGA8bGFiZWwgY2xhc3M9JHttYWluQ2xhc3N9PmArXG4gICAgICAgICAgICBgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiJHtnSWR9XCIgY2xhc3M9XCJ0aXNzdWVHcm91cFwiPiBgICtcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImNoZWNrbWFya1wiPjwvc3Bhbj4nICtcbiAgICAgICAgICAgIGA8c3Bhbj4ke2duYW1lfTwvc3Bhbj5gICtcbiAgICAgICAgICAgICc8L2xhYmVsPjxici8+JykuYXBwZW5kVG8oJGN1cnJlbnREb20pO1xuXG4gICAgICAgIC8vIHRpc3N1ZSBzaXRlcyBpbiB0aGUgZ3JvdXBcbiAgICAgICAgaWYgKHNpdGVzLmxlbmd0aCA+IDEpe1xuICAgICAgICAgICAgIC8vIHNvcnQgc2l0ZXMgYWxwaGFiZXRpY2FsbHlcbiAgICAgICAgICAgIHNpdGVzLnNvcnQoKGEsIGIpPT57XG4gICAgICAgICAgICAgICAgaWYgKGEuaWQgPiBiLmlkKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICBpZiAoYS5pZCA8IGIuaWQpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihzaXRlLCBpKXtcbiAgICAgICAgICAgICAgICBsZXQgJHNpdGVEb20gPSAkKGA8bGFiZWwgY2xhc3M9JHtzdWJDbGFzc30+YCtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7c2l0ZS5pZH1cIiBjbGFzcz1cInRpc3N1ZVN1Ykdyb3VwXCI+IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJjaGVja21hcmtcIj48L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA8c3Bhbj4ke3NpdGUubmFtZX08L3NwYW4+YCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2xhYmVsPjxici8+JykuYXBwZW5kVG8oJGN1cnJlbnREb20pO1xuICAgICAgICAgICAgICAgIGlmIChpID09IHNpdGVzLmxlbmd0aCAtMSkgJHNpdGVEb20uYWRkQ2xhc3MobGFzdFNpdGVDbGFzcyk7XG4gICAgICAgICAgICAgICAgJHNpdGVEb20uY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT1cImFsbFRpc3N1ZXNcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGN1c3RvbSBjbGljayBldmVudCBmb3IgdGhlIHRvcC1sZXZlbCB0aXNzdWVzOiB0b2dnbGUgdGhlIGNoZWNrIGJveGVzXG4gICAgICAgICQoXCIjXCIgKyBnSWQpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKCdpbnB1dFtuYW1lPVwiYWxsVGlzc3Vlc1wiXScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoJCgnIycgKyBnSWQpLmlzKFwiOmNoZWNrZWRcIikpIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBncm91cCBpcyBjaGVja2VkLCBjaGVjayBhbGwgaXRzIHRpc3N1ZXNcbiAgICAgICAgICAgICAgICBzaXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImlkXCIgPT0gc2l0ZS5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAkKCcjJyArIHNpdGUuaWQpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGdyb3VwIGlzIHVuY2hlY2tlZCwgdW4tY2hlY2sgYWxsIGl0cyB0aXNzdWVzXG4gICAgICAgICAgICAgICAgc2l0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2l0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpZFwiID09IHNpdGUuaWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBzaXRlLmlkKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0d28tbGV2ZWwgY2hlY2tib3gtc3R5bGUgdGlzc3VlIG1lbnVcbiAqIEBwYXJhbSBncm91cHMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIHRpc3N1ZXMgaW5kZXhlZCBieSB0aGUgZ3JvdXAgbmFtZSwgdGhpcyBpcyBjcmVhdGVkIGJ5IGd0ZXhEYXRhUGFyc2VyOnBhcnNlVGlzc3VlU2l0ZXMoKVxuICogQHBhcmFtIGRvbUlkIHtTdHJpbmd9IDxkaXY+IElEXG4gKiBEZXBlbmRlbmNpZXM6IGpRdWVyeVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVHcm91cE1lbnUoZ3JvdXBzLCBkb21JZCl7XG4gICAgbGV0IHF1ZXJ5VGlzc3VlSWRzID0gW107XG4gICAgJChgIyR7ZG9tSWR9YCkuZmluZChcIjppbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKCl7IC8vIHVzaW5nIGpRdWVyeSB0byBwYXJzZSBlYWNoIGlucHV0IGl0ZW1cbiAgICAgICAgaWYgKCAkKHRoaXMpLmlzKFwiOmNoZWNrZWRcIikpIHsgLy8gdGhlIGpRdWVyeSB3YXkgdG8gZmV0Y2ggYSBjaGVja2VkIHRpc3N1ZVxuICAgICAgICAgICAgY29uc3QgaWQgPSAkKHRoaXMpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcyhcInRpc3N1ZUdyb3VwXCIpKXtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlucHV0IGl0ZW0gaXMgYSB0aXNzdWUgZ3JvdXBcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIHRpc3N1ZSBncm91cCBpcyBhIHNpbmdsZS1zaXRlIGdyb3VwIHVzaW5nIHRoZSB0aXNzdWVHcm91cHMgZGljdGlvbmFyeVxuICAgICAgICAgICAgICAgIC8vIGlmIHNvLCBhZGQgdGhlIHNpbmdsZSBzaXRlIHRvIHRoZSBxdWVyeSBsaXN0XG4gICAgICAgICAgICAgICAgbGV0IGdyb3VwTmFtZSA9IGlkLnJlcGxhY2UoL18vZywgXCIgXCIpOyAvLyBmaXJzdCBjb252ZXJ0IHRoZSBJRCBiYWNrIHRvIGdyb3VwIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzW2dyb3VwTmFtZV0ubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlUaXNzdWVJZHMucHVzaChncm91cHNbZ3JvdXBOYW1lXVswXS5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXsgLy8gdGhpcyBpbnB1dCBpdGVtIGlzIGEgdGlzc3VlIHNpdGVcbiAgICAgICAgICAgICAgICBxdWVyeVRpc3N1ZUlkcy5wdXNoKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeVRpc3N1ZUlkcy5maWx0ZXIoKGQpPT5kIT09dW5kZWZpbmVkKTtcbn1cbiJdLCJuYW1lcyI6WyJFT0wiLCJFT0YiLCJRVU9URSIsIk5FV0xJTkUiLCJSRVRVUk4iLCJvYmplY3RDb252ZXJ0ZXIiLCJjb2x1bW5zIiwiRnVuY3Rpb24iLCJtYXAiLCJuYW1lIiwiaSIsIkpTT04iLCJzdHJpbmdpZnkiLCJqb2luIiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJSZWdFeHAiLCJERUxJTUlURVIiLCJjaGFyQ29kZUF0IiwicGFyc2VSb3dzIiwidGV4dCIsImYiLCJ0Iiwicm93cyIsIk4iLCJsZW5ndGgiLCJJIiwibiIsImVvZiIsImVvbCIsInRva2VuIiwiYyIsImoiLCJzbGljZSIsInJlcGxhY2UiLCJyb3ciLCJwdXNoIiwiZm9ybWF0Um93IiwiZm9ybWF0VmFsdWUiLCJ0ZXN0IiwicGFyc2UiLCJjb252ZXJ0Iiwib2JqZWN0IiwiY3VzdG9tQ29udmVydGVyIiwiZm9ybWF0IiwiY29sdW1uU2V0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9yRWFjaCIsImNvbHVtbiIsImluZmVyQ29sdW1ucyIsImNvbmNhdCIsImZvcm1hdFJvd3MiLCJjc3YiLCJkc3YiLCJ0c3YiLCJyZXNwb25zZUpzb24iLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwianNvbiIsImlucHV0IiwiaW5pdCIsImZldGNoIiwidGhlbiIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsInByZWZpeCIsImluZGV4T2YiLCJuYW1lc3BhY2VzIiwiaGFzT3duUHJvcGVydHkiLCJzcGFjZSIsImxvY2FsIiwiZnVsbG5hbWUiLCJuYW1lc3BhY2UiLCJ0aGlzIiwib3duZXJEb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImRvY3VtZW50IiwidXJpIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5vbmUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJlbXB0eSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImVsZW1lbnQiLCJ2ZW5kb3JNYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwiY2FsbCIsInVwZGF0ZSIsIkFycmF5IiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cCIsImVudGVyIiwiZXhpdCIsImRhdGEiLCJub2RlIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJhc2NlbmRpbmciLCJhIiwiYiIsIk5hTiIsImRlZmF1bHRWaWV3Iiwic3R5bGVWYWx1ZSIsInN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwidHJpbSIsInNwbGl0IiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJzZXRBdHRyaWJ1dGUiLCJzcGxpY2UiLCJjb250YWlucyIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJvbiIsIl9fb24iLCJvIiwibSIsInR5cGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FwdHVyZSIsIm9uQWRkIiwidmFsdWUiLCJ3cmFwIiwiZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwicm9vdCIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3Rpb24iLCJzb3VyY2UiLCJjdXJyZW50Iiwic291cmNlRXZlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsIm93bmVyU1ZHRWxlbWVudCIsImNyZWF0ZVNWR1BvaW50IiwicG9pbnQiLCJ4IiwiY2xpZW50WCIsInkiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwiY2xpZW50TGVmdCIsInRvcCIsImNsaWVudFRvcCIsInNlbGVjdCIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsInNlbGVjdEFsbCIsInNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibWF0Y2giLCJzaXplIiwiZWFjaCIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm1lcmdlIiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm0xIiwiTWF0aCIsIm1pbiIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsIm9yZGVyIiwic29ydCIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJjYWxsYmFjayIsImFyZ3VtZW50cyIsImFwcGx5Iiwibm9kZXMiLCJhdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsInYiLCJzZXRBdHRyaWJ1dGVOUyIsInByaW9yaXR5IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsInByb3BlcnR5IiwiY2xhc3NlZCIsImh0bWwiLCJhcHBlbmQiLCJjcmVhdG9yIiwiaW5zZXJ0IiwiYmVmb3JlIiwiY2xvbmUiLCJkZWVwIiwidHlwZW5hbWVzIiwicGFyc2VUeXBlbmFtZXMiLCJkaXNwYXRjaCIsIk1hcCIsInNldCIsImlzQXJyYXkiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsImtleXMiLCJzb3J0S2V5cyIsImFycmF5IiwiZGVwdGgiLCJjcmVhdGVSZXN1bHQiLCJzZXRSZXN1bHQiLCJ2YWx1ZXMiLCJ2YWx1ZXNCeUtleSIsInJlc3VsdCIsImdldCIsImNyZWF0ZU9iamVjdCIsInNldE9iamVjdCIsImNyZWF0ZU1hcCIsInNldE1hcCIsImVudHJpZXMiLCJzb3J0S2V5IiwiayIsIlNldCIsImhhcyIsImNsZWFyIiwicHJvdG8iLCJnZXRHdGV4VXJscyIsImhvc3QiLCJkeW5lcXRsIiwic25wIiwidmFyaWFudElkIiwiZXhvbkV4cCIsInRyYW5zY3JpcHRFeHAiLCJqdW5jdGlvbkV4cCIsInRyYW5zY3JpcHQiLCJleG9uIiwiZ2VuZU1vZGVsIiwiZ2VuZU1vZGVsVW5maWx0ZXJlZCIsImdlbmVFeHAiLCJtZWRHZW5lRXhwIiwidG9wSW5UaXNzdWVGaWx0ZXJlZCIsInRvcEluVGlzc3VlIiwiZ2VuZUlkIiwidGlzc3VlIiwidGlzc3VlU2l0ZXMiLCJzYW1wbGUiLCJybmFzZXFDcmFtIiwid2dzQ3JhbSIsImZjQmlsbGluZyIsImZjV29ya1NwYWNlIiwiZmNQb3J0YWxXb3JrU3BhY2UiLCJwYXJzZVRpc3N1ZXMiLCJ0aXNzdWVzIiwicGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbiIsInVzZUxvZyIsImNvbG9ycyIsImNvbnNvbGUiLCJlcnJvciIsImRkIiwibG9nMTAiLCJ0aXNzdWVTaXRlRGV0YWlsSWQiLCJsYWJlbCIsImdlbmVTeW1ib2wiLCJjb2xvciIsInVuZGVmaW5lZCIsImdlbmNvZGVJZCIsImJpc2VjdFJpZ2h0IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwidmFsdWVvZiIsImRlbHRhIiwibWVhbiIsInN1bSIsImlzTmFOIiwibnVtYmVyIiwidmFyaWFuY2UiLCJzcXJ0IiwibWF4Iiwic3RhcnQiLCJzdG9wIiwic3RlcCIsImNlaWwiLCJyYW5nZSIsImUxMCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50IiwiY291bnQiLCJwb3dlciIsImZsb29yIiwibG9nIiwiTE4xMCIsInBvdyIsInAiLCJ2YWx1ZTAiLCJudW1iZXJzIiwicXVhbnRpbGUiLCJpbXBsaWNpdCIsImJhbmQiLCJiYW5kd2lkdGgiLCJzY2FsZSIsIm9yZGluYWwiLCJkb21haW4iLCJ1bmtub3duIiwiXyIsImNvcHkiLCJvcmRpbmFsUmFuZ2UiLCJyb3VuZCIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdPdXRlciIsImFsaWduIiwicmVzY2FsZSIsInJldmVyc2UiLCJzZXF1ZW5jZSIsInJhbmdlUm91bmQiLCJwYWRkaW5nIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJDb2xvciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4MyIsInJlSGV4NiIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJSZ2IiLCJwYXJzZUludCIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsInJnYiIsIm9wYWNpdHkiLCJoZXgiLCJ0b1N0cmluZyIsImgiLCJzIiwibCIsIkhzbCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImRpc3BsYXlhYmxlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJoc2xDb252ZXJ0IiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsIlhuIiwiWW4iLCJabiIsInQwIiwidDEiLCJ0MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImNvcyIsInNpbiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJhdGFuMiIsImhjbENvbnZlcnQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeCIsIkN1YmVoZWxpeCIsImJsIiwiY3ViZWhlbGl4Q29udmVydCIsImxpbmVhciIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29uc3RhbnQiLCJjb3NoIiwic2luaCIsInJnYkdhbW1hIiwiZW5kIiwiY29sb3JSZ2IiLCJzcGxpbmUiLCJyZ2JCYXNpcyIsInYxIiwidjIiLCJ2MCIsInYzIiwiYmFzaXMiLCJyZUEiLCJyZUIiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJvbmUiLCJ6ZXJvIiwiRGF0ZSIsInNldFRpbWUiLCJuYiIsIm5hIiwidmFsdWVPZiIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsInN2Z05vZGUiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJTUVJUMiIsImh1ZSIsImN1YmVoZWxpeEdhbW1hIiwiY29sb3JDdWJlaGVsaXgiLCJjdWJlaGVsaXhMb25nIiwidW5pdCIsImRlaW50ZXJwb2xhdGVMaW5lYXIiLCJiaW1hcCIsImRlaW50ZXJwb2xhdGUiLCJyZWludGVycG9sYXRlIiwiZDAiLCJkMSIsInIwIiwicjEiLCJwb2x5bWFwIiwiYmlzZWN0IiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwiZm9ybWF0RGVjaW1hbCIsImFicyIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwic2lnbiIsInN5bWJvbCIsIndpZHRoIiwiY29tbWEiLCJwcmVjaXNpb24iLCJleHBvbmVudCIsIiUiLCJ0b0ZpeGVkIiwidG9QcmVjaXNpb24iLCJmb3JtYXRSb3VuZGVkIiwiWCIsInRvVXBwZXJDYXNlIiwibG9jYWxlIiwiZm9ybWF0UHJlZml4IiwicHJlZml4ZXMiLCJncm91cGluZyIsInRob3VzYW5kcyIsInN1YnN0cmluZyIsImN1cnJlbmN5IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwiZm9ybWF0TnVtZXJhbHMiLCJwZXJjZW50IiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsIm91dCIsImZvcm1hdFRyaW0iLCJJbmZpbml0eSIsInN0ZXAwIiwic3RlcDEiLCJ0aWNrU3RlcCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJ0aWNrcyIsImlzRmluaXRlIiwidGlja0Zvcm1hdCIsIm5pY2UiLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnRlcnBvbGF0ZSIsImludGVycG9sYXRlVmFsdWUiLCJjbGFtcCIsImRlaW50ZXJwb2xhdGVDbGFtcCIsImludmVydCIsInJlaW50ZXJwb2xhdGVDbGFtcCIsImludGVycG9sYXRlUm91bmQiLCJjb250aW51b3VzIiwiZm9ybWF0TG9jYWxlIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJpbnRlcnZhbCIsImRhdGUiLCJvZmZzZXQiLCJldmVyeSIsIm1pbGxpc2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJkYXkiLCJnZXRVVENTZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0SG91cnMiLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInRodXJzZGF5IiwieWVhciIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwic2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwidXRjV2Vla2RheSIsImdldFVUQ0RheSIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1RodXJzZGF5IiwidXRjWWVhciIsInNldFVUQ01vbnRoIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJTIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdZZWFyIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJwYWRzIiwiLSIsIjAiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInBhZCIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInciLCJwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkiLCJ1IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwiVSIsInBhcnNlV2Vla051bWJlcklTTyIsIlYiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJXIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWWVhciIsInBhcnNlWm9uZSIsIloiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZUhvdXIyNCIsInBhcnNlTWludXRlcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlTWlsbGlzZWNvbmRzIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFyc2VVbml4VGltZXN0YW1wIiwiUSIsInBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwidGltZURheSIsInRpbWVZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0U2Vjb25kcyIsImdldFNlY29uZHMiLCJmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsInRpbWVTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwidGltZVRodXJzZGF5IiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJ0aW1lTW9uZGF5IiwiZm9ybWF0WWVhciIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJ0aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsIlkiLCJ1dGNGb3JtYXRzIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJjaGFyQXQiLCJuZXdQYXJzZSIsIm5ld0RhdGUiLCJ3ZWVrIiwidG9JU09TdHJpbmciLCJzY2hlbWUiLCJpbnRlcnBvbGF0ZVJnYkJhc2lzIiwicmFtcCIsImludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyIsImNvbG9yQ2hhcnQiLCJzaHVmZmxlIiwiY291bnRlciIsInJhbmRvbSIsInRlbXAiLCJzaHVmZmxlQ29sb3JzIiwic2V0Q29sb3JTY2FsZSIsImRtaW4iLCJkbWF4Iiwic2VxdWVudGlhbCIsImludGVycG9sYXRvciIsIngwIiwieDEiLCJrMTAiLCJzY2FsZVNlcXVlbnRpYWwiLCJpbnRlcnBvbGF0b3JzIiwiQnVHbiIsImQzQ2hyb21hdGljLmludGVycG9sYXRlQnVHbiIsIk9yUmQiLCJkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yUmQiLCJQdUJ1IiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdUJ1IiwiWWxHbkJ1IiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVZbEduQnUiLCJCbHVlcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlQmx1ZXMiLCJPcmFuZ2VzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPcmFuZ2VzIiwiR3JlZW5zIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmVlbnMiLCJQdXJwbGVzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdXJwbGVzIiwiUmVkcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUmVkcyIsIkdyZXlzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyIsIkdyYXlzIiwiZXJyIiwiZ2V0Q29sb3JJbnRlcnBvbGF0b3IiLCJEZW5kcm9IZWF0bWFwQ29uZmlnIiwiW29iamVjdCBPYmplY3RdIiwicm9vdFciLCJpbm5lcldpZHRoIiwibGVmdFBhbmVsVyIsInRvcFBhbmVsSCIsIm1hcmdpbiIsImJvdHRvbSIsImNlbGxIIiwiYWRqdXN0IiwibGVmdFRyZWVQYW5lbCIsImlkIiwiY2VsbCIsInRvcFRyZWVQYW5lbCIsImhlYXRtYXBQYW5lbCIsImxlZ2VuZFBhbmVsIiwicGFuZWxzIiwibWFpbiIsImxlZ2VuZCIsImNoaWxkcmVuIiwiaGllcmFyY2h5IiwiY2hpbGRzIiwiTm9kZSIsInZhbHVlZCIsImRlZmF1bHRDaGlsZHJlbiIsImVhY2hCZWZvcmUiLCJjb21wdXRlSGVpZ2h0IiwiY29weURhdGEiLCJoZWlnaHQiLCJlYWNoQWZ0ZXIiLCJwYXRoIiwiYW5jZXN0b3IiLCJhTm9kZXMiLCJhbmNlc3RvcnMiLCJiTm9kZXMiLCJsZWFzdENvbW1vbkFuY2VzdG9yIiwiZGVzY2VuZGFudHMiLCJsZWF2ZXMiLCJsaW5rcyIsInRhcmdldCIsImVwc2lsb24iLCJlbnRlcmluZyIsIl9fYXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tTaXplSW5uZXIiLCJ0aWNrU2l6ZU91dGVyIiwidGlja1BhZGRpbmciLCJjb250ZXh0Iiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInBvc2l0aW9uIiwidGljayIsInRpY2tFeGl0IiwidGlja0VudGVyIiwibGluZSIsInRyYW5zaXRpb24iLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsIkRlbmRyb2dyYW0iLCJuZXdpY2siLCJvcmllbnRhdGlvbiIsInBvc3RvcmRlciIsInRyZWUiLCJ0b2tlbnMiLCJzdWJ0cmVlIiwiYnJhbmNoc2V0IiwicGFyc2VGbG9hdCIsInBhcnNlTmV3aWNrIiwieFNjYWxlIiwieVNjYWxlIiwiZG9tIiwiX3NldFhTY2FsZSIsIl9zZXRZU2NhbGUiLCJfZHJhd0hUcmVlIiwiX2RyYXdWVHJlZSIsInNldFkiLCJyZWR1Y2UiLCJzZXRYIiwiX2dldEJyYW5jaExlbmd0aFRvUm9vdCIsIl9zb3J0Tm9kZXNCeUxldmVsIiwiaW5vZGVzIiwiZDMiLCJfYXNzaWduUG9zdG9yZGVyIiwic2NhbGVMaW5lYXIiLCJfZ2V0TWF4QnJhbmNoTGVuZ3RoIiwic2NhbGVCYW5kIiwibm9vcCIsIkRpc3BhdGNoIiwidHlwZXMiLCJUIiwidGhhdCIsImFyZ3MiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiZnJhbWUiLCJ0aW1lb3V0IiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsIlR5cGVFcnJvciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIlJVTk5JTkciLCJFTkRJTkciLCJFTkRFRCIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInNlbGYiLCJ0d2VlbiIsInN0YXRlIiwiZHVyYXRpb24iLCJlYXNlIiwic2NoZWR1bGUiLCJhY3RpdmUiLCJ0d2VlblZhbHVlIiwiX2lkIiwiaW50ZXJwb2xhdGVOdW1iZXIiLCJpbnRlcnBvbGF0ZVJnYiIsImludGVycG9sYXRlU3RyaW5nIiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsIm9uMCIsIm9uMSIsInNpdCIsIm9uRnVuY3Rpb24iLCJhdHRyVHdlZW4iLCJ2YWx1ZTAwIiwidmFsdWUxMCIsImludGVycG9sYXRlMCIsInZhbHVlMSIsIl92YWx1ZSIsInN0eWxlVHdlZW4iLCJzdHlsZVJlbW92ZSIsInN0eWxlUmVtb3ZlRW5kIiwic3R5bGVGdW5jdGlvbiIsInN0eWxlQ29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJ0ZXh0Q29uc3RhbnQiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJlYXNlQ29uc3RhbnQiLCJkZWZhdWx0VGltaW5nIiwiaW50ZXJydXB0IiwiVG9vbGJhciIsImRvbUlkIiwidG9vbHRpcCIsInZlcnRpY2FsIiwiJCIsInNob3ciLCJidG5DbGFzc2VzIiwiYmFyIiwiYWRkQ2xhc3MiLCJhcHBlbmRUbyIsImJ1dHRvbnMiLCJzdmdJZCIsIm91dGZpbGVOYW1lIiwiY2xvbmVJZCIsImljb24iLCJjcmVhdGVCdXR0b24iLCJkb3dubG9hZFN2ZyIsImhpZGUiLCIkYnV0dG9uIiwiZmlsZU5hbWUiLCJzdmdPYmoiLCIkc3ZnQ29weSIsInN0eWxlcyIsInVzZWQiLCJzaGVldHMiLCJzdHlsZVNoZWV0cyIsImNzc1J1bGVzIiwicnVsZXMiLCJydWxlIiwiZWxlbXMiLCJmaW5kIiwic2VsZWN0b3JUZXh0IiwiY3NzVGV4dCIsInBhcnNlQ3NzU3R5bGVzIiwicHJlcGVuZCIsInN2Z0h0bWwiLCJzdmdCbG9iIiwiQmxvYiIsInNhdmVBcyIsIlRvb2x0aXAiLCJ2ZXJib3NlIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJpbmZvIiwiZWRpdCIsIm1vdmUiLCJwYWdlWCIsInBhZ2VZIiwiSGVhdG1hcCIsImNvbG9yU2NoZW1lIiwiYmFzZSIsIm51bGxDb2xvciIsImNvbG9yU2NhbGUiLCJ4TGlzdCIsInlMaXN0IiwidG9vbGJhciIsImxlZ2VuZENvbmZpZyIsInRpdGxlIiwiY29uZmlnIiwiZHJhd0NvbG9yTGVnZW5kIiwiZGltZW5zaW9ucyIsImFuZ2xlIiwiX3NldFhMaXN0IiwiX3NldFlMaXN0IiwiZHJhdyIsInVzZU51bGxDb2xvciIsInhMYWJlbHMiLCJhbGVydCIsImNlbGxzIiwic2VsZWN0ZWQiLCJjZWxsTW91c2VvdmVyIiwiY2VsbE1vdXNlb3V0Iiwib3JpZ2luYWxWYWx1ZSIsInJvd0NsYXNzIiwiY29sQ2xhc3MiLCJuZXdMaXN0IiwiRGVuZHJvSGVhdG1hcCIsImNvbHVtblRyZWUiLCJyb3dUcmVlIiwiaGVhdG1hcERhdGEiLCJzdGFydHNXaXRoIiwiaGVhdG1hcCIsImV4dGVybmFsIiwib2JqZWN0cyIsInZpc3VhbENvbXBvbmVudHMiLCJzaG93Q29sdW1uVHJlZSIsInNob3dSb3dUcmVlIiwibGVnZW5kUG9zIiwiX3VwZGF0ZUNvbmZpZyIsImNyZWF0ZVN2ZyIsInhsaXN0IiwieWxpc3QiLCJfcmVuZGVyVHJlZSIsIl9yZW5kZXJIZWF0bWFwIiwiZGlyZWN0aW9uIiwibGFiZWxDbGFzcyIsImlkcyIsImluY2x1ZGVzIiwicmVkcmF3IiwicGkiLCJ0YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsImN3IiwiZGEiLCJMaW5lYXIiLCJfY29udGV4dCIsInBvaW50WCIsInBvaW50WSIsImRlZmluZWQiLCJjdXJ2ZSIsImN1cnZlTGluZWFyIiwiYXJlYSIsImJ1ZmZlciIsImRlZmluZWQwIiwieDB6IiwieTB6IiwiYXJlYVN0YXJ0IiwibGluZVN0YXJ0IiwibGluZUVuZCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsInNsb3BlMyIsImgwIiwiaDEiLCJzMCIsInMxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiUmVmbGVjdENvbnRleHQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5vcHJvcGFnYXRpb24iLCJfbGluZSIsIl9wb2ludCIsIl90MCIsIk1PREVfRFJBRyIsIk1PREVfU1BBQ0UiLCJNT0RFX0hBTkRMRSIsIk1PREVfQ0VOVEVSIiwiaGFuZGxlcyIsInh5IiwiWFkiLCJjdXJzb3JzIiwib3ZlcmxheSIsIm53IiwibmUiLCJzZSIsInN3IiwiZmxpcFgiLCJmbGlwWSIsInNpZ25zWCIsInNpZ25zWSIsImRlZmF1bHRGaWx0ZXIiLCJidXR0b24iLCJkZWZhdWx0RXh0ZW50IiwiX19icnVzaCIsImV4dGVudCIsImRpbSIsInRvdWNoZW5kaW5nIiwibGlzdGVuZXJzIiwiYnJ1c2giLCJoYW5kbGVTaXplIiwiaW5pdGlhbGl6ZSIsImhhbmRsZSIsInN0YXJ0ZWQiLCJlbWl0dGVyIiwiRW1pdHRlciIsInRvdWNoZXMiLCJub2V2ZW50IiwidzAiLCJ3MSIsIm4wIiwibjEiLCJlMCIsImUxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsIm1vZGUiLCJtZXRhS2V5IiwiYWx0S2V5Iiwic2lnblgiLCJzaWduWSIsInNoaWZ0aW5nIiwic2hpZnRLZXkiLCJwb2ludDAiLCJtb3VzZSIsImVtaXQiLCJiZWZvcmVzdGFydCIsIm1vdmVkIiwiZW5kZWQiLCJ2aWV3Iiwia2V5Q29kZSIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwiZHJhZ0Rpc2FibGUiLCJwb2ludDEiLCJub2NsaWNrIiwiZHJhZ0VuYWJsZSIsInNlbGVjdGlvbjAiLCJzZWxlY3Rpb24xIiwic3RhcnRpbmciLCJjdXN0b21FdmVudCIsImtlcm5lbCIsImVwYW5lY2huaWtvdiIsImdhdXNzaWFuIiwiZXhwIiwia2VybmVsQmFuZHdpZHRoIiwibnJkIiwiZGV2aWF0aW9uIiwia2VybmVsRGVuc2l0eUVzdGltYXRvciIsIkdyb3VwZWRWaW9saW4iLCJncm91cEluZm8iLCJfc2FuaXR5Q2hlY2siLCJ4UGFkZGluZyIsInhEb21haW4iLCJ5RG9tYWluIiwieUxhYmVsIiwic2hvd1giLCJzaG93U3ViWCIsInN1YlhBbmdsZSIsInNob3dXaGlza2VyIiwic2hvd0RpdmlkZXIiLCJzaG93TGVnZW5kIiwic2hvd1NpemUiLCJyZXNldCIsInJlbmRlciIsImFsbFYiLCJzdWJ4IiwiZW50cnkiLCJfZHJhd1Zpb2xpbiIsInNpemVTY2FsZSIsInN1YnhHIiwieEF4aXMiLCJ5QXhpcyIsIl9hZGRHcm91cERpdmlkZXIiLCJsZWdlbmRHIiwidGhlQnJ1c2giLCJ6b29tIiwiaWRlbFRpbWVvdXQiLCJsb3dCb3VuZCIsInVwcGVyQm91bmQiLCJnZyIsInExIiwicTMiLCJtZWQiLCJtZWRpYW4iLCJnSW5kZXgiLCJrZGUiLCJlRG9tYWluIiwidmVydGljZXMiLCJ6TWF4IiwidmlvbGluRyIsInZpb2xpbiIsInZQYXRoIiwiaXFyIiwidXBwZXIiLCJ3YXJuIiwiZ2V0WCIsImxhdW5jaFRvcEV4cHJlc3NlZCIsInRpc3N1ZUlkIiwiaGVhdG1hcFJvb3RJZCIsInZpb2xpblJvb3RJZCIsInVybHMiLCJmaWx0ZXJHZW5lcyIsInVybCIsIiRmaWx0ZXJJbmZvRGl2IiwicmVzdWx0cyIsInRvcEdlbmVMaXN0Iiwic2VhcmNoQnlJZCIsIl9zdHlsZVNlbGVjdGVkVGlzc3VlIiwiY2F0Y2giLCJnbGlzdCIsInRsaXN0IiwicVRpc3N1ZSIsIiRtZXNzYWdlIiwiY3NzIiwibWVzc2FnZSIsIlByb21pc2UiLCJhbGwiLCJnZW5lcyIsInBhcnNlR2VuZXMiLCJhbGxJZHMiLCJnZW5lU3ltYm9sVXBwZXIiLCJlbnNlbWJsSWQiLCJtaXNzaW5nR2VuZXMiLCJfdmFsaWRhdGVHZW5lcyIsImdRdWVyeSIsInRRdWVyeSIsImVEYXRhIiwiZGF0YU1lc3NhZ2UiLCJfdmFsaWRhdGVFeHByZXNzaW9uRGF0YSIsImV4cHJlc3Npb24iLCJOdW1iZXIiLCJwYXJzZU1lZGlhbkV4cHJlc3Npb24iLCJzYXZlIiwiY2x1c3RlciIsIm1heENlbGxXIiwibWluQ2VsbFciLCJjZWxsVyIsImRtYXBNYXJnaW4iLCJkbWFwIiwiY2x1c3RlcnMiLCJnZW5lIiwidGlzc3VlRGljdCIsImdlbmVEaWN0IiwiY3JlYXRlVG9vbHRpcCIsInRpc3N1ZVNpdGVEZXRhaWwiLCJfYWRkVGlzc3VlQ29sb3JzIiwiY3JlYXRlVG9vbGJhciIsImNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uIiwiX19hZGRGaWx0ZXIiLCJfc29ydFRpc3N1ZXMiLCJfX2FkZFNvcnRUaXNzdWVzIiwiX19hZGRDbHVzdGVyVGlzc3VlcyIsIl9hZGRUb29sQmFyIiwiYWN0aW9uIiwiX3JlbmRlclZpb2xpblBsb3QiLCJfY3VzdG9taXplTW91c2VFdmVudHMiLCJjb2xvckhleCIsIl9yZW5kZXJWaW9saW5IZWxwZXIiLCJjaGFydCIsInJvb3RJZCIsInRvb2x0aXBJZCIsInRpc3N1ZU9yZGVyIiwiYXJyIiwiZ0NvdW50cyIsIl9zZXRWaW9saW5QbG90TWFyZ2lucyIsIl9zZXRNYXJnaW5zIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiX3NldFZpb2xpblBsb3REaW1lbnNpb25zIiwidmlvbGluTGVnZW5kVyIsInN2Z1ciLCJwbG90IiwibG9jIiwiX2FkZFZpb2xpblRpc3N1ZUNvbG9yQmFuZCIsIl9jaGFuZ2VWaW9saW5YTGFiZWwiLCJxSWQiLCJzZWxlY3QyIiwicGxhY2Vob2xkZXIiLCJjcmVhdGVUaXNzdWVNZW51IiwiZm9ybUlkIiwibWVudUlkIiwic3VibWl0SWQiLCJ0aXNzdWVHcm91cHMiLCJmb3JFcXRsIiwiaW52YWxpZFRpc3N1ZXMiLCJncm91cE5hbWUiLCJ0aXNzdWVTaXRlIiwic2l0ZSIsInBhcnNlVGlzc3VlU2l0ZXMiLCJtYWluQ2xhc3MiLCIkYWxsVGlzc3VlRGl2IiwiY2hhbmdlIiwidmFsIiwicHJvcCIsImdyb3VwTmFtZXMiLCIkc2VjdGlvbnMiLCJnbmFtZSIsInNpdGVzIiwiZ0lkIiwiJGN1cnJlbnREb20iLCIkc2l0ZURvbSIsImNsaWNrIiwiaXMiLCJjcmVhdGVUaXNzdWVHcm91cE1lbnUiLCJyZW1vdmVDbGFzcyIsInF1ZXJ5VGlzc3VlSWRzIiwiaGFzQ2xhc3MiLCJwYXJzZVRpc3N1ZUdyb3VwTWVudSJdLCJtYXBwaW5ncyI6ImlEQUFBLElBQUlBLEtBQ0FDLEtBQ0FDLEVBQVEsR0FDUkMsRUFBVSxHQUNWQyxFQUFTLEdBRWIsU0FBU0MsRUFBZ0JDLEdBQ3ZCLE9BQU8sSUFBSUMsU0FBUyxJQUFLLFdBQWFELEVBQVFFLElBQUksU0FBU0MsRUFBTUMsR0FDL0QsT0FBT0MsS0FBS0MsVUFBVUgsR0FBUSxPQUFTQyxFQUFJLE1BQzFDRyxLQUFLLEtBQU8sS0EwQkYsV0FBU0MsR0FDdEIsSUFBSUMsRUFBVyxJQUFJQyxPQUFPLEtBQVFGLEVBQVksU0FDMUNHLEVBQVlILEVBQVVJLFdBQVcsR0FXckMsU0FBU0MsRUFBVUMsRUFBTUMsR0FDdkIsSUFJSUMsRUFKQUMsS0FDQUMsRUFBSUosRUFBS0ssT0FDVEMsRUFBSSxFQUNKQyxFQUFJLEVBRUpDLEVBQU1KLEdBQUssRUFDWEssR0FBTSxFQU1WLFNBQVNDLElBQ1AsR0FBSUYsRUFBSyxPQUFPM0IsRUFDaEIsR0FBSTRCLEVBQUssT0FBT0EsR0FBTSxFQUFPN0IsRUFHN0IsSUFBSVUsRUFBVXFCLEVBQVBDLEVBQUlOLEVBQ1gsR0FBSU4sRUFBS0YsV0FBV2MsS0FBTzlCLEVBQU8sQ0FDaEMsS0FBT3dCLElBQU1GLEdBQUtKLEVBQUtGLFdBQVdRLEtBQU94QixHQUFTa0IsRUFBS0YsYUFBYVEsS0FBT3hCLElBSTNFLE9BSEtRLEVBQUlnQixJQUFNRixFQUFHSSxHQUFNLEdBQ2RHLEVBQUlYLEVBQUtGLFdBQVdRLFFBQVV2QixFQUFTMEIsR0FBTSxFQUM5Q0UsSUFBTTNCLElBQVV5QixHQUFNLEVBQVVULEVBQUtGLFdBQVdRLEtBQU92QixL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
