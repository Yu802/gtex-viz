var Anatomogram = (function (exports) {
'use strict';

/**
 * Created by lucyxu on 6/9/17.
 * Modified by Kat on 5/17/2018.
 */

function render(){

}

exports.render = render;

return exports;

}({}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
