var EqtlDashboard=function(t){"use strict";var n={},e={},r=34,i=10,o=13;function a(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}var u=function(t){var u=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);function l(t,a){var u,l=[],c=t.length,h=0,f=0,p=c<=0,d=!1;function g(){if(p)return e;if(d)return d=!1,n;var a,u,l=h;if(t.charCodeAt(l)===r){for(;h++<c&&t.charCodeAt(h)!==r||t.charCodeAt(++h)===r;);return(a=h)>=c?p=!0:(u=t.charCodeAt(h++))===i?d=!0:u===o&&(d=!0,t.charCodeAt(h)===i&&++h),t.slice(l+1,a-1).replace(/""/g,'"')}for(;h<c;){if((u=t.charCodeAt(a=h++))===i)d=!0;else if(u===o)d=!0,t.charCodeAt(h)===i&&++h;else if(u!==s)continue;return t.slice(l,a)}return p=!0,t.slice(l,c)}for(t.charCodeAt(c-1)===i&&--c,t.charCodeAt(c-1)===o&&--c;(u=g())!==e;){for(var v=[];u!==n&&u!==e;)v.push(u),u=g();a&&null==(v=a(v,f++))||l.push(v)}return l}function c(n){return n.map(h).join(t)}function h(t){return null==t?"":u.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=l(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=a(t);return function(r,i){return n(e(r),i,t)}}(t,n):a(t)});return i.columns=r||[],i},parseRows:l,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(h).join(t)].concat(n.map(function(n){return e.map(function(t){return h(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(c).join("\n")}}};u(","),u("\t");function s(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var l=function(t,n){return fetch(t,n).then(s)},c="http://www.w3.org/1999/xhtml",h={svg:"http://www.w3.org/2000/svg",xhtml:c,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},f=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),h.hasOwnProperty(n)?{space:h[n],local:t}:t};var p=function(t){var n=f(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===c&&n.documentElement.namespaceURI===c?n.createElement(t):n.createElementNS(e,t)}})(n)};function d(){}var g=function(t){return null==t?d:function(){return this.querySelector(t)}};function v(){return[]}var y=function(t){return null==t?v:function(){return this.querySelectorAll(t)}},m=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var _=document.documentElement;if(!_.matches){var w=_.webkitMatchesSelector||_.msMatchesSelector||_.mozMatchesSelector||_.oMatchesSelector;m=function(t){return function(){return w.call(this,t)}}}}var x=m,b=function(t){return new Array(t.length)};function M(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}M.prototype={constructor:M,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var T="$";function k(t,n,e,r,i,o){for(var a,u=0,s=n.length,l=o.length;u<l;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new M(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function A(t,n,e,r,i,o,a){var u,s,l,c={},h=n.length,f=o.length,p=new Array(h);for(u=0;u<h;++u)(s=n[u])&&(p[u]=l=T+a.call(s,s.__data__,u,n),l in c?i[u]=s:c[l]=s);for(u=0;u<f;++u)(s=c[l=T+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],c[l]=null):e[u]=new M(t,o[u]);for(u=0;u<h;++u)(s=n[u])&&c[p[u]]===s&&(i[u]=s)}function C(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var E=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function N(t,n){return t.style.getPropertyValue(n)||E(t).getComputedStyle(t,null).getPropertyValue(n)}function S(t){return t.trim().split(/^|\s+/)}function D(t){return t.classList||new U(t)}function U(t){this._node=t,this._names=S(t.getAttribute("class")||"")}function z(t,n){for(var e=D(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function F(t,n){for(var e=D(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}U.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Y(){this.textContent=""}function P(){this.innerHTML=""}function I(){this.nextSibling&&this.parentNode.appendChild(this)}function H(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function O(){return null}function j(){var t=this.parentNode;t&&t.removeChild(this)}function L(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function q(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var V={},R=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(V={mouseenter:"mouseover",mouseleave:"mouseout"}));function X(t,n,e){return t=B(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function B(t,n,e){return function(r){var i=R;R=r;try{t.call(this,this.__data__,n,e)}finally{R=i}}}function Z(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function G(t,n,e){var r=V.hasOwnProperty(t.type)?X:B;return function(i,o,a){var u,s=this.__on,l=r(n,o,a);if(s)for(var c=0,h=s.length;c<h;++c)if((u=s[c]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=l,u.capture=e),void(u.value=n);this.addEventListener(t.type,l,e),u={type:t.type,name:t.name,value:n,listener:l,capture:e},s?s.push(u):this.__on=[u]}}function W(t,n,e){var r=E(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Q=[null];function J(t,n){this._groups=t,this._parents=n}function K(){return new J([[document.documentElement]],Q)}J.prototype=K.prototype={constructor:J,select:function(t){"function"!=typeof t&&(t=g(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=u[c])&&(a=t.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new J(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=y(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,l=0;l<s;++l)(a=u[l])&&(r.push(t.call(a,a.__data__,l,u)),i.push(a));return new J(r,i)},filter:function(t){"function"!=typeof t&&(t=x(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new J(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e,r=n?A:k,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,v=s[c]=new Array(g),y=u[c]=new Array(g);r(h,f,v,y,l[c]=new Array(p),d,n);for(var m,_,w=0,x=0;w<g;++w)if(m=v[w]){for(w>=x&&(x=w+1);!(_=y[x])&&++x<g;);m._next=_||null}}return(u=new J(u,i))._enter=s,u._exit=l,u},enter:function(){return new J(this._enter||this._groups.map(b),this._parents)},exit:function(){return new J(this._exit||this._groups.map(b),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],h=l.length,f=a[u]=new Array(h),p=0;p<h;++p)(s=l[p]||c[p])&&(f[p]=s);for(;u<r;++u)a[u]=n[u];return new J(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=C);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,l=i[o]=new Array(s),c=0;c<s;++c)(a=u[c])&&(l[c]=a);l.sort(n)}return new J(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=f(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):N(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=S(t+"");if(arguments.length<2){for(var r=D(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?z:F)(this,t)}}:n?function(t){return function(){z(this,t)}}:function(t){return function(){F(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Y:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?P:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(I)},lower:function(){return this.each(H)},append:function(t){var n="function"==typeof t?t:p(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:p(t),r=null==n?O:"function"==typeof n?n:g(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(j)},clone:function(t){return this.select(t?q:L)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?G:Z,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return W(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return W(this,t,n)}})(t,n))}};var tt=function(t){return"string"==typeof t?new J([[document.querySelector(t)]],[document.documentElement]):new J([[t]],Q)},nt=function(){for(var t,n=R;t=n.sourceEvent;)n=t;return n},et=function(t){var n=nt();return n.changedTouches&&(n=n.changedTouches[0]),function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}(t,n)},rt=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN};var it,ot,at=(1===(it=rt).length&&(ot=it,it=function(t,n){return rt(ot(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;it(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;it(t[i],n)>0?r=i:e=i+1}return e}}).right,ut=function(t){return null===t?NaN:+t},st=function(t,n){var e=function(t,n){var e,r,i=t.length,o=0,a=-1,u=0,s=0;if(null==n)for(;++a<i;)isNaN(e=ut(t[a]))||(s+=(r=e-u)*(e-(u+=r/++o)));else for(;++a<i;)isNaN(e=ut(n(t[a],a,t)))||(s+=(r=e-u)*(e-(u+=r/++o)));if(o>1)return s/(o-1)}(t,n);return e?Math.sqrt(e):e},lt=function(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},ct=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},ht=Math.sqrt(50),ft=Math.sqrt(10),pt=Math.sqrt(2),dt=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=gt(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function gt(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=ht?10:o>=ft?5:o>=pt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=ht?10:o>=ft?5:o>=pt?2:1)}var vt=function(t,n,e){if(null==e&&(e=ut),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}},yt=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},mt=function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=ut(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=ut(n(t[o],o,t)))?--i:a+=e;if(i)return a/i},_t=function(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=ut(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=ut(n(t[i],i,t)))||o.push(e);return vt(o.sort(rt),.5)},wt=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r};function xt(){}function bt(t,n){var e=new xt;if(t instanceof xt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}xt.prototype=bt.prototype={constructor:xt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Mt=function(){var t,n,e,r=[],i=[];function o(e,i,a,u){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var s,l,c,h=-1,f=e.length,p=r[i++],d=bt(),g=a();++h<f;)(c=d.get(s=p(l=e[h])+""))?c.push(l):d.set(s,[l]);return d.each(function(t,n){u(g,n,o(t,i,a,u))}),g}return e={object:function(t){return o(t,0,Tt,kt)},map:function(t){return o(t,0,At,$t)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,u=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each(function(n,e){a.push({key:e,values:t(n,o)})})),null!=u?a.sort(function(t,n){return u(t.key,n.key)}):a}(o(t,0,At,$t),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function Tt(){return{}}function kt(t,n,e){t[n]=e}function At(){return bt()}function $t(t,n,e){t.set(n,e)}var Ct=Array.prototype,Et=Ct.map,Nt=Ct.slice,St={name:"implicit"};function Dt(){var t,n,e=function t(n){var e=bt(),r=[],i=St;function o(t){var o=t+"",a=e.get(o);if(!a){if(i!==St)return i;e.set(o,a=r.push(t))}return n[(a-1)%n.length]}return n=null==n?[]:Nt.call(n),o.domain=function(t){if(!arguments.length)return r.slice();r=[],e=bt();for(var n,i,a=-1,u=t.length;++a<u;)e.has(i=(n=t[a])+"")||e.set(i,r.push(n));return o},o.range=function(t){return arguments.length?(n=Nt.call(t),o):n.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t().domain(r).range(n).unknown(i)},o}().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,u=0,s=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,e-u+2*s),a&&(t=Math.floor(t)),h+=(f-h-t*(e-u))*l,n=t*(1-u),a&&(h=Math.round(h),n=Math.round(n));var p=ct(e).map(function(n){return h+t*n});return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(u=s=Math.max(0,Math.min(1,t)),c()):u},e.paddingInner=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},e.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return Dt().domain(r()).range(o).round(a).paddingInner(u).paddingOuter(s).align(l)},c()}var Ut=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function zt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Ft(){}var Yt="\\s*([+-]?\\d+)\\s*",Pt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",It="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ht=/^#([0-9a-f]{3})$/,Ot=/^#([0-9a-f]{6})$/,jt=new RegExp("^rgb\\("+[Yt,Yt,Yt]+"\\)$"),Lt=new RegExp("^rgb\\("+[It,It,It]+"\\)$"),qt=new RegExp("^rgba\\("+[Yt,Yt,Yt,Pt]+"\\)$"),Vt=new RegExp("^rgba\\("+[It,It,It,Pt]+"\\)$"),Rt=new RegExp("^hsl\\("+[Pt,It,It]+"\\)$"),Xt=new RegExp("^hsla\\("+[Pt,It,It,Pt]+"\\)$"),Bt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Zt(t){var n;return t=(t+"").trim().toLowerCase(),(n=Ht.exec(t))?new Kt((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Ot.exec(t))?Gt(parseInt(n[1],16)):(n=jt.exec(t))?new Kt(n[1],n[2],n[3],1):(n=Lt.exec(t))?new Kt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=qt.exec(t))?Wt(n[1],n[2],n[3],n[4]):(n=Vt.exec(t))?Wt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Rt.exec(t))?tn(n[1],n[2]/100,n[3]/100,1):(n=Xt.exec(t))?tn(n[1],n[2]/100,n[3]/100,n[4]):Bt.hasOwnProperty(t)?Gt(Bt[t]):"transparent"===t?new Kt(NaN,NaN,NaN,0):null}function Gt(t){return new Kt(t>>16&255,t>>8&255,255&t,1)}function Wt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Kt(t,n,e,r)}function Qt(t){return t instanceof Ft||(t=Zt(t)),t?new Kt((t=t.rgb()).r,t.g,t.b,t.opacity):new Kt}function Jt(t,n,e,r){return 1===arguments.length?Qt(t):new Kt(t,n,e,null==r?1:r)}function Kt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function tn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new nn(t,n,e,r)}function nn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function en(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Ut(Ft,Zt,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Ut(Kt,Jt,zt(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Kt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Kt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Ut(nn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof nn)return new nn(t.h,t.s,t.l,t.opacity);if(t instanceof Ft||(t=Zt(t)),!t)return new nn;if(t instanceof nn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new nn(a,u,s,t.opacity)}(t):new nn(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new nn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new nn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Kt(en(t>=240?t-240:t+120,i,r),en(t,i,r),en(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var rn=Math.PI/180,on=180/Math.PI,an=.95047,un=1,sn=1.08883,ln=4/29,cn=6/29,hn=3*cn*cn,fn=cn*cn*cn;function pn(t){if(t instanceof dn)return new dn(t.l,t.a,t.b,t.opacity);if(t instanceof _n){var n=t.h*rn;return new dn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Kt||(t=Qt(t));var e=mn(t.r),r=mn(t.g),i=mn(t.b),o=gn((.4124564*e+.3575761*r+.1804375*i)/an),a=gn((.2126729*e+.7151522*r+.072175*i)/un);return new dn(116*a-16,500*(o-a),200*(a-gn((.0193339*e+.119192*r+.9503041*i)/sn)),t.opacity)}function dn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function gn(t){return t>fn?Math.pow(t,1/3):t/hn+ln}function vn(t){return t>cn?t*t*t:hn*(t-ln)}function yn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function mn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function _n(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Ut(dn,function(t,n,e,r){return 1===arguments.length?pn(t):new dn(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return new dn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new dn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=un*vn(t),new Kt(yn(3.2404542*(n=an*vn(n))-1.5371385*t-.4985314*(e=sn*vn(e))),yn(-.969266*n+1.8760108*t+.041556*e),yn(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),Ut(_n,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof _n)return new _n(t.h,t.c,t.l,t.opacity);t instanceof dn||(t=pn(t));var n=Math.atan2(t.b,t.a)*on;return new _n(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new _n(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return new _n(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new _n(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return pn(this).rgb()}}));var wn=-.14861,xn=1.78277,bn=-.29227,Mn=-.90649,Tn=1.97294,kn=Tn*Mn,An=Tn*xn,$n=xn*bn-Mn*wn;function Cn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}Ut(Cn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Cn)return new Cn(t.h,t.s,t.l,t.opacity);t instanceof Kt||(t=Qt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=($n*r+kn*n-An*e)/($n+kn-An),o=r-i,a=(Tn*(e-i)-bn*o)/Mn,u=Math.sqrt(a*a+o*o)/(Tn*i*(1-i)),s=u?Math.atan2(a,o)*on-120:NaN;return new Cn(s<0?s+360:s,u,i,t.opacity)}(t):new Cn(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Cn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Cn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*rn,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Kt(255*(n+e*(wn*r+xn*i)),255*(n+e*(bn*r+Mn*i)),255*(n+e*(Tn*r)),this.opacity)}}));var En=function(t){return function(){return t}};function Nn(t){return 1==(t=+t)?Sn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):En(isNaN(n)?e:n)}}function Sn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):En(isNaN(t)?n:t)}var Dn=function t(n){var e=Nn(n);function r(t,n){var r=e((t=Jt(t)).r,(n=Jt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Sn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1),Un=function(t,n){return n-=t=+t,function(e){return t+n*e}},zn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Fn=new RegExp(zn.source,"g");var Yn,Pn,In,Hn,On=function(t,n){var e,r,i,o=zn.lastIndex=Fn.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=zn.exec(t))&&(r=Fn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Un(e,r)})),o=Fn.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},jn=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?En(n):("number"===r?Un:"string"===r?(e=Zt(n))?(n=e,Dn):On:n instanceof Zt?Dn:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=jn(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=jn(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:Un)(t,n)},Ln=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},qn=180/Math.PI,Vn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Rn=function(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*qn,skewX:Math.atan(s)*qn,scaleX:a,scaleY:u}};function Xn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Un(t,i)},{i:s-2,x:Un(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Un(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Un(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Un(t,e)},{i:u-2,x:Un(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var Bn=Xn(function(t){return"none"===t?Vn:(Yn||(Yn=document.createElement("DIV"),Pn=document.documentElement,In=document.defaultView),Yn.style.transform=t,t=In.getComputedStyle(Pn.appendChild(Yn),null).getPropertyValue("transform"),Pn.removeChild(Yn),t=t.slice(7,-1).split(","),Rn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Zn=Xn(function(t){return null==t?Vn:(Hn||(Hn=document.createElementNS("http://www.w3.org/2000/svg","g")),Hn.setAttribute("transform",t),(t=Hn.transform.baseVal.consolidate())?(t=t.matrix,Rn(t.a,t.b,t.c,t.d,t.e,t.f)):Vn)},", ",")",")"),Gn=function(t){return function(){return t}},Wn=function(t){return+t},Qn=[0,1];function Jn(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Gn(n)}function Kn(t,n,e,r){var i=t[0],o=t[1],a=n[0],u=n[1];return o<i?(i=e(o,i),a=r(u,a)):(i=e(i,o),a=r(a,u)),function(t){return a(i(t))}}function te(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)o[u]=e(t[u],t[u+1]),a[u]=r(n[u],n[u+1]);return function(n){var e=at(t,n,1,i)-1;return a[e](o[e](n))}}var ne,ee=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},re=function(t){return(t=ee(Math.abs(t)))?t[1]:NaN},ie=function(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},oe={"":function(t,n){t=t.toPrecision(n);t:for(var e,r=t.length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ie(100*t,n)},r:ie,s:function(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ne=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ee(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},ae=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function ue(t){return new se(t)}function se(t){if(!(n=ae.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",a=!!n[5],u=n[6]&&+n[6],s=!!n[7],l=n[8]&&+n[8].slice(1),c=n[9]||"";"n"===c?(s=!0,c="g"):oe[c]||(c=""),(a||"0"===e&&"="===r)&&(a=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=u,this.comma=s,this.precision=l,this.type=c}ue.prototype=se.prototype,se.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var le,ce,he,fe=function(t){return t},pe=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];le=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}):fe,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):fe,u=t.percent||"%";function s(t){var n=(t=ue(t)).fill,e=t.align,s=t.sign,l=t.symbol,c=t.zero,h=t.width,f=t.comma,p=t.precision,d=t.type,g="$"===l?i[0]:"#"===l&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",v="$"===l?i[1]:/[%p]/.test(d)?u:"",y=oe[d],m=!d||/[defgprs%]/.test(d);function _(t){var i,u,l,_=g,w=v;if("c"===d)w=y(t)+w,t="";else{var x=(t=+t)<0;if(t=y(Math.abs(t),p),x&&0==+t&&(x=!1),_=(x?"("===s?s:"-":"-"===s||"("===s?"":s)+_,w=("s"===d?pe[8+ne/3]:"")+w+(x&&"("===s?")":""),m)for(i=-1,u=t.length;++i<u;)if(48>(l=t.charCodeAt(i))||l>57){w=(46===l?o+t.slice(i+1):t.slice(i))+w,t=t.slice(0,i);break}}f&&!c&&(t=r(t,1/0));var b=_.length+t.length+w.length,M=b<h?new Array(h-b+1).join(n):"";switch(f&&c&&(t=r(M+t,M.length?h-w.length:1/0),M=""),e){case"<":t=_+t+w+M;break;case"=":t=_+M+t+w;break;case"^":t=M.slice(0,b=M.length>>1)+_+t+w+M.slice(b);break;default:t=M+_+t+w}return a(t)}return p=null==p?d?6:12:/[gprs]/.test(d)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),_.toString=function(){return t+""},_}return{format:s,formatPrefix:function(t,n){var e=s(((t=ue(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(re(n)/3))),i=Math.pow(10,-r),o=pe[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),ce=le.format,he=le.formatPrefix;var de=function(t,n,e){var r,i=t[0],o=t[t.length-1],a=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=ht?i*=10:o>=ft?i*=5:o>=pt&&(i*=2),n<t?-i:i}(i,o,null==n?10:n);switch((e=ue(null==e?",f":e)).type){case"s":var u=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(re(n)/3)))-re(Math.abs(t)))}(a,u))||(e.precision=r),he(e,u);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,re(n)-re(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=function(t){return Math.max(0,-re(Math.abs(t)))}(a))||(e.precision=r-2*("%"===e.type))}return ce(e)};function ge(){var t=function(t,n){var e,r,i,o=Qn,a=Qn,u=jn,s=!1;function l(){return e=Math.min(o.length,a.length)>2?te:Kn,r=i=null,c}function c(n){return(r||(r=e(o,a,s?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,u)))(+n)}return c.invert=function(t){return(i||(i=e(a,o,Jn,s?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},c.domain=function(t){return arguments.length?(o=Et.call(t,Wn),l()):o.slice()},c.range=function(t){return arguments.length?(a=Nt.call(t),l()):a.slice()},c.rangeRound=function(t){return a=Nt.call(t),u=Ln,l()},c.clamp=function(t){return arguments.length?(s=!!t,l()):s},c.interpolate=function(t){return arguments.length?(u=t,l()):u},l()}(Jn,Un);return t.copy=function(){return n=t,ge().domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp());var n},function(t){var n=t.domain;return t.ticks=function(t){var e=n();return dt(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return de(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=gt(u,s,e))>0?r=gt(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=gt(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,n(i)),t},t}(t)}var ve=new Date,ye=new Date;function me(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return me(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return ve.setTime(+n),ye.setTime(+r),t(ve),t(ye),Math.floor(e(ve,ye))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var _e=me(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});_e.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?me(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):_e:null};var we=6e4,xe=6048e5,be=(me(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),me(function(t){t.setTime(Math.floor(t/we)*we)},function(t,n){t.setTime(+t+n*we)},function(t,n){return(n-t)/we},function(t){return t.getMinutes()}),me(function(t){var n=t.getTimezoneOffset()*we%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),me(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*we)/864e5},function(t){return t.getDate()-1}));function Me(t){return me(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*we)/xe})}var Te=Me(0),ke=Me(1),Ae=(Me(2),Me(3),Me(4)),$e=(Me(5),Me(6),me(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),me(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));$e.every=function(t){return isFinite(t=Math.floor(t))&&t>0?me(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};me(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*we)},function(t,n){return(n-t)/we},function(t){return t.getUTCMinutes()}),me(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()});var Ce=me(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1});function Ee(t){return me(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/xe})}var Ne=Ee(0),Se=Ee(1),De=(Ee(2),Ee(3),Ee(4)),Ue=(Ee(5),Ee(6),me(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),me(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function ze(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Fe(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ye(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Ue.every=function(t){return isFinite(t=Math.floor(t))&&t>0?me(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Pe,Ie,He,Oe={"-":"",_:" ",0:"0"},je=/^\s*\d+/,Le=/^%/,qe=/[\\^$*+?|[\]().{}]/g;function Ve(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Re(t){return t.replace(qe,"\\$&")}function Xe(t){return new RegExp("^(?:"+t.map(Re).join("|")+")","i")}function Be(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Ze(t,n,e){var r=je.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Ge(t,n,e){var r=je.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function We(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Qe(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Je(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Ke(t,n,e){var r=je.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function tr(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function nr(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function er(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function rr(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ir(t,n,e){var r=je.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function or(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function ar(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function ur(t,n,e){var r=je.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function sr(t,n,e){var r=je.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function lr(t,n,e){var r=je.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function cr(t,n,e){var r=Le.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function hr(t,n,e){var r=je.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function fr(t,n,e){var r=je.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function pr(t,n){return Ve(t.getDate(),n,2)}function dr(t,n){return Ve(t.getHours(),n,2)}function gr(t,n){return Ve(t.getHours()%12||12,n,2)}function vr(t,n){return Ve(1+be.count($e(t),t),n,3)}function yr(t,n){return Ve(t.getMilliseconds(),n,3)}function mr(t,n){return yr(t,n)+"000"}function _r(t,n){return Ve(t.getMonth()+1,n,2)}function wr(t,n){return Ve(t.getMinutes(),n,2)}function xr(t,n){return Ve(t.getSeconds(),n,2)}function br(t){var n=t.getDay();return 0===n?7:n}function Mr(t,n){return Ve(Te.count($e(t),t),n,2)}function Tr(t,n){var e=t.getDay();return t=e>=4||0===e?Ae(t):Ae.ceil(t),Ve(Ae.count($e(t),t)+(4===$e(t).getDay()),n,2)}function kr(t){return t.getDay()}function Ar(t,n){return Ve(ke.count($e(t),t),n,2)}function $r(t,n){return Ve(t.getFullYear()%100,n,2)}function Cr(t,n){return Ve(t.getFullYear()%1e4,n,4)}function Er(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Ve(n/60|0,"0",2)+Ve(n%60,"0",2)}function Nr(t,n){return Ve(t.getUTCDate(),n,2)}function Sr(t,n){return Ve(t.getUTCHours(),n,2)}function Dr(t,n){return Ve(t.getUTCHours()%12||12,n,2)}function Ur(t,n){return Ve(1+Ce.count(Ue(t),t),n,3)}function zr(t,n){return Ve(t.getUTCMilliseconds(),n,3)}function Fr(t,n){return zr(t,n)+"000"}function Yr(t,n){return Ve(t.getUTCMonth()+1,n,2)}function Pr(t,n){return Ve(t.getUTCMinutes(),n,2)}function Ir(t,n){return Ve(t.getUTCSeconds(),n,2)}function Hr(t){var n=t.getUTCDay();return 0===n?7:n}function Or(t,n){return Ve(Ne.count(Ue(t),t),n,2)}function jr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?De(t):De.ceil(t),Ve(De.count(Ue(t),t)+(4===Ue(t).getUTCDay()),n,2)}function Lr(t){return t.getUTCDay()}function qr(t,n){return Ve(Se.count(Ue(t),t),n,2)}function Vr(t,n){return Ve(t.getUTCFullYear()%100,n,2)}function Rr(t,n){return Ve(t.getUTCFullYear()%1e4,n,4)}function Xr(){return"+0000"}function Br(){return"%"}function Zr(t){return+t}function Gr(t){return Math.floor(+t/1e3)}!function(t){Pe=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,l=Xe(i),c=Be(i),h=Xe(o),f=Be(o),p=Xe(a),d=Be(a),g=Xe(u),v=Be(u),y=Xe(s),m=Be(s),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:pr,e:pr,f:mr,H:dr,I:gr,j:vr,L:yr,m:_r,M:wr,p:function(t){return i[+(t.getHours()>=12)]},Q:Zr,s:Gr,S:xr,u:br,U:Mr,V:Tr,w:kr,W:Ar,x:null,X:null,y:$r,Y:Cr,Z:Er,"%":Br},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Nr,e:Nr,f:Fr,H:Sr,I:Dr,j:Ur,L:zr,m:Yr,M:Pr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Zr,s:Gr,S:Ir,u:Hr,U:Or,V:jr,w:Lr,W:qr,x:null,X:null,y:Vr,Y:Rr,Z:Xr,"%":Br},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:rr,e:rr,f:lr,H:or,I:or,j:ir,L:sr,m:er,M:ar,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},Q:hr,s:fr,S:ur,u:Ge,U:We,V:Qe,w:Ze,W:Je,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:tr,Y:Ke,Z:nr,"%":cr};function b(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++u<l;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Oe[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=Ye(1900);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=(r=Fe(Ye(o.y))).getUTCDay())>4||0===i?Se.ceil(r):Se(r),r=Ce.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(r=(i=(r=n(Ye(o.y))).getDay())>4||0===i?ke.ceil(r):ke(r),r=be.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Fe(Ye(o.y)).getUTCDay():n(Ye(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Fe(o)):n(o)}}function T(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Oe?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=b(e,_),_.X=b(r,_),_.c=b(n,_),w.x=b(e,w),w.X=b(r,w),w.c=b(n,w),{format:function(t){var n=b(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",ze);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Fe);return n.toString=function(){return t},n}}}(t),Ie=Pe.utcFormat,He=Pe.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Ie("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||He("%Y-%m-%dT%H:%M:%S.%LZ");var Wr=Math.PI,Qr=2*Wr,Jr=Qr-1e-6;function Kr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ti(){return new Kr}Kr.prototype=ti.prototype={constructor:Kr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,s=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*u-s*l)>1e-6&&i){var f=e-o,p=r-a,d=u*u+s*s,g=f*f+p*p,v=Math.sqrt(d),y=Math.sqrt(h),m=i*Math.tan((Wr-Math.acos((d+h-g)/(2*v*y)))/2),_=m/y,w=m/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*l)+","+(n+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+w*u)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),s=t+a,l=n+u,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),e&&(h<0&&(h=h%Qr+Qr),h>Jr?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Wr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var ni=function(t){return function(){return t}};function ei(t){this._context=t}ei.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var ri=function(t){return new ei(t)};function ii(t){return t[0]}function oi(t){return t[1]}var ai=function(){var t=ii,n=oi,e=ni(!0),r=null,i=ri,o=null;function a(a){var u,s,l,c=a.length,h=!1;for(null==r&&(o=i(l=ti())),u=0;u<=c;++u)!(u<c&&e(s=a[u],u,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(s,u,a),+n(s,u,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:ni(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:ni(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:ni(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a},ui=function(){var t=ii,n=null,e=ni(0),r=oi,i=ni(!0),o=null,a=ri,u=null;function s(s){var l,c,h,f,p,d=s.length,g=!1,v=new Array(d),y=new Array(d);for(null==o&&(u=a(p=ti())),l=0;l<=d;++l){if(!(l<d&&i(f=s[l],l,s))===g)if(g=!g)c=l,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=l-1;h>=c;--h)u.point(v[h],y[h]);u.lineEnd(),u.areaEnd()}g&&(v[l]=+t(f,l,s),y[l]=+e(f,l,s),u.point(n?+n(f,l,s):v[l],r?+r(f,l,s):y[l]))}if(p)return u=null,p+""||null}function l(){return ai().defined(i).curve(a).context(o)}return s.x=function(e){return arguments.length?(t="function"==typeof e?e:ni(+e),n=null,s):t},s.x0=function(n){return arguments.length?(t="function"==typeof n?n:ni(+n),s):t},s.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ni(+t),s):n},s.y=function(t){return arguments.length?(e="function"==typeof t?t:ni(+t),r=null,s):e},s.y0=function(t){return arguments.length?(e="function"==typeof t?t:ni(+t),s):e},s.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ni(+t),s):r},s.lineX0=s.lineY0=function(){return l().x(t).y(e)},s.lineY1=function(){return l().x(t).y(r)},s.lineX1=function(){return l().x(n).y(e)},s.defined=function(t){return arguments.length?(i="function"==typeof t?t:ni(!!t),s):i},s.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),s):a},s.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),s):o},s};function si(t){return t<0?-1:1}function li(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(si(o)+si(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function ci(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function hi(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function fi(t){this._context=t}function pi(t){this._context=t}fi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:hi(this,this._t0,ci(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,hi(this,ci(this,e=li(this,t,n)),e);break;default:hi(this,this._t0,e=li(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(function(t){this._context=new pi(t)}.prototype=Object.create(fi.prototype)).point=function(t,n){fi.prototype.point.call(this,n,t)},pi.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var di=Array.prototype.slice,gi=function(t){return t},vi=1,yi=2,mi=3,_i=4,wi=1e-6;function xi(t){return"translate("+(t+.5)+",0)"}function bi(t){return"translate(0,"+(t+.5)+")"}function Mi(){return!this.__axis}function Ti(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,s=t===vi||t===_i?-1:1,l=t===_i||t===yi?"x":"y",c=t===vi||t===mi?xi:bi;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):gi:i,d=Math.max(o,0)+u,g=n.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),_=h.selection?h.selection():h,w=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(f,n).order(),b=x.exit(),M=x.enter().append("g").attr("class","tick"),T=x.select("line"),k=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),T=T.merge(M.append("line").attr("stroke","#000").attr(l+"2",s*o)),k=k.merge(M.append("text").attr("fill","#000").attr(l,s*d).attr("dy",t===vi?"0em":t===mi?"0.71em":"0.32em")),h!==_&&(w=w.transition(h),x=x.transition(h),T=T.transition(h),k=k.transition(h),b=b.transition(h).attr("opacity",wi).attr("transform",function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")}),M.attr("opacity",wi).attr("transform",function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:m(t))})),b.remove(),w.attr("d",t===_i||t==yi?"M"+s*a+","+v+"H0.5V"+y+"H"+s*a:"M"+v+","+s*a+"V0.5H"+y+"V"+s*a),x.attr("opacity",1).attr("transform",function(t){return c(m(t))}),T.attr(l+"2",s*o),k.attr(l,s*d).text(p),_.filter(Mi).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===yi?"start":t===_i?"end":"middle"),_.each(function(){this.__axis=m})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=di.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:di.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:di.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(u=+t,h):u},h}function ki(t){return Ti(mi,t)}var Ai={value:function(){}};function $i(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Ci(r)}function Ci(t){this._=t}function Ei(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Ni(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Ai,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Ci.prototype=$i.prototype={constructor:Ci,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=Ni(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Ni(i[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=Ei(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Ci(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Si=function(){R.preventDefault(),R.stopImmediatePropagation()},Di=function(t){var n=t.document.documentElement,e=tt(t).on("dragstart.drag",Si,!0);"onselectstart"in n?e.on("selectstart.drag",Si,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};var Ui,zi,Fi=0,Yi=0,Pi=0,Ii=1e3,Hi=0,Oi=0,ji=0,Li="object"==typeof performance&&performance.now?performance:Date,qi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Vi(){return Oi||(qi(Ri),Oi=Li.now()+ji)}function Ri(){Oi=0}function Xi(){this._call=this._time=this._next=null}function Bi(t,n,e){var r=new Xi;return r.restart(t,n,e),r}function Zi(){Oi=(Hi=Li.now())+ji,Fi=Yi=0;try{!function(){Vi(),++Fi;for(var t,n=Ui;n;)(t=Oi-n._time)>=0&&n._call.call(null,t),n=n._next;--Fi}()}finally{Fi=0,function(){var t,n,e=Ui,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ui=n);zi=t,Wi(r)}(),Oi=0}}function Gi(){var t=Li.now(),n=t-Hi;n>Ii&&(ji-=n,Hi=t)}function Wi(t){Fi||(Yi&&(Yi=clearTimeout(Yi)),t-Oi>24?(t<1/0&&(Yi=setTimeout(Zi,t-Li.now()-ji)),Pi&&(Pi=clearInterval(Pi))):(Pi||(Hi=Li.now(),Pi=setInterval(Gi,Ii)),Fi=1,qi(Zi)))}Xi.prototype=Bi.prototype={constructor:Xi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Vi():+e)+(null==n?0:+n),this._next||zi===this||(zi?zi._next=this:Ui=this,zi=this),this._call=t,this._time=e,Wi()},stop:function(){this._call&&(this._call=null,this._time=1/0,Wi())}};var Qi=function(t,n,e){var r=new Xi;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Ji=$i("start","end","interrupt"),Ki=[],to=0,no=1,eo=2,ro=3,io=4,oo=5,ao=6,uo=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var l,c,h,f;if(e.state!==no)return u();for(l in i)if((f=i[l]).name===e.name){if(f.state===ro)return Qi(o);f.state===io?(f.state=ao,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=ao,f.timer.stop(),delete i[l])}if(Qi(function(){e.state===ro&&(e.state=io,e.timer.restart(a,e.delay,e.time),a(s))}),e.state=eo,e.on.call("start",t,t.__data__,e.index,e.group),e.state===eo){for(e.state=ro,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=oo,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);e.state===oo&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=ao,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Bi(function(t){e.state=no,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ji,tween:Ki,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:to})};function so(t,n){var e=co(t,n);if(e.state>to)throw new Error("too late; already scheduled");return e}function lo(t,n){var e=co(t,n);if(e.state>eo)throw new Error("too late; already started");return e}function co(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var ho=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>eo&&e.state<oo,e.state=ao,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}};function fo(t,n,e){var r=t._id;return t.each(function(){var t=lo(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return co(t,r).value[n]}}var po=function(t,n){var e;return("number"==typeof n?Un:n instanceof Zt?Dn:(e=Zt(n))?(n=e,Dn):On)(t,n)};var go=K.prototype.constructor;var vo=0;function yo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function mo(){return++vo}var _o=K.prototype;yo.prototype=function(t){return K().transition(t)}.prototype={constructor:yo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=g(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(u=l[f])&&(s=t.call(u,u.__data__,f,l))&&("__data__"in u&&(s.__data__=u.__data__),h[f]=s,uo(h[f],n,e,f,h,co(u,e)));return new yo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=y(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,l=r[u],c=l.length,h=0;h<c;++h)if(s=l[h]){for(var f,p=t.call(s,s.__data__,h,l),d=co(s,e),g=0,v=p.length;g<v;++g)(f=p[g])&&uo(f,n,e,g,p,d);o.push(p),a.push(s)}return new yo(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=x(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],l=0;l<u;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new yo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],c=e[u],h=l.length,f=a[u]=new Array(h),p=0;p<h;++p)(s=l[p]||c[p])&&(f[p]=s);for(;u<r;++u)a[u]=n[u];return new yo(a,this._parents,this._name,this._id)},selection:function(){return new go(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=mo(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var c=co(a,n);uo(a,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new yo(r,this._parents,t,e)},call:_o.call,nodes:_o.nodes,node:_o.node,size:_o.size,empty:_o.empty,each:_o.each,on:function(t,n){var e=this._id;return arguments.length<2?co(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?so:lo;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=f(t),r="transform"===e?Zn:po;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttribute(t))===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttribute(t)}})(e,r,fo(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}:function(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=f(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Bn:po;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=N(this,t),a=(this.style.removeProperty(t),N(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var a=N(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=N(this,t)),a===u?null:a===r&&u===i?o:o=n(r=a,i=u)}}(t,r,fo(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=N(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(fo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=co(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=lo(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=lo(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){so(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){so(this,t).delay=n}})(n,t)):co(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){lo(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){lo(this,t).duration=n}})(n,t)):co(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){lo(this,t).ease=n}}(n,t)):co(this.node(),n).ease}};var wo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function xo(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return wo.time=Vi(),wo;return e}K.prototype.interrupt=function(t){return this.each(function(){ho(this,t)})},K.prototype.transition=function(t){var n,e;t instanceof yo?(n=t._id,t=t._name):(n=mo(),(e=wo).time=Vi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)(a=u[l])&&uo(a,t,n,l,u,e||xo(a,n));return new yo(r,this._parents,t,n)};var bo=function(t){return function(){return t}},Mo=function(t,n,e){this.target=t,this.type=n,this.selection=e};function To(){R.stopImmediatePropagation()}var ko=function(){R.preventDefault(),R.stopImmediatePropagation()},Ao={name:"drag"},$o={name:"space"},Co={name:"handle"},Eo={name:"center"},No={name:"x",handles:["e","w"].map(Io),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},So={name:"y",handles:["n","s"].map(Io),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Do={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Io),input:function(t){return t},output:function(t){return t}},Uo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},zo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Fo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Yo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Po={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Io(t){return{type:t}}function Ho(){return!R.button}function Oo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function jo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Lo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}var qo=function(){return function(t){var n,e=Oo,r=Ho,i=$i(a,"start","brush","end"),o=6;function a(n){var e=n.property("__brush",h).selectAll(".overlay").data([Io("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Uo.overlay).merge(e).each(function(){var t=jo(this).extent;tt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([Io("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Uo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Uo[t.type]}),n.each(u).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",c)}function u(){var t=tt(this),n=jo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,n){return t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function c(){if(R.touches){if(R.changedTouches.length<R.touches.length)return ko()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,a,l,c,h,f,p,d,g,v,y,m=this,_=R.target.__data__.type,w="selection"===(R.metaKey?_="overlay":_)?Ao:R.altKey?Eo:Co,x=t===So?null:Yo[_],b=t===No?null:Po[_],M=jo(m),T=M.extent,k=M.selection,A=T[0][0],$=T[0][1],C=T[1][0],E=T[1][1],N=x&&b&&R.shiftKey,S=et(m),D=S,U=s(m,arguments).beforestart();"overlay"===_?M.selection=k=[[e=t===So?A:S[0],o=t===No?$:S[1]],[l=t===So?C:e,h=t===No?E:o]]:(e=k[0][0],o=k[0][1],l=k[1][0],h=k[1][1]),i=e,a=o,c=l,f=h;var z=tt(m).attr("pointer-events","none"),F=z.selectAll(".overlay").attr("cursor",Uo[_]);if(R.touches)z.on("touchmove.brush",P,!0).on("touchend.brush touchcancel.brush",H,!0);else{var Y=tt(R.view).on("keydown.brush",function(){switch(R.keyCode){case 16:N=x&&b;break;case 18:w===Co&&(x&&(l=c-p*x,e=i+p*x),b&&(h=f-d*b,o=a+d*b),w=Eo,I());break;case 32:w!==Co&&w!==Eo||(x<0?l=c-p:x>0&&(e=i-p),b<0?h=f-d:b>0&&(o=a-d),w=$o,F.attr("cursor",Uo.selection),I());break;default:return}ko()},!0).on("keyup.brush",function(){switch(R.keyCode){case 16:N&&(v=y=N=!1,I());break;case 18:w===Eo&&(x<0?l=c:x>0&&(e=i),b<0?h=f:b>0&&(o=a),w=Co,I());break;case 32:w===$o&&(R.altKey?(x&&(l=c-p*x,e=i+p*x),b&&(h=f-d*b,o=a+d*b),w=Eo):(x<0?l=c:x>0&&(e=i),b<0?h=f:b>0&&(o=a),w=Co),F.attr("cursor",Uo[_]),I());break;default:return}ko()},!0).on("mousemove.brush",P,!0).on("mouseup.brush",H,!0);Di(R.view)}To(),ho(m),u.call(m),U.start()}function P(){var t=et(m);!N||v||y||(Math.abs(t[0]-D[0])>Math.abs(t[1]-D[1])?y=!0:v=!0),D=t,g=!0,ko(),I()}function I(){var t;switch(p=D[0]-S[0],d=D[1]-S[1],w){case $o:case Ao:x&&(p=Math.max(A-e,Math.min(C-l,p)),i=e+p,c=l+p),b&&(d=Math.max($-o,Math.min(E-h,d)),a=o+d,f=h+d);break;case Co:x<0?(p=Math.max(A-e,Math.min(C-e,p)),i=e+p,c=l):x>0&&(p=Math.max(A-l,Math.min(C-l,p)),i=e,c=l+p),b<0?(d=Math.max($-o,Math.min(E-o,d)),a=o+d,f=h):b>0&&(d=Math.max($-h,Math.min(E-h,d)),a=o,f=h+d);break;case Eo:x&&(i=Math.max(A,Math.min(C,e-p*x)),c=Math.max(A,Math.min(C,l+p*x))),b&&(a=Math.max($,Math.min(E,o-d*b)),f=Math.max($,Math.min(E,h+d*b)))}c<i&&(x*=-1,t=e,e=l,l=t,t=i,i=c,c=t,_ in zo&&F.attr("cursor",Uo[_=zo[_]])),f<a&&(b*=-1,t=o,o=h,h=t,t=a,a=f,f=t,_ in Fo&&F.attr("cursor",Uo[_=Fo[_]])),M.selection&&(k=M.selection),v&&(i=k[0][0],c=k[1][0]),y&&(a=k[0][1],f=k[1][1]),k[0][0]===i&&k[0][1]===a&&k[1][0]===c&&k[1][1]===f||(M.selection=[[i,a],[c,f]],u.call(m),U.brush())}function H(){if(To(),R.touches){if(R.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),z.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,n){var e=t.document.documentElement,r=tt(t).on("dragstart.drag",null);n&&(r.on("click.drag",Si,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(R.view,g),Y.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),F.attr("cursor",Uo.overlay),M.selection&&(k=M.selection),Lo(k)&&(M.selection=null,u.call(m)),U.end()}}function h(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return a.move=function(n,e){n.selection?n.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=s(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),l=jn(o,a);function c(t){r.selection=1===t&&Lo(a)?null:l(t),u.call(n),i.brush()}return o&&a?c:c(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=s(this,n).beforestart();ho(this),r.selection=null==i||Lo(i)?null:i,u.call(this),o.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){!function(t,n,e,r){var i=R;t.sourceEvent=R,R=t;try{n.apply(e,r)}finally{R=i}}(new Mo(a,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},a.extent=function(t){return arguments.length?(e="function"==typeof t?t:bo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):e},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:bo(!!t),a):r},a.handleSize=function(t){return arguments.length?(o=+t,a):o},a.on=function(){var t=i.on.apply(i,arguments);return t===i?a:t},a}(Do)};const Vo={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},Ro={nrd:function(t){let n=(vt(t,.75)-vt(t,.25))/1.34;return 1.06*Math.min(st(t),n)*Math.pow(t.length,-.2)}};class Xo{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),tt("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){tt("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=R.pageX,n=R.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;tt("#"+this.id).style("left",`${t}px`).style("top",`${n}px`)}edit(t){tt("#"+this.id).html(t)}}class Bo{constructor(t,n){$(`#${t}`).show(),this.bar=$("<div/>").addClass("btn-group btn-group-sm").appendTo(`#${t}`),this.buttons={},this.tooltip=n}createDownloadButton(t,n,e,r,i="fa-save"){this.createButton(t,i);tt(`#${t}`).on("click",()=>{this.downloadSvg(n,e,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,n,e="fa-expand-arrows-alt"){this.createButton(t,e);tt(`#${t}`).on("click",n).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-save"){const e=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${n}`).appendTo(e),this.buttons[t]=e,e}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,e){let r=$($($(`${"#"+t}`))[0]);var i=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),o=function(t){for(var n="",e=document.styleSheets,r=0;r<e.length;r++)try{if(null==e[r].cssRules)continue;for(var i=e[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var u;try{u=$(t).find(a.selectorText)}catch(t){u=[]}u.length>0&&(n+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var s=document.createElement("style");return s.setAttribute("type","text/css"),s.innerHTML="<![CDATA[\n"+n+"\n]]>",s}(r.get());i.prepend(o),$("#"+e).html("").hide();var a=$(`#${e}`).append(i).html(),u=new Blob([a],{type:"image/svg+xml"});saveAs(u,n),$(`#${e}`).html("").hide()}}class Zo{constructor(t,n={}){this._sanityCheck(t),this.data=t,this.groupInfo=n}render(t,n=500,e=357,r=.05,i,o=[-3,3],a="Y axis",u=!0,s=!0,l=0,c=!1,h=!1,f=!1){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,n,e,r,i,o,a,u,s,l,c,h,f)}),void 0===o||0==o.length){let t=[];this.data.forEach(n=>t=t.concat(n.values)),o=lt(t)}this.groups=Mt().key(t=>t.group).entries(this.data),this.scale={x:Dt().rangeRound([0,n]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:Dt(),y:ge().rangeRound([e,0]).domain(o),z:ge()},this.groups.forEach(n=>{let r=n.key,i=n.values,a=this.groupInfo[r];if(n.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,n)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+35})`}).text(t=>`${t}: ${a[t]}`)}this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort(rt),this._drawViolin(t,e,c,n.index))});if(s){const n=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${e+5})`).call(ki(this.scale.subx));l>0&&n.selectAll("text").style("text-anchor","start").attr("transform",`rotate(${l}, 2, 10)`)}});let p=s?45:0;var d;if(this.xAxis=u?ki(this.scale.x):ki(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${e+p})`).call(this.xAxis).selectAll("text").style("text-anchor","start").attr("transform","rotate(30, -10, 10)"),p=5,this.yAxis=(d=this.scale.y,Ti(_i,d)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${p}, 0)`).call(this.yAxis),t.append("text").attr("y",-20).attr("x",-40).attr("class","violin-axis-label").attr("text-anchor","start").text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),h&&this._addGroupDivider(t),f){const n=t.append("g").attr("transform","translate(0, 0)");n.append("rect").attr("x",50+this.scale.x.range()[0]-5).attr("y",-35).attr("width",70*(this.groups[0].values.length+1)).attr("height",24).style("fill","none").style("stroke","silver");const e=n.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;e.append("rect").attr("x",(t,n)=>70*(n+1)+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,n)=>15+70*(n+1)+this.scale.x.range()[0]).attr("y",-20)}}createTooltip(t){return this.tooltip=new Xo(t),tt(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,n){return void 0===n&&(n=this.createTooltip(t)),this.toolbar=new Bo(t,n),this.toolbar}addBrush(t){const n=qo();n.on("end",()=>{this.zoom(t,n)}),t.append("g").attr("class","brush").call(n)}zoom(t,n){let e,r=R.selection;if(void 0===n)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,n)=>{const e=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return n>=e&&n<=i}));const e=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([e,i]),t.select(".brush").call(n.move,null)}else{if(!e)return e=setTimeout(function(){e=null},350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((n,e)=>{let r=n.key,o=n.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(e=>{if(0==e.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${n.index}-${e.label}`);o.select(".violin").transition(i).attr("d",ui().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=vt(e.values,.25),u=vt(e.values,.75);o.select(".violin-ir").transition(i).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(u)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(u)-this.scale.y(a)));const s=_t(e.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(s)).attr("y2",this.scale.y(s))})})}_drawViolin(t,n,e,r){let i=function(t,n,e){return function(r){return n.map(n=>[n,mt(r,r=>t((n-r)/e))/e])}}(Vo.gaussian,this.scale.y.ticks(100),Ro.nrd(n.values));const o=lt(n.values),a=i(n.values).filter(t=>t[0]>o[0]&&t[0]<o[1]);let u=yt(a,t=>Math.abs(t[1]));this.scale.z.domain([-u,u]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const s=t.append("g").attr("id",`violin${r}-${n.label}`);let l=ui().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const c=s.append("path").datum(a).attr("d",l).classed("violin",!0).style("fill",()=>void 0!==n.color?n.color:r%2==0?"#90c1c1":"#94a8b8"),h=vt(n.values,.25),f=vt(n.values,.75),p=this.scale.z.domain()[1]/3;if(e){const e=Math.abs(f-h),r=yt(n.values.filter(t=>t<f+1.5*e)),i=wt(n.values.filter(t=>t>h-1.5*e));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}s.append("rect").attr("x",this.scale.z(-p)).attr("y",this.scale.y(f)).attr("width",Math.abs(this.scale.z(-p)-this.scale.z(p))).attr("height",Math.abs(this.scale.y(f)-this.scale.y(h))).attr("class","violin-ir");const d=_t(n.values);s.append("line").attr("x1",this.scale.z(-p)).attr("x2",this.scale.z(p)).attr("y1",this.scale.y(d)).attr("y2",this.scale.y(d)).attr("class","violin-median"),s.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(n.group+"<br/>"+n.label+"<br/>Median: "+d.toPrecision(4)+"<br/>")}),s.on("mouseout",()=>{c.classed("highlighted",!1)})}_sanityCheck(t){const n=["group","label","values"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const n=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==n.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+e/2:0;t.selectAll(".vline").data(n).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,e)=>e!=n.length-1?1:0).style("stroke","silver").style("opacity",.25)}}function Go(){const t="https://gtexportal.org/rest/v1/";return{gene:t+"reference/geneId?format=json&release=v7&geneId=",rsId:t+"reference/snp?reference=current&format=json&snpId=",variantId:t+"reference/snp?format=json&reference=current&release=v7&variantId=",dyneqtl:"https://gtexportal.org/rest/v1/association/dyneqtl",tissueSites:"https://gtexportal.org/rest/v1/dataset/tissueSiteDetail?format=json"}}return t.build=function(t,n,e,r,i,o,a=Go()){let u={};try{l(a.tissueSites).then(function(s){const c=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"];let h=s.tissueSiteDetail.filter(t=>!c.includes(t.tissue_site_detail_id));u=h.reduce((t,n)=>{const e=n.tissue_site,r={id:n.tissue_site_detail_id,name:n.tissue_site_detail};return t.hasOwnProperty(e)||(t[e]=[]),t[e].push(r),t},{}),Object.keys(u).forEach(t=>{if(1==u[t].length){const n=u[t][0];delete u[t],u[n.name]=[n]}}),function(t,n){let e=Object.keys(t).sort();const r=ct(0,4).map(t=>$(`<div id="section${t}" class="col-xs-12 col-md-3">`).appendTo($(`#${n}`)));e.forEach(function(n){let e=t[n];const i=n.replace(/ /g,"_");let o=r[3];"Brain"==n?o=r[0]:n.match(/^[A-D]/)?o=r[1]:n.match(/^[E-P]/)&&(o=r[2]),$("<label class=ed-tissue-main-level>"+`<input type="checkbox" id="${i}" class="tissueGroup"> `+'<span class="checkmark"></span>'+`<span>${n}</span>`+"</label><br/>").appendTo(o),e.length>1&&e.sort((t,n)=>t.id>n.id?1:t.id<n.id?-1:0).forEach(function(t,n){let r=$("<label class=ed-tissue-sub-level>"+`<input type="checkbox" id="${t.id}"> `+'<span class="checkmark"></span>'+`<span>${t.name}</span>`+"</label><br/>").appendTo(o);n==e.length-1&&r.addClass("last-site")}),$("#"+i).click(function(){$("#"+i).is(":checked")?e.forEach(function(t){"id"!=t.id&&$("#"+t.id).attr("checked",!0)}):e.forEach(function(t){"id"!=t.id&&$("#"+t.id).attr("checked",!1)})})})}(u,n),$(`#${r}`).click(function(t,n,e,r,i,o,a,u=Go(),s=30){return function(){$(`#${n}`).html("");let i=[];if($(`#${e}`).find(":input").each(function(){if($(this).is(":checked")){const n=$(this).attr("id");if($(this).hasClass("tissueGroup")){let e=n.replace(/_/g," ");1==t[e].length&&i.push(t[e][0].id)}else i.push(n)}}),0==i.length)throw alert("Must select at least one tissue."),"Input error";let c=$(`#${r}`).val().split("\n").filter(function(t){return""!=t});if(0==c.length)throw alert("Must input at least one gene-variant pair."),"Input error";c.length>s&&($(`#${a}`).append(`Your input has exceeded the maximum number of allowed entries. Only the first ${s} entries are processed.`),console.warn("User input has exceeded the maximum number of allowed entries."),c=c.slice(0,s));const h={};Object.keys(t).forEach(n=>{t[n].forEach(t=>{h[t.id]=t.name})}),c.forEach(function(t,e){t.replace(/ /g,"");let r=t.split(",")[1],s=t.split(",")[0];const c=u.gene+s,f=r.toLowerCase().startsWith("rs")?u.rsId+r:u.variantId+r;Promise.all([l(c),l(f)]).then(function(t){const u=function(t,n){if(!t.hasOwnProperty("geneId"))throw"Fatal Error: parse gene error";let e=t.geneId.filter(t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase());return 0==e.length?null:e[0]}(t[0],s),c=function(t){if(!t.hasOwnProperty("snp"))throw"Fatal Error: parse variant error";const n=t.snp;return 0==n.length?null:n[0]}(t[1]);if(null===u){const t=`Input Error: no gene found for ${s}. <br/>`;throw $(`#${a}`).append(t),t}if(null===c){const t=`Input Error: no variant found for ${r} <br/>`;throw $(`#${a}`).append(t),t}!function(t,n,e,r,i,o){const a=`boxplot${o}`;$(`#${n}`).append(`<div id="${a}" class="col-sm-12"></div>`);let u=[];var s,c;i.forEach(t=>{let n=Go().dyneqtl,i=`${n}?snp_id=${r.variantId}&gene_id=${e.gencodeId}&tissue=${t}`;u.push((i=i,c=t,new Promise(function(t,n){l(i).then(function(n){t(n)}).catch(function(n){const e={tissue:c,status:"failed"};t(e)})})))}),Promise.all(u).then(function(n){let i=[],o={};var u;n.forEach(n=>{if("failed"==n.status){let e=t[n.tissue];i=i.concat([{group:e,label:"Ref",values:[0]},{group:e,label:"Het",values:[0]},{group:e,label:"Alt",values:[0]}])}else{(u=n).expression_values=u.expression_values.split(",").map(t=>parseFloat(t)),u.genotypes=u.genotypes.split(",").map(t=>parseFloat(t)),u.homoRefExp=u.expression_values.filter((t,n)=>0==u.genotypes[n]),u.homoAltExp=u.expression_values.filter((t,n)=>2==u.genotypes[n]),u.heteroExp=u.expression_values.filter((t,n)=>1==u.genotypes[n]);let e=t[(n=u).tissue];i=i.concat([{group:e,label:`Ref (${n.homoRefExp.length})`,values:n.homoRefExp},{group:e,label:`Het (${n.heteroExp.length})`,values:n.heteroExp},{group:e,label:`Alt (${n.homoAltExp.length})`,values:n.homoAltExp}]),o[e]={pvalue:null===n["p-value"]?1:parseFloat(n["p-value"]).toPrecision(3),pvalueThreshold:null===n["p-value_threshold"]?0:parseFloat(n["p-value_threshold"]).toPrecision(3)}}}),function(t,n,e,r,i){const o={main:e,tooltip:"eqtlTooltip",toolbar:`${e}Toolbar`,clone:`${e}Clone`,chart:`${e}Chart`,svg:`${e}Svg`,buttons:{save:`${e}Save`}};if(0==$(`#${o.main}`).length)throw"Violin Plot Error: the chart DOM doesn't exist";0==$(`#${o.tooltip}`).length&&$("<div/>").attr("id",o.tooltip).appendTo($("body")),tt(`#${o.main}`).selectAll("*").remove(),["toolbar","chart","clone"].forEach(t=>{$("<div/>").attr("id",o[t]).appendTo($(`#${o.main}`))});let a={left:50,top:50,right:50,bottom:100},u=50*r.length,s=u+(a.left+a.right),l=200-(a.top+a.bottom),c=tt(`#${o.chart}`).append("svg").attr("width",s).attr("height",200).attr("id",o.svg).append("g").attr("transform",`translate(${a.left}, ${a.top})`);c.append("text").classed("ed-section-title",!0).text(`${t.geneSymbol} (${t.gencodeId}) and ${n.snpId||""} (${n.variantId})`).attr("x",0).attr("y",16-a.top);let h=new Zo(r,i);const f=h.createTooltip(o.tooltip);h.createToolbar(o.toolbar,f).createDownloadButton(o.buttons.save,o.svg,`${o.main}-save.svg`,o.clone),h.render(c,u,l,.3,void 0,[],"Rank Normalized Expression",!1,!0,0,!1,!0,!1),function(t,n){t.groups.forEach(e=>{const r=e.key,i=r.split(" - "),o=n.append("g"),a=o.selectAll(".violin-group-label").data(i);a.enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("transform",(n,e)=>{let i=t.scale.x(r)+t.scale.x.bandwidth()/2,o=t.scale.y(t.scale.y.domain()[0])+55+10*e;return`translate(${i}, ${o})`}).text(t=>t)}),n.selectAll(".violin-sub-axis").classed("violin-sub-axis-hide",!0).classed("violin-sub-axis",!1)}(h,c)}(e,r,a,i,o)}).catch(function(t){console.error(t)})}(h,n,u,c,i,e),$(`#${o}`).removeClass("show"),$(`#${o}`).removeClass("in")}).catch(function(t){console.error(t)})})}}(u,t,n,e,0,i,o,a))})}catch(t){console.error(t)}},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
