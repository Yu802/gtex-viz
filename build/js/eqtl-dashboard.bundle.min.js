var EqtlDashboard=function(t){"use strict";var n={},e={},r=34,i=10,o=13;function a(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function s(t){var s=new RegExp('["'+t+"\n\r]"),u=t.charCodeAt(0);function l(t,a){var s,l=[],c=t.length,h=0,f=0,p=c<=0,d=!1;function g(){if(p)return e;if(d)return d=!1,n;var a,s,l=h;if(t.charCodeAt(l)===r){for(;h++<c&&t.charCodeAt(h)!==r||t.charCodeAt(++h)===r;);return(a=h)>=c?p=!0:(s=t.charCodeAt(h++))===i?d=!0:s===o&&(d=!0,t.charCodeAt(h)===i&&++h),t.slice(l+1,a-1).replace(/""/g,'"')}for(;h<c;){if((s=t.charCodeAt(a=h++))===i)d=!0;else if(s===o)d=!0,t.charCodeAt(h)===i&&++h;else if(s!==u)continue;return t.slice(l,a)}return p=!0,t.slice(l,c)}for(t.charCodeAt(c-1)===i&&--c,t.charCodeAt(c-1)===o&&--c;(s=g())!==e;){for(var v=[];s!==n&&s!==e;)v.push(s),s=g();a&&null==(v=a(v,f++))||l.push(v)}return l}function c(n){return n.map(h).join(t)}function h(t){return null==t?"":s.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,i=l(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=a(t);return function(r,i){return n(e(r),i,t)}}(t,n):a(t)});return i.columns=r||[],i},parseRows:l,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(h).join(t)].concat(n.map(function(n){return e.map(function(t){return h(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(c).join("\n")}}}var u=s(","),l=(u.parse,u.parseRows,u.format,u.formatRows,s("\t"));l.parse,l.parseRows,l.format,l.formatRows;function c(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function h(t,n){return fetch(t,n).then(c)}var f="http://www.w3.org/1999/xhtml",p={svg:"http://www.w3.org/2000/svg",xhtml:f,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function d(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),p.hasOwnProperty(n)?{space:p[n],local:t}:t}function g(t){var n=d(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===f&&n.documentElement.namespaceURI===f?n.createElement(t):n.createElementNS(e,t)}})(n)}function v(){}function y(t){return null==t?v:function(){return this.querySelector(t)}}function m(){return[]}function _(t){return null==t?m:function(){return this.querySelectorAll(t)}}var w=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var x=document.documentElement;if(!x.matches){var b=x.webkitMatchesSelector||x.msMatchesSelector||x.mozMatchesSelector||x.oMatchesSelector;w=function(t){return function(){return b.call(this,t)}}}}var M=w;function T(t){return new Array(t.length)}function k(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}k.prototype={constructor:k,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var A="$";function C(t,n,e,r,i,o){for(var a,s=0,u=n.length,l=o.length;s<l;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new k(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function E(t,n,e,r,i,o,a){var s,u,l,c={},h=n.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=n[s])&&(p[s]=l=A+a.call(u,u.__data__,s,n),l in c?i[s]=u:c[l]=u);for(s=0;s<f;++s)(u=c[l=A+a.call(t,o[s],s,o)])?(r[s]=u,u.__data__=o[s],c[l]=null):e[s]=new k(t,o[s]);for(s=0;s<h;++s)(u=n[s])&&c[p[s]]===u&&(i[s]=u)}function S(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function N(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function D(t,n){return t.style.getPropertyValue(n)||N(t).getComputedStyle(t,null).getPropertyValue(n)}function I(t){return t.trim().split(/^|\s+/)}function U(t){return t.classList||new z(t)}function z(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function F(t,n){for(var e=U(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function P(t,n){for(var e=U(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Y(){this.textContent=""}function O(){this.innerHTML=""}function j(){this.nextSibling&&this.parentNode.appendChild(this)}function H(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function L(){return null}function V(){var t=this.parentNode;t&&t.removeChild(this)}function q(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function R(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}z.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var X={},G=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(X={mouseenter:"mouseover",mouseleave:"mouseout"}));function B(t,n,e){return t=Z(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Z(t,n,e){return function(r){var i=G;G=r;try{t.call(this,this.__data__,n,e)}finally{G=i}}}function W(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Q(t,n,e){var r=X.hasOwnProperty(t.type)?B:Z;return function(i,o,a){var s,u=this.__on,l=r(n,o,a);if(u)for(var c=0,h=u.length;c<h;++c)if((s=u[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=e),void(s.value=n);this.addEventListener(t.type,l,e),s={type:t.type,name:t.name,value:n,listener:l,capture:e},u?u.push(s):this.__on=[s]}}function J(t,n,e){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var K=[null];function tt(t,n){this._groups=t,this._parents=n}function nt(){return new tt([[document.documentElement]],K)}function et(t){return"string"==typeof t?new tt([[document.querySelector(t)]],[document.documentElement]):new tt([[t]],K)}function rt(){for(var t,n=G;t=n.sourceEvent;)n=t;return n}function it(t){var n=rt();return n.changedTouches&&(n=n.changedTouches[0]),function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}(t,n)}function ot(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}tt.prototype=nt.prototype={constructor:tt,select:function(t){"function"!=typeof t&&(t=y(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new tt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=_(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new tt(r,i)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new tt(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e,r=n?E:C,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=t.call(h,h&&h.__data__,c,i),g=d.length,v=u[c]=new Array(g),y=s[c]=new Array(g);r(h,f,v,y,l[c]=new Array(p),d,n);for(var m,_,w=0,x=0;w<g;++w)if(m=v[w]){for(w>=x&&(x=w+1);!(_=y[x])&&++x<g;);m._next=_||null}}return(s=new tt(s,i))._enter=u,s._exit=l,s},enter:function(){return new tt(this._enter||this._groups.map(T),this._parents)},exit:function(){return new tt(this._exit||this._groups.map(T),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new tt(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=S);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(n)}return new tt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=d(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):D(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=I(t+"");if(arguments.length<2){for(var r=U(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?F:P)(this,t)}}:n?function(t){return function(){F(this,t)}}:function(t){return function(){P(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Y:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?O:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(j)},lower:function(){return this.each(H)},append:function(t){var n="function"==typeof t?t:g(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:g(t),r=null==n?L:"function"==typeof n?n:y(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(V)},clone:function(t){return this.select(t?R:q)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?Q:W,null==e&&(e=!1),r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return J(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return J(this,t,n)}})(t,n))}};var at,st,ut=(1===(at=ot).length&&(st=at,at=function(t,n){return ot(st(t),n)}),{left:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;at(t[i],n)<0?e=i+1:r=i}return e},right:function(t,n,e,r){for(null==e&&(e=0),null==r&&(r=t.length);e<r;){var i=e+r>>>1;at(t[i],n)>0?r=i:e=i+1}return e}}).right;function lt(t){return null===t?NaN:+t}function ct(t,n){var e=function(t,n){var e,r,i=t.length,o=0,a=-1,s=0,u=0;if(null==n)for(;++a<i;)isNaN(e=lt(t[a]))||(u+=(r=e-s)*(e-(s+=r/++o)));else for(;++a<i;)isNaN(e=lt(n(t[a],a,t)))||(u+=(r=e-s)*(e-(s+=r/++o)));if(o>1)return u/(o-1)}(t,n);return e?Math.sqrt(e):e}function ht(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}function ft(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var pt=Math.sqrt(50),dt=Math.sqrt(10),gt=Math.sqrt(2);function vt(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=pt?10:o>=dt?5:o>=gt?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=pt?10:o>=dt?5:o>=gt?2:1)}function yt(t,n,e){if(null==e&&(e=lt),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function mt(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function _t(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=lt(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=lt(n(t[i],i,t)))||o.push(e);return yt(o.sort(ot),.5)}function wt(){}function xt(t,n){var e=new wt;if(t instanceof wt)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function bt(){var t,n,e,r=[],i=[];function o(e,i,a,s){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var u,l,c,h=-1,f=e.length,p=r[i++],d=xt(),g=a();++h<f;)(c=d.get(u=p(l=e[h])+""))?c.push(l):d.set(u,[l]);return d.each(function(t,n){s(g,n,o(t,i,a,s))}),g}return e={object:function(t){return o(t,0,Mt,Tt)},map:function(t){return o(t,0,kt,$t)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var a,s=i[o-1];return null!=n&&o>=r.length?a=e.entries():(a=[],e.each(function(n,e){a.push({key:e,values:t(n,o)})})),null!=s?a.sort(function(t,n){return s(t.key,n.key)}):a}(o(t,0,kt,$t),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function Mt(){return{}}function Tt(t,n,e){t[n]=e}function kt(){return xt()}function $t(t,n,e){t.set(n,e)}function At(){}wt.prototype=xt.prototype={constructor:wt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Ct=xt.prototype;At.prototype=function(t,n){var e=new At;if(t instanceof At)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}.prototype={constructor:At,has:Ct.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ct.remove,clear:Ct.clear,values:Ct.keys,size:Ct.size,empty:Ct.empty,each:Ct.each};var Et=Array.prototype,St=Et.map,Nt=Et.slice,Dt={name:"implicit"};function It(){var t,n,e=function t(n){var e=xt(),r=[],i=Dt;function o(t){var o=t+"",a=e.get(o);if(!a){if(i!==Dt)return i;e.set(o,a=r.push(t))}return n[(a-1)%n.length]}return n=null==n?[]:Nt.call(n),o.domain=function(t){if(!arguments.length)return r.slice();r=[],e=xt();for(var n,i,a=-1,s=t.length;++a<s;)e.has(i=(n=t[a])+"")||e.set(i,r.push(n));return o},o.range=function(t){return arguments.length?(n=Nt.call(t),o):n.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return t().domain(r).range(n).unknown(i)},o}().unknown(void 0),r=e.domain,i=e.range,o=[0,1],a=!1,s=0,u=0,l=.5;function c(){var e=r().length,c=o[1]<o[0],h=o[c-0],f=o[1-c];t=(f-h)/Math.max(1,e-s+2*u),a&&(t=Math.floor(t)),h+=(f-h-t*(e-s))*l,n=t*(1-s),a&&(h=Math.round(h),n=Math.round(n));var p=ft(e).map(function(n){return h+t*n});return i(c?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),c()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],c()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],a=!0,c()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(a=!!t,c()):a},e.padding=function(t){return arguments.length?(s=u=Math.max(0,Math.min(1,t)),c()):s},e.paddingInner=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},e.paddingOuter=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},e.copy=function(){return It().domain(r()).range(o).round(a).paddingInner(s).paddingOuter(u).align(l)},c()}function Ut(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function zt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Ft(){}var Pt="\\s*([+-]?\\d+)\\s*",Yt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ot="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jt=/^#([0-9a-f]{3})$/,Ht=/^#([0-9a-f]{6})$/,Lt=new RegExp("^rgb\\("+[Pt,Pt,Pt]+"\\)$"),Vt=new RegExp("^rgb\\("+[Ot,Ot,Ot]+"\\)$"),qt=new RegExp("^rgba\\("+[Pt,Pt,Pt,Yt]+"\\)$"),Rt=new RegExp("^rgba\\("+[Ot,Ot,Ot,Yt]+"\\)$"),Xt=new RegExp("^hsl\\("+[Yt,Ot,Ot]+"\\)$"),Gt=new RegExp("^hsla\\("+[Yt,Ot,Ot,Yt]+"\\)$"),Bt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Zt(t){var n;return t=(t+"").trim().toLowerCase(),(n=jt.exec(t))?new tn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=Ht.exec(t))?Wt(parseInt(n[1],16)):(n=Lt.exec(t))?new tn(n[1],n[2],n[3],1):(n=Vt.exec(t))?new tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=qt.exec(t))?Qt(n[1],n[2],n[3],n[4]):(n=Rt.exec(t))?Qt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Xt.exec(t))?en(n[1],n[2]/100,n[3]/100,1):(n=Gt.exec(t))?en(n[1],n[2]/100,n[3]/100,n[4]):Bt.hasOwnProperty(t)?Wt(Bt[t]):"transparent"===t?new tn(NaN,NaN,NaN,0):null}function Wt(t){return new tn(t>>16&255,t>>8&255,255&t,1)}function Qt(t,n,e,r){return r<=0&&(t=n=e=NaN),new tn(t,n,e,r)}function Jt(t){return t instanceof Ft||(t=Zt(t)),t?new tn((t=t.rgb()).r,t.g,t.b,t.opacity):new tn}function Kt(t,n,e,r){return 1===arguments.length?Jt(t):new tn(t,n,e,null==r?1:r)}function tn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function nn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function en(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new rn(t,n,e,r)}function rn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function on(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Ut(Ft,Zt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Ut(tn,Kt,zt(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new tn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new tn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+nn(this.r)+nn(this.g)+nn(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Ut(rn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof rn)return new rn(t.h,t.s,t.l,t.opacity);if(t instanceof Ft||(t=Zt(t)),!t)return new rn;if(t instanceof rn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new rn(a,s,u,t.opacity)}(t):new rn(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new tn(on(t>=240?t-240:t+120,i,r),on(t,i,r),on(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var an=Math.PI/180,sn=180/Math.PI,un=.96422,ln=1,cn=.82521,hn=4/29,fn=6/29,pn=3*fn*fn,dn=fn*fn*fn;function gn(t){if(t instanceof vn)return new vn(t.l,t.a,t.b,t.opacity);if(t instanceof xn){if(isNaN(t.h))return new vn(t.l,0,0,t.opacity);var n=t.h*an;return new vn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof tn||(t=Jt(t));var e,r,i=wn(t.r),o=wn(t.g),a=wn(t.b),s=yn((.2225045*i+.7168786*o+.0606169*a)/ln);return i===o&&o===a?e=r=s:(e=yn((.4360747*i+.3850649*o+.1430804*a)/un),r=yn((.0139322*i+.0971045*o+.7141733*a)/cn)),new vn(116*s-16,500*(e-s),200*(s-r),t.opacity)}function vn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function yn(t){return t>dn?Math.pow(t,1/3):t/pn+hn}function mn(t){return t>fn?t*t*t:pn*(t-hn)}function _n(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function wn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function xn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Ut(vn,function(t,n,e,r){return 1===arguments.length?gn(t):new vn(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return new vn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new vn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new tn(_n(3.1338561*(n=un*mn(n))-1.6168667*(t=ln*mn(t))-.4906146*(e=cn*mn(e))),_n(-.9787684*n+1.9161415*t+.033454*e),_n(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Ut(xn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof xn)return new xn(t.h,t.c,t.l,t.opacity);if(t instanceof vn||(t=gn(t)),0===t.a&&0===t.b)return new xn(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*sn;return new xn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new xn(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return new xn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new xn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return gn(this).rgb()}}));var bn=-.14861,Mn=1.78277,Tn=-.29227,kn=-.90649,$n=1.97294,An=$n*kn,Cn=$n*Mn,En=Mn*Tn-kn*bn;function Sn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Nn(t){return function(){return t}}function Dn(t){return 1==(t=+t)?In:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Nn(isNaN(n)?e:n)}}function In(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Nn(isNaN(t)?n:t)}Ut(Sn,function(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof Sn)return new Sn(t.h,t.s,t.l,t.opacity);t instanceof tn||(t=Jt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(En*r+An*n-Cn*e)/(En+An-Cn),o=r-i,a=($n*(e-i)-Tn*o)/kn,s=Math.sqrt(a*a+o*o)/($n*i*(1-i)),u=s?Math.atan2(a,o)*sn-120:NaN;return new Sn(u<0?u+360:u,s,i,t.opacity)}(t):new Sn(t,n,e,null==r?1:r)},zt(Ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Sn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Sn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*an,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new tn(255*(n+e*(bn*r+Mn*i)),255*(n+e*(Tn*r+kn*i)),255*(n+e*($n*r)),this.opacity)}}));var Un=function t(n){var e=Dn(n);function r(t,n){var r=e((t=Kt(t)).r,(n=Kt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=In(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function zn(t,n){return n-=t=+t,function(e){return t+n*e}}var Fn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pn=new RegExp(Fn.source,"g");function Yn(t,n){var e,r,i,o=Fn.lastIndex=Pn.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=Fn.exec(t))&&(r=Pn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:zn(e,r)})),o=Pn.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function On(t,n){var e,r=typeof n;return null==n||"boolean"===r?Nn(n):("number"===r?zn:"string"===r?(e=Zt(n))?(n=e,Un):Yn:n instanceof Zt?Un:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=On(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=On(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:zn)(t,n)}function jn(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var Hn,Ln,Vn,qn,Rn=180/Math.PI,Xn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Gn(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Rn,skewX:Math.atan(u)*Rn,scaleX:a,scaleY:s}}function Bn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:zn(t,i)},{i:u-2,x:zn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:zn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:zn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:zn(t,e)},{i:s-2,x:zn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var Zn=Bn(function(t){return"none"===t?Xn:(Hn||(Hn=document.createElement("DIV"),Ln=document.documentElement,Vn=document.defaultView),Hn.style.transform=t,t=Vn.getComputedStyle(Ln.appendChild(Hn),null).getPropertyValue("transform"),Ln.removeChild(Hn),Gn(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Wn=Bn(function(t){return null==t?Xn:(qn||(qn=document.createElementNS("http://www.w3.org/2000/svg","g")),qn.setAttribute("transform",t),(t=qn.transform.baseVal.consolidate())?Gn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Xn)},", ",")",")");Math.SQRT2;function Qn(t){return+t}var Jn=[0,1];function Kn(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=n,function(){return e});var e}function te(t,n,e,r){var i=t[0],o=t[1],a=n[0],s=n[1];return o<i?(i=e(o,i),a=r(s,a)):(i=e(i,o),a=r(a,s)),function(t){return a(i(t))}}function ne(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++s<i;)o[s]=e(t[s],t[s+1]),a[s]=r(n[s],n[s+1]);return function(n){var e=ut(t,n,1,i)-1;return a[e](o[e](n))}}function ee(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function re(t){return(t=ee(Math.abs(t)))?t[1]:NaN}var ie,oe=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ae(t){return new se(t)}function se(t){if(!(n=oe.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}function ue(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}ae.prototype=se.prototype,se.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var le={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ue(100*t,n)},r:ue,s:function(t,n){var e=ee(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ie=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ee(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function ce(t){return t}var he,fe,pe,de=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ge(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}):ce,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):ce,s=t.percent||"%";function u(t){var n=(t=ae(t)).fill,e=t.align,u=t.sign,l=t.symbol,c=t.zero,h=t.width,f=t.comma,p=t.precision,d=t.trim,g=t.type;"n"===g?(f=!0,g="g"):le[g]||(null==p&&(p=12),d=!0,g="g"),(c||"0"===n&&"="===e)&&(c=!0,n="0",e="=");var v="$"===l?i[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",y="$"===l?i[1]:/[%p]/.test(g)?s:"",m=le[g],_=/[defgprs%]/.test(g);function w(t){var i,s,l,w=v,x=y;if("c"===g)x=m(t)+x,t="";else{var b=(t=+t)<0;if(t=m(Math.abs(t),p),d&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),b&&0==+t&&(b=!1),w=(b?"("===u?u:"-":"-"===u||"("===u?"":u)+w,x=("s"===g?de[8+ie/3]:"")+x+(b&&"("===u?")":""),_)for(i=-1,s=t.length;++i<s;)if(48>(l=t.charCodeAt(i))||l>57){x=(46===l?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}f&&!c&&(t=r(t,1/0));var M=w.length+t.length+x.length,T=M<h?new Array(h-M+1).join(n):"";switch(f&&c&&(t=r(T+t,T.length?h-x.length:1/0),T=""),e){case"<":t=w+t+x+T;break;case"=":t=w+T+t+x;break;case"^":t=T.slice(0,M=T.length>>1)+w+t+x+T.slice(M);break;default:t=T+w+t+x}return a(t)}return p=null==p?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),w.toString=function(){return t+""},w}return{format:u,formatPrefix:function(t,n){var e=u(((t=ae(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(re(n)/3))),i=Math.pow(10,-r),o=de[8+r/3];return function(t){return e(i*t)+o}}}}function ve(t,n,e){var r,i=t[0],o=t[t.length-1],a=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=pt?i*=10:o>=dt?i*=5:o>=gt&&(i*=2),n<t?-i:i}(i,o,null==n?10:n);switch((e=ae(null==e?",f":e)).type){case"s":var s=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(re(n)/3)))-re(Math.abs(t)))}(a,s))||(e.precision=r),pe(e,s);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,re(n)-re(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=function(t){return Math.max(0,-re(Math.abs(t)))}(a))||(e.precision=r-2*("%"===e.type))}return fe(e)}function ye(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,s=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=vt(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return ve(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,s=i[o],u=i[a];return u<s&&(r=s,s=u,u=r,r=o,o=a,a=r),(r=vt(s,u,e))>0?r=vt(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,e):r<0&&(r=vt(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,e)),r>0?(i[o]=Math.floor(s/r)*r,i[a]=Math.ceil(u/r)*r,n(i)):r<0&&(i[o]=Math.ceil(s*r)/r,i[a]=Math.floor(u*r)/r,n(i)),t},t}function me(){var t=function(t,n){var e,r,i,o=Jn,a=Jn,s=On,u=!1;function l(){return e=Math.min(o.length,a.length)>2?ne:te,r=i=null,c}function c(n){return(r||(r=e(o,a,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,s)))(+n)}return c.invert=function(t){return(i||(i=e(a,o,Kn,u?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},c.domain=function(t){return arguments.length?(o=St.call(t,Qn),l()):o.slice()},c.range=function(t){return arguments.length?(a=Nt.call(t),l()):a.slice()},c.rangeRound=function(t){return a=Nt.call(t),s=jn,l()},c.clamp=function(t){return arguments.length?(u=!!t,l()):u},c.interpolate=function(t){return arguments.length?(s=t,l()):s},l()}(Kn,zn);return t.copy=function(){return n=t,me().domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp());var n},ye(t)}he=ge({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),fe=he.format,pe=he.formatPrefix;var _e=new Date,we=new Date;function xe(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,s=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return s},i.filter=function(e){return xe(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return _e.setTime(+n),we.setTime(+r),t(_e),t(we),Math.floor(e(_e,we))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var be=xe(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});be.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xe(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):be:null};be.range;var Me=6e4,Te=6048e5,ke=(xe(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}).range,xe(function(t){t.setTime(Math.floor(t/Me)*Me)},function(t,n){t.setTime(+t+n*Me)},function(t,n){return(n-t)/Me},function(t){return t.getMinutes()}).range,xe(function(t){var n=t.getTimezoneOffset()*Me%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}).range,xe(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Me)/864e5},function(t){return t.getDate()-1}));ke.range;function $e(t){return xe(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Me)/Te})}var Ae=$e(0),Ce=$e(1),Ee=($e(2),$e(3),$e(4)),Se=($e(5),$e(6),Ae.range,xe(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}).range,xe(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Se.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};Se.range,xe(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Me)},function(t,n){return(n-t)/Me},function(t){return t.getUTCMinutes()}).range,xe(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}).range;var Ne=xe(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1});Ne.range;function De(t){return xe(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/Te})}var Ie=De(0),Ue=De(1),ze=(De(2),De(3),De(4)),Fe=(De(5),De(6),Ie.range,xe(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}).range,xe(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Fe.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xe(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};Fe.range;function Pe(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ye(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Oe(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var je,He,Le,Ve={"-":"",_:" ",0:"0"},qe=/^\s*\d+/,Re=/^%/,Xe=/[\\^$*+?|[\]().{}]/g;function Ge(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Be(t){return t.replace(Xe,"\\$&")}function Ze(t){return new RegExp("^(?:"+t.map(Be).join("|")+")","i")}function We(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Qe(t,n,e){var r=qe.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Je(t,n,e){var r=qe.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ke(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function tr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function nr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function er(t,n,e){var r=qe.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function rr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function ir(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function or(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function ar(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function sr(t,n,e){var r=qe.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function ur(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function lr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function cr(t,n,e){var r=qe.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function hr(t,n,e){var r=qe.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function fr(t,n,e){var r=qe.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function pr(t,n,e){var r=Re.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function dr(t,n,e){var r=qe.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function gr(t,n,e){var r=qe.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function vr(t,n){return Ge(t.getDate(),n,2)}function yr(t,n){return Ge(t.getHours(),n,2)}function mr(t,n){return Ge(t.getHours()%12||12,n,2)}function _r(t,n){return Ge(1+ke.count(Se(t),t),n,3)}function wr(t,n){return Ge(t.getMilliseconds(),n,3)}function xr(t,n){return wr(t,n)+"000"}function br(t,n){return Ge(t.getMonth()+1,n,2)}function Mr(t,n){return Ge(t.getMinutes(),n,2)}function Tr(t,n){return Ge(t.getSeconds(),n,2)}function kr(t){var n=t.getDay();return 0===n?7:n}function $r(t,n){return Ge(Ae.count(Se(t),t),n,2)}function Ar(t,n){var e=t.getDay();return t=e>=4||0===e?Ee(t):Ee.ceil(t),Ge(Ee.count(Se(t),t)+(4===Se(t).getDay()),n,2)}function Cr(t){return t.getDay()}function Er(t,n){return Ge(Ce.count(Se(t),t),n,2)}function Sr(t,n){return Ge(t.getFullYear()%100,n,2)}function Nr(t,n){return Ge(t.getFullYear()%1e4,n,4)}function Dr(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Ge(n/60|0,"0",2)+Ge(n%60,"0",2)}function Ir(t,n){return Ge(t.getUTCDate(),n,2)}function Ur(t,n){return Ge(t.getUTCHours(),n,2)}function zr(t,n){return Ge(t.getUTCHours()%12||12,n,2)}function Fr(t,n){return Ge(1+Ne.count(Fe(t),t),n,3)}function Pr(t,n){return Ge(t.getUTCMilliseconds(),n,3)}function Yr(t,n){return Pr(t,n)+"000"}function Or(t,n){return Ge(t.getUTCMonth()+1,n,2)}function jr(t,n){return Ge(t.getUTCMinutes(),n,2)}function Hr(t,n){return Ge(t.getUTCSeconds(),n,2)}function Lr(t){var n=t.getUTCDay();return 0===n?7:n}function Vr(t,n){return Ge(Ie.count(Fe(t),t),n,2)}function qr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?ze(t):ze.ceil(t),Ge(ze.count(Fe(t),t)+(4===Fe(t).getUTCDay()),n,2)}function Rr(t){return t.getUTCDay()}function Xr(t,n){return Ge(Ue.count(Fe(t),t),n,2)}function Gr(t,n){return Ge(t.getUTCFullYear()%100,n,2)}function Br(t,n){return Ge(t.getUTCFullYear()%1e4,n,4)}function Zr(){return"+0000"}function Wr(){return"%"}function Qr(t){return+t}function Jr(t){return Math.floor(+t/1e3)}!function(t){je=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=Ze(i),c=We(i),h=Ze(o),f=We(o),p=Ze(a),d=We(a),g=Ze(s),v=We(s),y=Ze(u),m=We(u),_={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:vr,e:vr,f:xr,H:yr,I:mr,j:_r,L:wr,m:br,M:Mr,p:function(t){return i[+(t.getHours()>=12)]},Q:Qr,s:Jr,S:Tr,u:kr,U:$r,V:Ar,w:Cr,W:Er,x:null,X:null,y:Sr,Y:Nr,Z:Dr,"%":Wr},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:Ir,e:Ir,f:Yr,H:Ur,I:zr,j:Fr,L:Pr,m:Or,M:jr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Qr,s:Jr,S:Hr,u:Lr,U:Vr,V:qr,w:Rr,W:Xr,x:null,X:null,y:Gr,Y:Br,Z:Zr,"%":Wr},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=f[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return T(t,n,e,r)},d:ar,e:ar,f:fr,H:ur,I:ur,j:sr,L:hr,m:or,M:lr,p:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.p=c[r[0].toLowerCase()],e+r[0].length):-1},Q:dr,s:gr,S:cr,u:Je,U:Ke,V:tr,w:Qe,W:nr,x:function(t,n,r){return T(t,e,n,r)},X:function(t,n,e){return T(t,r,n,e)},y:rr,Y:er,Z:ir,"%":pr};function b(t,n){return function(e){var r,i,o,a=[],s=-1,u=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=Ve[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function M(t,n){return function(e){var r,i,o=Oe(1900);if(T(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(r=(i=(r=Ye(Oe(o.y))).getUTCDay())>4||0===i?Ue.ceil(r):Ue(r),r=Ne.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(r=(i=(r=n(Oe(o.y))).getDay())>4||0===i?Ce.ceil(r):Ce(r),r=ke.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ye(Oe(o.y)).getUTCDay():n(Oe(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ye(o)):n(o)}}function T(t,n,e,r){for(var i,o,a=0,s=n.length,u=e.length;a<s;){if(r>=u)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Ve?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=b(e,_),_.X=b(r,_),_.c=b(n,_),w.x=b(e,w),w.X=b(r,w),w.c=b(n,w),{format:function(t){var n=b(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Pe);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",w);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,Ye);return n.toString=function(){return t},n}}}(t),je.format,je.parse,He=je.utcFormat,Le=je.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||He("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Le("%Y-%m-%dT%H:%M:%S.%LZ");var Kr=Math.PI,ti=2*Kr,ni=ti-1e-6;function ei(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ri(){return new ei}function ii(t){return function(){return t}}ei.prototype=ri.prototype={constructor:ei,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,l=o-t,c=a-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(c*s-u*l)>1e-6&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,v=Math.sqrt(d),y=Math.sqrt(h),m=i*Math.tan((Kr-Math.acos((d+h-g)/(2*v*y)))/2),_=m/y,w=m/v;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*l)+","+(n+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+w*s)+","+(this._y1=n+w*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,l=n+s,c=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),e&&(h<0&&(h=h%ti+ti),h>ni?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=l):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Kr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};Math.PI;function oi(t){this._context=t}function ai(t){return new oi(t)}function si(t){return t[0]}function ui(t){return t[1]}function li(){var t=si,n=null,e=ii(0),r=ui,i=ii(!0),o=null,a=ai,s=null;function u(u){var l,c,h,f,p,d=u.length,g=!1,v=new Array(d),y=new Array(d);for(null==o&&(s=a(p=ri())),l=0;l<=d;++l){if(!(l<d&&i(f=u[l],l,u))===g)if(g=!g)c=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),h=l-1;h>=c;--h)s.point(v[h],y[h]);s.lineEnd(),s.areaEnd()}g&&(v[l]=+t(f,l,u),y[l]=+e(f,l,u),s.point(n?+n(f,l,u):v[l],r?+r(f,l,u):y[l]))}if(p)return s=null,p+""||null}function l(){return function(){var t=si,n=ui,e=ii(!0),r=null,i=ai,o=null;function a(a){var s,u,l,c=a.length,h=!1;for(null==r&&(o=i(l=ri())),s=0;s<=c;++s)!(s<c&&e(u=a[s],s,a))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+t(u,s,a),+n(u,s,a));if(l)return o=null,l+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:ii(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:ii(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:ii(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().defined(i).curve(a).context(o)}return u.x=function(e){return arguments.length?(t="function"==typeof e?e:ii(+e),n=null,u):t},u.x0=function(n){return arguments.length?(t="function"==typeof n?n:ii(+n),u):t},u.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:ii(+t),u):n},u.y=function(t){return arguments.length?(e="function"==typeof t?t:ii(+t),r=null,u):e},u.y0=function(t){return arguments.length?(e="function"==typeof t?t:ii(+t),u):e},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ii(+t),u):r},u.lineX0=u.lineY0=function(){return l().x(t).y(e)},u.lineY1=function(){return l().x(t).y(r)},u.lineX1=function(){return l().x(n).y(e)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:ii(!!t),u):i},u.curve=function(t){return arguments.length?(a=t,null!=o&&(s=a(o)),u):a},u.context=function(t){return arguments.length?(null==t?o=s=null:s=a(o=t),u):o},u}function ci(t){return t<0?-1:1}function hi(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),s=(o*i+a*r)/(r+i);return(ci(o)+ci(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(s))||0}function fi(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function pi(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,s=(o-r)/3;t._context.bezierCurveTo(r+s,i+s*n,o-s,a-s*e,o,a)}function di(t){this._context=t}function gi(t){this._context=t}oi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},di.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:pi(this,this._t0,fi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,pi(this,fi(this,e=hi(this,t,n)),e);break;default:pi(this,this._t0,e=hi(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(function(t){this._context=new gi(t)}.prototype=Object.create(di.prototype)).point=function(t,n){di.prototype.point.call(this,n,t)},gi.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var vi=Array.prototype.slice;function yi(t){return t}var mi=1,_i=2,wi=3,xi=4,bi=1e-6;function Mi(t){return"translate("+(t+.5)+",0)"}function Ti(t){return"translate(0,"+(t+.5)+")"}function ki(){return!this.__axis}function $i(t,n){var e=[],r=null,i=null,o=6,a=6,s=3,u=t===mi||t===xi?-1:1,l=t===xi||t===_i?"x":"y",c=t===mi||t===wi?Mi:Ti;function h(h){var f=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):yi:i,d=Math.max(o,0)+s,g=n.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,m=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),_=h.selection?h.selection():h,w=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(f,n).order(),b=x.exit(),M=x.enter().append("g").attr("class","tick"),T=x.select("line"),k=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),T=T.merge(M.append("line").attr("stroke","#000").attr(l+"2",u*o)),k=k.merge(M.append("text").attr("fill","#000").attr(l,u*d).attr("dy",t===mi?"0em":t===wi?"0.71em":"0.32em")),h!==_&&(w=w.transition(h),x=x.transition(h),T=T.transition(h),k=k.transition(h),b=b.transition(h).attr("opacity",bi).attr("transform",function(t){return isFinite(t=m(t))?c(t):this.getAttribute("transform")}),M.attr("opacity",bi).attr("transform",function(t){var n=this.parentNode.__axis;return c(n&&isFinite(n=n(t))?n:m(t))})),b.remove(),w.attr("d",t===xi||t==_i?"M"+u*a+","+v+"H0.5V"+y+"H"+u*a:"M"+v+","+u*a+"V0.5H"+y+"V"+u*a),x.attr("opacity",1).attr("transform",function(t){return c(m(t))}),T.attr(l+"2",u*o),k.attr(l,u*d).text(p),_.filter(ki).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===_i?"start":t===xi?"end":"middle"),_.each(function(){this.__axis=m})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=vi.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:vi.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:vi.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(s=+t,h):s},h}function Ai(t){return $i(wi,t)}var Ci={value:function(){}};function Ei(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Si(r)}function Si(t){this._=t}function Ni(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Di(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Ci,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function Ii(){G.preventDefault(),G.stopImmediatePropagation()}Si.prototype=Ei.prototype={constructor:Si,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<s;)if(e=(t=o[a]).type)i[e]=Di(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Di(i[e],t.name,null);return this}for(;++a<s;)if((e=(t=o[a]).type)&&(e=Ni(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Si(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Ui,zi,Fi=0,Pi=0,Yi=0,Oi=1e3,ji=0,Hi=0,Li=0,Vi="object"==typeof performance&&performance.now?performance:Date,qi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ri(){return Hi||(qi(Xi),Hi=Vi.now()+Li)}function Xi(){Hi=0}function Gi(){this._call=this._time=this._next=null}function Bi(t,n,e){var r=new Gi;return r.restart(t,n,e),r}function Zi(){Hi=(ji=Vi.now())+Li,Fi=Pi=0;try{!function(){Ri(),++Fi;for(var t,n=Ui;n;)(t=Hi-n._time)>=0&&n._call.call(null,t),n=n._next;--Fi}()}finally{Fi=0,function(){var t,n,e=Ui,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ui=n);zi=t,Qi(r)}(),Hi=0}}function Wi(){var t=Vi.now(),n=t-ji;n>Oi&&(Li-=n,ji=t)}function Qi(t){Fi||(Pi&&(Pi=clearTimeout(Pi)),t-Hi>24?(t<1/0&&(Pi=setTimeout(Zi,t-Vi.now()-Li)),Yi&&(Yi=clearInterval(Yi))):(Yi||(ji=Vi.now(),Yi=setInterval(Wi,Oi)),Fi=1,qi(Zi)))}function Ji(t,n,e){var r=new Gi;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r}Gi.prototype=Bi.prototype={constructor:Gi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ri():+e)+(null==n?0:+n),this._next||zi===this||(zi?zi._next=this:Ui=this,zi=this),this._call=t,this._time=e,Qi()},stop:function(){this._call&&(this._call=null,this._time=1/0,Qi())}};var Ki=Ei("start","end","interrupt"),to=[],no=0,eo=1,ro=2,io=3,oo=4,ao=5,so=6;function uo(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var l,c,h,f;if(e.state!==eo)return s();for(l in i)if((f=i[l]).name===e.name){if(f.state===io)return Ji(o);f.state===oo?(f.state=so,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=so,f.timer.stop(),delete i[l])}if(Ji(function(){e.state===io&&(e.state=oo,e.timer.restart(a,e.delay,e.time),a(u))}),e.state=ro,e.on.call("start",t,t.__data__,e.index,e.group),e.state===ro){for(e.state=io,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=ao,1),o=-1,a=r.length;++o<a;)r[o].call(null,i);e.state===ao&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=so,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Bi(function(t){e.state=eo,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ki,tween:to,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:no})}function lo(t,n){var e=ho(t,n);if(e.state>no)throw new Error("too late; already scheduled");return e}function co(t,n){var e=ho(t,n);if(e.state>ro)throw new Error("too late; already started");return e}function ho(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function fo(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>ro&&e.state<ao,e.state=so,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function po(t,n,e){var r=t._id;return t.each(function(){var t=co(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return ho(t,r).value[n]}}function go(t,n){var e;return("number"==typeof n?zn:n instanceof Zt?Un:(e=Zt(n))?(n=e,Un):Yn)(t,n)}var vo=nt.prototype.constructor;var yo=0;function mo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function _o(){return++yo}var wo=nt.prototype;mo.prototype=function(t){return nt().transition(t)}.prototype={constructor:mo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=y(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,uo(h[f],n,e,f,h,ho(s,e)));return new mo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=_(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=ho(u,e),g=0,v=p.length;g<v;++g)(f=p[g])&&uo(f,n,e,g,p,d);o.push(p),a.push(u)}return new mo(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new mo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=n[s],c=e[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new mo(a,this._parents,this._name,this._id)},selection:function(){return new vo(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=_o(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=ho(a,n);uo(a,t,e,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new mo(r,this._parents,t,e)},call:wo.call,nodes:wo.nodes,node:wo.node,size:wo.size,empty:wo.empty,each:wo.each,on:function(t,n){var e=this._id;return arguments.length<2?ho(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?lo:co;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=d(t),r="transform"===e?Wn:go;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===s?null:a===r&&s===i?o:o=n(r=a,i=s);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,s=e(this);if(null!=s)return(a=this.getAttribute(t))===s?null:a===r&&s===i?o:o=n(r=a,i=s);this.removeAttribute(t)}})(e,r,po(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}:function(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}})(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=d(t);return this.tween(e,(r.local?function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Zn:go;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=D(this,t),a=(this.style.removeProperty(t),D(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var a=D(this,t),s=e(this);return null==s&&(this.style.removeProperty(t),s=D(this,t)),a===s?null:a===r&&s===i?o:o=n(r=a,i=s)}}(t,r,po(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=D(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(po(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=ho(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=co(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=co(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,l=i.length;u<l;++u)if(i[u].name===n){i[u]=s;break}u===l&&i.push(s)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){lo(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){lo(this,t).delay=n}})(n,t)):ho(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){co(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){co(this,t).duration=n}})(n,t)):ho(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){co(this,t).ease=n}}(n,t)):ho(this.node(),n).ease}};Math.PI,Math.PI;var xo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function bo(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return xo.time=Ri(),xo;return e}function Mo(t){return function(){return t}}function To(){G.stopImmediatePropagation()}function ko(){G.preventDefault(),G.stopImmediatePropagation()}nt.prototype.interrupt=function(t){return this.each(function(){fo(this,t)})},nt.prototype.transition=function(t){var n,e;t instanceof mo?(n=t._id,t=t._name):(n=_o(),(e=xo).time=Ri(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&uo(a,t,n,l,s,e||bo(a,n));return new mo(r,this._parents,t,n)};var $o={name:"drag"},Ao={name:"space"},Co={name:"handle"},Eo={name:"center"},So={name:"x",handles:["e","w"].map(Yo),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},No={name:"y",handles:["n","s"].map(Yo),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Do={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Yo),input:function(t){return t},output:function(t){return t}},Io={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Uo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},zo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Fo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Po={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Yo(t){return{type:t}}function Oo(){return!G.button}function jo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Ho(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Lo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Vo(){return function(t){var n,e=jo,r=Oo,i=Ei(a,"start","brush","end"),o=6;function a(n){var e=n.property("__brush",h).selectAll(".overlay").data([Yo("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Io.overlay).merge(e).each(function(){var t=Ho(this).extent;et(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([Yo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Io.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Io[t.type]}),n.each(s).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",c)}function s(){var t=et(this),n=Ho(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function u(t,n){return t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function c(){if(G.touches){if(G.changedTouches.length<G.touches.length)return ko()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,a,l,c,h,f,p,d,g,v,y,m=this,_=G.target.__data__.type,w="selection"===(G.metaKey?_="overlay":_)?$o:G.altKey?Eo:Co,x=t===No?null:Fo[_],b=t===So?null:Po[_],M=Ho(m),T=M.extent,k=M.selection,$=T[0][0],A=T[0][1],C=T[1][0],E=T[1][1],S=x&&b&&G.shiftKey,N=it(m),D=N,I=u(m,arguments).beforestart();"overlay"===_?M.selection=k=[[e=t===No?$:N[0],o=t===So?A:N[1]],[l=t===No?C:e,h=t===So?E:o]]:(e=k[0][0],o=k[0][1],l=k[1][0],h=k[1][1]),i=e,a=o,c=l,f=h;var U=et(m).attr("pointer-events","none"),z=U.selectAll(".overlay").attr("cursor",Io[_]);if(G.touches)U.on("touchmove.brush",P,!0).on("touchend.brush touchcancel.brush",O,!0);else{var F=et(G.view).on("keydown.brush",function(){switch(G.keyCode){case 16:S=x&&b;break;case 18:w===Co&&(x&&(l=c-p*x,e=i+p*x),b&&(h=f-d*b,o=a+d*b),w=Eo,Y());break;case 32:w!==Co&&w!==Eo||(x<0?l=c-p:x>0&&(e=i-p),b<0?h=f-d:b>0&&(o=a-d),w=Ao,z.attr("cursor",Io.selection),Y());break;default:return}ko()},!0).on("keyup.brush",function(){switch(G.keyCode){case 16:S&&(v=y=S=!1,Y());break;case 18:w===Eo&&(x<0?l=c:x>0&&(e=i),b<0?h=f:b>0&&(o=a),w=Co,Y());break;case 32:w===Ao&&(G.altKey?(x&&(l=c-p*x,e=i+p*x),b&&(h=f-d*b,o=a+d*b),w=Eo):(x<0?l=c:x>0&&(e=i),b<0?h=f:b>0&&(o=a),w=Co),z.attr("cursor",Io[_]),Y());break;default:return}ko()},!0).on("mousemove.brush",P,!0).on("mouseup.brush",O,!0);!function(t){var n=t.document.documentElement,e=et(t).on("dragstart.drag",Ii,!0);"onselectstart"in n?e.on("selectstart.drag",Ii,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}(G.view)}To(),fo(m),s.call(m),I.start()}function P(){var t=it(m);!S||v||y||(Math.abs(t[0]-D[0])>Math.abs(t[1]-D[1])?y=!0:v=!0),D=t,g=!0,ko(),Y()}function Y(){var t;switch(p=D[0]-N[0],d=D[1]-N[1],w){case Ao:case $o:x&&(p=Math.max($-e,Math.min(C-l,p)),i=e+p,c=l+p),b&&(d=Math.max(A-o,Math.min(E-h,d)),a=o+d,f=h+d);break;case Co:x<0?(p=Math.max($-e,Math.min(C-e,p)),i=e+p,c=l):x>0&&(p=Math.max($-l,Math.min(C-l,p)),i=e,c=l+p),b<0?(d=Math.max(A-o,Math.min(E-o,d)),a=o+d,f=h):b>0&&(d=Math.max(A-h,Math.min(E-h,d)),a=o,f=h+d);break;case Eo:x&&(i=Math.max($,Math.min(C,e-p*x)),c=Math.max($,Math.min(C,l+p*x))),b&&(a=Math.max(A,Math.min(E,o-d*b)),f=Math.max(A,Math.min(E,h+d*b)))}c<i&&(x*=-1,t=e,e=l,l=t,t=i,i=c,c=t,_ in Uo&&z.attr("cursor",Io[_=Uo[_]])),f<a&&(b*=-1,t=o,o=h,h=t,t=a,a=f,f=t,_ in zo&&z.attr("cursor",Io[_=zo[_]])),M.selection&&(k=M.selection),v&&(i=k[0][0],c=k[1][0]),y&&(a=k[0][1],f=k[1][1]),k[0][0]===i&&k[0][1]===a&&k[1][0]===c&&k[1][1]===f||(M.selection=[[i,a],[c,f]],s.call(m),I.brush())}function O(){if(To(),G.touches){if(G.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),U.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,n){var e=t.document.documentElement,r=et(t).on("dragstart.drag",null);n&&(r.on("click.drag",Ii,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}(G.view,g),F.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);U.attr("pointer-events","all"),z.attr("cursor",Io.overlay),M.selection&&(k=M.selection),Lo(k)&&(M.selection=null,s.call(m)),I.end()}}function h(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return a.move=function(n,e){n.selection?n.on("start.brush",function(){u(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){u(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=u(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),l=On(o,a);function c(t){r.selection=1===t&&Lo(a)?null:l(t),s.call(n),i.brush()}return o&&a?c:c(1)}):n.each(function(){var n=arguments,r=this.__brush,i=t.input("function"==typeof e?e.apply(this,n):e,r.extent),o=u(this,n).beforestart();fo(this),r.selection=null==i||Lo(i)?null:i,s.call(this),o.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){!function(t,n,e,r){var i=G;t.sourceEvent=G,G=t;try{n.apply(e,r)}finally{G=i}}(new function(t,n,e){this.target=t,this.type=n,this.selection=e}(a,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},a.extent=function(t){return arguments.length?(e="function"==typeof t?t:Mo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),a):e},a.filter=function(t){return arguments.length?(r="function"==typeof t?t:Mo(!!t),a):r},a.handleSize=function(t){return arguments.length?(o=+t,a):o},a.on=function(){var t=i.on.apply(i,arguments);return t===i?a:t},a}(Do)}const qo={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},Ro={nrd:function(t){let n=(yt(t,.75)-yt(t,.25))/1.34;return 1.06*Math.min(ct(t),n)*Math.pow(t.length,-.2)}};function Xo(t,n,e){return function(r){return n.map(n=>[n,function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=lt(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=lt(n(t[o],o,t)))?--i:a+=e;if(i)return a/i}(r,r=>t((n-r)/e))/e])}}class Go{constructor(t,n=!1,e=30,r=-40,i=100){this.id=t,this.verbose=n,this.offsetX=e,this.offsetY=r,this.duration=i}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),et("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){et("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=G.pageX,n=G.pageY){this.verbose&&(console.log(t),console.log(n)),t+=this.offsetX,n=n+this.offsetY<0?10:n+this.offsetY;et("#"+this.id).style("left",`${t}px`).style("top",`${n}px`)}edit(t){et("#"+this.id).html(t)}}class Bo{constructor(t,n,e=!1){$(`#${t}`).show();const r=e?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=n}createDownloadSvgButton(t,n,e,r,i="fa-download"){this.createButton(t,i);et(`#${t}`).on("click",()=>{this.downloadSvg(n,e,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,n,e="fa-expand-arrows-alt"){this.createButton(t,e);et(`#${t}`).on("click",n).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,n="fa-download"){const e=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${n}`).appendTo(e),this.buttons[t]=e,e}attachTooltip(t){this.tooltip=t}downloadSvg(t,n,e){let r=$($($(`${"#"+t}`))[0]),i=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),o=function(t){for(var n="",e=document.styleSheets,r=0;r<e.length;r++)try{if(null==e[r].cssRules)continue;for(var i=e[r].cssRules,o=0;o<i.length;o++){var a=i[o];if(void 0!==a.style){var s;try{s=$(t).find(a.selectorText)}catch(t){s=[]}s.length>0&&(n+=a.selectorText+" { "+a.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+n+"\n]]>",u}(r.get());i.prepend(o),$("#"+e).html("").hide();let a=$(`#${e}`).append(i).html(),s=new Blob([a],{type:"image/svg+xml"});saveAs(s,n),$(`#${e}`).html("").hide()}}class Zo{constructor(t,n={}){this._sanityCheck(t),this.data=t,this.groupInfo=n,this.toolbar=void 0,this.tooltip=void 0}render(t,n=500,e=357,r=.05,i,o=[-3,3],a="Y axis",s=!0,u=!0,l=0,c=!1,h=!1,f=!1,p=!1){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,n,e,r,i,o,a,s,u,l,c,h,f)}),void 0===o||0==o.length){let t=[];this.data.forEach(n=>t=t.concat(n.values)),o=ht(t)}this.groups=bt().key(t=>t.group).entries(this.data),this.scale={x:It().rangeRound([0,n]).domain(i||this.groups.map(t=>t.key)).paddingInner(r),subx:It(),y:me().rangeRound([e,0]).domain(o),z:me()},this.groups.forEach(n=>{let r=n.key,i=n.values,a=this.groupInfo[r];if(n.index=this.scale.x.domain().indexOf(r),void 0!==a){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("fill",t=>"pvalue"==t&&parseFloat(a[t])<=parseFloat(a.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,n)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(o[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(a[t]).toPrecision(3)).toExponential()}`)}this.scale.subx.domain(i.map(t=>t.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(e=>{0!=e.values.length&&(e.values=e.values.sort(ot),this._drawViolin(t,e,c,n.index))});var s=15;if(p){const n=It().domain(i.map(t=>void 0==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${e+s})`).call(Ai(n))}if(u){s=5;const n=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${e+s})`).call(Ai(this.scale.subx));l>0&&n.selectAll("text").style("text-anchor","start").attr("transform",`rotate(${l}, 2, 10)`)}});let d=u?55:0;var g;if(this.xAxis=s?Ai(this.scale.x):Ai(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${e+d})`).call(this.xAxis).selectAll("text").style("text-anchor","start").attr("transform","rotate(30, -10, 10)"),d=5,this.yAxis=(g=this.scale.y,$i(xi,g)).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${d}, 0)`).call(this.yAxis),t.append("text").attr("y",-40).attr("x",-40).attr("class","violin-axis-label").attr("text-anchor","start").attr("transform","rotate(-90)").text(a),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),h&&this._addGroupDivider(t),f){const n=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");n.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const e=n.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;e.append("rect").attr("x",(t,n)=>5+60*n+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",t=>t.color),e.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,n)=>17+60*n+this.scale.x.range()[0]).attr("y",-20)}}createTooltip(t){return this.tooltip=new Go(t),et(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,n){return this.toolbar=new Bo(t,n),this.toolbar}addBrush(t){const n=Vo();n.on("end",()=>{this.zoom(t,n)}),t.append("g").attr("class","brush").call(n)}zoom(t,n){let e,r=G.selection;if(void 0===n)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((t,n)=>{const e=Math.floor(r[0][0]/this.scale.x.bandwidth()),i=Math.floor(r[1][0]/this.scale.x.bandwidth());return n>=e&&n<=i}));const e=Math.floor(this.scale.y.invert(r[1][1])),i=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([e,i]),t.select(".brush").call(n.move,null)}else{if(!e)return e=setTimeout(function(){e=null},350);this.reset()}let i=t.transition().duration(750);t.select(".axis--x").transition(i).call(this.xAxis),t.select(".axis--y").transition(i).call(this.yAxis),this.groups.forEach((n,e)=>{let r=n.key,o=n.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),o.forEach(e=>{if(0==e.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const o=t.select(`#violin${n.index}-${e.label}`);o.select(".violin").transition(i).attr("d",li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const a=yt(e.values,.25),s=yt(e.values,.75);o.select(".violin-ir").transition(i).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(s)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(s)-this.scale.y(a)));const u=_t(e.values);o.select(".violin-median").transition(i).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(u)).attr("y2",this.scale.y(u))})})}_drawViolin(t,n,e,r){let i=Xo(qo.gaussian,this.scale.y.ticks(100),Ro.nrd(n.values));const o=ht(n.values),a=i(n.values).filter(t=>t[0]>o[0]&&t[0]<o[1]);let s=mt(a,t=>Math.abs(t[1]));this.scale.z.domain([-s,s]).range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const u=t.append("g").attr("id",`violin${r}-${n.label}`);let l=li().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const c=u.append("path").datum(a).attr("d",l).classed("violin",!0).style("fill",()=>void 0!==n.color?n.color:r%2==0?"#90c1c1":"#94a8b8"),h=yt(n.values,.25),f=yt(n.values,.75),p=this.scale.z.domain()[1]/3;if(e){const e=Math.abs(f-h),r=mt(n.values.filter(t=>t<f+1.5*e)),i=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}(n.values.filter(t=>t>h-1.5*e));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(i)).style("stroke","#fff")}u.append("rect").attr("x",this.scale.z(-p)).attr("y",this.scale.y(f)).attr("width",Math.abs(this.scale.z(-p)-this.scale.z(p))).attr("height",Math.abs(this.scale.y(f)-this.scale.y(h))).attr("class","violin-ir");const d=_t(n.values);u.append("line").attr("x1",this.scale.z(-p)).attr("x2",this.scale.z(p)).attr("y1",this.scale.y(d)).attr("y2",this.scale.y(d)).attr("class","violin-median"),u.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(n.group+"<br/>"+n.label+"<br/>Median: "+d.toPrecision(4)+"<br/>")}),u.on("mouseout",()=>{c.classed("highlighted",!1)})}_sanityCheck(t){const n=["group","label","values"];t.forEach(t=>{n.forEach(n=>{if(void 0===t[n])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const n=this.scale.x.domain(),e=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(t,r)=>r!==n.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+e/2:0;t.selectAll(".vline").data(n).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,e)=>e!=n.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}}function Wo(){const t="https://dev.gtexportal.org/rest/v1/";return{dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"reference/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"reference/collapsedGeneModelExon?unfiltered=false&datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"reference/collapsedGeneModelExon?unfiltered=true&datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&page_size=10000",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sort_by=median&sortDirection=desc&page_size=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sort_by=median&sortDirection=desc&page_size=50&tissueSiteDetailId=",geneId:t+"reference/geneId?format=json&release=v7&geneId=",tissue:t+"metadata/tissueSiteDetail?format=json",tissueSites:t+"metadata/tissueSiteDetail?format=json",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}return t.build=function(t,n,e,r,i,o,a=Wo()){h(a.tissueSites).then(function(s){let u=function(t,n=!1){const e=["Bladder","Cervix_Ectocervix","Cervix_Endocervix","Fallopian_Tube","Kidney_Cortex"],r="tissueSiteDetail";if(!t.hasOwnProperty(r))throw"Fatal Error: parseTissueSites input error.";const i=0==n?t[r]:t[r].filter(t=>!e.includes(t.tissueSiteDetailId));["tissueSite","tissueSiteDetailId","tissueSiteDetail"].forEach(t=>{if(!i[0].hasOwnProperty(t))throw`parseTissueSites attr error. ${t} is not found`});let o=i.reduce((t,n)=>{let e=n.tissueSite,r={id:n.tissueSiteDetailId,name:n.tissueSiteDetail};return t.hasOwnProperty(e)||(t[e]=[]),t[e].push(r),t},{});return Object.keys(o).forEach(t=>{if(1==o[t].length){let n=o[t][0];delete o[t],o[n.name]=[n]}}),o}(s,!0);!function(t,n,e=!1){const r="tissue-group-main-level";et(`#${n}`).selectAll("*").remove();const i=$("<div/>").attr("class","col-xs-12 col-md-12").appendTo($(`#${n}`));e?$(`<label class=${r}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(i):$(`<label class=${r}>`+'<input type="radio" name="allTissues" value="all"> All </label> '+`<label class=${r}>`+'<input type="radio" name="allTissues" value="reset"> Reset </label><br/>').appendTo(i),$('input[name="allTissues"]').change(function(){switch($(this).val()){case"all":$(".tissueGroup").prop("checked",!0),$(".tissueSubGroup").prop("checked",!0);break;case"reset":$(".tissueGroup").prop("checked",!1),$(".tissueSubGroup").prop("checked",!1)}});let o=Object.keys(t).sort();const a=ft(0,4).map(t=>$(`<div id="section${t}" class="col-xs-12 col-md-3">`).appendTo($(`#${n}`)));o.forEach(function(n){let e=t[n];const i=n.replace(/ /g,"_");let o=a[3];"Brain"==n?o=a[0]:n.match(/^[A-D]/)?o=a[1]:n.match(/^[E-P]/)&&(o=a[2]),$(`<label class=${r}>`+`<input type="checkbox" id="${i}" class="tissueGroup"> `+'<span class="checkmark"></span>'+`<span>${n}</span>`+"</label><br/>").appendTo(o),e.length>1&&e.sort((t,n)=>t.id>n.id?1:t.id<n.id?-1:0).forEach(function(t,n){let r=$("<label class=tissue-group-sub-level>"+`<input type="checkbox" id="${t.id}" class="tissueSubGroup"> `+'<span class="checkmark"></span>'+`<span>${t.name}</span>`+"</label><br/>").appendTo(o);n==e.length-1&&r.addClass("last-site"),r.click(function(){$('input[name="allTissues"]').prop("checked",!1)})}),$("#"+i).click(function(){$('input[name="allTissues"]').prop("checked",!1),$("#"+i).is(":checked")?e.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!0)}):e.forEach(function(t){"id"!=t.id&&$("#"+t.id).prop("checked",!1)})})})}(u,n,!0),$(`#${r}`).click(function(t,n,e,r,i,o,a,s=_getGTExUrls(),u=30){return function(){$(`#${n}`).html("");let i=function(t,n){let e=[];return $(`#${n}`).find(":input").each(function(){if($(this).is(":checked")){const n=$(this).attr("id");if($(this).hasClass("tissueGroup")){let r=n.replace(/_/g," ");1==t[r].length&&e.push(t[r][0].id)}else e.push(n)}}),e.filter(t=>void 0!==t)}(t,e);if(0==i.length)throw alert("Must select at least one tissue."),"Input error";let l=$(`#${r}`).val().split("\n").filter(function(t){return""!=t});if(0==l.length)throw alert("Must input at least one gene-variant pair."),"Input error";l.length>u&&($(`#${a}`).append(`Your input has exceeded the maximum number of allowed entries. Only the first ${u} entries are processed.`),console.warn("User input has exceeded the maximum number of allowed entries."),l=l.slice(0,u));const c={};Object.keys(t).forEach(n=>{t[n].forEach(t=>{c[t.id]=t.name})}),l.forEach(function(t,e){t.replace(/ /g,"");let r=t.split(",")[1],u=t.split(",")[0];const l=s.geneId+u,f=r.toLowerCase().startsWith("rs")?s.snp+r:s.variantId+r;Promise.all([h(l),h(f)]).then(function(t){const l=function(t,n){if(!t.hasOwnProperty("geneId"))throw"Fatal Error: parse gene error";let e=t.geneId.filter(t=>t.geneSymbolUpper==n.toUpperCase()||t.gencodeId==n.toUpperCase());return 0==e.length?null:e[0]}(t[0],u),f=function(t){if(!t.hasOwnProperty("variant"))throw"Fatal Error: parse variant error";const n=t.variant;return 0==n.length?null:n[0]}(t[1]);if(null===l){const t=`Input Error: no gene found for ${u}. <br/>`;throw $(`#${a}`).append(t),t}if(null===f){const t=`Input Error: no variant found for ${r} <br/>`;throw $(`#${a}`).append(t),t}!function(t,n,e,r,i,o,a=Wo()){const s=`violinplot${o}`;$(`#${n}`).append(`<div id="${s}" class="col-sm-12"></div>`);let u=r.variantId.split(/_/)[2],l=r.variantId.split(/_/)[3];const c=u+l;u+=u,l+=l;let f=[];var p,d;i.forEach(t=>{let n=a.dyneqtl,i=`${n}?variantId=${r.variantId}&gencodeId=${e.gencodeId}&tissueSiteDetailId=${t}`;f.push((i=i,d=t,new Promise(function(t,n){h(i).then(function(n){t(n)}).catch(function(n){const e={tissue:d,status:"failed"};t(e)})})))}),Promise.all(f).then(function(n){let i=[],o={};var a;n.forEach(n=>{if("failed"==n.status){let e=t[n.tissue];i=i.concat([{group:e,label:u.length>2?"ref":u,values:[0]},{group:e,label:c.length>2?"het":c,values:[0]},{group:e,label:l.length>2?"alt":l,values:[0]}])}else{a=n,["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(t=>{if(!a.hasOwnProperty(t))throw console.error(a),"Parse Error: Required json attribute is missing: "+t}),a.expression_values=a.data.map(t=>parseFloat(t)),a.genotypes=a.genotypes.map(t=>parseFloat(t)),a.homoRefExp=a.expression_values.filter((t,n)=>0==a.genotypes[n]),a.homoAltExp=a.expression_values.filter((t,n)=>2==a.genotypes[n]),a.heteroExp=a.expression_values.filter((t,n)=>1==a.genotypes[n]);let e=t[(n=a).tissueSiteDetailId];i=i.concat([{group:e,label:u.length>2?"ref":u,size:n.homoRefExp.length,values:n.homoRefExp},{group:e,label:c.length>2?"het":c,size:n.heteroExp.length,values:n.heteroExp},{group:e,label:l.length>2?"alt":l,size:n.homoAltExp.length,values:n.homoAltExp}]),o[e]={pvalue:null===n.pValue?1:parseFloat(n.pValue).toPrecision(3),pvalueThreshold:null===n.pValueThreshold?0:parseFloat(n.pValueThreshold).toPrecision(3)}}}),function(t,n,e,r,i){const o={main:e,tooltip:"eqtlTooltip",toolbar:`${e}Toolbar`,clone:`${e}Clone`,chart:`${e}Chart`,svg:`${e}Svg`,buttons:{save:`${e}Save`}};if(0==$(`#${o.main}`).length)throw"Violin Plot Error: the chart DOM doesn't exist";0==$(`#${o.tooltip}`).length&&$("<div/>").attr("id",o.tooltip).appendTo($("body")),et(`#${o.main}`).selectAll("*").remove(),["toolbar","chart","clone"].forEach(t=>{$("<div/>").attr("id",o[t]).appendTo($(`#${o.main}`))});let a={left:50,top:50,right:50,bottom:100},s=40*r.length,u=s+(a.left+a.right),l=80+(a.top+a.bottom),c=et(`#${o.chart}`).append("svg").attr("width",u).attr("height",l).attr("id",o.svg).append("g").attr("transform",`translate(${a.left}, ${a.top})`);c.append("text").classed("ed-section-title",!0).text(`${t.geneSymbol} (${t.gencodeId}) and ${n.snpId||""} (${n.variantId})`).attr("x",0).attr("y",16-a.top);let h=new Zo(r,i);const f=h.createTooltip(o.tooltip);h.createToolbar(o.toolbar,f).createDownloadSvgButton(o.buttons.save,o.svg,`${o.main}-save.svg`,o.clone),h.render(c,s,80,.3,void 0,[],"Normalized Expression",!1,!0,0,!1,!0,!1,!0),function(t,n){t.groups.forEach(e=>{const r=e.key,i=r.replace(/\(/," - (").split(/\s*-\s*/),o=n.append("g"),a=o.selectAll(".violin-group-label").data(i);a.enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("transform",(n,e)=>{let i=t.scale.x(r)+t.scale.x.bandwidth()/2,o=t.scale.y(t.scale.y.domain()[0])+75+10*e;return`translate(${i}, ${o})`}).text(t=>t)}),n.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1)}(h,c)}(e,r,s,i,o)}).catch(function(t){console.error(t)})}(c,n,l,f,i,e,s),$(`#${o}`).removeClass("show"),$(`#${o}`).removeClass("in")}).catch(function(t){console.error(t)})})}}(u,t,n,e,0,i,o,a))}).catch(function(t){console.error(t)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXF0bC1kYXNoYm9hcmQuYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21vdXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ZhcmlhbmNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21heC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0Um91bmRlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFRyaW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaW50ZXJ2YWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taW51dGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3llYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTWludXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1dlZWsuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjWWVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNb250aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29Gb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb1BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9tb25vdG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9hcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9heGlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZW91dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9zaW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvZWxhc3RpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL25vZXZlbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2JydXNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2tkZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVhbi5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvVG9vbHRpcC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvVG9vbGJhci5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvdXRpbHMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL0dyb3VwZWRWaW9saW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21pbi5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvZ3RleERhdGFQYXJzZXIuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9FcXRsRGFzaGJvYXJkLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9ndGV4TWVudUJ1aWxkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEVPTCA9IHt9LFxuICAgIEVPRiA9IHt9LFxuICAgIFFVT1RFID0gMzQsXG4gICAgTkVXTElORSA9IDEwLFxuICAgIFJFVFVSTiA9IDEzO1xuXG5mdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xufVxuXG5mdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICByZXR1cm4gZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICB9O1xufVxuXG4vLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbmZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgY29sdW1ucyA9IFtdO1xuXG4gIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XG4gICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlbGltaXRlcikge1xuICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXFxyXVwiKSxcbiAgICAgIERFTElNSVRFUiA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKHRleHQsIGYpIHtcbiAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgIGNvbHVtbnMgPSByb3csIGNvbnZlcnQgPSBmID8gY3VzdG9tQ29udmVydGVyKHJvdywgZikgOiBvYmplY3RDb252ZXJ0ZXIocm93KTtcbiAgICB9KTtcbiAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zIHx8IFtdO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICB2YXIgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLCAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgICBuID0gMCwgLy8gY3VycmVudCBsaW5lIG51bWJlclxuICAgICAgICB0LCAvLyBjdXJyZW50IHRva2VuXG4gICAgICAgIGVvZiA9IE4gPD0gMCwgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0Y/XG4gICAgICAgIGVvbCA9IGZhbHNlOyAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgIC8vIFN0cmlwIHRoZSB0cmFpbGluZyBuZXdsaW5lLlxuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBORVdMSU5FKSAtLU47XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IFJFVFVSTikgLS1OO1xuXG4gICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICBpZiAoZW9mKSByZXR1cm4gRU9GO1xuICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG5cbiAgICAgIC8vIFVuZXNjYXBlIHF1b3Rlcy5cbiAgICAgIHZhciBpLCBqID0gSSwgYztcbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IFFVT1RFKSB7XG4gICAgICAgIHdoaWxlIChJKysgPCBOICYmIHRleHQuY2hhckNvZGVBdChJKSAhPT0gUVVPVEUgfHwgdGV4dC5jaGFyQ29kZUF0KCsrSSkgPT09IFFVT1RFKTtcbiAgICAgICAgaWYgKChpID0gSSkgPj0gTikgZW9mID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkgLSAxKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lLlxuICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChpID0gSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gREVMSU1JVEVSKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgaSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBsYXN0IHRva2VuIGJlZm9yZSBFT0YuXG4gICAgICByZXR1cm4gZW9mID0gdHJ1ZSwgdGV4dC5zbGljZShqLCBOKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICB2YXIgcm93ID0gW107XG4gICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikgcm93LnB1c2godCksIHQgPSB0b2tlbigpO1xuICAgICAgaWYgKGYgJiYgKHJvdyA9IGYocm93LCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgcmV0dXJuIGNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH0pKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93cyhyb3dzKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZvcm1hdFJvdykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcbiAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodGV4dCkge1xuICAgIHJldHVybiB0ZXh0ID09IG51bGwgPyBcIlwiXG4gICAgICAgIDogcmVGb3JtYXQudGVzdCh0ZXh0ICs9IFwiXCIpID8gXCJcXFwiXCIgKyB0ZXh0LnJlcGxhY2UoL1wiL2csIFwiXFxcIlxcXCJcIikgKyBcIlxcXCJcIlxuICAgICAgICA6IHRleHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBmb3JtYXRSb3dzOiBmb3JtYXRSb3dzXG4gIH07XG59XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuZXhwb3J0IHZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbmV4cG9ydCB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Um93cyA9IGNzdi5mb3JtYXRSb3dzO1xuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuZXhwb3J0IHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbmV4cG9ydCB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xuIiwiZnVuY3Rpb24gcmVzcG9uc2VKc29uKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VKc29uKTtcbn1cbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJ2YXIgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn07XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghZWxlbWVudC5tYXRjaGVzKSB7XG4gICAgdmFyIHZlbmRvck1hdGNoZXMgPSBlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQub01hdGNoZXNTZWxlY3RvcjtcbiAgICBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZlbmRvck1hdGNoZXMuY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hlcjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUoZmFsc2UpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUodHJ1ZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCIuL3NlbGVjdGlvbi9vblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnJlbnQgPSBldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHZhciBldmVudCA9IHNvdXJjZUV2ZW50KCk7XG4gIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgcmV0dXJuIHBvaW50KG5vZGUsIGV2ZW50KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIGV2ZW50KSB7XG4gIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gIH1cblxuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3JcIjtcblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xufVxuIiwiaW1wb3J0IHZhcmlhbmNlIGZyb20gXCIuL3ZhcmlhbmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IDAsXG4gICAgICBpID0gLTEsXG4gICAgICBtZWFuID0gMCxcbiAgICAgIHZhbHVlLFxuICAgICAgZGVsdGEsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG0gPiAxKSByZXR1cm4gc3VtIC8gKG0gLSAxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbixcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbbWluLCBtYXhdO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHZhbHVlb2YgPSBudW1iZXI7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1swXSwgMCwgdmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1tuIC0gMV0sIG4gLSAxLCB2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgdmFsdWUxID0gK3ZhbHVlb2YodmFsdWVzW2kwICsgMV0sIGkwICsgMSwgdmFsdWVzKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4O1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5pbXBvcnQgcXVhbnRpbGUgZnJvbSBcIi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbnVtYmVycyA9IFtdO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcXVhbnRpbGUobnVtYmVycy5zb3J0KGFzY2VuZGluZyksIDAuNSk7XG59XG4iLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IG1hcCBmcm9tIFwiLi9tYXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcblxuZXhwb3J0IHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKHJhbmdlKSB7XG4gIHZhciBpbmRleCA9IG1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgcmFuZ2UgPSByYW5nZSA9PSBudWxsID8gW10gOiBzbGljZS5jYWxsKHJhbmdlKTtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCgpO1xuICAgIHZhciBpID0gLTEsIG4gPSBfLmxlbmd0aCwgZCwga2V5O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcmRpbmFsKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtyYW5nZSBhcyBzZXF1ZW5jZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgb3JkaW5hbCBmcm9tIFwiLi9vcmRpbmFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJhbmQoKSB7XG4gIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgc3RlcCxcbiAgICAgIGJhbmR3aWR0aCxcbiAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICBwYWRkaW5nSW5uZXIgPSAwLFxuICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgIGFsaWduID0gMC41O1xuXG4gIGRlbGV0ZSBzY2FsZS51bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXG4gICAgICAgIHJldmVyc2UgPSByYW5nZVsxXSA8IHJhbmdlWzBdLFxuICAgICAgICBzdGFydCA9IHJhbmdlW3JldmVyc2UgLSAwXSxcbiAgICAgICAgc3RvcCA9IHJhbmdlWzEgLSByZXZlcnNlXTtcbiAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICBzdGFydCArPSAoc3RvcCAtIHN0YXJ0IC0gc3RlcCAqIChuIC0gcGFkZGluZ0lubmVyKSkgKiBhbGlnbjtcbiAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgIHZhciB2YWx1ZXMgPSBzZXF1ZW5jZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gIH07XG5cbiAgc2NhbGUuYWxpZ24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmQoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbigpKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC5yb3VuZChyb3VuZClcbiAgICAgICAgLnBhZGRpbmdJbm5lcihwYWRkaW5nSW5uZXIpXG4gICAgICAgIC5wYWRkaW5nT3V0ZXIocGFkZGluZ091dGVyKVxuICAgICAgICAuYWxpZ24oYWxpZ24pO1xuICB9O1xuXG4gIHJldHVybiByZXNjYWxlKCk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCgpIHtcbiAgcmV0dXJuIHBvaW50aXNoKGJhbmQoKS5wYWRkaW5nSW5uZXIoMSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXgzID0gL14jKFswLTlhLWZdezN9KSQvLFxuICAgIHJlSGV4NiA9IC9eIyhbMC05YS1mXXs2fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuaGV4KCk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKSArIFwiXCI7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG07XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXgzLmV4ZWMoZm9ybWF0KSkgPyAobSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweDBmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkpIC8vICNmMDBcbiAgICAgIDogKG0gPSByZUhleDYuZXhlYyhmb3JtYXQpKSA/IHJnYm4ocGFyc2VJbnQobVsxXSwgMTYpKSAvLyAjZmYwMDAwXG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKVxuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMuciAmJiB0aGlzLnIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmcgJiYgdGhpcy5nIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5iICYmIHRoaXMuYiA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvclwiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoXCI7XG5cbi8vIGh0dHBzOi8vYmV0YS5vYnNlcnZhYmxlaHEuY29tL0BtYm9zdG9jay9sYWItYW5kLXJnYlxudmFyIEsgPSAxOCxcbiAgICBYbiA9IDAuOTY0MjIsXG4gICAgWW4gPSAxLFxuICAgIFpuID0gMC44MjUyMSxcbiAgICB0MCA9IDQgLyAyOSxcbiAgICB0MSA9IDYgLyAyOSxcbiAgICB0MiA9IDMgKiB0MSAqIHQxLFxuICAgIHQzID0gdDEgKiB0MSAqIHQxO1xuXG5mdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBMYWIpIHJldHVybiBuZXcgTGFiKG8ubCwgby5hLCBvLmIsIG8ub3BhY2l0eSk7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSB7XG4gICAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gICAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG4gIH1cbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IHJnYjJscmdiKG8uciksXG4gICAgICBnID0gcmdiMmxyZ2Ioby5nKSxcbiAgICAgIGIgPSByZ2IybHJnYihvLmIpLFxuICAgICAgeSA9IHh5ejJsYWIoKDAuMjIyNTA0NSAqIHIgKyAwLjcxNjg3ODYgKiBnICsgMC4wNjA2MTY5ICogYikgLyBZbiksIHgsIHo7XG4gIGlmIChyID09PSBnICYmIGcgPT09IGIpIHggPSB6ID0geTsgZWxzZSB7XG4gICAgeCA9IHh5ejJsYWIoKDAuNDM2MDc0NyAqIHIgKyAwLjM4NTA2NDkgKiBnICsgMC4xNDMwODA0ICogYikgLyBYbik7XG4gICAgeiA9IHh5ejJsYWIoKDAuMDEzOTMyMiAqIHIgKyAwLjA5NzEwNDUgKiBnICsgMC43MTQxNzMzICogYikgLyBabik7XG4gIH1cbiAgcmV0dXJuIG5ldyBMYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JheShsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTGFiKGwsIDAsIDAsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5hID0gK2E7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgIHogPSBpc05hTih0aGlzLmIpID8geSA6IHkgLSB0aGlzLmIgLyAyMDA7XG4gICAgeCA9IFhuICogbGFiMnh5eih4KTtcbiAgICB5ID0gWW4gKiBsYWIyeHl6KHkpO1xuICAgIHogPSBabiAqIGxhYjJ4eXooeik7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBscmdiMnJnYiggMy4xMzM4NTYxICogeCAtIDEuNjE2ODY2NyAqIHkgLSAwLjQ5MDYxNDYgKiB6KSxcbiAgICAgIGxyZ2IycmdiKC0wLjk3ODc2ODQgKiB4ICsgMS45MTYxNDE1ICogeSArIDAuMDMzNDU0MCAqIHopLFxuICAgICAgbHJnYjJyZ2IoIDAuMDcxOTQ1MyAqIHggLSAwLjIyODk5MTQgKiB5ICsgMS40MDUyNDI3ICogeiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIHh5ejJsYWIodCkge1xuICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XG59XG5cbmZ1bmN0aW9uIGxhYjJ4eXoodCkge1xuICByZXR1cm4gdCA+IHQxID8gdCAqIHQgKiB0IDogdDIgKiAodCAtIHQwKTtcbn1cblxuZnVuY3Rpb24gbHJnYjJyZ2IoeCkge1xuICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbn1cblxuZnVuY3Rpb24gcmdiMmxyZ2IoeCkge1xuICByZXR1cm4gKHggLz0gMjU1KSA8PSAwLjA0MDQ1ID8geCAvIDEyLjkyIDogTWF0aC5wb3coKHggKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbn1cblxuZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgTGFiKSkgbyA9IGxhYkNvbnZlcnQobyk7XG4gIGlmIChvLmEgPT09IDAgJiYgby5iID09PSAwKSByZXR1cm4gbmV3IEhjbChOYU4sIDAsIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIY2wsIGhjbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxhYkNvbnZlcnQodGhpcykucmdiKCk7XG4gIH1cbn0pKTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvclwiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2JcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZVwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0XCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZ1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2VcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlclwiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgcmhvID0gTWF0aC5TUVJUMixcbiAgICByaG8yID0gMixcbiAgICByaG80ID0gNCxcbiAgICBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG4vLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4vLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICByZXR1cm4gaTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWludGVycG9sYXRlTGluZWFyKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChiKTtcbn1cblxuZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgZCA9IGRlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB4IDw9IGEgPyAwIDogeCA+PSBiID8gMSA6IGQoeCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHIgPSByZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IGRlaW50ZXJwb2xhdGUoZDEsIGQwKSwgcjAgPSByZWludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBkZWludGVycG9sYXRlKGQwLCBkMSksIHIwID0gcmVpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBkZWludGVycG9sYXRlKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IHJlaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSk7XG59XG5cbi8vIGRlaW50ZXJwb2xhdGUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIHJlaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBkb21haW4gdmFsdWUgeCBpbiBbYSxiXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4sIHJhbmdlLCBjbGFtcCA/IGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlKSA6IGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKSkpKCt4KTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLCBkZWludGVycG9sYXRlTGluZWFyLCBjbGFtcCA/IHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSA6IHJlaW50ZXJwb2xhdGUpKSkoK3kpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlLmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCByZXNjYWxlKCkpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtXFwoIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5mdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICB0aGlzLmZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIjtcbiAgdGhpcy5hbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiO1xuICB0aGlzLnNpZ24gPSBtYXRjaFszXSB8fCBcIi1cIjtcbiAgdGhpcy5zeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiO1xuICB0aGlzLnplcm8gPSAhIW1hdGNoWzVdO1xuICB0aGlzLndpZHRoID0gbWF0Y2hbNl0gJiYgK21hdGNoWzZdO1xuICB0aGlzLmNvbW1hID0gISFtYXRjaFs3XTtcbiAgdGhpcy5wcmVjaXNpb24gPSBtYXRjaFs4XSAmJiArbWF0Y2hbOF0uc2xpY2UoMSk7XG4gIHRoaXMudHJpbSA9ICEhbWF0Y2hbOV07XG4gIHRoaXMudHlwZSA9IG1hdGNoWzEwXSB8fCBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT0gbnVsbCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT0gbnVsbCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0b1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXBcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFsc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXJcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW1cIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0b1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgJiYgbG9jYWxlLnRob3VzYW5kcyA/IGZvcm1hdEdyb3VwKGxvY2FsZS5ncm91cGluZywgbG9jYWxlLnRob3VzYW5kcykgOiBpZGVudGl0eSxcbiAgICAgIGN1cnJlbmN5ID0gbG9jYWxlLmN1cnJlbmN5LFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPyBmb3JtYXROdW1lcmFscyhsb2NhbGUubnVtZXJhbHMpIDogaWRlbnRpdHksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgfHwgXCIlXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT0gbnVsbCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzBdIDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwO1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBkdXJpbmcgZm9ybWF0dGluZywgdHJlYXQgYXMgcG9zaXRpdmUuXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCkgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmIChpMCA+IDApIHsgaWYgKCErc1tpXSkgYnJlYWsgb3V0OyBpMCA9IDA7IH0gYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZG9tYWluLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGFydCA9IGRvbWFpblswXSxcbiAgICAgIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLFxuICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyIGFzIHJlaW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIGNvbnRpbnVvdXMsIGNvcHksIGRlaW50ZXJwb2xhdGVMaW5lYXIgYXMgZGVpbnRlcnBvbGF0ZX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHRpY2tGb3JtYXQoZG9tYWluKCksIGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxpbmVhcigpKTtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGludGVydmFsO1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtaWxsaXNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAvLyBub29wXG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kIC0gc3RhcnQ7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxubWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIGsgPSBNYXRoLmZsb29yKGspO1xuICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGspICogayk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlsbGlzZWNvbmQ7XG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuIiwiZXhwb3J0IHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbmV4cG9ydCB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XG5leHBvcnQgdmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG5leHBvcnQgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvblNlY29uZCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvbk1pbnV0ZSkgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIHZhciBvZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiBkdXJhdGlvbk1pbnV0ZSAlIGR1cmF0aW9uSG91cjtcbiAgaWYgKG9mZnNldCA8IDApIG9mZnNldCArPSBkdXJhdGlvbkhvdXI7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKCgrZGF0ZSAtIG9mZnNldCkgLyBkdXJhdGlvbkhvdXIpICogZHVyYXRpb25Ib3VyICsgb2Zmc2V0KTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciB1dGNTdW5kYXkgPSB1dGNXZWVrZGF5KDApO1xuZXhwb3J0IHZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xuZXhwb3J0IHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheXMgPSB1dGNUdWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5cyA9IHV0Y0ZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IHtcbiAgdGltZURheSxcbiAgdGltZVN1bmRheSxcbiAgdGltZU1vbmRheSxcbiAgdGltZVRodXJzZGF5LFxuICB0aW1lWWVhcixcbiAgdXRjRGF5LFxuICB1dGNTdW5kYXksXG4gIHV0Y01vbmRheSxcbiAgdXRjVGh1cnNkYXksXG4gIHV0Y1llYXJcbn0gZnJvbSBcImQzLXRpbWVcIjtcblxuZnVuY3Rpb24gbG9jYWxEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbn1cblxuZnVuY3Rpb24gdXRjRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbn1cblxuZnVuY3Rpb24gbmV3WWVhcih5KSB7XG4gIHJldHVybiB7eTogeSwgbTogMCwgZDogMSwgSDogMCwgTTogMCwgUzogMCwgTDogMH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgdmFyIGxvY2FsZV9kYXRlVGltZSA9IGxvY2FsZS5kYXRlVGltZSxcbiAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgbG9jYWxlX3BlcmlvZHMgPSBsb2NhbGUucGVyaW9kcyxcbiAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgbG9jYWxlX21vbnRocyA9IGxvY2FsZS5tb250aHMsXG4gICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgcGVyaW9kTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICBtb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgdmFyIGZvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0U2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdE1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhcixcbiAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFVUQ1Nob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0VVRDTW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0VVRDV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICBcIllcIjogZm9ybWF0VVRDRnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHBhcnNlcyA9IHtcbiAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcbiAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxuICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImZcIjogcGFyc2VNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwiUVwiOiBwYXJzZVVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICBcInVcIjogcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IHBhcnNlV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgbmV3RGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3WWVhcigxOTAwKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCksXG4gICAgICAgICAgd2VlaywgZGF5O1xuICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIElmIGEgVU5JWCB0aW1lc3RhbXAgaXMgc3BlY2lmaWVkLCByZXR1cm4gaXQuXG4gICAgICBpZiAoXCJRXCIgaW4gZCkgcmV0dXJuIG5ldyBEYXRlKGQuUSk7XG5cbiAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICBpZiAoXCJwXCIgaW4gZCkgZC5IID0gZC5IICUgMTIgKyBkLnAgKiAxMjtcblxuICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgaWYgKFwiVlwiIGluIGQpIHtcbiAgICAgICAgaWYgKGQuViA8IDEgfHwgZC5WID4gNTMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gMTtcbiAgICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldFVUQ0RheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHV0Y01vbmRheS5jZWlsKHdlZWspIDogdXRjTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXRVVENEYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdlZWsgPSBuZXdEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0RGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdGltZU1vbmRheS5jZWlsKHdlZWspIDogdGltZU1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdGltZURheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0TW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldERhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcInVcIiBpbiBkID8gZC51ICUgNyA6IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3WWVhcihkLnkpKS5nZXRVVENEYXkoKSA6IG5ld0RhdGUobmV3WWVhcihkLnkpKS5nZXREYXkoKTtcbiAgICAgICAgZC5tID0gMDtcbiAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgLy8gb2Zmc2V0IGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIHRpbWUgem9uZS5cbiAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICBkLk0gKz0gZC5aICUgMTAwO1xuICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBhbGwgZmllbGRzIGFyZSBpbiBsb2NhbCB0aW1lLlxuICAgICAgcmV0dXJuIG5ld0RhdGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGMsXG4gICAgICAgIHBhcnNlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICBjID0gc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICBwYXJzZSA9IHBhcnNlc1tjIGluIHBhZHMgPyBzcGVjaWZpZXIuY2hhckF0KGkrKykgOiBjXTtcbiAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gd2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV90aW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBsb2NhbERhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcbiAgICB1dGNGb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICB1dGNQYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciwgdXRjRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBwYWRzID0ge1wiLVwiOiBcIlwiLCBcIl9cIjogXCIgXCIsIFwiMFwiOiBcIjBcIn0sXG4gICAgbnVtYmVyUmUgPSAvXlxccypcXGQrLywgLy8gbm90ZTogaWdub3JlcyBuZXh0IGRpcmVjdGl2ZVxuICAgIHBlcmNlbnRSZSA9IC9eJS8sXG4gICAgcmVxdW90ZVJlID0gL1tcXFxcXiQqKz98W1xcXSgpLnt9XS9nO1xuXG5mdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJJU08oZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5WID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRnVsbFllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdICsgKCtuWzBdID4gNjggPyAxOTAwIDogMjAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPy8uZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSAoK25bMF0pICogMTAwMCwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB0aW1lVGh1cnNkYXkoZCkgOiB0aW1lVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh0aW1lVGh1cnNkYXkuY291bnQodGltZVllYXIoZCksIGQpICsgKHRpbWVZZWFyKGQpLmdldERheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZU1vbmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcbiAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICArIHBhZCh6IC8gNjAgfCAwLCBcIjBcIiwgMilcbiAgICAgICsgcGFkKHogJSA2MCwgXCIwXCIsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0RhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHV0Y0RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRvdyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBkb3cgPT09IDAgPyA3IDogZG93O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNTdW5kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgcmV0dXJuIFwiKzAwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gIHJldHVybiBcIiVcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcChkKSB7XG4gIHJldHVybiArZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMoZCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigrZCAvIDEwMDApO1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlXCI7XG5cbmV4cG9ydCB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IHV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRJc287XG4iLCJpbXBvcnQge2lzb1NwZWNpZmllcn0gZnJvbSBcIi4vaXNvRm9ybWF0XCI7XG5pbXBvcnQge3V0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiB1dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUlzbztcbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgdGF1ID0gMiAqIHBpLFxuICAgIGVwc2lsb24gPSAxZS02LFxuICAgIHRhdUVwc2lsb24gPSB0YXUgLSBlcHNpbG9uO1xuXG5mdW5jdGlvbiBQYXRoKCkge1xuICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuXyA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiBuZXcgUGF0aDtcbn1cblxuUGF0aC5wcm90b3R5cGUgPSBwYXRoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhdGgsXG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3gxID0gdGhpcy5feDAsIHRoaXMuX3kxID0gdGhpcy5feTA7XG4gICAgICB0aGlzLl8gKz0gXCJaXCI7XG4gICAgfVxuICB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiUVwiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJDXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICgreDIpICsgXCIsXCIgKyAoK3kyKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGFyY1RvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Miwgcikge1xuICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XG4gICAgdmFyIHgwID0gdGhpcy5feDEsXG4gICAgICAgIHkwID0gdGhpcy5feTEsXG4gICAgICAgIHgyMSA9IHgyIC0geDEsXG4gICAgICAgIHkyMSA9IHkyIC0geTEsXG4gICAgICAgIHgwMSA9IHgwIC0geDEsXG4gICAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICAgIGwwMV8yID0geDAxICogeDAxICsgeTAxICogeTAxO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgxLHkxKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxuICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uKSkge31cblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyO1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG5leHBvcnQgdmFyIGVwc2lsb24gPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHRhdSA9IDIgKiBwaTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSA6IHggPD0gLTEgPyAtaGFsZlBpIDogTWF0aC5hc2luKHgpO1xufVxuIiwiZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmVcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHgwID0gcG9pbnRYLFxuICAgICAgeDEgPSBudWxsLFxuICAgICAgeTAgPSBjb25zdGFudCgwKSxcbiAgICAgIHkxID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXIsXG4gICAgICAgIHgweiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeTB6ID0gbmV3IEFycmF5KG4pO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgIGogPSBpO1xuICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChrID0gaSAtIDE7IGsgPj0gajsgLS1rKSB7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkge1xuICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgb3V0cHV0LnBvaW50KHgxID8gK3gxKGQsIGksIGRhdGEpIDogeDB6W2ldLCB5MSA/ICt5MShkLCBpLCBkYXRhKSA6IHkweltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDE7XG4gIH07XG5cbiAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMCA9XG4gIGFyZWEubGluZVkwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5saW5lWTEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkxKTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICB9O1xuXG4gIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICB9O1xuXG4gIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmVhO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gcG9pbnRYLFxuICAgICAgeSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbi8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4vLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4vLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG5mdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5XCI7XG5cbnZhciB0b3AgPSAxLFxuICAgIHJpZ2h0ID0gMixcbiAgICBib3R0b20gPSAzLFxuICAgIGxlZnQgPSA0LFxuICAgIGVwc2lsb24gPSAxZS02O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVYKHgpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKHggKyAwLjUpICsgXCIsMClcIjtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKHkgKyAwLjUpICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIG51bWJlcihzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkpIDogdGlja0Zvcm1hdCxcbiAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgIHJhbmdlID0gc2NhbGUucmFuZ2UoKSxcbiAgICAgICAgcmFuZ2UwID0gK3JhbmdlWzBdICsgMC41LFxuICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IG51bWJlcikoc2NhbGUuY29weSgpKSxcbiAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcbiAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXG4gICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjMDAwXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzAwMFwiKVxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLmF0dHIoXCJkeVwiLCBvcmllbnQgPT09IHRvcCA/IFwiMGVtXCIgOiBvcmllbnQgPT09IGJvdHRvbSA/IFwiMC43MWVtXCIgOiBcIjAuMzJlbVwiKSk7XG5cbiAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGljayA9IHRpY2sudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xuXG4gICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBpc0Zpbml0ZShkID0gcG9zaXRpb24oZCkpID8gdHJhbnNmb3JtKGQpIDogdGhpcy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7IH0pO1xuXG4gICAgICB0aWNrRW50ZXJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpczsgcmV0dXJuIHRyYW5zZm9ybShwICYmIGlzRmluaXRlKHAgPSBwKGQpKSA/IHAgOiBwb3NpdGlvbihkKSk7IH0pO1xuICAgIH1cblxuICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgcGF0aFxuICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PSByaWdodFxuICAgICAgICAgICAgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyXG4gICAgICAgICAgICA6IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzdGFydGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIC8vIERpc3BhdGNoIHRoZSBpbnRlcnJ1cHQgZXZlbnQuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy4gTm8gaW50ZXJydXB0IGV2ZW50IGlzIGRpc3BhdGNoZWRcbiAgICAgIC8vIGJlY2F1c2UgdGhlIGNhbmNlbGxlZCB0cmFuc2l0aW9ucyBuZXZlciBzdGFydGVkLiBOb3RlIHRoYXQgdGhpcyBhbHNvXG4gICAgICAvLyByZW1vdmVzIHRoaXMgdHJhbnNpdGlvbiBmcm9tIHRoZSBwZW5kaW5nIGxpc3QhXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG51bGwsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBpZiAoYWN0aXZlKSBzY2hlZHVsZS5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXlcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbikoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkoZnVsbG5hbWUpXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KShmdWxsbmFtZSwgaSwgdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmVFbmQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUsIGkpKVxuICAgICAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlRW5kKG5hbWUpKVxuICAgICAgOiB0aGlzLnN0eWxlVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgICAgIDogc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSArIFwiXCIpLCBwcmlvcml0eSk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbn1cbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgaGFsZlBpID0gcGkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc2luSW4odCkge1xuICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc2luKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luSW5PdXQodCkge1xuICByZXR1cm4gKDEgLSBNYXRoLmNvcyhwaSAqIHQpKSAvIDI7XG59XG4iLCJ2YXIgdGF1ID0gMiAqIE1hdGguUEksXG4gICAgYW1wbGl0dWRlID0gMSxcbiAgICBwZXJpb2QgPSAwLjM7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAxMCAqIC0tdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW4ucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW47XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY091dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCA9ICt0KSkgKiBNYXRoLnNpbigodCArIHMpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY091dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNPdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXG4gICAgICAgID8gYSAqIE1hdGgucG93KDIsIDEwICogdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcClcbiAgICAgICAgOiAyIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHMgKyB0KSAvIHApKSAvIDI7XG4gIH1cblxuICBlbGFzdGljSW5PdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW5PdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW5PdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VGltaW5nLnRpbWUgPSBub3coKSwgZGVmYXVsdFRpbWluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7Y3VzdG9tRXZlbnQsIGV2ZW50LCBtb3VzZSwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnRcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudFwiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wiZVwiLCBcIndcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCAmJiBbW3hbMF0sIGVbMF1bMV1dLCBbeFsxXSwgZVsxXVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxufTtcblxudmFyIFkgPSB7XG4gIG5hbWU6IFwieVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwic1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ICYmIFtbZVswXVswXSwgeVswXV0sIFtlWzFdWzBdLCB5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbn07XG5cbnZhciBjdXJzb3JzID0ge1xuICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICBzZWxlY3Rpb246IFwibW92ZVwiLFxuICBuOiBcIm5zLXJlc2l6ZVwiLFxuICBlOiBcImV3LXJlc2l6ZVwiLFxuICBzOiBcIm5zLXJlc2l6ZVwiLFxuICB3OiBcImV3LXJlc2l6ZVwiLFxuICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICBzdzogXCJuZXN3LXJlc2l6ZVwiXG59O1xuXG52YXIgZmxpcFggPSB7XG4gIGU6IFwid1wiLFxuICB3OiBcImVcIixcbiAgbnc6IFwibmVcIixcbiAgbmU6IFwibndcIixcbiAgc2U6IFwic3dcIixcbiAgc3c6IFwic2VcIlxufTtcblxudmFyIGZsaXBZID0ge1xuICBuOiBcInNcIixcbiAgczogXCJuXCIsXG4gIG53OiBcInN3XCIsXG4gIG5lOiBcInNlXCIsXG4gIHNlOiBcIm5lXCIsXG4gIHN3OiBcIm53XCJcbn07XG5cbnZhciBzaWduc1ggPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiBudWxsLFxuICBlOiArMSxcbiAgczogbnVsbCxcbiAgdzogLTEsXG4gIG53OiAtMSxcbiAgbmU6ICsxLFxuICBzZTogKzEsXG4gIHN3OiAtMVxufTtcblxudmFyIHNpZ25zWSA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IC0xLFxuICBlOiBudWxsLFxuICBzOiArMSxcbiAgdzogbnVsbCxcbiAgbnc6IC0xLFxuICBuZTogLTEsXG4gIHNlOiArMSxcbiAgc3c6ICsxXG59O1xuXG5mdW5jdGlvbiB0eXBlKHQpIHtcbiAgcmV0dXJuIHt0eXBlOiB0fTtcbn1cblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xufVxuXG4vLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuZnVuY3Rpb24gbG9jYWwobm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgcmV0dXJuIG5vZGUuX19icnVzaDtcbn1cblxuZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxuICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoKFgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICByZXR1cm4gYnJ1c2goWSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2goWFkpO1xufVxuXG5mdW5jdGlvbiBicnVzaChkaW0pIHtcbiAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goYnJ1c2gsIFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2ggdG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uKSB7XG4gICAgaWYgKGdyb3VwLnNlbGVjdGlvbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCkuc3RhcnQoKTsgfSlcbiAgICAgICAgICAub24oXCJpbnRlcnJ1cHQuYnJ1c2ggZW5kLmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7IH0pXG4gICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24wID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XG4gICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHQgPT09IDEgJiYgZW1wdHkoc2VsZWN0aW9uMSkgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgJiYgc2VsZWN0aW9uMSA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09IG51bGwgfHwgZW1wdHkoc2VsZWN0aW9uMSkgPyBudWxsIDogc2VsZWN0aW9uMTtcbiAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXG4gICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsKHRoaXMpLnNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVtkLnR5cGUubGVuZ3RoIC0gMV0gPT09IFwiZVwiID8gc2VsZWN0aW9uWzFdWzBdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMF0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiblwiIHx8IGQudHlwZSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09IFwiZVwiIHx8IGQudHlwZSA9PT0gXCJ3XCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0gKyBoYW5kbGVTaXplIDogaGFuZGxlU2l6ZTsgfSk7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uLC5oYW5kbGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICByZXR1cm4gdGhhdC5fX2JydXNoLmVtaXR0ZXIgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBCcnVzaEV2ZW50KGJydXNoLCB0eXBlLCBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZCgpIHtcbiAgICBpZiAoZXZlbnQudG91Y2hlcykgeyBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybiBub2V2ZW50KCk7IH1cbiAgICBlbHNlIGlmICh0b3VjaGVuZGluZykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4LFxuICAgICAgICBkeSxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50MCA9IG1vdXNlKHRoYXQpLFxuICAgICAgICBwb2ludCA9IHBvaW50MCxcbiAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgaWYgKHR5cGUgPT09IFwib3ZlcmxheVwiKSB7XG4gICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXG4gICAgICAgIFtlMCA9IGRpbSA9PT0gWSA/IEUgOiB3MCwgczAgPSBkaW0gPT09IFggPyBTIDogbjBdXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwia2V5ZG93bi5icnVzaFwiLCBrZXlkb3duZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgIGVtaXQuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgdmFyIHBvaW50MSA9IG1vdXNlKHRoYXQpO1xuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHBvaW50MVswXSAtIHBvaW50WzBdKSA+IE1hdGguYWJzKHBvaW50MVsxXSAtIHBvaW50WzFdKSkgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBvaW50ID0gcG9pbnQxO1xuICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIG1vdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKCkge1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSB3MCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gTWF0aC5tYXgoTiAtIHMwLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAsIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIGlmIChsb2NrWSkgbjEgPSBzZWxlY3Rpb25bMF1bMV0sIHMxID0gc2VsZWN0aW9uWzFdWzFdO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMF0gIT09IGUxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICAgIGdyb3VwLm9uKFwidG91Y2htb3ZlLmJydXNoIHRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5ZG93bmVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFOyB0YWtlcyBwcmlvcml0eSBvdmVyIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSB8fCBtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMSAtIGR4OyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzEgLSBkeDtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczEgLSBkeTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xIC0gZHk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbik7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgaWYgKHNoaWZ0aW5nKSB7XG4gICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2guaGFuZGxlU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gIH07XG5cbiAgYnJ1c2gub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gYnJ1c2g7XG59XG4iLCJpbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZXZlbnQgZnJvbSBcIi4vbm9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWVzZHJhZyh2aWV3LCBub2NsaWNrKSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgaWYgKG5vY2xpY2spIHtcbiAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7IH0sIDApO1xuICB9XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgZGVsZXRlIHJvb3QuX19ub3NlbGVjdDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBzZWxlY3Rpb24pIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xufVxuIiwiaW1wb3J0IHttZWFuLCBxdWFudGlsZSwgZGV2aWF0aW9ufSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tlcm5lbF8oc3RhdGlzdGljcylcbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvS2VybmVsX2RlbnNpdHlfZXN0aW1hdGlvblxuZXhwb3J0IGNvbnN0IGtlcm5lbCA9IHtcbiAgICBlcGFuZWNobmlrb3Y6IGZ1bmN0aW9uKHUpe3JldHVybiBNYXRoLmFicyh1KSA8PSAxPyAoMy80KSooMS11KnUpOjB9LFxuICAgIGdhdXNzaWFuOiBmdW5jdGlvbih1KXtyZXR1cm4gMS9NYXRoLnNxcnQoMipNYXRoLlBJKSpNYXRoLmV4cCgtLjUqdSp1KX1cbn07XG5cbi8vIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL3NjaWVuY2UuanMvYmxvYi9tYXN0ZXIvc3JjL3N0YXRzL2JhbmR3aWR0aC5qc1xuZXhwb3J0IGNvbnN0IGtlcm5lbEJhbmR3aWR0aCA9IHtcbiAgICAvLyBCYW5kd2lkdGggc2VsZWN0b3JzIGZvciBHYXVzc2lhbiBrZXJuZWxzLlxuICAgIG5yZDogZnVuY3Rpb24oeCkge1xuICAgICAgICBsZXQgaXFyID0gcXVhbnRpbGUoeCwgMC43NSkgLSBxdWFudGlsZSh4LCAwLjI1KTtcbiAgICAgICAgbGV0IGggPSBpcXIgLyAxLjM0O1xuICAgICAgICByZXR1cm4gMS4wNiAqIE1hdGgubWluKGRldmlhdGlvbih4KSwgaCkgKiBNYXRoLnBvdyh4Lmxlbmd0aCwgLTEvNSk7XG4gICAgfVxufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGtlcm5lbDogdGhlIGtlcm5lbCBmdW5jdGlvbiwgc3VjaCBhcyBnYXVzc2lhblxuICogQHBhcmFtIFg6IGxpc3Qgb2YgYmluc1xuICogQHBhcmFtIGg6IHRoZSBiYW5kd2lkdGgsIGVpdGhlciBhIG51bWVyaWNhbCB2YWx1ZSBnaXZlbiBieSB0aGUgdXNlciBvciBjYWxjdWxhdGVkIHVzaW5nIHRoZSBmdW5jdGlvbiBrZXJuZWxCYW5kd2lkdGhcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn06IHRoZSBrZXJuZWwgZGVuc2l0eSBlc3RpbWF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtlcm5lbERlbnNpdHlFc3RpbWF0b3Ioa2VybmVsLCBYLCBoKXtcbiAgICByZXR1cm4gZnVuY3Rpb24oVikge1xuICAgICAgICAvLyBYIGlzIHRoZSBiaW5zXG4gICAgICAgIHJldHVybiBYLm1hcCgoeCkgPT4gW3gsIG1lYW4oViwgKHYpID0+IGtlcm5lbCgoeC12KS9oKSkvaF0pO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSBuLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgaWYgKG0pIHJldHVybiBzdW0gLyBtO1xufVxuIiwiaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXAge1xuICAgIGNvbnN0cnVjdG9yKGlkLCB2ZXJib3NlPWZhbHNlLCBvZmZzZXRYPTMwLCBvZmZzZXRZPS00MCwgZHVyYXRpb249MTAwKXtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnZlcmJvc2UgPSB2ZXJib3NlO1xuICAgICAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgfVxuXG4gICAgc2hvdyhpbmZvKSB7XG4gICAgICAgIGlmKHRoaXMudmVyYm9zZSkgY29uc29sZS5sb2coaW5mbyk7XG4gICAgICAgIHRoaXMuZWRpdChpbmZvKTtcbiAgICAgICAgdGhpcy5tb3ZlKCk7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lXCIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMS4wKVxuXG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZXZlbnQucGFnZVgsIHkgPSBldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBjb25zdCB0ID0gc2VsZWN0KCcjJyt0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBgJHt4fXB4YClcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBgJHt5fXB4YClcbiAgICB9XG5cbiAgICBlZGl0KGluZm8pIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5odG1sKGluZm8pXG4gICAgfVxufVxuXG4iLCIvKipcbiAqIENyZWF0ZSBhIHRvb2xiYXJcbiAqIFRoaXMgY2xhc3MgdXNlcyBhIGxvdCBvZiBqUXVlcnkgZm9yIGRvbSBlbGVtZW50IG1hbmlwdWxhdGlvblxuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3BhcnNlQ3NzU3R5bGVzfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21JZCwgdG9vbHRpcD11bmRlZmluZWQsIHZlcnRpY2FsPWZhbHNlKXtcbiAgICAgICAgJChgIyR7ZG9tSWR9YCkuc2hvdygpOyAvLyBpZiBoaWRkZW5cblxuICAgICAgICAvLyBhZGQgYSBuZXcgYmFyZ3JvdXAgZGl2IHRvIGRvbUlEIHdpdGggYm9vdHN0cmFwIGJ1dHRvbiBjbGFzc2VzXG4gICAgICAgIGNvbnN0IGJ0bkNsYXNzZXMgPSB2ZXJ0aWNhbD8nYnRuLWdyb3VwLXZlcnRpY2FsIGJ0bi1ncm91cC1zbSc6ICdidG4tZ3JvdXAgYnRuLWdyb3VwLXNtJztcbiAgICAgICAgdGhpcy5iYXIgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhidG5DbGFzc2VzKS5hcHBlbmRUbyhgIyR7ZG9tSWR9YCk7XG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IHt9O1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRvd25sb2FkIGJ1dHRvbiBmb3IgU1ZHXG4gICAgICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBidXR0b24gZG9tIElEXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IHRoZSBTVkcgZG9tIElEIHRvIGdyYWIgYW5kIGRvd25sb2FkXG4gICAgICogQHBhcmFtIG91dGZpbGVOYW1lIHtTdHJpbmd9IHRoZSBkb3dubG9hZCBmaWxlIG5hbWVcbiAgICAgKiBAcGFyYW0gY2xvbmVJZCB7U3RyaW5nfSB0aGUgY2xvbmVkIFNWRyBkb20gSURcbiAgICAgKiBAcGFyYW0gaWNvbiB7U3RyaW5nfSBhIGZvbnRhd2Vzb21lJ3MgaWNvbiBjbGFzcyBuYW1lXG4gICAgICovXG4gICAgY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWQsIHN2Z0lkLCBvdXRmaWxlTmFtZSwgY2xvbmVJZCwgaWNvbj0nZmEtZG93bmxvYWQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9IHRoaXMuY3JlYXRlQnV0dG9uKGlkLCBpY29uKTtcbiAgICAgICAgc2VsZWN0KGAjJHtpZH1gKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFN2ZyhzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcIkRvd25sb2FkXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVSZXNldEJ1dHRvbihpZCwgY2FsbGJhY2ssIGljb249J2ZhLWV4cGFuZC1hcnJvd3MtYWx0Jyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBjYWxsYmFjaylcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcIlJlc2V0IHRoZSBzY2FsZXNcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxuICAgICAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgYnV0dG9uJ3MgaWRcbiAgICAgKiBAcGFyYW0gaWNvbiB7U3RyaW5nfSBhIGZvbnRhd2Vzb21lIGljb24gY2xhc3NcbiAgICAgKiBEZXBlbmRlbmNpZXM6IEJvb3RzdHJhcCwgalF1ZXJ5LCBGb250YXdlc29tZVxuICAgICAqL1xuICAgIGNyZWF0ZUJ1dHRvbihpZCwgaWNvbj0nZmEtZG93bmxvYWQnKXtcbiAgICAgICAgY29uc3QgJGJ1dHRvbiA9ICQoJzxhLz4nKS5hdHRyKCdpZCcsIGlkKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdidG4gYnRuLWRlZmF1bHQnKS5hcHBlbmRUbyh0aGlzLmJhcik7XG4gICAgICAgICQoJzxpLz4nKS5hZGRDbGFzcyhgZmEgJHtpY29ufWApLmFwcGVuZFRvKCRidXR0b24pO1xuICAgICAgICB0aGlzLmJ1dHRvbnNbaWRdID0gJGJ1dHRvbjtcbiAgICAgICAgcmV0dXJuICRidXR0b247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYXR0YWNoIGEgdG9vbHRpcCBkb20gd2l0aCB0aGUgdG9vbGJhclxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGF0dGFjaFRvb2x0aXAodG9vbHRpcCl7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG93bmxvYWQgU1ZHIG9ialxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRFxuICAgICAqIEBwYXJhbSBmaWxlTmFtZSB7U3RyaW5nfSB0aGUgb3V0cHV0IGZpbGUgbmFtZVxuICAgICAqIEBwYXJhbSBjbG9uZUlkIHtTdHJpbmd9IHRoZSB0ZW1wb3JhcnkgZG9tIElEIHRvIGNvcHkgdGhlIFNWRyB0b1xuICAgICAqIERlcGVuZGVuY2llczogRmlsZVNhdmVyXG4gICAgICovXG4gICAgZG93bmxvYWRTdmcoc3ZnSWQsIGZpbGVOYW1lLCBjbG9uZUlkKXtcbiAgICAgICAgLy8gbGV0IHN2Z09iaiA9ICQoJCgkKGAke1wiI1wiICtzdmdJZH0gc3ZnYCkpWzBdKTsgLy8gY29tcGxpY2F0ZWQgalF1ZXJ5IHRvIGdldCB0byB0aGUgU1ZHIG9iamVjdFxuICAgICAgICBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfWApKVswXSk7XG4gICAgICAgIGxldCAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgICAgICAuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG5cbiAgICAgICAgLy8gcGFyc2UgYW5kIGFkZCBhbGwgdGhlIENTUyBzdHlsaW5nIHVzZWQgYnkgdGhlIFNWR1xuICAgICAgICBsZXQgc3R5bGVzID0gcGFyc2VDc3NTdHlsZXMoc3ZnT2JqLmdldCgpKTtcbiAgICAgICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgICAgICQoXCIjXCIgKyBjbG9uZUlkKS5odG1sKCcnKS5oaWRlKCk7IC8vIG1ha2Ugc3VyZSB0aGUgY29weUlEIGlzIGludmlzaWJsZVxuICAgICAgICBsZXQgc3ZnSHRtbCA9ICQoYCMke2Nsb25lSWR9YCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICAgICAgbGV0IHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgICAgICBzYXZlQXMoc3ZnQmxvYiwgZmlsZU5hbWUpOyAvLyB0aGlzIGlzIGEgRmlsZVNhdmVyIGZ1bmN0aW9uLi4uLlxuXG4gICAgICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICAgICAkKGAjJHtjbG9uZUlkfWApLmh0bWwoJycpLmhpZGUoKTtcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVzIGFuIFNWR1xuICogQHBhcmFtIGlkIHtTdHJpbmd9IGEgRE9NIGVsZW1lbnQgSUQgdGhhdCBzdGFydHMgd2l0aCBhIFwiI1wiXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9XG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1lcmljfVxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIHR3byBhdHRyaWJ1dGVzOiB3aWR0aCBhbmQgaGVpZ2h0XG4gKiBAcmV0dXJuIHtTZWxlY3Rpb259IHRoZSBkMyBzZWxlY3Rpb24gb2JqZWN0IG9mIHRoZSBTVkdcbiAqL1xuXG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIHBhcmVudCBkb20gSURcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY31cbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogbGVmdCwgdG9wXG4gKiBAcGFyYW0gc3ZnSWQge1N0cmluZ31cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ZnKGlkLCB3aWR0aCwgaGVpZ2h0LCBtYXJnaW4sIHN2Z0lkPXVuZGVmaW5lZCl7XG4gICAgaWYgKHN2Z0lkPT09dW5kZWZpbmVkKSBzdmdJZD1gJHtpZH0tc3ZnYDtcbiAgICByZXR1cm4gc2VsZWN0KFwiI1wiK2lkKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuYXR0cihcImlkXCIsIHN2Z0lkKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApXG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBzdmdPYmpcbiAqIEBwYXJhbSBkb3dubG9hZEZpbGVOYW1lIHtTdHJpbmd9XG4gKiBAcGFyYW0gdGVtcERvd25sb2FkRGl2SWQge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkU3ZnKHN2Z09iaiwgZG93bmxvYWRGaWxlTmFtZSwgdGVtcERvd25sb2FkRGl2SWQpe1xuICAgIGNvbnNvbGUubG9nKHN2Z09iaik7XG4gICAgdmFyICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAuYXR0cihcInZlcnNpb25cIiwgXCIxLjFcIilcbiAgICAuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG5cbiAgICAvLyBwYXJzZSBhbmQgYWRkIHRoZSBDU1Mgc3R5bGluZyB1c2VkIGJ5IHRoZSBTVkdcbiAgICB2YXIgc3R5bGVzID0gcGFyc2VDc3NTdHlsZXMoc3ZnT2JqLmdldCgpKTtcbiAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbiAgICB2YXIgc3ZnSHRtbCA9ICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuYXBwZW5kKCRzdmdDb3B5KS5odG1sKCk7XG5cbiAgICB2YXIgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgc2F2ZUFzKHN2Z0Jsb2IsIGRvd25sb2FkRmlsZU5hbWUpO1xuXG4gICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5odG1sKCcnKS5oaWRlKCk7XG59XG4vKipcbiAqIEEgZnVuY3Rpb24gZm9yIHBhcnNpbmcgdGhlIENTUyBzdHlsZSBzaGVldCBhbmQgaW5jbHVkaW5nIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGluIHRoZSBkb3dubG9hZGFibGUgU1ZHLlxuICogQHBhcmFtIGRvbVxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzc1N0eWxlcyAoZG9tKSB7XG4gICAgdmFyIHVzZWQgPSBcIlwiO1xuICAgIHZhciBzaGVldHMgPSBkb2N1bWVudC5zdHlsZVNoZWV0cztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hlZXRzLmxlbmd0aDsgaSsrKSB7IC8vIFRPRE86IHdhbGsgdGhyb3VnaCB0aGlzIGJsb2NrIG9mIGNvZGVcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHNoZWV0c1tpXS5jc3NSdWxlcyA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBydWxlcyA9IHNoZWV0c1tpXS5jc3NSdWxlcztcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydWxlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihydWxlLnN0eWxlKSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcztcbiAgICAgICAgICAgICAgICAgICAgLy9Tb21lIHNlbGVjdG9ycyB3b24ndCB3b3JrLCBhbmQgbW9zdCBvZiB0aGVzZSBkb24ndCBtYXR0ZXIuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcyA9ICQoZG9tKS5maW5kKHJ1bGUuc2VsZWN0b3JUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VkICs9IHJ1bGUuc2VsZWN0b3JUZXh0ICsgXCIgeyBcIiArIHJ1bGUuc3R5bGUuY3NzVGV4dCArIFwiIH1cXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSW4gRmlyZWZveCwgaWYgc3R5bGVzaGVldCBvcmlnaW5hdGVzIGZyb20gYSBkaWZmIGRvbWFpbixcbiAgICAgICAgICAgIC8vIHRyeWluZyB0byBhY2Nlc3MgdGhlIGNzc1J1bGVzIHdpbGwgdGhyb3cgYSBTZWN1cml0eUVycm9yLlxuICAgICAgICAgICAgLy8gSGVuY2UsIHdlIG11c3QgdXNlIGEgdHJ5L2NhdGNoIHRvIGhhbmRsZSB0aGlzIGluIEZpcmVmb3hcbiAgICAgICAgICAgIGlmIChlLm5hbWUgIT09ICdTZWN1cml0eUVycm9yJykgdGhyb3cgZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gICAgcy5pbm5lckhUTUwgPSBcIjwhW0NEQVRBW1xcblwiICsgdXNlZCArIFwiXFxuXV0+XCI7XG5cbiAgICByZXR1cm4gcztcbn1cbiIsIi8qXG5JbnB1dCBkYXRhIHN0cnVjdHVyZTogYSBsaXN0IG9mIGRhdGEgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG5bXG4gICAge1xuICAgICAgICBncm91cDogXCJncm91cDFcIlxuICAgICAgICBsYWJlbDogXCJkYXRhc2V0IDFcIixcbiAgICAgICAgdmFsdWVzOiBbYSBsaXN0IG9mIG51bWVyaWNhbCB2YWx1ZXNdXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgZ3JvdXA6IFwiZ3JvdXAxXCJcbiAgICAgICAgbGFiZWw6IFwiZGF0YXNldCAyXCIsXG4gICAgICAgIHZhbHVlczogW2EgbGlzdCBvZiBudW1lcmljYWwgdmFsdWVzXVxuICAgICB9LFxuICAgICB7XG4gICAgICAgIGdyb3VwOiBcImdyb3VwMlwiXG4gICAgICAgIGxhYmVsOiBcImRhdGFzZXQgM1wiLFxuICAgICAgICB2YWx1ZXM6IFthIGxpc3Qgb2YgbnVtZXJpY2FsIHZhbHVlc11cbiAgICAgfVxuXVxuKi9cblxuaW1wb3J0IHtleHRlbnQsIG1lZGlhbiwgYXNjZW5kaW5nLCBxdWFudGlsZSwgbWF4LCBtaW59IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtuZXN0fSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzY2FsZUJhbmQsIHNjYWxlTGluZWFyfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7YXJlYX0gZnJvbSBcImQzLXNoYXBlXCI7XG5pbXBvcnQge2F4aXNUb3AsIGF4aXNCb3R0b20sIGF4aXNMZWZ0fSBmcm9tIFwiZDMtYXhpc1wiO1xuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7YnJ1c2h9IGZyb20gXCJkMy1icnVzaFwiO1xuXG5pbXBvcnQge2tlcm5lbERlbnNpdHlFc3RpbWF0b3IsIGtlcm5lbCwga2VybmVsQmFuZHdpZHRofSBmcm9tIFwiLi9rZGVcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JvdXBlZFZpb2xpbiB7XG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3IgZm9yIEdyb3VwZWRWaW9saW5cbiAgICAgKiBAcGFyYW0gZGF0YSB7TGlzdH06IGEgbGlzdCBvZiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogZ3JvdXA6IHtTdHJpbmd9LCBsYWJlbDoge1N0cmluZ30sIHZhbHVlczoge0xpc3R9IG9mIG51bWVyaWNhbCB2YWx1ZXMsIHNpemU6IGludGVnZXIsIG9wdGlvbmFsXG4gICAgICogQHBhcmFtIGdyb3VwSW5mbyB7RGljdGlvbmFyeX06IG1ldGFkYXRhIG9mIHRoZSBncm91cCwgaW5kZXhlZCBieSBncm91cCBJRFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGdyb3VwSW5mbyA9IHt9KXtcbiAgICAgICAgdGhpcy5fc2FuaXR5Q2hlY2soZGF0YSk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXBJbmZvID0gZ3JvdXBJbmZvO1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb20ge0RPTX0gdGhlIFNWRyBkb20gb2JqZWN0IHRvIGFwcGVuZCB0aGUgdmlvbGluIHBsb3QgdG9cbiAgICAgKiBAcGFyYW0gd2lkdGgge0Zsb2F0fVxuICAgICAqIEBwYXJhbSBoZWlnaHQge0Zsb2F0fVxuICAgICAqIEBwYXJhbSB4UGFkZGluZyB7RmxvYXR9IHBhZGRpbmcgb2YgdGhlIHggYXhpc1xuICAgICAqIEBwYXJhbSB4RG9tYWluIHtMaXN0fSB0aGUgb3JkZXIgb2YgWCBncm91cHNcbiAgICAgKiBAcGFyYW0geURvbWFpbiAge0xpc3R9IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgb2YgdGhlIHkgZG9tYWluXG4gICAgICogQHBhcmFtIHlMYWJlbCB7U3RyaW5nfVxuICAgICAqIEBwYXJhbSBzaG93WFxuICAgICAqIEBwYXJhbSBzaG93U3ViWFxuICAgICAqIEBwYXJhbSBzdWJYQW5nbGVcbiAgICAgKiBAcGFyYW0gc2hvd1doaXNrZXJcbiAgICAgKiBAcGFyYW0gc2hvd0RpdmlkZXJcbiAgICAgKiBAcGFyYW0gc2hvd0xlZ2VuZFxuICAgICAqIEBwYXJhbSBzaG93U2l6ZVxuICAgICAqL1xuXG4gICAgcmVuZGVyKGRvbSwgd2lkdGg9NTAwLCBoZWlnaHQ9MzU3LCB4UGFkZGluZz0wLjA1LCB4RG9tYWluPXVuZGVmaW5lZCwgeURvbWFpbj1bLTMsM10sIHlMYWJlbD1cIlkgYXhpc1wiLFxuICAgICAgICAgICBzaG93WD10cnVlLCBzaG93U3ViWD10cnVlLCBzdWJYQW5nbGU9MCxcbiAgICAgICAgICAgc2hvd1doaXNrZXI9ZmFsc2UsIHNob3dEaXZpZGVyPWZhbHNlLCBzaG93TGVnZW5kPWZhbHNlLCBzaG93U2l6ZT1mYWxzZSl7XG5cbiAgICAgICAgLy8gZGVmaW5lIHRoZSByZXNldCBmb3IgdGhpcyBwbG90XG4gICAgICAgIHRoaXMucmVzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKGRvbSwgd2lkdGgsIGhlaWdodCwgeFBhZGRpbmcsIHhEb21haW4sIHlEb21haW4sIHlMYWJlbCwgc2hvd1gsIHNob3dTdWJYLCBzdWJYQW5nbGUsIHNob3dXaGlza2VyLCBzaG93RGl2aWRlciwgc2hvd0xlZ2VuZCk7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvLyBkZWZpbmVzIHRoZSBYLCBzdWJYLCBZLCBaIHNjYWxlc1xuICAgICAgICBpZiAoeURvbWFpbj09PXVuZGVmaW5lZCB8fCAwID09IHlEb21haW4ubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBhbGxWID0gW107XG4gICAgICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZCkgPT4gYWxsViA9IGFsbFYuY29uY2F0KGQudmFsdWVzKSk7XG4gICAgICAgICAgICB5RG9tYWluID0gZXh0ZW50KGFsbFYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmUtb3JnYW5pemVkIHRoaXMuZGF0YSBpbmRleGVkIGJ5IGdyb3Vwc1xuICAgICAgICB0aGlzLmdyb3VwcyA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC5ncm91cClcbiAgICAgICAgICAgIC5lbnRyaWVzKHRoaXMuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5zY2FsZSA9IHtcbiAgICAgICAgICAgIHg6IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAuZG9tYWluKHhEb21haW58fHRoaXMuZ3JvdXBzLm1hcCgoZCkgPT4gZC5rZXkpKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nSW5uZXIoeFBhZGRpbmcpLFxuICAgICAgICAgICAgc3VieDogc2NhbGVCYW5kKCksXG4gICAgICAgICAgICB5OiBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pXG4gICAgICAgICAgICAgICAgLmRvbWFpbih5RG9tYWluKSxcbiAgICAgICAgICAgIHo6IHNjYWxlTGluZWFyKCkgLy8gdGhpcyBpcyB0aGUgdmlvbGluIHdpZHRoLCB0aGUgZG9tYWluIGFuZCByYW5nZSBhcmUgZGV0ZXJtaW5lZCBsYXRlciBpbmRpdmlkdWFsbHkgZm9yIGVhY2ggdmlvbGluXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggZ3JvdXBcbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZy5rZXk7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IGcudmFsdWVzO1xuICAgICAgICAgICAgbGV0IGluZm8gPSB0aGlzLmdyb3VwSW5mb1tncm91cF07IC8vIG9wdGlvbmFsXG4gICAgICAgICAgICBnLmluZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG4gICAgICAgICAgICBpZiAoaW5mbyAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgLy8gcmVuZGVycyBncm91cCBpbmZvIHN1Y2ggYXMgcC12YWx1ZSwgZ3JvdXAgbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSW5mb0RvbSA9IGRvbS5hcHBlbmQoXCJnXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwTGFiZWxzID0gZ3JvdXBJbmZvRG9tLnNlbGVjdEFsbChcIi52aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoWydwdmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpIC8vIENvZGUgcmV2aWV3OiBjb25zaWRlciBtb3ZpbmcgdGhpcyBwYXJ0IHRvIHRoZSBlUVRMIGRhc2hib2FyZFxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmZvWydwdmFsdWVUaHJlc2hvbGQnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZD09J3B2YWx1ZScmJnBhcnNlRmxvYXQoaW5mb1tkXSk8PXBhcnNlRmxvYXQoaW5mb1sncHZhbHVlVGhyZXNob2xkJ10pP1wib3JhbmdlcmVkXCI6XCJTbGF0ZUdyYXlcIlxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnNjYWxlLngoZ3JvdXApICsgdGhpcy5zY2FsZS54LmJhbmR3aWR0aCgpLzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHRoaXMuc2NhbGUueSh5RG9tYWluWzBdKSArIDUwOyAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBgJHtkfTogJHtwYXJzZUZsb2F0KHBhcnNlRmxvYXQoaW5mb1tkXSkudG9QcmVjaXNpb24oMykpLnRvRXhwb25lbnRpYWwoKX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZGVmaW5lcyB0aGUgdGhpcy5zY2FsZS5zdWJ4IGJhc2VkIG9uIHRoaXMuc2NhbGUueFxuICAgICAgICAgICAgdGhpcy5zY2FsZS5zdWJ4XG4gICAgICAgICAgICAgICAgLmRvbWFpbihlbnRyaWVzLm1hcCgoZCkgPT4gZC5sYWJlbCkpXG4gICAgICAgICAgICAgICAgLnJhbmdlUm91bmQoW3RoaXMuc2NhbGUueChncm91cCksIHRoaXMuc2NhbGUueChncm91cCkgKyB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgZW50cnkudmFsdWVzID0gZW50cnkudmFsdWVzLnNvcnQoYXNjZW5kaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3VmlvbGluKGRvbSwgZW50cnksIHNob3dXaGlza2VyLCBnLmluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhZGRzIHRoZSBzdWIteCBheGlzIGlmIHRoZXJlIGFyZSBtb3JlIHRoYW4gb25lIGVudHJpZXNcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSAxNTtcbiAgICAgICAgICAgIGlmIChzaG93U2l6ZSl7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHNpemVTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oZW50cmllcy5tYXAoKGQpID0+IHtyZXR1cm4gZC5zaXplPT11bmRlZmluZWQ/JygwKSc6YCgke2Quc2l6ZXx8MH0pYH0pKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuICAgICAgICAgICAgICAgICBjb25zdCBzaXpleEcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1zaXplLWF4aXNcIilcbiAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgKyBidWZmZXJ9KWApXG4gICAgICAgICAgICAgICAgICAgICAuY2FsbChheGlzQm90dG9tKHNpemVTY2FsZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hvd1N1YlgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gNTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJ4RyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tc3ViLWF4aXNcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwoYXhpc0JvdHRvbSh0aGlzLnNjYWxlLnN1YngpKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdWJYQW5nbGUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnhHLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGByb3RhdGUoJHtzdWJYQW5nbGV9LCAyLCAxMClgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJzIHRoZSB4IGF4aXNcbiAgICAgICAgbGV0IGJ1ZmZlciA9IHNob3dTdWJYPzU1OjA7IC8vIENvZGUgcmV2aWV3OiBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICB0aGlzLnhBeGlzID0gc2hvd1g/YXhpc0JvdHRvbSh0aGlzLnNjYWxlLngpOmF4aXNCb3R0b20odGhpcy5zY2FsZS54KS50aWNrRm9ybWF0KFwiXCIpO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi14LWF4aXMgYXhpcy0teFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCArIGJ1ZmZlcn0pYClcbiAgICAgICAgICAgIC5jYWxsKHRoaXMueEF4aXMpIC8vIHNldCB0aWNrRm9ybWF0KFwiXCIpIHRvIHNob3cgdGljayBtYXJrcyB3aXRob3V0IHRleHQgbGFiZWxzXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoMzAsIC0xMCwgMTApXCIpO1xuXG4gICAgICAgIC8vIGFkZHMgdGhlIHkgQXhpc1xuICAgICAgICBidWZmZXIgPSA1O1xuICAgICAgICB0aGlzLnlBeGlzID0gYXhpc0xlZnQodGhpcy5zY2FsZS55KVxuICAgICAgICAgICAgICAgICAgICAudGlja1ZhbHVlcyh0aGlzLnNjYWxlLnkudGlja3MoNSkpO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi15LWF4aXMgYXhpcy0teVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHtidWZmZXJ9LCAwKWApXG4gICAgICAgICAgICAuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgICAgICAvLyBhZGRzIHRoZSB0ZXh0IGxhYmVsIGZvciB0aGUgeSBheGlzXG4gICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgLTQwKSAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgLTQwKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1heGlzLWxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcbiAgICAgICAgICAgIC50ZXh0KHlMYWJlbCk7XG5cbiAgICAgICAgLy8gcGxvdCBtb3VzZSBldmVudHNcbiAgICAgICAgZG9tLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgIGlmKHRoaXMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgZ3JvdXAgZGl2aWRlcnNcbiAgICAgICAgaWYoc2hvd0RpdmlkZXIpe1xuICAgICAgICAgICAgdGhpcy5fYWRkR3JvdXBEaXZpZGVyKGRvbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgY29sb3IgbGVnZW5kXG4gICAgICAgIGlmIChzaG93TGVnZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBsZWdlbmRHID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwidmlvbGluTGVnZW5kXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAwKWApO1xuXG4gICAgICAgICAgICBsZWdlbmRHLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0zNSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIDYwKih0aGlzLmdyb3Vwc1swXS52YWx1ZXMubGVuZ3RoKSArIDEwKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDI0KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwic2lsdmVyXCIpO1xuXG4gICAgICAgICAgICBjb25zdCBsZWdlbmRzID0gbGVnZW5kRy5zZWxlY3RBbGwoXCIudmlvbGluLWxlZ2VuZFwiKS5kYXRhKHRoaXMuZ3JvdXBzWzBdLnZhbHVlcyk7XG5cblxuICAgICAgICAgICAgY29uc3QgZyA9IGxlZ2VuZHMuZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoXCJ2aW9saW4tbGVnZW5kXCIsIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgdyA9IDEwO1xuICAgICAgICAgICAgZy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiA1ICsgNjAqKGkpICArIHRoaXMuc2NhbGUueC5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtMjgpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHcpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCkgPT4gZC5jb2xvcik7XG5cbiAgICAgICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tbGVnZW5kLXRleHRcIilcbiAgICAgICAgICAgICAgICAudGV4dCgoZCkgPT4gZC5sYWJlbClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IDE3ICsgNjAqKGkpICsgdGhpcy5zY2FsZS54LnJhbmdlKClbMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0yMCk7XG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sdGlwIG9iamVjdFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbHRpcCdzIGRvbSBJRFxuICAgICAqIEByZXR1cm5zIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGNyZWF0ZVRvb2x0aXAoZG9tSWQpe1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChkb21JZCk7XG4gICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuY2xhc3NlZCgndmlvbGluLXRvb2x0aXAnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICAvLyBpZiAodG9vbHRpcCA9PT0gdW5kZWZpbmVkKSB0b29sdGlwID0gdGhpcy5jcmVhdGVUb29sdGlwKGRvbUlkKTtcbiAgICAgICAgdGhpcy50b29sYmFyID0gbmV3IFRvb2xiYXIoZG9tSWQsIHRvb2x0aXApO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGJydXNoIHRvIHRoZSBwbG90XG4gICAgICogQHBhcmFtIGRvbSB7RDN9IERvbSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkQnJ1c2goZG9tKXtcbiAgICAgICAgY29uc3QgdGhlQnJ1c2ggPSBicnVzaCgpO1xuICAgICAgICB0aGVCcnVzaC5vbihcImVuZFwiLCAoKT0+e3RoaXMuem9vbShkb20sIHRoZUJydXNoKX0pO1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpXG4gICAgICAgICAgICAuY2FsbCh0aGVCcnVzaCk7XG4gICAgfVxuXG4gICAgem9vbShkb20sIHRoZUJydXNoKXtcbiAgICAgICAgbGV0IHMgPSBldmVudC5zZWxlY3Rpb24sXG4gICAgICAgICAgICBpZGVsVGltZW91dCxcbiAgICAgICAgICAgIGlkZWxEZWxheSA9IDM1MDtcbiAgICAgICAgaWYgKHRoZUJydXNoID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFzKSB7XG4gICAgICAgICAgICBpZiAoIWlkZWxUaW1lb3V0KSByZXR1cm4gaWRlbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZGVsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9LCBpZGVsRGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgY3VycmVudCBzY2FsZXMnIGRvbWFpbnMgYmFzZWQgb24gdGhlIGJydXNoZWQgd2luZG93XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnguZG9tYWluKHRoaXMuc2NhbGUueC5kb21haW4oKS5maWx0ZXIoKGQsIGkpPT57XG4gICAgICAgICAgICAgICAgICBjb25zdCBsb3dCb3VuZCA9IE1hdGguZmxvb3Ioc1swXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXBwZXJCb3VuZCA9IE1hdGguZmxvb3Ioc1sxXVswXS90aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPj0gbG93Qm91bmQgJiYgaSA8PXVwcGVyQm91bmQ7XG4gICAgICAgICAgICB9KSk7IC8vIFRPRE86IGFkZCBjb21tZW50c1xuXG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLmZsb29yKHRoaXMuc2NhbGUueS5pbnZlcnQoc1sxXVsxXSkpO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5mbG9vcih0aGlzLnNjYWxlLnkuaW52ZXJ0KHNbMF1bMV0pKTtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueS5kb21haW4oW21pbiwgbWF4XSk7IC8vIHRvZG86IGRlYnVnXG5cbiAgICAgICAgICAgIGRvbS5zZWxlY3QoXCIuYnJ1c2hcIikuY2FsbCh0aGVCcnVzaC5tb3ZlLCBudWxsKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgIC8vIHpvb21cbiAgICAgICAgbGV0IHQgPSBkb20udHJhbnNpdGlvbigpLmR1cmF0aW9uKDc1MCk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teFwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy54QXhpcyk7XG4gICAgICAgIGRvbS5zZWxlY3QoXCIuYXhpcy0teVwiKS50cmFuc2l0aW9uKHQpLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZ2csIGkpPT4ge1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gZ2cua2V5O1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBnZy52YWx1ZXM7XG5cbiAgICAgICAgICAgIC8vIHJlLWRlZmluZSB0aGUgc3VieCdzIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnN1YnhcbiAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZChbdGhpcy5zY2FsZS54KGdyb3VwKSwgdGhpcy5zY2FsZS54KGdyb3VwKSArIHRoaXMuc2NhbGUueC5iYW5kd2lkdGgoKV0pO1xuXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT0gZW50cnkudmFsdWVzLmxlbmd0aCkgcmV0dXJuOyAvLyBubyBmdXJ0aGVyIHJlbmRlcmluZyBpZiB0aGlzIGdyb3VwIGhhcyBubyBlbnRyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgZ0luZGV4ID0gdGhpcy5zY2FsZS54LmRvbWFpbigpLmluZGV4T2YoZ3JvdXApO1xuXG5cbiAgICAgICAgICAgICAgICAvLyByZS1kZWZpbmUgdGhlIHNjYWxlLnoncyByYW5nZVxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUuelxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgdmlvbGluXG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IGRvbS5zZWxlY3QoYCN2aW9saW4ke2dnLmluZGV4fS0ke2VudHJ5LmxhYmVsfWApO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpblwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgYXJlYSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAueDAoKGQpID0+IHRoaXMuc2NhbGUueihkWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC54MSgoZCkgPT4gdGhpcy5zY2FsZS56KC1kWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC55KChkKSA9PiB0aGlzLnNjYWxlLnkoZFswXSkpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgICAgIC8vIHJlLXJlbmRlciB0aGUgYm94IHBsb3RcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgICAgICAgICAgY29uc3QgcTEgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuMjUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHEzID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjc1KTtcbiAgICAgICAgICAgICAgICBjb25zdCB6ID0gMC4xO1xuICAgICAgICAgICAgICAgIGcuc2VsZWN0KFwiLnZpb2xpbi1pclwiKVxuICAgICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHRoaXMuc2NhbGUueShxMykpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5hYnModGhpcy5zY2FsZS56KC16KSAtIHRoaXMuc2NhbGUueih6KSkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIE1hdGguYWJzKHRoaXMuc2NhbGUueShxMykgLSB0aGlzLnNjYWxlLnkocTEpKSk7XG5cbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgICAgICBjb25zdCBtZWQgPSBtZWRpYW4oZW50cnkudmFsdWVzKTtcbiAgICAgICAgICAgICAgICBnLnNlbGVjdChcIi52aW9saW4tbWVkaWFuXCIpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLnNjYWxlLnooeikpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIHZpb2xpbiBhbmQgYm94IHBsb3RzXG4gICAgICogQHBhcmFtIGRvbSB7RDMgRE9NfVxuICAgICAqIEBwYXJhbSBlbnRyeSB7T2JqZWN0fSB3aXRoIGF0dHJzOiB2YWx1ZXMsIGxhYmVsXG4gICAgICogQHBhcmFtIHNob3dXaGlza2VyIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdWaW9saW4oZG9tLCBlbnRyeSwgc2hvd1doaXNrZXIsIGdJbmRleCl7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHZlcnRpY2VzIGZvciB0aGUgdmlvbGluIHBhdGggdXNlIGEga2RlXG4gICAgICAgIGxldCBrZGUgPSBrZXJuZWxEZW5zaXR5RXN0aW1hdG9yKFxuICAgICAgICAgICAga2VybmVsLmdhdXNzaWFuLFxuICAgICAgICAgICAgdGhpcy5zY2FsZS55LnRpY2tzKDEwMCksIC8vIHVzZSB1cCB0byAxMDAgdmVydGljZXMgYWxvbmcgdGhlIFkgYXhpcyAodG8gY3JlYXRlIHRoZSB2aW9saW4gcGF0aClcbiAgICAgICAgICAgIGtlcm5lbEJhbmR3aWR0aC5ucmQoZW50cnkudmFsdWVzKSAvLyBlc3RpbWF0ZSB0aGUgYmFuZHdpZHRoIGJhc2VkIG9uIHRoZSBkYXRhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGVEb21haW4gPSBleHRlbnQoZW50cnkudmFsdWVzKTsgLy8gZ2V0IHRoZSBtYXggYW5kIG1pbiBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBrZGUoZW50cnkudmFsdWVzKS5maWx0ZXIoKGQpPT5kWzBdPmVEb21haW5bMF0mJmRbMF08ZURvbWFpblsxXSk7IC8vIGZpbHRlciB0aGUgdmVydGljZXMgdGhhdCBhcmVuJ3QgaW4gdGhlIGVudHJ5LnZhbHVlc1xuXG4gICAgICAgIC8vIGRlZmluZSB0aGUgeiBzY2FsZSAtLSB0aGUgdmlvbGluIHdpZHRoXG4gICAgICAgIGxldCB6TWF4ID0gbWF4KHZlcnRpY2VzLCAoZCk9Pk1hdGguYWJzKGRbMV0pKTsgLy8gZmluZCB0aGUgYWJzKHZhbHVlKSBpbiBlbnRyeS52YWx1ZXNcbiAgICAgICAgdGhpcy5zY2FsZS56XG4gICAgICAgICAgICAuZG9tYWluKFstek1heCwgek1heF0pXG4gICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCksIHRoaXMuc2NhbGUuc3VieChlbnRyeS5sYWJlbCkgKyB0aGlzLnNjYWxlLnN1YnguYmFuZHdpZHRoKCldKTtcblxuICAgICAgICAvLyB2aXN1YWwgcmVuZGVyaW5nXG4gICAgICAgIGNvbnN0IHZpb2xpbkcgPSBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgYHZpb2xpbiR7Z0luZGV4fS0ke2VudHJ5LmxhYmVsfWApO1xuXG4gICAgICAgIGxldCB2aW9saW4gPSBhcmVhKClcbiAgICAgICAgICAgIC54MCgoZCkgPT4gdGhpcy5zY2FsZS56KGRbMV0pKVxuICAgICAgICAgICAgLngxKChkKSA9PiB0aGlzLnNjYWxlLnooLWRbMV0pKVxuICAgICAgICAgICAgLnkoKGQpID0+IHRoaXMuc2NhbGUueShkWzBdKSk7XG5cbiAgICAgICAgY29uc3QgdlBhdGggPSB2aW9saW5HLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgIC5kYXR1bSh2ZXJ0aWNlcylcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2aW9saW4pXG4gICAgICAgICAgICAuY2xhc3NlZChcInZpb2xpblwiLCB0cnVlKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoKT0+e1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5jb2xvciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZW50cnkuY29sb3I7XG4gICAgICAgICAgICAgICAgLy8gYWx0ZXJuYXRlIHRoZSBvZGQgYW5kIGV2ZW4gY29sb3JzLCBtYXliZSB3ZSBkb24ndCB3YW50IHRoaXMgZmVhdHVyZVxuICAgICAgICAgICAgICAgIGlmKGdJbmRleCUyID09IDApIHJldHVybiBcIiM5MGMxYzFcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIjOTRhOGI4XCI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBib3hwbG90XG4gICAgICAgIGNvbnN0IHExID0gcXVhbnRpbGUoZW50cnkudmFsdWVzLCAwLjI1KTtcbiAgICAgICAgY29uc3QgcTMgPSBxdWFudGlsZShlbnRyeS52YWx1ZXMsIDAuNzUpO1xuICAgICAgICBjb25zdCB6ID0gdGhpcy5zY2FsZS56LmRvbWFpbigpWzFdLzM7XG5cbiAgICAgICAgaWYoc2hvd1doaXNrZXIpe1xuICAgICAgICAgICAgLy8gdGhlIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMgb2YgZW50cnkudmFsdWVzXG4gICAgICAgICAgICBjb25zdCBpcXIgPSBNYXRoLmFicyhxMy1xMSk7XG4gICAgICAgICAgICBjb25zdCB1cHBlciA9IG1heChlbnRyeS52YWx1ZXMuZmlsdGVyKChkKT0+ZDxxMysoaXFyKjEuNSkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyID0gbWluKGVudHJ5LnZhbHVlcy5maWx0ZXIoKGQpPT5kPnExLShpcXIqMS41KSkpO1xuICAgICAgICAgICAgZG9tLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcIndoaXNrZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuc2NhbGUueigwKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHRoaXMuc2NhbGUueigwKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHRoaXMuc2NhbGUueSh1cHBlcikpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkobG93ZXIpKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIiNmZmZcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbnRlcnF1YXJ0aWxlIHJhbmdlXG4gICAgICAgIHZpb2xpbkcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuc2NhbGUueigteikpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgdGhpcy5zY2FsZS55KHEzKSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgTWF0aC5hYnModGhpcy5zY2FsZS56KC16KS10aGlzLnNjYWxlLnooeikpKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgTWF0aC5hYnModGhpcy5zY2FsZS55KHEzKSAtIHRoaXMuc2NhbGUueShxMSkpKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInZpb2xpbi1pclwiKTtcblxuICAgICAgICAvLyBtZWRpYW5cbiAgICAgICAgY29uc3QgbWVkID0gbWVkaWFuKGVudHJ5LnZhbHVlcyk7XG4gICAgICAgIHZpb2xpbkcuYXBwZW5kKFwibGluZVwiKSAvLyB0aGUgbWVkaWFuIGxpbmVcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5zY2FsZS56KC16KSlcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5zY2FsZS56KHopKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB0aGlzLnNjYWxlLnkobWVkKSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5zY2FsZS55KG1lZCkpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidmlvbGluLW1lZGlhblwiKTtcblxuICAgICAgICAvLyBtb3VzZSBldmVudHNcbiAgICAgICAgdmlvbGluRy5vbihcIm1vdXNlb3ZlclwiLCAoKT0+e1xuICAgICAgICAgICAgdlBhdGguY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZW50cnkpO1xuICAgICAgICAgICAgaWYodGhpcy50b29sdGlwID09PSB1bmRlZmluZWQpIGNvbnNvbGUud2FybihcIkdyb3VwVmlvbGluIFdhcm5pbmc6IHRvb2x0aXAgbm90IGRlZmluZWRcIik7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuc2hvdyhcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZ3JvdXAgKyBcIjxici8+XCIgK1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5sYWJlbCArIFwiPGJyLz5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTWVkaWFuOiBcIiArIG1lZC50b1ByZWNpc2lvbig0KSArIFwiPGJyLz5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2aW9saW5HLm9uKFwibW91c2VvdXRcIiwgKCk9PntcbiAgICAgICAgICAgIHZQYXRoLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9zYW5pdHlDaGVjayhkYXRhKXtcbiAgICAgICAgY29uc3QgYXR0ciA9IFtcImdyb3VwXCIsIFwibGFiZWxcIiwgXCJ2YWx1ZXNcIl07XG5cbiAgICAgICAgZGF0YS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICBhdHRyLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZFthXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBcIkdyb3VwZWRWaW9saW46IGlucHV0IGRhdGEgZXJyb3IuXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaWYgKDAgPT0gZC52YWx1ZXMubGVuZ3RoKSB0aHJvdyBcIlZpb2xpbjogSW5wdXQgZGF0YSBlcnJvclwiO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfYWRkR3JvdXBEaXZpZGVyKGRvbSl7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IHRoaXMuc2NhbGUueC5kb21haW4oKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IE1hdGguYWJzKHRoaXMuc2NhbGUueCh0aGlzLnNjYWxlLnguZG9tYWluKClbMV0pIC0gdGhpcy5zY2FsZS54KHRoaXMuc2NhbGUueC5kb21haW4oKVswXSkgLSB0aGlzLnNjYWxlLnguYmFuZHdpZHRoKCkpO1xuXG4gICAgICAgIGNvbnN0IGdldFggPSAoZywgaSk9PiB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZ3JvdXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2FsZS54KGcpICsgK3RoaXMuc2NhbGUueC5iYW5kd2lkdGgoKSArIChwYWRkaW5nLzIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLnZsaW5lXCIpLmRhdGEoZ3JvdXBzKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuY2xhc3NlZChcInZsaW5lXCIsIHRydWUpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIGdldFgpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIGdldFgpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIHRoaXMuc2NhbGUueS5yYW5nZSgpWzBdKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB0aGlzLnNjYWxlLnkucmFuZ2UoKVsxXSlcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAoZywgaSk9PmkhPWdyb3Vwcy5sZW5ndGgtMT8xOjApXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJyZ2IoODYsOTgsMTA3KVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjUpXG5cbiAgICB9XG5cblxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRHdGV4VXJscygpe1xuICAgIGNvbnN0IGhvc3QgPSAnaHR0cHM6Ly9kZXYuZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIGVxdGwgRGFzaGJvYXJkIHNwZWNpZmljXG4gICAgICAgIGR5bmVxdGw6IGhvc3QgKyAnYXNzb2NpYXRpb24vZHluZXF0bCcsXG4gICAgICAgIHNucDogaG9zdCArICdyZWZlcmVuY2UvdmFyaWFudD9mb3JtYXQ9anNvbiZzbnBJZD0nLFxuICAgICAgICB2YXJpYW50SWQ6IGhvc3QgKyAncmVmZXJlbmNlL3ZhcmlhbnQ/Zm9ybWF0PWpzb24mdmFyaWFudElkPScsXG5cbiAgICAgICAgLy8gdHJhbnNjcmlwdCwgZXhvbiwganVuY3Rpb24gZXhwcmVzc2lvbiBzcGVjaWZpY1xuICAgICAgICBleG9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuRXhvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdEV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIGp1bmN0aW9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG4gICAgICAgIHRyYW5zY3JpcHQ6IGhvc3QgKyAncmVmZXJlbmNlL3RyYW5zY3JpcHQ/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGV4b246IGhvc3QgKyAncmVmZXJlbmNlL2V4b24/ZGF0YXNldElkPWd0ZXhfdjcmZ2VuY29kZUlkPScsXG4gICAgICAgIGdlbmVNb2RlbDogaG9zdCArICdyZWZlcmVuY2UvY29sbGFwc2VkR2VuZU1vZGVsRXhvbj91bmZpbHRlcmVkPWZhbHNlJmRhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuICAgICAgICBnZW5lTW9kZWxVbmZpbHRlcmVkOiBob3N0ICsgJ3JlZmVyZW5jZS9jb2xsYXBzZWRHZW5lTW9kZWxFeG9uP3VuZmlsdGVyZWQ9dHJ1ZSZkYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gdmlvbGluIHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiBoZWF0IG1hcCBzcGVjaWZpY1xuICAgICAgICBtZWRHZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuR2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZwYWdlX3NpemU9MTAwMDAnLFxuXG4gICAgICAgIC8vIHRvcCBleHByZXNzZWQgZ2VuZSBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIHRvcEluVGlzc3VlRmlsdGVyZWQ6IGhvc3QgKyAnZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lP2RhdGFzZXRJZD1ndGV4X3Y3JmZpbHRlck10R2VuZT10cnVlJnNvcnRfYnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlX3NpemU9NTAmdGlzc3VlU2l0ZURldGFpbElkPScsXG4gICAgICAgIHRvcEluVGlzc3VlOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT9kYXRhc2V0SWQ9Z3RleF92NyZzb3J0X2J5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZV9zaXplPTUwJnRpc3N1ZVNpdGVEZXRhaWxJZD0nLFxuXG4gICAgICAgIGdlbmVJZDogaG9zdCArICdyZWZlcmVuY2UvZ2VuZUlkP2Zvcm1hdD1qc29uJnJlbGVhc2U9djcmZ2VuZUlkPScsXG5cbiAgICAgICAgLy8gdGlzc3VlIG1lbnUgc3BlY2lmaWNcbiAgICAgICAgdGlzc3VlOiAgaG9zdCArICdtZXRhZGF0YS90aXNzdWVTaXRlRGV0YWlsP2Zvcm1hdD1qc29uJyxcblxuICAgICAgICB0aXNzdWVTaXRlczogaG9zdCArICdtZXRhZGF0YS90aXNzdWVTaXRlRGV0YWlsP2Zvcm1hdD1qc29uJyxcblxuICAgICAgICAvLyBsb2NhbCBzdGF0aWMgZmlsZXNcbiAgICAgICAgc2FtcGxlOiAndG1wU3VtbWFyeURhdGEvZ3RleC5TYW1wbGUuY3N2JyxcbiAgICAgICAgcm5hc2VxQ3JhbTogJ3RtcFN1bW1hcnlEYXRhL3JuYXNlcV9jcmFtX2ZpbGVzX3Y3X2RiR2FQXzAxMTUxNi50eHQnLFxuICAgICAgICB3Z3NDcmFtOiAndG1wU3VtbWFyeURhdGEvd2dzX2NyYW1fZmlsZXNfdjdfaGczOF9kYkdhUF8wMTE1MTYudHh0JyxcblxuICAgICAgICAvLyBmaXJlQ2xvdWRcbiAgICAgICAgZmNCaWxsaW5nOiAnaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvcHJvZmlsZS9iaWxsaW5nJyxcbiAgICAgICAgZmNXb3JrU3BhY2U6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS93b3Jrc3BhY2VzJyxcbiAgICAgICAgZmNQb3J0YWxXb3JrU3BhY2U6ICdodHRwczovL3BvcnRhbC5maXJlY2xvdWQub3JnLyN3b3Jrc3BhY2VzJ1xuICAgIH1cbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2VuZXMgZnJvbSBHVEV4IHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBnZW5lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lcyhkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVJZCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdHZW5lIHdlYiBzZXJ2aWNlIHBhcnNpbmcgZXJyb3InO1xuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWVzXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiB0aXNzdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpc3N1ZXMoZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICd0aXNzdWVTaXRlRGV0YWlsJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZVRpc3N1ZXMgaW5wdXQgZXJyb3IuJztcbiAgICBjb25zdCB0aXNzdWVzID0gZGF0YVthdHRyXTtcblxuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFsndGlzc3VlU2l0ZURldGFpbElkJywgJ3Rpc3N1ZVNpdGVEZXRhaWwnLCAnY29sb3JIZXgnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VUaXNzdWUgYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRpc3N1ZXM7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZSBncm91cHNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIGZvckVxdGwge0Jvb2xlYW59XG4gKiBAcmV0dXJucyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsPWZhbHNlKXtcbiAgICAvLyB0aGUgbGlzdCBvZiBpbnZhbGlkZSBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIGNvbnN0IGludmFsaWRUaXNzdWVzID0gWydCbGFkZGVyJywgJ0NlcnZpeF9FY3RvY2Vydml4JywgJ0NlcnZpeF9FbmRvY2Vydml4JywgJ0ZhbGxvcGlhbl9UdWJlJywgJ0tpZG5leV9Db3J0ZXgnXTtcblxuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlU2l0ZURldGFpbCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2VUaXNzdWVTaXRlcyBpbnB1dCBlcnJvci4nO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBmb3JFcXRsPT1mYWxzZT9kYXRhW2F0dHJdOmRhdGFbYXR0cl0uZmlsdGVyKChkKT0+e3JldHVybiAhaW52YWxpZFRpc3N1ZXMuaW5jbHVkZXMoZC50aXNzdWVTaXRlRGV0YWlsSWQpfSk7IC8vIGFuIGFycmF5IG9mIHRpc3N1ZVNpdGVEZXRhaWxJZCBvYmplY3RzXG5cbiAgICAvLyBidWlsZCB0aGUgdGlzc3VlR3JvdXBzIGxvb2t1cCBkaWN0aW9uYXJ5IGluZGV4ZWQgYnkgdGhlIHRpc3N1ZSBncm91cCBuYW1lIChpLmUuIHRoZSB0aXNzdWUgbWFpbiBzaXRlIG5hbWUpXG4gICAgWyd0aXNzdWVTaXRlJywgJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsICd0aXNzdWVTaXRlRGV0YWlsJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyBgcGFyc2VUaXNzdWVTaXRlcyBhdHRyIGVycm9yLiAke2R9IGlzIG5vdCBmb3VuZGA7XG4gICAgfSk7XG4gICAgbGV0IHRpc3N1ZUdyb3VwcyA9IHRpc3N1ZXMucmVkdWNlKChhcnIsIGQpPT57XG4gICAgICAgIGxldCBncm91cE5hbWUgPSBkLnRpc3N1ZVNpdGU7XG4gICAgICAgIGxldCBzaXRlID0ge1xuICAgICAgICAgICAgaWQ6IGQudGlzc3VlU2l0ZURldGFpbElkLFxuICAgICAgICAgICAgbmFtZTogZC50aXNzdWVTaXRlRGV0YWlsXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGdyb3VwTmFtZSkpIGFycltncm91cE5hbWVdID0gW107IC8vIGluaXRpYXRlIGFuIGFycmF5XG4gICAgICAgIGFycltncm91cE5hbWVdLnB1c2goc2l0ZSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwge30pO1xuXG4gICAgLy8gbW9kaWZ5IHRoZSB0aXNzdWUgZ3JvdXBzIHRoYXQgaGF2ZSBvbmx5IGEgc2luZ2xlIHNpdGVcbiAgICAvLyBieSByZXBsYWNpbmcgdGhlIGdyb3VwJ3MgbmFtZSB3aXRoIHRoZSBzaW5nbGUgc2l0ZSdzIG5hbWUgLS0gZm9yIGEgYmV0dGVyIEFscGhhYmV0aWNhbCBvcmRlciBvZiB0aGUgdGlzc3VlIGdyb3Vwc1xuXG4gICAgT2JqZWN0LmtleXModGlzc3VlR3JvdXBzKS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAodGlzc3VlR3JvdXBzW2RdLmxlbmd0aCA9PSAxKXsgLy8gYSBzaW5nbGUtc2l0ZSBncm91cFxuICAgICAgICAgICAgbGV0IHNpdGUgPSB0aXNzdWVHcm91cHNbZF1bMF07IC8vIHRoZSBzaW5nbGUgc2l0ZVxuICAgICAgICAgICAgZGVsZXRlIHRpc3N1ZUdyb3Vwc1tkXTsgLy8gcmVtb3ZlIHRoZSBvbGQgZ3JvdXAgaW4gdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgICAgIHRpc3N1ZUdyb3Vwc1tzaXRlLm5hbWVdID0gW3NpdGVdOyAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgd2l0aCB0aGUgc2l0ZSdzIG5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRpc3N1ZUdyb3VwcztcblxufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBleG9uc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTW9kZWxFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2NvbGxhcHNlZEdlbmVNb2RlbEV4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKXtcbiAgICAgICAgY29uc29sZS5lcnJvcihqc29uKTtcbiAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWydzdGFydCcsICdlbmQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzZSBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBqdW5jdGlvbnNcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb25zXG4gKiAvLyBqdW5jdGlvbiBhbm5vdGF0aW9ucyBhcmUgbm90IHN0b3JlZCBpbiBNb25nb1xuICAgIC8vIHNvIGhlcmUgd2UgdXNlIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlIHRvIHBhcnNlIHRoZSBqdW5jdGlvbiBJRCBmb3IgaXRzIGdlbm9taWMgbG9jYXRpb25cbiAgICAvLyBhc3N1bWluZyB0aGF0IGVhY2ggdGlzc3VlIGhhcyB0aGUgc2FtZSBqdW5jdGlvbnMsXG4gICAgLy8gdG8gZ3JhYiBhbGwgdGhlIGtub3duIGp1bmN0aW9ucyBvZiBhIGdlbmUsIHdlIG9ubHkgbmVlZCB0byBxdWVyeSBvbmUgdGlzc3VlXG4gICAgLy8gaGVyZSB3ZSBhcmJpdHJhcmlseSBwaWNrIExpdmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbnMoanNvbil7XG5cbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkp1bmN0aW9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzZSBFcnJvcjogcGFyc2VKdW5jdGlvbnMgaW5wdXQgZXJyb3IuICcgKyBhdHRyO1xuXG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnanVuY3Rpb25JZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIC8vIHVzZSB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUganNvbiBvYmplY3RzIGFzIGEgdGVzdCBjYXNlXG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvblthdHRyXVswXSk7XG4gICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGp1bmN0aW9uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqc29uW2F0dHJdLmZpbHRlcigoZCk9PmQudGlzc3VlU2l0ZURldGFpbElkPT0nTGl2ZXInKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tOiBwb3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21TdGFydDogcG9zWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kOiBwb3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25JZDogZC5qdW5jdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2V4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b24nO1xuICAgIHJldHVybiBqc29uW2F0dHJdLnJlZHVjZSgoYSwgZCk9PntcbiAgICAgICAgLy8gY2hlY2sgcmVxdWlyZWQgYXR0cmlidXRlc1xuICAgICAgICBbJ3RyYW5zY3JpcHRJZCcsICdjaHJvbW9zb21lJywgJ3N0YXJ0JywgJ2VuZCcsICdleG9uTnVtYmVyJywgJ2V4b25JZCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFbZC50cmFuc2NyaXB0SWRdID09PSB1bmRlZmluZWQpIGFbZC50cmFuc2NyaXB0SWRdID0gW107XG4gICAgICAgIGQuY2hyb20gPSBkLmNocm9tb3NvbWU7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgYVtkLnRyYW5zY3JpcHRJZF0ucHVzaChkKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufSBmcm9tIEdURXggd2ViIHNlcnZpY2UgJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBpc29mb3JtIG9iamVjdHMgc29ydGVkIGJ5IGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndHJhbnNjcmlwdCc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUlzb2Zvcm1zIGlucHV0IGVycm9yJyk7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzLCB1c2UgdGhlIGZpcnN0IHRyYW5zY3JpcHQgYXMgdGhlIHRlc3QgY2FzZVxuICAgIFsndHJhbnNjcmlwdElkJywgJ3N0YXJ0JywgJ2VuZCddLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvblthdHRyXS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCBsMSA9IE1hdGguYWJzKGEuZW5kIC0gYS5zdGFydCkgKyAxO1xuICAgICAgICBjb25zdCBsMiA9IE1hdGguYWJzKGIuZW5kIC0gYi5zdGFydCkgKyAxO1xuICAgICAgICByZXR1cm4gLShsMS1sMik7IC8vIHNvcnQgYnkgaXNvZm9ybSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIGZpbmFsIChtYXNrZWQpIGdlbmUgbW9kZWwgZXhvbiBleHByZXNzaW9uXG4gKiBleHByZXNzaW9uIGlzIG5vcm1hbGl6ZWQgdG8gcmVhZHMgcGVyIGtiXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgZXhvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZXhvbnMge0xpc3R9IG9mIGV4b25zIHdpdGggcG9zaXRpb25zXG4gKiBAcGFyYW0gdXNlTG9nIHtib29sZWFufSB1c2UgbG9nMiB0cmFuc2Zvcm1hdGlvblxuICogQHBhcmFtIGFkanVzdCB7TnVtYmVyfSBkZWZhdWx0IDAuMDFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbkV4cHJlc3Npb24oZGF0YSwgZXhvbnMsIHVzZUxvZz10cnVlLCBhZGp1c3Q9MSl7XG4gICAgY29uc3QgZXhvbkRpY3QgPSBleG9ucy5yZWR1Y2UoKGEsIGQpPT57YVtkLmV4b25JZF0gPSBkOyByZXR1cm4gYTt9LCB7fSk7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5FeG9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUV4b25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBleG9uT2JqZWN0cyA9IGRhdGFbYXR0cl07XG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBbJ21lZGlhbicsICdleG9uSWQnLCAndGlzc3VlU2l0ZURldGFpbElkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFleG9uT2JqZWN0c1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUV4b25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgZDtcbiAgICB9KTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBleG9uIGNvdW50c1xuICAgIGV4b25PYmplY3RzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgY29uc3QgZXhvbiA9IGV4b25EaWN0W2QuZXhvbklkXTsgLy8gZm9yIHJldHJpZXZpbmcgZXhvbiBwb3NpdGlvbnNcbiAgICAgICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICAgICAgWydlbmQnLCAnc3RhcnQnXS5mb3JFYWNoKChwKT0+e1xuICAgICAgICAgICAgaWYgKCFleG9uLmhhc093blByb3BlcnR5KHApKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gcG9zaXRpb24gYXR0ciBub3QgZm91bmQ6ICcgKyBwO1xuICAgICAgICB9KTtcbiAgICAgICAgZC5sID0gZXhvbi5lbmQgLSBleG9uLnN0YXJ0ICsgMTtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLm1lZGlhbikvZC5sO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pL2QubDtcbiAgICAgICAgaWYgKHVzZUxvZykgZC52YWx1ZSA9IE1hdGgubG9nMihkLnZhbHVlICsgMSk7XG4gICAgICAgIGQueCA9IGQuZXhvbklkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBleG9uLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZXhvbi5lbmQ7XG4gICAgICAgIGQudW5pdCA9ICdtZWRpYW4gJyArIGQudW5pdCArICcgcGVyIGJhc2UnO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV4b25PYmplY3RzLnNvcnQoKGEsYik9PntcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydDxiLmNocm9tU3RhcnQpIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydD5iLmNocm9tU3RhcnQpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTsgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxufVxuXG4vKipcbiAqIFBhcnNlIGp1bmN0aW9uIG1lZGlhbiByZWFkIGNvdW50IGRhdGFcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn0gcGVyZm9ybSBsb2cgdHJhbnNmb3JtYXRpb25cbiAqIEBwYXJhbSBhZGp1c3Qge051bWJlcn0gZm9yIGhhbmRsaW5nIDAncyB3aGVuIHVzZUxvZyBpcyB0cnVlXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24oZGF0YSwgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkp1bmN0aW9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuXG4gICAgY29uc3QganVuY3Rpb25zID0gZGF0YVthdHRyXTtcblxuICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgaWYgKGp1bmN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IGp1bmN0aW9ucy5sZW5ndGggPT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ05vIGp1bmN0aW9uIGRhdGEgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cblxuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGp1bmN0aW9uIHJlYWQgY291bnRzXG4gICAganVuY3Rpb25zLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnanVuY3Rpb25JZCcsICdtZWRpYW4nLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlciBFcnJvcjogcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IG1lZGlhbiA9IGQubWVkaWFuO1xuICAgICAgICBsZXQgdGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQueCA9IGQuanVuY3Rpb25JZDtcbiAgICAgICAgZC55ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQudmFsdWUgPSB1c2VMb2c/TWF0aC5sb2cxMChOdW1iZXIobWVkaWFuICsgYWRqdXN0KSk6TnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQub3JpZ2luYWxWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgIH0pO1xuXG4gICAgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxuICAgIHJldHVybiBqdW5jdGlvbnMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5qdW5jdGlvbklkPmIuanVuY3Rpb25JZCkgcmV0dXJuIDE7XG4gICAgICAgIGVsc2UgaWYgKGEuanVuY3Rpb25JZDxiLmp1bmN0aW9uSWQpIHJldHVybiAtMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBleHByZXNzaW9uXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIHVzZUxvZ1xuICogQHBhcmFtIGFkanVzdFxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uKGRhdGEsIHVzZUxvZz10cnVlLCBhZGp1c3Q9MSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdQYXJzZSBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFsnbWVkaWFuJywgJ3RyYW5zY3JpcHRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdygnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIHRyYW5zY2lwdCBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihkLm1lZGlhbiArIGFkanVzdCkpOk51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQub3JpZ2luYWxWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UoZGF0YSwgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICB0aHJvdygnUGFyc2UgRXJyb3I6IHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UgaW5wdXQgZXJyb3IuJyk7XG4gICAgfVxuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFsnbWVkaWFuJywgJ3RyYW5zY3JpcHRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdygnUGFyc2UgRXJyb3I6IFJlcXVpcmVkIHRyYW5zY3JpcHQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1lZGlhbiA9IGQubWVkaWFuO1xuICAgICAgICBjb25zdCB0aXNzdWVJZCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLnZhbHVlID0gdXNlTG9nP01hdGgubG9nMTAoTnVtYmVyKG1lZGlhbiArIGFkanVzdCkpOk51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC55ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueCA9IHRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhIHtKc29ufSB3aXRoIGF0dHIgbWVkaWFuR2VuZUV4cHJlc3Npb25cbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHBlcmZvcm1zIGxvZzEwIHRyYW5zZm9ybWF0aW9uXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVkaWFuRXhwcmVzc2lvbihkYXRhLCB1c2VMb2c9dHJ1ZSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAgICAvLyBlcnJvci1jaGVja2luZyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlczpcbiAgICBpZiAoZGF0YVthdHRyXS5sZW5ndGggPT0gMCkgdGhyb3cgJ3BhcnNlTWVkaWFuRXhwcmVzc2lvbiBmaW5kcyBubyBkYXRhLic7XG4gICAgWydtZWRpYW4nLCAndGlzc3VlU2l0ZURldGFpbElkJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkYXRhW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93IGBQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZ3A6ICR7ZH1gO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IHJlc3VsdHMgPSBkYXRhW2F0dHJdO1xuICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihkLm1lZGlhbikgKyBhZGp1c3QpOk51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLnkgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIHVzZUxvZz10cnVlLCBjb2xvcnM9dW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuZVN5bWJvbCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWVzID0gdXNlTG9nP2QuZGF0YS5tYXAoKGRkKT0+e3JldHVybiBNYXRoLmxvZzEwKCtkZCsxKX0pOmQuZGF0YTtcbiAgICAgICAgZC5ncm91cCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmxhYmVsID0gZC5nZW5lU3ltYm9sO1xuICAgICAgICBkLmNvbG9yID0gY29sb3JzPT09dW5kZWZpbmVkPycjOTBjMWMxJzpjb2xvcnNbZC5nZW5jb2RlSWRdO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuIiwiaW1wb3J0IHtqc29ufSBmcm9tIFwiZDMtZmV0Y2hcIjtcbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG4vLyBpbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBHcm91cGVkVmlvbGluIGZyb20gXCIuL21vZHVsZXMvR3JvdXBlZFZpb2xpblwiO1xuaW1wb3J0IHtcbiAgICBnZXRHdGV4VXJscyxcbiAgICBwYXJzZVRpc3N1ZVNpdGVzXG59IGZyb20gXCIuL21vZHVsZXMvZ3RleERhdGFQYXJzZXJcIjtcblxuaW1wb3J0IHtcbiAgICBjcmVhdGVUaXNzdWVHcm91cE1lbnUsXG4gICAgcGFyc2VUaXNzdWVHcm91cE1lbnVcbn0gZnJvbSBcIi4vbW9kdWxlcy9ndGV4TWVudUJ1aWxkZXJcIjtcblxuLyoqXG4gKiBCdWlsZCB0aGUgZVFUTCBEYXNoYm9hcmRcbiAqIEluaXRpYXRlIHRoZSBkYXNoYm9hcmQgd2l0aCBhIHNlYXJjaCBmb3JtLlxuICogMS4gRmV0Y2ggYW5kIG9yZ2FuaXplIHRpc3N1ZSBzaXRlcyBpbnRvIGdyb3Vwcy5cbiAqIDIuIEJ1aWxkIHRoZSB0d28tbGV2ZWwgdGlzc3VlIHNpdGUgbWVudS5cbiAqIDMuIEJpbmQgdGhlIHNlYXJjaCBmdW5jdGlvbiB0byB0aGUgc3VibWl0IGJ1dHRvbi5cbiAqIFRvRG86IHBlcmhhcHMgdGhlIGRvbSBlbGVtZW50cyBpbiB0aGUgZm9ybSBjb3VsZCBiZSBhY2Nlc3NlZCB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIGRvbSBJRHM/XG4gKiBAcGFyYW0gZGFzaGJvYXJkSWQge1N0cmluZ306IGVRVEwgcmVzdWx0IDxkaXY+IElEXG4gKiBAcGFyYW0gbWVudUlkIHtTdHJpbmd9IHRpc3N1ZSBtZW51IDxkaXY+IElEXG4gKiBAcGFyYW0gcGFpcklkIHtTdHJpbmd9IGdlbmUtdmFyaWFudCA8dGV4dGFyZWE+IElEXG4gKiBAcGFyYW0gc3VibWl0SWQge1N0cmluZ30gZm9ybSBzdWJtaXQgYnV0dG9uIDxkaXY+IElEXG4gKiBAcGFyYW0gZm9ybUlkIHtTdHJpbmd9IGRhc2hib2FyZCA8Zm9ybT4gSURcbiAqIEBwYXJhbSBtZXNzYWdlQm94SWQge1N0cmluZ30gbWVzc2FnZSBib3ggPGRpdj4gSURcbiAqIEBwYXJhbSB1cmxzIHtEaWN0aW9uYXJ5fSBvZiBHVEV4IHdlYiBzZXJ2aWNlIFVSTHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkKGRhc2hib2FyZElkLCBtZW51SWQsIHBhaXJJZCwgc3VibWl0SWQsIGZvcm1JZCwgbWVzc2FnZUJveElkLCB1cmxzPWdldEd0ZXhVcmxzKCkpe1xuICAgIGxldCB0aXNzdWVHcm91cHMgPSB7fTsgLy8gYSBkaWN0aW9uYXJ5IG9mIGxpc3RzIG9mIHRpc3N1ZSBzaXRlcyBpbmRleGVkIGJ5IHRpc3N1ZSBncm91cHNcblxuICAgIGpzb24odXJscy50aXNzdWVTaXRlcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7IC8vIHJldHJpZXZlIGFsbCB0aXNzdWUgKHN1YilzaXRlc1xuICAgICAgICAgICAgY29uc3QgZm9yRXF0bCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgdGlzc3VlR3JvdXBzID0gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsKTtcbiAgICAgICAgICAgIGNyZWF0ZVRpc3N1ZUdyb3VwTWVudSh0aXNzdWVHcm91cHMsIG1lbnVJZCwgZm9yRXF0bCk7XG4gICAgICAgICAgICAkKGAjJHtzdWJtaXRJZH1gKS5jbGljayhfc3VibWl0KHRpc3N1ZUdyb3VwcywgZGFzaGJvYXJkSWQsIG1lbnVJZCwgcGFpcklkLCBzdWJtaXRJZCwgZm9ybUlkLCBtZXNzYWdlQm94SWQsIHVybHMpKTtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBnZW5lIHtPYmplY3R9IHdpdGggYXR0ciBnZW5lU3ltYm9sIGFuZCBnZW5jb2RlSWRcbiAqIEBwYXJhbSB2YXJpYW50IHtPYmplY3R9IHdpdGggYXR0ciB2YXJpYW50SWQgYW5kIHNucElkXG4gKiBAcGFyYW0gbWFpbklkIHtTdHJpbmd9IHRoZSBtYWluIERJViBpZFxuICogQHBhcmFtIGlucHV0IHtPYmplY3R9IHRoZSB2aW9saW4gZGF0YVxuICogQHBhcmFtIGluZm8ge09iamVjdH0gdGhlIG1ldGFkYXRhIG9mIHRoZSBncm91cHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF92aXN1YWxpemUoZ2VuZSwgdmFyaWFudCwgbWFpbklkLCBpbnB1dCwgaW5mbyl7XG5cbiAgICBjb25zdCBpZCA9IHtcbiAgICAgICAgbWFpbjogbWFpbklkLFxuICAgICAgICB0b29sdGlwOiBcImVxdGxUb29sdGlwXCIsXG4gICAgICAgIHRvb2xiYXI6IGAke21haW5JZH1Ub29sYmFyYCxcbiAgICAgICAgY2xvbmU6IGAke21haW5JZH1DbG9uZWAsXG4gICAgICAgIGNoYXJ0OiBgJHttYWluSWR9Q2hhcnRgLFxuICAgICAgICBzdmc6IGAke21haW5JZH1TdmdgLFxuICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICBzYXZlOiBgJHttYWluSWR9U2F2ZWBcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlcnJvci1jaGVja2luZyBET00gZWxlbWVudHNcbiAgICBpZiAoJChgIyR7aWQubWFpbn1gKS5sZW5ndGggPT0gMCkgdGhyb3cgXCJWaW9saW4gUGxvdCBFcnJvcjogdGhlIGNoYXJ0IERPTSBkb2Vzbid0IGV4aXN0XCI7XG4gICAgaWYgKCQoYCMke2lkLnRvb2x0aXB9YCkubGVuZ3RoID09IDApICQoJzxkaXYvPicpLmF0dHIoXCJpZFwiLCBpZC50b29sdGlwKS5hcHBlbmRUbygkKCdib2R5JykpO1xuXG4gICAgLy8gY2xlYXIgcHJldmlvdXNseSByZW5kZXJlZCBwbG90IGlmIGFueVxuICAgIHNlbGVjdChgIyR7aWQubWFpbn1gKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuXG4gICAgLy8gYnVpbGQgdGhlIGRvbSBlbGVtZW50c1xuICAgIFtcInRvb2xiYXJcIiwgXCJjaGFydFwiLCBcImNsb25lXCJdLmZvckVhY2goKGQpPT57XG4gICAgICAgICQoJzxkaXYvPicpLmF0dHIoXCJpZFwiLCBpZFtkXSkuYXBwZW5kVG8oJChgIyR7aWQubWFpbn1gKSk7XG4gICAgfSk7XG5cbiAgICAvLyB2aW9saW4gcGxvdFxuICAgIC8vIFRPRE86IGNvZGUgcmV2aWV3IG9uIHRoZSBsYXlvdXQsIHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlcyBhbmQgY3VzdG9taXplZCBjb2RlIGluIEdyb3VwZWRWaW9saW4uanNcbiAgICBsZXQgbWFyZ2luID0ge1xuICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgdG9wOiA1MCxcbiAgICAgICAgcmlnaHQ6IDUwLFxuICAgICAgICBib3R0b206IDEwMFxuICAgIH07XG5cbiAgICBsZXQgaW5uZXJXaWR0aCA9IGlucHV0Lmxlbmd0aCAqIDQwLCAvLyBzZXQgYXQgYXQgbGVhc3QgNTAgYmVjYXVzZSBvZiB0aGUgbG9uZyB0aXNzdWUgbmFtZXNcbiAgICAgICAgd2lkdGggPSBpbm5lcldpZHRoICsgKG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KTtcbiAgICBsZXQgaW5uZXJIZWlnaHQgPSA4MCxcbiAgICAgICAgaGVpZ2h0ID0gaW5uZXJIZWlnaHQgKyAobWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pO1xuXG4gICAgbGV0IGRvbSA9IHNlbGVjdChgIyR7aWQuY2hhcnR9YClcbiAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgaWQuc3ZnKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCAke21hcmdpbi50b3B9KWApO1xuXG4gICAgLy8gYWRkIHZpb2xpbiB0aXRsZVxuXG4gICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmNsYXNzZWQoXCJlZC1zZWN0aW9uLXRpdGxlXCIsIHRydWUpXG4gICAgICAgIC50ZXh0KGAke2dlbmUuZ2VuZVN5bWJvbH0gKCR7Z2VuZS5nZW5jb2RlSWR9KSBhbmQgJHt2YXJpYW50LnNucElkfHxcIlwifSAoJHt2YXJpYW50LnZhcmlhbnRJZH0pYClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgIC5hdHRyKFwieVwiLCAtbWFyZ2luLnRvcCArIDE2KTtcblxuICAgIC8vIHJlbmRlciB0aGUgdmlvbGluXG4gICAgbGV0IHZpb2xpbiA9IG5ldyBHcm91cGVkVmlvbGluKGlucHV0LCBpbmZvKTtcbiAgICBjb25zdCB0b29sdGlwID0gdmlvbGluLmNyZWF0ZVRvb2x0aXAoaWQudG9vbHRpcCk7XG4gICAgY29uc3QgdG9vbGJhciA9IHZpb2xpbi5jcmVhdGVUb29sYmFyKGlkLnRvb2xiYXIsIHRvb2x0aXApO1xuICAgIHRvb2xiYXIuY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWQuYnV0dG9ucy5zYXZlLCBpZC5zdmcsIGAke2lkLm1haW59LXNhdmUuc3ZnYCwgaWQuY2xvbmUpO1xuICAgIHZpb2xpbi5yZW5kZXIoZG9tLCBpbm5lcldpZHRoLCBpbm5lckhlaWdodCwgMC4zLCB1bmRlZmluZWQsIFtdLCBcIk5vcm1hbGl6ZWQgRXhwcmVzc2lvblwiLCBmYWxzZSwgdHJ1ZSwgMCwgZmFsc2UsIHRydWUsIGZhbHNlLCB0cnVlKTtcbiAgICBfY3VzdG9taXplVmlvbGluUGxvdCh2aW9saW4sIGRvbSk7XG59XG4vKipcbiAqIEN1c3RvbWl6YXRpb24gb2YgdGhlIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gcGxvdCB7R3JvdXBlZFZpb2xpbn1cbiAqIEBwYXJhbSBkb20ge0QzIERPTX1cbiAqL1xuZnVuY3Rpb24gX2N1c3RvbWl6ZVZpb2xpblBsb3QocGxvdCwgZG9tKXtcbiAgICBwbG90Lmdyb3Vwcy5mb3JFYWNoKChnKT0+e1xuICAgICAgICAvLyBjdXN0b21pemUgdGhlIGxvbmcgdGlzc3VlIG5hbWVcbiAgICAgICAgY29uc3QgZ25hbWUgPSBnLmtleTtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBnbmFtZS5yZXBsYWNlKC9cXCgvLCBcIiAtIChcIikuc3BsaXQoL1xccyotXFxzKi8pO1xuICAgICAgICBjb25zdCBjdXN0b21YbGFiZWwgPSBkb20uYXBwZW5kKFwiZ1wiKTtcbiAgICAgICAgY29uc3QgY3VzdG9tTGFiZWxzID0gY3VzdG9tWGxhYmVsLnNlbGVjdEFsbChcIi52aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgIC5kYXRhKG5hbWVzKTtcbiAgICAgICAgY3VzdG9tTGFiZWxzLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ2aW9saW4tZ3JvdXAtbGFiZWxcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSBwbG90LnNjYWxlLngoZ25hbWUpICsgcGxvdC5zY2FsZS54LmJhbmR3aWR0aCgpLzI7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBwbG90LnNjYWxlLnkocGxvdC5zY2FsZS55LmRvbWFpbigpWzBdKSArIDc1ICsgKDEwKmkpOyAvLyB0b2RvOiBhdm9pZCBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pYFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiBkKTtcbiAgICB9KTtcblxuICAgIGRvbS5zZWxlY3RBbGwoXCIudmlvbGluLXNpemUtYXhpc1wiKS5jbGFzc2VkKFwidmlvbGluLXNpemUtYXhpcy1oaWRlXCIsIHRydWUpLmNsYXNzZWQoXCJ2aW9saW4tc2l6ZS1heGlzXCIsIGZhbHNlKTtcblxufVxuXG4vKipcbiAqIERlZmluZSB0aGUgc3VibWl0IGJ1dHRvbidzIGFjdGlvblxuICogQHBhcmFtIHRpc3N1ZUdyb3VwcyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRpc3N1ZSBncm91cHNcbiAqIEBwYXJhbSBkYXNoYm9hcmRJZCB7U3RyaW5nfSBlUVRMIHJlc3VsdHMgPGRpdj4gSURcbiAqIEBwYXJhbSBtZW51SWQge1N0cmluZ30gdGlzc3VlIG1lbnUgPGRpdj4gSURcbiAqIEBwYXJhbSBwYWlySWQge1N0cmluZ30gZ2VuZS12YXJpYW50IDx0ZXh0YXJlYT4gSURcbiAqIEBwYXJhbSBzdWJtaXRJZCB7U3RyaW5nfSBzdWJtaXQgYnV0dG9uIDxkaXY+IElEXG4gKiBAcGFyYW0gbWVzc2FnZUJveElkIHtTdHJpbmd9IG1lc3NhZ2UgYm94IDxkaXY+IElEXG4gKiBAcGFyYW0gdXJscyB7RGljdGlvbmFyeX0gb2YgR1RFeCB3ZWIgc2VydmljZSBVUkxzXG4gKiBAcGFyYW0gbWF4IHtJbnRlZ2VyfSBtYXggbnVtYmVyIG9mIGdlbmUtdmFyaWFudCBlbnRyaWVzLiBUaGUgZGVmYXVsdCBpcyBzZXQgdG8gMzAuXG4gKiBAcHJpdmF0ZVxuICogRGVwZW5kZW5jaWVzOiBqUXVlcnlcbiAqL1xuZnVuY3Rpb24gX3N1Ym1pdCh0aXNzdWVHcm91cHMsIGRhc2hib2FyZElkLCBtZW51SWQsIHBhaXJJZCwgc3VibWl0SWQsIGZvcm1JZCwgbWVzc2FnZUJveElkLCB1cmxzPV9nZXRHVEV4VXJscygpLCBtYXg9MzApe1xuICAgIHJldHVybiBmdW5jdGlvbigpe1xuXG4gICAgICAgIC8vIGNsZWFyIHRoZSBwcmV2aW91cyBkYXNoYm9hcmQgc2VhcmNoIHJlc3VsdHMgaWYgYW55XG4gICAgICAgICQoYCMke2Rhc2hib2FyZElkfWApLmh0bWwoJycpO1xuXG4gICAgICAgIC8vLy8vLyB2YWxpZGF0ZSB0aXNzdWUgaW5wdXRzIGFuZCBjb252ZXJ0IHRoZW0gdG8gdGlzc3VlIElEcyAvLy8vLy9cbiAgICAgICAgbGV0IHF1ZXJ5VGlzc3VlSWRzID0gcGFyc2VUaXNzdWVHcm91cE1lbnUodGlzc3VlR3JvdXBzLCBtZW51SWQpO1xuXG4gICAgICAgIC8vIHRpc3N1ZSBpbnB1dCBlcnJvci1jaGVja2luZ1xuICAgICAgICBpZiAocXVlcnlUaXNzdWVJZHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiTXVzdCBzZWxlY3QgYXQgbGVhc3Qgb25lIHRpc3N1ZS5cIik7XG4gICAgICAgICAgICB0aHJvdyBcIklucHV0IGVycm9yXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLy8vLy8gcGFyc2UgdGhlIGdlbmUtdmFyaWFudCBpbnB1dCBsaXN0IC8vLy8vL1xuICAgICAgICBsZXQgcGFpcnMgPSAkKGAjJHtwYWlySWR9YCkudmFsKCkuc3BsaXQoXCJcXG5cIikuZmlsdGVyKGZ1bmN0aW9uKGQpe3JldHVybiBkICE9IFwiXCJ9KTtcbiAgICAgICAgaWYgKHBhaXJzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBhbGVydChcIk11c3QgaW5wdXQgYXQgbGVhc3Qgb25lIGdlbmUtdmFyaWFudCBwYWlyLlwiKTtcbiAgICAgICAgICAgIHRocm93IFwiSW5wdXQgZXJyb3JcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYWlycy5sZW5ndGggPiBtYXgpIHtcbiAgICAgICAgICAgICQoYCMke21lc3NhZ2VCb3hJZH1gKS5hcHBlbmQoYFlvdXIgaW5wdXQgaGFzIGV4Y2VlZGVkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBhbGxvd2VkIGVudHJpZXMuIE9ubHkgdGhlIGZpcnN0ICR7bWF4fSBlbnRyaWVzIGFyZSBwcm9jZXNzZWQuYCk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVc2VyIGlucHV0IGhhcyBleGNlZWRlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgYWxsb3dlZCBlbnRyaWVzLlwiKTtcbiAgICAgICAgICAgIHBhaXJzID0gcGFpcnMuc2xpY2UoMCwgbWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLyBwcm9jZXNzIGVhY2ggZ2VuZS12YXJpYW50IHBhaXIgLy8vLy8vXG5cbiAgICAgICAgLy8gY3JlYXRlIGEgdGlzc3VlIG5hbWUgbG9va3VwIHRhYmxlXG4gICAgICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXModGlzc3VlR3JvdXBzKS5mb3JFYWNoKChnbmFtZSkgPT4ge1xuICAgICAgICAgICAgdGlzc3VlR3JvdXBzW2duYW1lXS5mb3JFYWNoKChzaXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGlzc3VlRGljdFtzaXRlLmlkXSA9IHNpdGUubmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBmb3IgZWFjaCBnZW5lLXZhcmlhbnQgcGFpclxuICAgICAgICBwYWlycy5mb3JFYWNoKGZ1bmN0aW9uKHBhaXIsIGkpe1xuICAgICAgICAgICAgcGFpci5yZXBsYWNlKC8gL2csIFwiXCIpOyAvLyByZW1vdmUgYWxsIHNwYWNlc1xuICAgICAgICAgICAgbGV0IHZpZCA9IHBhaXIuc3BsaXQoJywnKVsxXSxcbiAgICAgICAgICAgICAgICBnaWQgPSBwYWlyLnNwbGl0KCcsJylbMF07XG5cbiAgICAgICAgICAgIC8vIHJldHJpZXZlIGdlbmUgYW5kIHZhcmlhbnQgaW5mbyBmcm9tIHRoZSB3ZWIgc2VydmljZVxuICAgICAgICAgICAgY29uc3QgZ2VuZVVybCA9IHVybHMuZ2VuZUlkICsgZ2lkO1xuICAgICAgICAgICAgY29uc3QgdmFyaWFudFVybCA9IHZpZC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ3JzJyk/dXJscy5zbnArdmlkOnVybHMudmFyaWFudElkK3ZpZDtcblxuICAgICAgICAgICAgUHJvbWlzZS5hbGwoW2pzb24oZ2VuZVVybCksIGpzb24odmFyaWFudFVybCldKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGFyZ3Mpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW5lID0gX3BhcnNlR2VuZShhcmdzWzBdLCBnaWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYW50ID0gX3BhcnNlVmFyaWFudChhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdlbmUgPT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYElucHV0IEVycm9yOiBubyBnZW5lIGZvdW5kIGZvciAke2dpZH0uIDxici8+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoYCMke21lc3NhZ2VCb3hJZH1gKS5hcHBlbmQoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yTWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFudCA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgSW5wdXQgRXJyb3I6IG5vIHZhcmlhbnQgZm91bmQgZm9yICR7dmlkfSA8YnIvPmA7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGAjJHttZXNzYWdlQm94SWR9YCkuYXBwZW5kKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgZVFUTHMgYW5kIGRpc3BsYXkgdGhlIGVRVEwgdmlvbGluIHBsb3RzXG4gICAgICAgICAgICAgICAgICAgIF9yZW5kZXJFcXRsUGxvdCh0aXNzdWVEaWN0LCBkYXNoYm9hcmRJZCwgZ2VuZSwgdmFyaWFudCwgcXVlcnlUaXNzdWVJZHMsIGksIHVybHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZGUgdGhlIHNlYXJjaCBmb3JtIGFmdGVyIHRoZSBlUVRMIHZpb2xpbiBwbG90cyBhcmUgcmVwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgJChgIyR7Zm9ybUlkfWApLnJlbW92ZUNsYXNzKFwic2hvd1wiKTsgLy8gZm9yIGJvb3RzdHJhcCA0XG4gICAgICAgICAgICAgICAgICAgICQoYCMke2Zvcm1JZH1gKS5yZW1vdmVDbGFzcyhcImluXCIpOyAvLyBmb3IgYm9vc3RyYXAgM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbi8qKlxuICogUGFyc2UgR1RFeCBnZW5lIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZ2pzb25cbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcXVlcnkgZ2VuZSBJRFxuICogQHJldHVybnMgeyp9IGEgZ2VuZSBvYmplY3Qgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9wYXJzZUdlbmUoZ2pzb24sIGlkKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVJZCc7XG4gICAgaWYoIWdqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlIGdlbmUgZXJyb3InO1xuICAgIGxldCBnZW5lcyA9IGdqc29uW2F0dHJdLmZpbHRlcigoZCkgPT4ge3JldHVybiBkLmdlbmVTeW1ib2xVcHBlciA9PSBpZC50b1VwcGVyQ2FzZSgpIHx8IGQuZ2VuY29kZUlkID09IGlkLnRvVXBwZXJDYXNlKCl9KTsgLy8gZmluZCB0aGUgZXhhY3QgbWF0Y2hcbiAgICBpZiAoZ2VuZXMubGVuZ3RoID09MCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGdlbmVzWzBdO1xufVxuXG4vKipcbiAqIFBhcnNlIEdURXggdmFyaWFudC9zbnAgd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSB2anNvblxuICogQHJldHVybnMgeyp9IGEgdmFyaWFudCBvYmplY3Qgb3IgbnVsbFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3BhcnNlVmFyaWFudCh2anNvbil7XG4gICAgY29uc3QgYXR0ciA9ICd2YXJpYW50JztcbiAgICBpZighdmpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdGYXRhbCBFcnJvcjogcGFyc2UgdmFyaWFudCBlcnJvcic7XG4gICAgY29uc3QgdmFyaWFudHMgPSB2anNvblthdHRyXTtcbiAgICBpZiAodmFyaWFudHMubGVuZ3RoID09IDApIHJldHVybiBudWxsO1xuICAgIHJldHVybiB2YXJpYW50c1swXTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIGVRVExzIGFuZCBmZXRjaCBleHByZXNzaW9uIG9mIGdlbm90eXBlcyBmb3IgZWFjaCBnZW5lLXZhcmlhbnQgcGFpclxuICogQHBhcmFtIHRpc3N1RGljdCB7RGljdGlvbmFyeX0gdGlzc3VlIG5hbWUgbG9va3VwIHRhYmxlLCBpbmRleGVkIGJ5IHRpc3N1ZSBJRHNcbiAqIEBwYXJhbSBkYXNoYm9hcmRJZCB7U3RyaW5nfSB0aGUgZGFzaGJvYXJkIHJlc3VsdHMgPGRpdj4gSURcbiAqIEBwYXJhbSBnZW5lIHtPYmplY3R9IGEgR1RFeCBnZW5lIG9iamVjdFxuICogQHBhcmFtIHZhcmlhbnQge09iamVjdH0gdGhlIEdURXggdmFyaWFudCBvYmplY3RcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiBxdWVyeSB0aXNzdWUgSURzXG4gKiBAcGFyYW0gaSB7SW50ZWdlcn0gdGhlIGJveHBsb3QgRElWJ3MgaW5kZXhcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9yZW5kZXJFcXRsUGxvdCh0aXNzdWVEaWN0LCBkYXNoYm9hcmRJZCwgZ2VuZSwgdmFyaWFudCwgdGlzc3VlcywgaSwgdXJscz1nZXRHdGV4VXJscygpKSB7XG4gICAgLy8gZGlzcGxheSBnZW5lLXZhcmlhbnQgcGFpciBuYW1lc1xuICAgIGNvbnN0IGlkID0gYHZpb2xpbnBsb3Qke2l9YDtcbiAgICAkKGAjJHtkYXNoYm9hcmRJZH1gKS5hcHBlbmQoYDxkaXYgaWQ9XCIke2lkfVwiIGNsYXNzPVwiY29sLXNtLTEyXCI+PC9kaXY+YCk7XG5cbiAgICAvLyBwYXJzZSB0aGUgZ2Vub3R5cGVzIGZyb20gdGhlIHZhcmlhbnQgSURcbiAgICBsZXQgcmVmID0gdmFyaWFudC52YXJpYW50SWQuc3BsaXQoL18vKVsyXTtcbiAgICBsZXQgYWx0ID0gdmFyaWFudC52YXJpYW50SWQuc3BsaXQoL18vKVszXTtcbiAgICBjb25zdCBoZXQgPSByZWYgKyBhbHQ7XG4gICAgcmVmID0gcmVmICsgcmVmO1xuICAgIGFsdCA9IGFsdCArIGFsdDtcbiAgICAvLyBkMy1xdWV1ZSBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtcXVldWVcbiAgICBsZXQgcHJvbWlzZXMgPSBbXTtcblxuICAgIC8vIHF1ZXVlIHVwIGFsbCB0aXNzdWUgSURzXG4gICAgdGlzc3Vlcy5mb3JFYWNoKCh0SWQpID0+IHtcbiAgICAgICAgbGV0IHVybFJvb3QgPSB1cmxzWydkeW5lcXRsJ107XG4gICAgICAgIC8vIGxldCB1cmwgPSBgJHt1cmxSb290fT9zbnBfaWQ9JHt2YXJpYW50LnZhcmlhbnRJZH0mZ2VuZV9pZD0ke2dlbmUuZ2VuY29kZUlkfSZ0aXNzdWU9JHt0SWR9YDsgLy8gdXNlIHZhcmlhbnQgSUQsIGdlbmNvZGUgSUQgYW5kIHRpc3N1ZSBJRCB0byBxdWVyeSB0aGUgZHluZXF0bFxuICAgICAgICBsZXQgdXJsID0gYCR7dXJsUm9vdH0/dmFyaWFudElkPSR7dmFyaWFudC52YXJpYW50SWR9JmdlbmNvZGVJZD0ke2dlbmUuZ2VuY29kZUlkfSZ0aXNzdWVTaXRlRGV0YWlsSWQ9JHt0SWR9YDsgLy8gdXNlIHZhcmlhbnQgSUQsIGdlbmNvZGUgSUQgYW5kIHRpc3N1ZSBJRCB0byBxdWVyeSB0aGUgZHluZXF0bFxuICAgICAgICBwcm9taXNlcy5wdXNoKF9hcGlDYWxsKHVybCwgdElkKSk7XG4gICAgfSk7XG5cbiAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0cyl7XG4gICAgICAgICAgICBsZXQgaW5wdXQgPSBbXTsgLy8gYSBsaXN0IG9mIGdlbm90eXBlIGV4cHJlc3Npb24gb2JqZWN0c1xuICAgICAgICAgICAgbGV0IGluZm8gPSB7fTtcbiAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkLnN0YXR1cyA9PSBcImZhaWxlZFwiKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgZVFUTHMgYXJlbid0IGF2YWlsYWJsZSBmb3IgdGhpcyBxdWVyeSwgY3JlYXRlIGFuIGVtcHR5IHNwYWNlIGZvciB0aGUgbGF5b3V0IG9mIHRoZSByZXBvcnRcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwID0gdGlzc3VlRGljdFtkLnRpc3N1ZV07IC8vIGdyb3VwIHJlZmVycyB0byB0aGUgdGlzc3VlIG5hbWUsIG1hcCB0aXNzdWUgSUQgdG8gdGlzc3VlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2Vub3R5cGUgZXhwcmVzc2lvbiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuY29uY2F0KFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHJlZi5sZW5ndGg+Mj9cInJlZlwiOnJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGhldC5sZW5ndGg+Mj9cImhldFwiOmhldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGFsdC5sZW5ndGg+Mj9cImFsdFwiOmFsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9IF9wYXJzZUVxdGwoZCk7IC8vIHJlZm9ybWF0IGVRVEwgcmVzdWx0cyBkXG4gICAgICAgICAgICAgICAgICAgIGxldCBncm91cCA9IHRpc3N1ZURpY3RbZC50aXNzdWVTaXRlRGV0YWlsSWRdOyAvLyBncm91cCBpcyB0aGUgdGlzc3VlIG5hbWUsIG1hcCB0aXNzdWUgSUQgdG8gdGlzc3VlIG5hbWVcblxuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LmNvbmNhdChbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiByZWYubGVuZ3RoPjI/XCJyZWZcIjpyZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogZC5ob21vUmVmRXhwLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IGQuaG9tb1JlZkV4cFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGhldC5sZW5ndGg+Mj9cImhldFwiOmhldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBkLmhldGVyb0V4cC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBkLmhldGVyb0V4cFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGFsdC5sZW5ndGg+Mj9cImFsdFwiOmFsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBkLmhvbW9BbHRFeHAubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogZC5ob21vQWx0RXhwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGRpdGlvbmFsIGluZm8gb2YgdGhlIGdyb3VwIGdvZXMgaGVyZVxuICAgICAgICAgICAgICAgICAgICBpbmZvW2dyb3VwXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHZhbHVlXCI6IGRbXCJwVmFsdWVcIl09PT1udWxsPzE6cGFyc2VGbG9hdChkW1wicFZhbHVlXCJdKS50b1ByZWNpc2lvbigzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHZhbHVlVGhyZXNob2xkXCI6IGRbXCJwVmFsdWVUaHJlc2hvbGRcIl09PT1udWxsPzA6cGFyc2VGbG9hdChkW1wicFZhbHVlVGhyZXNob2xkXCJdKS50b1ByZWNpc2lvbigzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF92aXN1YWxpemUoZ2VuZSwgdmFyaWFudCwgaWQsIGlucHV0LCBpbmZvKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7Y29uc29sZS5lcnJvcihlcnIpfSk7XG59XG5cbi8qKlxuICogcGFyc2UgR1RFeCBkeW5lcXRsIGpzb25cbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBmcm9tIEdURXggZHluZXF0bCB3ZWIgc2VydmljZVxuICogQHJldHVybnMgZGF0YSB7SlNPTn0gbW9kaWZpZWQgZGF0YVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3BhcnNlRXF0bChqc29uKXtcbiAgICAvLyBjaGVjayByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZXNcbiAgICBbJ2RhdGEnLCAnZ2Vub3R5cGVzJywgJ3BWYWx1ZScsICdwVmFsdWVUaHJlc2hvbGQnLCAndGlzc3VlU2l0ZURldGFpbElkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoZCkpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihqc29uKTtcbiAgICAgICAgICAgIHRocm93ICdQYXJzZSBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGpzb24uZXhwcmVzc2lvbl92YWx1ZXMgPSBqc29uLmRhdGEubWFwKChkKT0+cGFyc2VGbG9hdChkKSk7XG4gICAganNvbi5nZW5vdHlwZXMgPSBqc29uLmdlbm90eXBlcy5tYXAoKGQpPT5wYXJzZUZsb2F0KGQpKTtcblxuICAgIGpzb24uaG9tb1JlZkV4cCA9IGpzb24uZXhwcmVzc2lvbl92YWx1ZXMuZmlsdGVyKChkLGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGpzb24uZ2Vub3R5cGVzW2ldID09IDBcbiAgICB9KTtcbiAgICBqc29uLmhvbW9BbHRFeHAgPSBqc29uLmV4cHJlc3Npb25fdmFsdWVzLmZpbHRlcigoZCxpKSA9PiB7XG4gICAgICAgIHJldHVybiBqc29uLmdlbm90eXBlc1tpXSA9PSAyXG4gICAgfSk7XG4gICAganNvbi5oZXRlcm9FeHAgPSBqc29uLmV4cHJlc3Npb25fdmFsdWVzLmZpbHRlcigoZCxpKSA9PiB7XG4gICAgICAgIHJldHVybiBqc29uLmdlbm90eXBlc1tpXSA9PSAxXG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb247XG59XG5cbmZ1bmN0aW9uIF9hcGlDYWxsKHVybCwgdGlzc3VlKXtcbiAgICAvLyByZWZlcmVuY2U6IGh0dHA6Ly9hZGFtcGF4dG9uLmNvbS9oYW5kbGluZy1tdWx0aXBsZS1qYXZhc2NyaXB0LXByb21pc2VzLWV2ZW4taWYtc29tZS1mYWlsL1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgICBqc29uKHVybClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgICAgIC8vIHJlcG9ydCB0aGUgdGlzc3VlIGFzIGZhaWxlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGZhaWxlZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGlzc3VlOiB0aXNzdWUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJmYWlsZWRcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWlsZWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG5cbn1cblxuXG5cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQge2pzb259IGZyb20gXCJkMy1mZXRjaFwiO1xuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtnZXRHdGV4VXJscywgcGFyc2VUaXNzdWVzfSBmcm9tIFwiLi9ndGV4RGF0YVBhcnNlclwiO1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgdGlzc3VlIChkYXRhc2V0KSBkcm9wZG93biBtZW51IHVzaW5nIHNlbGVjdDJcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgZG9tIElEIG9mIHRoZSBtZW51XG4gKiBAcGFyYW0gdXJsIHtTdHJpbmd9IHRoZSB0aXNzdWUgd2ViIHNlcnZpY2UgdXJsXG4gKiBkZXBlbmRlbmN5OiBzZWxlY3QyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUaXNzdWVNZW51KGRvbUlkLCB1cmwgPSBnZXRHdGV4VXJscygpLnRpc3N1ZSl7XG4gICAganNvbih1cmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpe1xuICAgICAgICAgICAgbGV0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZXMocmVzdWx0cyk7XG4gICAgICAgICAgICB0aXNzdWVzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgICAgICAgICBkLmlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgICAgICAgICAgICAgZC50ZXh0ID0gZC50aXNzdWVTaXRlRGV0YWlsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aXNzdWVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZihhLnRpc3N1ZVNpdGVEZXRhaWwgPCBiLnRpc3N1ZVNpdGVEZXRhaWwpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBpZihhLnRpc3N1ZVNpdGVEZXRhaWwgPiBiLnRpc3N1ZVNpdGVEZXRhaWwpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGV4dGVybmFsIGxpYnJhcnkgZGVwZW5kZW5jeTogc2VsZWN0MlxuICAgICAgICAgICAgJChgIyR7ZG9tSWR9YCkuc2VsZWN0Mih7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgYSBkYXRhIHNldCcsXG4gICAgICAgICAgICAgICAgZGF0YTogdGlzc3Vlc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7Y29uc29sZS5lcnJvcihlcnIpfSk7XG59XG5cbi8qKlxuICogQnVpbGQgdGhlIHR3by1sZXZlbCBjaGVja2JveC1zdHlsZSB0aXNzdWUgbWVudVxuICogZGVwZW5kZW5jaWVzOiB0aXNzdWVHcm91cC5jc3MgY2xhc3Nlc1xuICogQHBhcmFtIGdyb3VwcyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSBncm91cCBuYW1lLCB0aGlzIGlzIGNyZWF0ZWQgYnkgZ3RleERhdGFQYXJzZXI6cGFyc2VUaXNzdWVTaXRlcygpXG4gKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gPGRpdj4gSURcbiAqIEBwYXJhbSBmb3JFcXRsIHtCb29sZWFufVxuICogRGVwZW5kZW5jaWVzOiBqUXVlcnksIEJvb3RzdHJhcCwgdGlzc3VlR3JvdXAuY3NzXG4gKiB0b2RvOiBhZGQgcmVzZXQgYW5kIHNlbGVjdCBhbGwgb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGlzc3VlR3JvdXBNZW51KGdyb3VwcywgZG9tSWQsIGZvckVxdGw9ZmFsc2Upe1xuICAgIGNvbnN0IG1haW5DbGFzcz1cInRpc3N1ZS1ncm91cC1tYWluLWxldmVsXCI7XG4gICAgY29uc3Qgc3ViQ2xhc3MgPSBcInRpc3N1ZS1ncm91cC1zdWItbGV2ZWxcIjtcbiAgICBjb25zdCBsYXN0U2l0ZUNsYXNzID0gXCJsYXN0LXNpdGVcIjtcblxuICAgIC8vIGVyYXNlIGV2ZXJ5dGhpbmcgaW4gZG9tSWQgaW4gY2FzZSBpdCBpc24ndCBlbXB0eVxuICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuc2VsZWN0QWxsKFwiKlwiKS5yZW1vdmUoKTtcblxuICAgIC8vIGFkZCBjaGVjayBhbGwgYW5kIHJlc2V0IG9wdGlvbnNcbiAgICBjb25zdCAkYWxsVGlzc3VlRGl2ID0gJCgnPGRpdi8+JykuYXR0cignY2xhc3MnLCAnY29sLXhzLTEyIGNvbC1tZC0xMicpLmFwcGVuZFRvKCQoYCMke2RvbUlkfWApKTtcbiAgICBpZiAoZm9yRXF0bCl7XG4gICAgICAgICQoYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImFsbFRpc3N1ZXNcIiB2YWx1ZT1cInJlc2V0XCI+IFJlc2V0ICcgK1xuICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRhbGxUaXNzdWVEaXYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoYDxsYWJlbCBjbGFzcz0ke21haW5DbGFzc30+YCArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImFsbFRpc3N1ZXNcIiB2YWx1ZT1cImFsbFwiPiBBbGwgPC9sYWJlbD4gJyArXG4gICAgICAgIGA8bGFiZWwgY2xhc3M9JHttYWluQ2xhc3N9PmAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJhbGxUaXNzdWVzXCIgdmFsdWU9XCJyZXNldFwiPiBSZXNldCAnICtcbiAgICAgICAgJzwvbGFiZWw+PGJyLz4nKS5hcHBlbmRUbygkYWxsVGlzc3VlRGl2KTtcbiAgICB9XG5cblxuICAgIC8vIGNoZWNrIGFsbCBvciByZXNldCBldmVudHNcbiAgICAkKCdpbnB1dFtuYW1lPVwiYWxsVGlzc3Vlc1wiXScpLmNoYW5nZShmdW5jdGlvbigpe1xuICAgICAgICBsZXQgdmFsID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgc3dpdGNoKHZhbCl7XG4gICAgICAgICAgICBjYXNlICdhbGwnOiB7XG4gICAgICAgICAgICAgICAgJCgnLnRpc3N1ZUdyb3VwJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICQoJy50aXNzdWVTdWJHcm91cCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3Jlc2V0Jzoge1xuICAgICAgICAgICAgICAgICQoJy50aXNzdWVHcm91cCcpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgJCgnLnRpc3N1ZVN1Ykdyb3VwJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuXG4gICAgICAgIH1cbiAgICAgICAgLy8gJCh0aGlzKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgIH0pO1xuICAgIC8vIHNvcnQgdGhlIHRpc3N1ZSBncm91cHMgYWxwaGFiZXRpY2FsbHlcbiAgICBsZXQgZ3JvdXBOYW1lcyA9IE9iamVjdC5rZXlzKGdyb3Vwcykuc29ydCgpO1xuXG4gICAgLy8gY3JlYXRlIGZvdXIgPGRpdj4gc2VjdGlvbnMgZm9yIHRoZSB0aXNzdWUgbWVudVxuICAgIC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIG9yZ2FuaXplIHRpc3N1ZXMgaW50byBzZWN0aW9uc1xuICAgIGNvbnN0ICRzZWN0aW9ucyA9IHJhbmdlKDAsNCkubWFwKChkKT0+e1xuICAgICAgICByZXR1cm4gJChgPGRpdiBpZD1cInNlY3Rpb24ke2R9XCIgY2xhc3M9XCJjb2wteHMtMTIgY29sLW1kLTNcIj5gKS5hcHBlbmRUbygkKGAjJHtkb21JZH1gKSk7XG4gICAgfSk7XG5cbiAgICBncm91cE5hbWVzLmZvckVhY2goZnVuY3Rpb24oZ25hbWUpe1xuICAgICAgICBsZXQgc2l0ZXMgPSBncm91cHNbZ25hbWVdOyAvLyBhIGxpc3Qgb2Ygc2l0ZSBvYmplY3RzIHdpdGggYXR0cjogbmFtZSBhbmQgaWRcbiAgICAgICAgY29uc3QgZ0lkID0gZ25hbWUucmVwbGFjZSgvIC9nLCBcIl9cIik7IC8vIHJlcGxhY2UgdGhlIHNwYWNlcyB3aXRoIGRhc2hlcyB0byBjcmVhdGUgYSBncm91cCA8RE9NPiBpZFxuICAgICAgICAvLyBmaWd1cmUgb3V0IHdoaWNoIGRvbSBzZWN0aW9uIHRvIGFwcGVuZCB0aGlzIHRpc3N1ZSBzaXRlXG4gICAgICAgIGxldCAkY3VycmVudERvbSA9ICRzZWN0aW9uc1szXTtcbiAgICAgICAgaWYoXCJCcmFpblwiID09IGduYW1lKSAkY3VycmVudERvbSA9ICRzZWN0aW9uc1swXTtcbiAgICAgICAgZWxzZSBpZiAoZ25hbWUubWF0Y2goL15bQS1EXS8pKSAkY3VycmVudERvbSA9ICRzZWN0aW9uc1sxXTtcbiAgICAgICAgZWxzZSBpZiAoZ25hbWUubWF0Y2goL15bRS1QXS8pKSAkY3VycmVudERvbSA9ICRzZWN0aW9uc1syXTtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIDxsYWJlbD4gZm9yIHRoZSB0aXNzdWUgZ3JvdXBcbiAgICAgICAgJChgPGxhYmVsIGNsYXNzPSR7bWFpbkNsYXNzfT5gK1xuICAgICAgICAgICAgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7Z0lkfVwiIGNsYXNzPVwidGlzc3VlR3JvdXBcIj4gYCArXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJjaGVja21hcmtcIj48L3NwYW4+JyArXG4gICAgICAgICAgICBgPHNwYW4+JHtnbmFtZX08L3NwYW4+YCArXG4gICAgICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRjdXJyZW50RG9tKTtcblxuICAgICAgICAvLyB0aXNzdWUgc2l0ZXMgaW4gdGhlIGdyb3VwXG4gICAgICAgIGlmIChzaXRlcy5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgICAvLyBzb3J0IHNpdGVzIGFscGhhYmV0aWNhbGx5XG4gICAgICAgICAgICBzaXRlcy5zb3J0KChhLCBiKT0+e1xuICAgICAgICAgICAgICAgIGlmIChhLmlkID4gYi5pZCkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgaWYgKGEuaWQgPCBiLmlkKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oc2l0ZSwgaSl7XG4gICAgICAgICAgICAgICAgbGV0ICRzaXRlRG9tID0gJChgPGxhYmVsIGNsYXNzPSR7c3ViQ2xhc3N9PmArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCIke3NpdGUuaWR9XCIgY2xhc3M9XCJ0aXNzdWVTdWJHcm91cFwiPiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiY2hlY2ttYXJrXCI+PC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPHNwYW4+JHtzaXRlLm5hbWV9PC9zcGFuPmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9sYWJlbD48YnIvPicpLmFwcGVuZFRvKCRjdXJyZW50RG9tKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBzaXRlcy5sZW5ndGggLTEpICRzaXRlRG9tLmFkZENsYXNzKGxhc3RTaXRlQ2xhc3MpO1xuICAgICAgICAgICAgICAgICRzaXRlRG9tLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQoJ2lucHV0W25hbWU9XCJhbGxUaXNzdWVzXCJdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjdXN0b20gY2xpY2sgZXZlbnQgZm9yIHRoZSB0b3AtbGV2ZWwgdGlzc3VlczogdG9nZ2xlIHRoZSBjaGVjayBib3hlc1xuICAgICAgICAkKFwiI1wiICsgZ0lkKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT1cImFsbFRpc3N1ZXNcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKCQoJyMnICsgZ0lkKS5pcyhcIjpjaGVja2VkXCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgZ3JvdXAgaXMgY2hlY2tlZCwgY2hlY2sgYWxsIGl0cyB0aXNzdWVzXG4gICAgICAgICAgICAgICAgc2l0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2l0ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpZFwiID09IHNpdGUuaWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBzaXRlLmlkKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBncm91cCBpcyB1bmNoZWNrZWQsIHVuLWNoZWNrIGFsbCBpdHMgdGlzc3Vlc1xuICAgICAgICAgICAgICAgIHNpdGVzLmZvckVhY2goZnVuY3Rpb24gKHNpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiaWRcIiA9PSBzaXRlLmlkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICQoJyMnICsgc2l0ZS5pZCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdHdvLWxldmVsIGNoZWNrYm94LXN0eWxlIHRpc3N1ZSBtZW51XG4gKiBAcGFyYW0gZ3JvdXBzIHtEaWN0aW9uYXJ5fSBvZiBsaXN0cyBvZiB0aXNzdWVzIGluZGV4ZWQgYnkgdGhlIGdyb3VwIG5hbWUsIHRoaXMgaXMgY3JlYXRlZCBieSBndGV4RGF0YVBhcnNlcjpwYXJzZVRpc3N1ZVNpdGVzKClcbiAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSA8ZGl2PiBJRFxuICogRGVwZW5kZW5jaWVzOiBqUXVlcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlR3JvdXBNZW51KGdyb3VwcywgZG9tSWQpe1xuICAgIGxldCBxdWVyeVRpc3N1ZUlkcyA9IFtdO1xuICAgICQoYCMke2RvbUlkfWApLmZpbmQoXCI6aW5wdXRcIikuZWFjaChmdW5jdGlvbigpeyAvLyB1c2luZyBqUXVlcnkgdG8gcGFyc2UgZWFjaCBpbnB1dCBpdGVtXG4gICAgICAgIGlmICggJCh0aGlzKS5pcyhcIjpjaGVja2VkXCIpKSB7IC8vIHRoZSBqUXVlcnkgd2F5IHRvIGZldGNoIGEgY2hlY2tlZCB0aXNzdWVcbiAgICAgICAgICAgIGNvbnN0IGlkID0gJCh0aGlzKS5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJ0aXNzdWVHcm91cFwiKSl7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpbnB1dCBpdGVtIGlzIGEgdGlzc3VlIGdyb3VwXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyB0aXNzdWUgZ3JvdXAgaXMgYSBzaW5nbGUtc2l0ZSBncm91cCB1c2luZyB0aGUgdGlzc3VlR3JvdXBzIGRpY3Rpb25hcnlcbiAgICAgICAgICAgICAgICAvLyBpZiBzbywgYWRkIHRoZSBzaW5nbGUgc2l0ZSB0byB0aGUgcXVlcnkgbGlzdFxuICAgICAgICAgICAgICAgIGxldCBncm91cE5hbWUgPSBpZC5yZXBsYWNlKC9fL2csIFwiIFwiKTsgLy8gZmlyc3QgY29udmVydCB0aGUgSUQgYmFjayB0byBncm91cCBuYW1lXG4gICAgICAgICAgICAgICAgaWYgKGdyb3Vwc1tncm91cE5hbWVdLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5VGlzc3VlSWRzLnB1c2goZ3JvdXBzW2dyb3VwTmFtZV1bMF0uaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7IC8vIHRoaXMgaW5wdXQgaXRlbSBpcyBhIHRpc3N1ZSBzaXRlXG4gICAgICAgICAgICAgICAgcXVlcnlUaXNzdWVJZHMucHVzaChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcXVlcnlUaXNzdWVJZHMuZmlsdGVyKChkKT0+ZCE9PXVuZGVmaW5lZCk7XG59XG4iXSwibmFtZXMiOlsiRU9MIiwiRU9GIiwiUVVPVEUiLCJORVdMSU5FIiwiUkVUVVJOIiwib2JqZWN0Q29udmVydGVyIiwiY29sdW1ucyIsIkZ1bmN0aW9uIiwibWFwIiwibmFtZSIsImkiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiUmVnRXhwIiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsInBhcnNlUm93cyIsInRleHQiLCJmIiwidCIsInJvd3MiLCJOIiwibGVuZ3RoIiwiSSIsIm4iLCJlb2YiLCJlb2wiLCJ0b2tlbiIsImMiLCJqIiwic2xpY2UiLCJyZXBsYWNlIiwicm93IiwicHVzaCIsImZvcm1hdFJvdyIsImZvcm1hdFZhbHVlIiwidGVzdCIsInBhcnNlIiwiY29udmVydCIsIm9iamVjdCIsImN1c3RvbUNvbnZlcnRlciIsImZvcm1hdCIsImNvbHVtblNldCIsIk9iamVjdCIsImNyZWF0ZSIsImZvckVhY2giLCJjb2x1bW4iLCJpbmZlckNvbHVtbnMiLCJjb25jYXQiLCJmb3JtYXRSb3dzIiwiY3N2IiwiZHN2IiwidHN2IiwicmVzcG9uc2VKc29uIiwicmVzcG9uc2UiLCJvayIsIkVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJpbnB1dCIsImluaXQiLCJmZXRjaCIsInRoZW4iLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJwcmVmaXgiLCJpbmRleE9mIiwibmFtZXNwYWNlcyIsImhhc093blByb3BlcnR5Iiwic3BhY2UiLCJsb2NhbCIsImZ1bGxuYW1lIiwibmFtZXNwYWNlIiwidGhpcyIsIm93bmVyRG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJkb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiZW1wdHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlciIsIm1hdGNoZXMiLCJlbGVtZW50IiwidmVuZG9yTWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsImNhbGwiLCJ1cGRhdGUiLCJBcnJheSIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsImFwcGVuZENoaWxkIiwiY2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJuZXh0Iiwia2V5UHJlZml4IiwiYmluZEluZGV4IiwiZ3JvdXAiLCJlbnRlciIsImV4aXQiLCJkYXRhIiwibm9kZSIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwiYXNjZW5kaW5nIiwiYSIsImIiLCJOYU4iLCJkZWZhdWx0VmlldyIsInN0eWxlVmFsdWUiLCJzdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY2xhc3NBcnJheSIsInN0cmluZyIsInRyaW0iLCJzcGxpdCIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImFkZCIsImNsYXNzZWRSZW1vdmUiLCJyZW1vdmUiLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwicmFpc2UiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZU5vZGUiLCJzZWxlY3Rpb25fY2xvbmVEZWVwIiwic2V0QXR0cmlidXRlIiwic3BsaWNlIiwiY29udGFpbnMiLCJmaWx0ZXJFdmVudHMiLCJldmVudCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiZmlsdGVyQ29udGV4dExpc3RlbmVyIiwibGlzdGVuZXIiLCJpbmRleCIsImNvbnRleHRMaXN0ZW5lciIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJldmVudDEiLCJldmVudDAiLCJvblJlbW92ZSIsInR5cGVuYW1lIiwib24iLCJfX29uIiwibyIsIm0iLCJ0eXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsInZhbHVlIiwid3JhcCIsImQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsInBhcmFtcyIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic291cmNlIiwiY3VycmVudCIsInNvdXJjZUV2ZW50IiwiY2hhbmdlZFRvdWNoZXMiLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsInBvaW50IiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsImNsaWVudExlZnQiLCJ0b3AiLCJjbGllbnRUb3AiLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJzZWxlY3RvckFsbCIsImZpbHRlciIsIm1hdGNoIiwic2l6ZSIsImVhY2giLCJiaW5kIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwicHJldmlvdXMiLCJpMCIsImkxIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJtZXJnZSIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIk1hdGgiLCJtaW4iLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJvcmRlciIsInNvcnQiLCJjb21wYXJlIiwiY29tcGFyZU5vZGUiLCJzb3J0Z3JvdXBzIiwic29ydGdyb3VwIiwiY2FsbGJhY2siLCJhcmd1bWVudHMiLCJhcHBseSIsIm5vZGVzIiwiYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ2Iiwic2V0QXR0cmlidXRlTlMiLCJwcmlvcml0eSIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJwcm9wZXJ0eSIsImNsYXNzZWQiLCJodG1sIiwiYXBwZW5kIiwiY3JlYXRvciIsImluc2VydCIsImJlZm9yZSIsImNsb25lIiwiZGVlcCIsInR5cGVuYW1lcyIsInBhcnNlVHlwZW5hbWVzIiwiZGlzcGF0Y2giLCJiaXNlY3RSaWdodCIsImxvIiwiaGkiLCJtaWQiLCJyaWdodCIsImFycmF5IiwidmFsdWVzIiwidmFsdWVvZiIsImRlbHRhIiwibWVhbiIsInN1bSIsImlzTmFOIiwibnVtYmVyIiwidmFyaWFuY2UiLCJzcXJ0IiwibWF4Iiwic3RhcnQiLCJzdG9wIiwic3RlcCIsImNlaWwiLCJyYW5nZSIsImUxMCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50IiwiY291bnQiLCJwb3dlciIsImZsb29yIiwibG9nIiwiTE4xMCIsImVycm9yIiwicG93IiwicCIsInZhbHVlMCIsIm51bWJlcnMiLCJxdWFudGlsZSIsIk1hcCIsInNldCIsImlzQXJyYXkiLCJzb3J0VmFsdWVzIiwicm9sbHVwIiwibmVzdCIsImtleXMiLCJzb3J0S2V5cyIsImRlcHRoIiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0IiwidmFsdWVzQnlLZXkiLCJyZXN1bHQiLCJnZXQiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJlbnRyaWVzIiwic29ydEtleSIsImsiLCJTZXQiLCJoYXMiLCJjbGVhciIsInByb3RvIiwiaW1wbGljaXQiLCJiYW5kIiwiYmFuZHdpZHRoIiwic2NhbGUiLCJvcmRpbmFsIiwiZG9tYWluIiwidW5rbm93biIsIl8iLCJjb3B5IiwidW5kZWZpbmVkIiwib3JkaW5hbFJhbmdlIiwicm91bmQiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJhbGlnbiIsInJlc2NhbGUiLCJyZXZlcnNlIiwic2VxdWVuY2UiLCJyYW5nZVJvdW5kIiwicGFkZGluZyIsImZhY3RvcnkiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleDMiLCJyZUhleDYiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3IiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJSZ2IiLCJwYXJzZUludCIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsInJnYiIsIm9wYWNpdHkiLCJoZXgiLCJ0b1N0cmluZyIsImgiLCJzIiwibCIsIkhzbCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImRpc3BsYXlhYmxlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJoc2xDb252ZXJ0IiwiZGVnMnJhZCIsIlBJIiwicmFkMmRlZyIsIlhuIiwiWW4iLCJabiIsInQwIiwidDEiLCJ0MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImNvcyIsInNpbiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJhdGFuMiIsImhjbENvbnZlcnQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsIkN1YmVoZWxpeCIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29uc3RhbnQiLCJsaW5lYXIiLCJibCIsImN1YmVoZWxpeENvbnZlcnQiLCJjb3NoIiwic2luaCIsInJnYkdhbW1hIiwiZW5kIiwiY29sb3JSZ2IiLCJyZUEiLCJyZUIiLCJhbSIsImJtIiwiYnMiLCJiaSIsImxhc3RJbmRleCIsInEiLCJvbmUiLCJ6ZXJvIiwiRGF0ZSIsInNldFRpbWUiLCJuYiIsIm5hIiwidmFsdWVPZiIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsInN2Z05vZGUiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJTUVJUMiIsInVuaXQiLCJkZWludGVycG9sYXRlTGluZWFyIiwiYmltYXAiLCJkZWludGVycG9sYXRlIiwicmVpbnRlcnBvbGF0ZSIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsImJpc2VjdCIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJhYnMiLCJwcmVmaXhFeHBvbmVudCIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwiZmlsbCIsInNpZ24iLCJzeW1ib2wiLCJ3aWR0aCIsImNvbW1hIiwicHJlY2lzaW9uIiwiZXhwb25lbnQiLCIlIiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsIlgiLCJ0b1VwcGVyQ2FzZSIsImxvY2FsZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJzdWJzdHJpbmciLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm5ld0Zvcm1hdCIsImZvcm1hdFR5cGVzIiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJvdXQiLCJmb3JtYXRUcmltIiwiSW5maW5pdHkiLCJzdGVwMCIsInN0ZXAxIiwidGlja1N0ZXAiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInByZWNpc2lvbkZpeGVkIiwibGluZWFyaXNoIiwidGlja3MiLCJpc0Zpbml0ZSIsInRpY2tGb3JtYXQiLCJuaWNlIiwicGllY2V3aXNlIiwib3V0cHV0IiwiaW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiY2xhbXAiLCJkZWludGVycG9sYXRlQ2xhbXAiLCJpbnZlcnQiLCJyZWludGVycG9sYXRlQ2xhbXAiLCJpbnRlcnBvbGF0ZVJvdW5kIiwiY29udGludW91cyIsImZvcm1hdExvY2FsZSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiaW50ZXJ2YWwiLCJkYXRlIiwib2Zmc2V0IiwiZXZlcnkiLCJtaWxsaXNlY29uZCIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25XZWVrIiwiZGF5IiwiZ2V0VVRDU2Vjb25kcyIsImdldE1pbnV0ZXMiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldEhvdXJzIiwic2V0SG91cnMiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsIndlZWtkYXkiLCJnZXREYXkiLCJzdW5kYXkiLCJtb25kYXkiLCJ0aHVyc2RheSIsInllYXIiLCJzZXRNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInNldFVUQ1NlY29uZHMiLCJnZXRVVENNaW51dGVzIiwic2V0VVRDTWludXRlcyIsImdldFVUQ0hvdXJzIiwidXRjRGF5Iiwic2V0VVRDSG91cnMiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUaHVyc2RheSIsInV0Y1llYXIiLCJzZXRVVENNb250aCIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImxvY2FsRGF0ZSIsIkgiLCJNIiwiUyIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3WWVhciIsInV0Y0Zvcm1hdCIsInV0Y1BhcnNlIiwicGFkcyIsIi0iLCIwIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJwYWQiLCJyZXF1b3RlIiwiZm9ybWF0UmUiLCJmb3JtYXRMb29rdXAiLCJwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkiLCJ3IiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwidSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsIlUiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJWIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwiVyIsInBhcnNlRnVsbFllYXIiLCJwYXJzZVllYXIiLCJwYXJzZVpvbmUiLCJaIiwicGFyc2VNb250aE51bWJlciIsInBhcnNlRGF5T2ZNb250aCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VIb3VyMjQiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVNlY29uZHMiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTWljcm9zZWNvbmRzIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsInBhcnNlVW5peFRpbWVzdGFtcCIsIlEiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdEhvdXIyNCIsImZvcm1hdEhvdXIxMiIsImZvcm1hdERheU9mWWVhciIsInRpbWVEYXkiLCJ0aW1lWWVhciIsImZvcm1hdE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImZvcm1hdE1pY3Jvc2Vjb25kcyIsImZvcm1hdE1vbnRoTnVtYmVyIiwiZm9ybWF0TWludXRlcyIsImZvcm1hdFNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJ0aW1lU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsInRpbWVUaHVyc2RheSIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwidGltZU1vbmRheSIsImZvcm1hdFllYXIiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwidGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwicGVyaW9kTG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJZIiwidXRjRm9ybWF0cyIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwiY2hhckF0IiwibmV3UGFyc2UiLCJuZXdEYXRlIiwid2VlayIsInRvSVNPU3RyaW5nIiwicGkiLCJ0YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsInBhdGgiLCJtb3ZlVG8iLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwieDEiLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ4MCIsInkwIiwieDIxIiwieTIxIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwiYWNvcyIsInQwMSIsInQyMSIsImFyYyIsImEwIiwiYTEiLCJjY3ciLCJkeCIsImR5IiwiY3ciLCJkYSIsIkxpbmVhciIsImNvbnRleHQiLCJfY29udGV4dCIsInBvaW50WCIsInBvaW50WSIsImRlZmluZWQiLCJjdXJ2ZSIsImN1cnZlTGluZWFyIiwiYXJlYSIsImJ1ZmZlciIsImRlZmluZWQwIiwieDB6IiwieTB6IiwiYXJlYVN0YXJ0IiwibGluZVN0YXJ0IiwibGluZUVuZCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJzbG9wZTMiLCJ0aGF0IiwiaDAiLCJoMSIsInMwIiwiczEiLCJzbG9wZTIiLCJNb25vdG9uZVgiLCJSZWZsZWN0Q29udGV4dCIsIl9saW5lIiwiX3BvaW50IiwiX3QwIiwiYm90dG9tIiwiZXBzaWxvbiIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsInRpY2siLCJ0aWNrRXhpdCIsInRpY2tFbnRlciIsInRyYW5zaXRpb24iLCJ0aWNrU2l6ZSIsImF4aXNCb3R0b20iLCJub29wIiwiRGlzcGF0Y2giLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInR5cGVzIiwiVCIsImFyZ3MiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiZnJhbWUiLCJ0aW1lb3V0IiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsIlR5cGVFcnJvciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIlJVTk5JTkciLCJFTkRJTkciLCJFTkRFRCIsImlkIiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJkdXJhdGlvbiIsImVhc2UiLCJzY2hlZHVsZSIsImFjdGl2ZSIsInR3ZWVuVmFsdWUiLCJfaWQiLCJpbnRlcnBvbGF0ZU51bWJlciIsImludGVycG9sYXRlUmdiIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJjaGlsZHJlbiIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJvbkZ1bmN0aW9uIiwiYXR0clR3ZWVuIiwidmFsdWUwMCIsInZhbHVlMTAiLCJpbnRlcnBvbGF0ZTAiLCJ2YWx1ZTEiLCJfdmFsdWUiLCJzdHlsZVR3ZWVuIiwic3R5bGVSZW1vdmUiLCJzdHlsZVJlbW92ZUVuZCIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZUNvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwidGV4dENvbnN0YW50IiwidHdlZW4wIiwidHdlZW4xIiwiZWFzZUNvbnN0YW50IiwiZGVmYXVsdFRpbWluZyIsIm5vcHJvcGFnYXRpb24iLCJpbnRlcnJ1cHQiLCJNT0RFX0RSQUciLCJNT0RFX1NQQUNFIiwiTU9ERV9IQU5ETEUiLCJNT0RFX0NFTlRFUiIsImhhbmRsZXMiLCJ4eSIsIlhZIiwiY3Vyc29ycyIsIm92ZXJsYXkiLCJudyIsIm5lIiwic2UiLCJzdyIsImZsaXBYIiwiZmxpcFkiLCJzaWduc1giLCJzaWduc1kiLCJkZWZhdWx0RmlsdGVyIiwiYnV0dG9uIiwiZGVmYXVsdEV4dGVudCIsImhlaWdodCIsIl9fYnJ1c2giLCJleHRlbnQiLCJkaW0iLCJ0b3VjaGVuZGluZyIsImxpc3RlbmVycyIsImJydXNoIiwiaGFuZGxlU2l6ZSIsImluaXRpYWxpemUiLCJoYW5kbGUiLCJyZWRyYXciLCJzdGFydGVkIiwiZW1pdHRlciIsIkVtaXR0ZXIiLCJ0b3VjaGVzIiwibm9ldmVudCIsIncwIiwidzEiLCJuMCIsIm4xIiwiZTAiLCJlMSIsIm1vdmluZyIsImxvY2tYIiwibG9ja1kiLCJ0YXJnZXQiLCJtb2RlIiwibWV0YUtleSIsImFsdEtleSIsInNpZ25YIiwic2lnblkiLCJzaGlmdGluZyIsInNoaWZ0S2V5IiwicG9pbnQwIiwibW91c2UiLCJlbWl0IiwiYmVmb3Jlc3RhcnQiLCJtb3ZlZCIsImVuZGVkIiwidmlldyIsImtleUNvZGUiLCJtb3ZlIiwiX19ub3NlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJkcmFnRGlzYWJsZSIsInBvaW50MSIsIm5vY2xpY2siLCJkcmFnRW5hYmxlIiwic2VsZWN0aW9uMCIsInNlbGVjdGlvbjEiLCJzdGFydGluZyIsImN1c3RvbUV2ZW50Iiwia2VybmVsIiwiZXBhbmVjaG5pa292IiwiZ2F1c3NpYW4iLCJleHAiLCJrZXJuZWxCYW5kd2lkdGgiLCJucmQiLCJkZXZpYXRpb24iLCJrZXJuZWxEZW5zaXR5RXN0aW1hdG9yIiwiVG9vbHRpcCIsIltvYmplY3QgT2JqZWN0XSIsInZlcmJvc2UiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImluZm8iLCJjb25zb2xlIiwiZWRpdCIsInBhZ2VYIiwicGFnZVkiLCJUb29sYmFyIiwiZG9tSWQiLCJ0b29sdGlwIiwidmVydGljYWwiLCIkIiwic2hvdyIsImJ0bkNsYXNzZXMiLCJiYXIiLCJhZGRDbGFzcyIsImFwcGVuZFRvIiwiYnV0dG9ucyIsInN2Z0lkIiwib3V0ZmlsZU5hbWUiLCJjbG9uZUlkIiwiaWNvbiIsImNyZWF0ZUJ1dHRvbiIsImRvd25sb2FkU3ZnIiwiaGlkZSIsIiRidXR0b24iLCJmaWxlTmFtZSIsInN2Z09iaiIsIiRzdmdDb3B5Iiwic3R5bGVzIiwiZG9tIiwidXNlZCIsInNoZWV0cyIsInN0eWxlU2hlZXRzIiwiY3NzUnVsZXMiLCJydWxlcyIsInJ1bGUiLCJlbGVtcyIsImZpbmQiLCJzZWxlY3RvclRleHQiLCJjc3NUZXh0IiwicGFyc2VDc3NTdHlsZXMiLCJwcmVwZW5kIiwic3ZnSHRtbCIsInN2Z0Jsb2IiLCJCbG9iIiwic2F2ZUFzIiwiR3JvdXBlZFZpb2xpbiIsImdyb3VwSW5mbyIsIl9zYW5pdHlDaGVjayIsInRvb2xiYXIiLCJ4UGFkZGluZyIsInhEb21haW4iLCJ5RG9tYWluIiwieUxhYmVsIiwic2hvd1giLCJzaG93U3ViWCIsInN1YlhBbmdsZSIsInNob3dXaGlza2VyIiwic2hvd0RpdmlkZXIiLCJzaG93TGVnZW5kIiwic2hvd1NpemUiLCJyZXNldCIsInJlbmRlciIsImFsbFYiLCJzY2FsZUJhbmQiLCJzdWJ4Iiwic2NhbGVMaW5lYXIiLCJwYXJzZUZsb2F0IiwibGFiZWwiLCJlbnRyeSIsIl9kcmF3VmlvbGluIiwic2l6ZVNjYWxlIiwic3VieEciLCJ4QXhpcyIsInlBeGlzIiwiX2FkZEdyb3VwRGl2aWRlciIsImxlZ2VuZEciLCJ0aGVCcnVzaCIsInpvb20iLCJpZGVsVGltZW91dCIsImxvd0JvdW5kIiwidXBwZXJCb3VuZCIsImdnIiwicTEiLCJxMyIsIm1lZCIsIm1lZGlhbiIsImdJbmRleCIsImtkZSIsImVEb21haW4iLCJ2ZXJ0aWNlcyIsInpNYXgiLCJ2aW9saW5HIiwidmlvbGluIiwidlBhdGgiLCJpcXIiLCJ1cHBlciIsIndhcm4iLCJnZXRYIiwiZ2V0R3RleFVybHMiLCJob3N0IiwiZHluZXF0bCIsInNucCIsInZhcmlhbnRJZCIsImV4b25FeHAiLCJ0cmFuc2NyaXB0RXhwIiwianVuY3Rpb25FeHAiLCJ0cmFuc2NyaXB0IiwiZXhvbiIsImdlbmVNb2RlbCIsImdlbmVNb2RlbFVuZmlsdGVyZWQiLCJnZW5lRXhwIiwibWVkR2VuZUV4cCIsInRvcEluVGlzc3VlRmlsdGVyZWQiLCJ0b3BJblRpc3N1ZSIsImdlbmVJZCIsInRpc3N1ZSIsInRpc3N1ZVNpdGVzIiwic2FtcGxlIiwicm5hc2VxQ3JhbSIsIndnc0NyYW0iLCJmY0JpbGxpbmciLCJmY1dvcmtTcGFjZSIsImZjUG9ydGFsV29ya1NwYWNlIiwiZGFzaGJvYXJkSWQiLCJtZW51SWQiLCJwYWlySWQiLCJzdWJtaXRJZCIsImZvcm1JZCIsIm1lc3NhZ2VCb3hJZCIsInVybHMiLCJ0aXNzdWVHcm91cHMiLCJmb3JFcXRsIiwiaW52YWxpZFRpc3N1ZXMiLCJ0aXNzdWVzIiwiaW5jbHVkZXMiLCJ0aXNzdWVTaXRlRGV0YWlsSWQiLCJyZWR1Y2UiLCJhcnIiLCJncm91cE5hbWUiLCJ0aXNzdWVTaXRlIiwic2l0ZSIsInRpc3N1ZVNpdGVEZXRhaWwiLCJwYXJzZVRpc3N1ZVNpdGVzIiwibWFpbkNsYXNzIiwiJGFsbFRpc3N1ZURpdiIsImNoYW5nZSIsInZhbCIsInByb3AiLCJncm91cE5hbWVzIiwiJHNlY3Rpb25zIiwiZ25hbWUiLCJzaXRlcyIsImdJZCIsIiRjdXJyZW50RG9tIiwiJHNpdGVEb20iLCJjbGljayIsImlzIiwiY3JlYXRlVGlzc3VlR3JvdXBNZW51IiwiX2dldEdURXhVcmxzIiwicXVlcnlUaXNzdWVJZHMiLCJoYXNDbGFzcyIsInBhcnNlVGlzc3VlR3JvdXBNZW51IiwiYWxlcnQiLCJwYWlycyIsInRpc3N1ZURpY3QiLCJwYWlyIiwidmlkIiwiZ2lkIiwiZ2VuZVVybCIsInZhcmlhbnRVcmwiLCJzdGFydHNXaXRoIiwiUHJvbWlzZSIsImFsbCIsImdlbmUiLCJnanNvbiIsImdlbmVzIiwiZ2VuZVN5bWJvbFVwcGVyIiwiZ2VuY29kZUlkIiwiX3BhcnNlR2VuZSIsInZhcmlhbnQiLCJ2anNvbiIsInZhcmlhbnRzIiwiX3BhcnNlVmFyaWFudCIsImVycm9yTWVzc2FnZSIsInJlZiIsImFsdCIsImhldCIsInByb21pc2VzIiwidXJsIiwidElkIiwidXJsUm9vdCIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0IiwiY2F0Y2giLCJlcnIiLCJmYWlsZWQiLCJyZXN1bHRzIiwiZXhwcmVzc2lvbl92YWx1ZXMiLCJnZW5vdHlwZXMiLCJob21vUmVmRXhwIiwiaG9tb0FsdEV4cCIsImhldGVyb0V4cCIsInB2YWx1ZSIsInB2YWx1ZVRocmVzaG9sZCIsIm1haW5JZCIsIm1haW4iLCJjaGFydCIsInNhdmUiLCJtYXJnaW4iLCJpbm5lcldpZHRoIiwiZ2VuZVN5bWJvbCIsInNucElkIiwiY3JlYXRlVG9vbHRpcCIsImNyZWF0ZVRvb2xiYXIiLCJjcmVhdGVEb3dubG9hZFN2Z0J1dHRvbiIsInBsb3QiLCJjdXN0b21YbGFiZWwiLCJjdXN0b21MYWJlbHMiLCJfY3VzdG9taXplVmlvbGluUGxvdCIsIl92aXN1YWxpemUiLCJfcmVuZGVyRXF0bFBsb3QiLCJyZW1vdmVDbGFzcyIsIl9zdWJtaXQiXSwibWFwcGluZ3MiOiIyQ0FBQSxJQUFJQSxLQUNBQyxLQUNBQyxFQUFRLEdBQ1JDLEVBQVUsR0FDVkMsRUFBUyxHQUViLFNBQVNDLEVBQWdCQyxHQUN2QixPQUFPLElBQUlDLFNBQVMsSUFBSyxXQUFhRCxFQUFRRSxJQUFJLFNBQVNDLEVBQU1DLEdBQy9ELE9BQU9DLEtBQUtDLFVBQVVILEdBQVEsT0FBU0MsRUFBSSxNQUMxQ0csS0FBSyxLQUFPLEtBMEJGLFdBQVNDLEdBQ3RCLElBQUlDLEVBQVcsSUFBSUMsT0FBTyxLQUFRRixFQUFZLFNBQzFDRyxFQUFZSCxFQUFVSSxXQUFXLEdBV3JDLFNBQVNDLEVBQVVDLEVBQU1DLEdBQ3ZCLElBSUlDLEVBSkFDLEtBQ0FDLEVBQUlKLEVBQUtLLE9BQ1RDLEVBQUksRUFDSkMsRUFBSSxFQUVKQyxFQUFNSixHQUFLLEVBQ1hLLEdBQU0sRUFNVixTQUFTQyxJQUNQLEdBQUlGLEVBQUssT0FBTzNCLEVBQ2hCLEdBQUk0QixFQUFLLE9BQU9BLEdBQU0sRUFBTzdCLEVBRzdCLElBQUlVLEVBQVVxQixFQUFQQyxFQUFJTixFQUNYLEdBQUlOLEVBQUtGLFdBQVdjLEtBQU85QixFQUFPLENBQ2hDLEtBQU93QixJQUFNRixHQUFLSixFQUFLRixXQUFXUSxLQUFPeEIsR0FBU2tCLEVBQUtGLGFBQWFRLEtBQU94QixJQUkzRSxPQUhLUSxFQUFJZ0IsSUFBTUYsRUFBR0ksR0FBTSxHQUNkRyxFQUFJWCxFQUFLRixXQUFXUSxRQUFVdkIsRUFBUzBCLEdBQU0sRUFDOUNFLElBQU0zQixJQUFVeUIsR0FBTSxFQUFVVCxFQUFLRixXQUFXUSxLQUFPdkIsS0FBV3VCLEdBQ3BFTixFQUFLYSxNQUFNRCxFQUFJLEVBQUd0QixFQUFJLEdBQUd3QixRQUFRLE1BQU8sS0FJakQsS0FBT1IsRUFBSUYsR0FBRyxDQUNaLElBQUtPLEVBQUlYLEVBQUtGLFdBQVdSLEVBQUlnQixRQUFVdkIsRUFBUzBCLEdBQU0sT0FDakQsR0FBSUUsSUFBTTNCLEVBQVV5QixHQUFNLEVBQVVULEVBQUtGLFdBQVdRLEtBQU92QixLQUFXdUIsT0FDdEUsR0FBSUssSUFBTWQsRUFBVyxTQUMxQixPQUFPRyxFQUFLYSxNQUFNRCxFQUFHdEIsR0FJdkIsT0FBT2tCLEdBQU0sRUFBTVIsRUFBS2EsTUFBTUQsRUFBR1IsR0FHbkMsSUE3QklKLEVBQUtGLFdBQVdNLEVBQUksS0FBT3JCLEtBQVdxQixFQUN0Q0osRUFBS0YsV0FBV00sRUFBSSxLQUFPcEIsS0FBVW9CLEdBNEJqQ0YsRUFBSVEsT0FBYTdCLEdBQUssQ0FFNUIsSUFEQSxJQUFJa0MsS0FDR2IsSUFBTXRCLEdBQU9zQixJQUFNckIsR0FBS2tDLEVBQUlDLEtBQUtkLEdBQUlBLEVBQUlRLElBQzVDVCxHQUE0QixPQUF0QmMsRUFBTWQsRUFBRWMsRUFBS1IsT0FDdkJKLEVBQUthLEtBQUtELEdBR1osT0FBT1osRUFnQlQsU0FBU2MsRUFBVUYsR0FDakIsT0FBT0EsRUFBSTNCLElBQUk4QixHQUFhekIsS0FBS0MsR0FHbkMsU0FBU3dCLEVBQVlsQixHQUNuQixPQUFlLE1BQVJBLEVBQWUsR0FDaEJMLEVBQVN3QixLQUFLbkIsR0FBUSxJQUFNLElBQU9BLEVBQUtjLFFBQVEsS0FBTSxNQUFVLElBQ2hFZCxFQUdSLE9BQ0VvQixNQWxGRixTQUFlcEIsRUFBTUMsR0FDbkIsSUFBSW9CLEVBQVNuQyxFQUFTaUIsRUFBT0osRUFBVUMsRUFBTSxTQUFTZSxFQUFLekIsR0FDekQsR0FBSStCLEVBQVMsT0FBT0EsRUFBUU4sRUFBS3pCLEVBQUksR0FDckNKLEVBQVU2QixFQUFLTSxFQUFVcEIsRUE5Qi9CLFNBQXlCZixFQUFTZSxHQUNoQyxJQUFJcUIsRUFBU3JDLEVBQWdCQyxHQUM3QixPQUFPLFNBQVM2QixFQUFLekIsR0FDbkIsT0FBT1csRUFBRXFCLEVBQU9QLEdBQU16QixFQUFHSixJQTJCTXFDLENBQWdCUixFQUFLZCxHQUFLaEIsRUFBZ0I4QixLQUd6RSxPQURBWixFQUFLakIsUUFBVUEsTUFDUmlCLEdBNkVQSixVQUFXQSxFQUNYeUIsT0ExQkYsU0FBZ0JyQixFQUFNakIsR0FFcEIsT0FEZSxNQUFYQSxJQUFpQkEsRUE5RXpCLFNBQXNCaUIsR0FDcEIsSUFBSXNCLEVBQVlDLE9BQU9DLE9BQU8sTUFDMUJ6QyxLQVVKLE9BUkFpQixFQUFLeUIsUUFBUSxTQUFTYixHQUNwQixJQUFLLElBQUljLEtBQVVkLEVBQ1hjLEtBQVVKLEdBQ2R2QyxFQUFROEIsS0FBS1MsRUFBVUksR0FBVUEsS0FLaEMzQyxFQWtFMEI0QyxDQUFhM0IsS0FDcENqQixFQUFRRSxJQUFJOEIsR0FBYXpCLEtBQUtDLElBQVlxQyxPQUFPNUIsRUFBS2YsSUFBSSxTQUFTMkIsR0FDekUsT0FBTzdCLEVBQVFFLElBQUksU0FBU3lDLEdBQzFCLE9BQU9YLEVBQVlILEVBQUljLE1BQ3RCcEMsS0FBS0MsTUFDTkQsS0FBSyxPQXFCVHVDLFdBbEJGLFNBQW9CN0IsR0FDbEIsT0FBT0EsRUFBS2YsSUFBSTZCLEdBQVd4QixLQUFLLFFDekdwQyxJQUFJd0MsRUFBTUMsRUFBSSxLQ0FWQyxHREVrQkYsRUFBSWIsTUFDQWEsRUFBSWxDLFVBQ1BrQyxFQUFJVCxPQUNBUyxFQUFJRCxXQ0xyQkUsRUFBSSxPQUVRQyxFQUFJZixNQUNBZSxFQUFJcEMsVUFDUG9DLEVBQUlYLE9BQ0FXLEVBQUlILFdDUC9CLFNBQVNJLEVBQWFDLEdBQ3BCLElBQUtBLEVBQVNDLEdBQUksTUFBTSxJQUFJQyxNQUFNRixFQUFTRyxPQUFTLElBQU1ILEVBQVNJLFlBQ25FLE9BQU9KLEVBQVNLLE9BR0gsV0FBU0MsRUFBT0MsR0FDN0IsT0FBT0MsTUFBTUYsRUFBT0MsR0FBTUUsS0FBS1YsR0NOMUIsSUFBSVcsRUFBUSxrQ0FHakJDLElBQUssNkJBQ0xELE1BQU9BLEVBQ1BFLE1BQU8sK0JBQ1BDLElBQUssdUNBQ0xDLE1BQU8saUNDTE0sV0FBUzlELEdBQ3RCLElBQUkrRCxFQUFTL0QsR0FBUSxHQUFJQyxFQUFJOEQsRUFBT0MsUUFBUSxLQUU1QyxPQURJL0QsR0FBSyxHQUFxQyxXQUEvQjhELEVBQVMvRCxFQUFLd0IsTUFBTSxFQUFHdkIsTUFBaUJELEVBQU9BLEVBQUt3QixNQUFNdkIsRUFBSSxJQUN0RWdFLEVBQVdDLGVBQWVILElBQVdJLE1BQU9GLEVBQVdGLEdBQVNLLE1BQU9wRSxHQUFRQSxFQ2N6RSxXQUFTQSxHQUN0QixJQUFJcUUsRUFBV0MsRUFBVXRFLEdBQ3pCLE9BQVFxRSxFQUFTRCxNQVJuQixTQUFzQkMsR0FDcEIsT0FBTyxXQUNMLE9BQU9FLEtBQUtDLGNBQWNDLGdCQUFnQkosRUFBU0YsTUFBT0UsRUFBU0QsU0FadkUsU0FBd0JwRSxHQUN0QixPQUFPLFdBQ0wsSUFBSTBFLEVBQVdILEtBQUtDLGNBQ2hCRyxFQUFNSixLQUFLSyxhQUNmLE9BQU9ELElBQVFqQixHQUFTZ0IsRUFBU0csZ0JBQWdCRCxlQUFpQmxCLEVBQzVEZ0IsRUFBU0ksY0FBYzlFLEdBQ3ZCMEUsRUFBU0QsZ0JBQWdCRSxFQUFLM0UsTUFjaEJxRSxHQ3ZCeEIsU0FBU1UsS0FFTSxXQUFTQyxHQUN0QixPQUFtQixNQUFaQSxFQUFtQkQsRUFBTyxXQUMvQixPQUFPUixLQUFLVSxjQUFjRCxJQ0o5QixTQUFTRSxJQUNQLFNBR2EsV0FBU0YsR0FDdEIsT0FBbUIsTUFBWkEsRUFBbUJFLEVBQVEsV0FDaEMsT0FBT1gsS0FBS1ksaUJBQWlCSCxJQ05qQyxJQUFJSSxFQUFVLFNBQVNKLEdBQ3JCLE9BQU8sV0FDTCxPQUFPVCxLQUFLYyxRQUFRTCxLQUl4QixHQUF3QixvQkFBYk4sU0FBMEIsQ0FDbkMsSUFBSVksRUFBVVosU0FBU0csZ0JBQ3ZCLElBQUtTLEVBQVFELFFBQVMsQ0FDcEIsSUFBSUUsRUFBZ0JELEVBQVFFLHVCQUNyQkYsRUFBUUcsbUJBQ1JILEVBQVFJLG9CQUNSSixFQUFRSyxpQkFDZlAsRUFBVSxTQUFTSixHQUNqQixPQUFPLFdBQ0wsT0FBT08sRUFBY0ssS0FBS3JCLEtBQU1TLFlBTXpCSSxFQ3JCQSxXQUFTUyxHQUN0QixPQUFPLElBQUlDLE1BQU1ELEVBQU83RSxRQ01uQixTQUFTK0UsRUFBVUMsRUFBUUMsR0FDaEMxQixLQUFLQyxjQUFnQndCLEVBQU94QixjQUM1QkQsS0FBS0ssYUFBZW9CLEVBQU9wQixhQUMzQkwsS0FBSzJCLE1BQVEsS0FDYjNCLEtBQUs0QixRQUFVSCxFQUNmekIsS0FBSzZCLFNBQVdILEVBR2xCRixFQUFVTSxXQUNSQyxZQUFhUCxFQUNiUSxZQUFhLFNBQVNDLEdBQVMsT0FBT2pDLEtBQUs0QixRQUFRTSxhQUFhRCxFQUFPakMsS0FBSzJCLFFBQzVFTyxhQUFjLFNBQVNELEVBQU9FLEdBQVEsT0FBT25DLEtBQUs0QixRQUFRTSxhQUFhRCxFQUFPRSxJQUM5RXpCLGNBQWUsU0FBU0QsR0FBWSxPQUFPVCxLQUFLNEIsUUFBUWxCLGNBQWNELElBQ3RFRyxpQkFBa0IsU0FBU0gsR0FBWSxPQUFPVCxLQUFLNEIsUUFBUWhCLGlCQUFpQkgsS0NoQjlFLElBQUkyQixFQUFZLElBRWhCLFNBQVNDLEVBQVVaLEVBQVFhLEVBQU9DLEVBQU9qQixFQUFRa0IsRUFBTUMsR0FTckQsSUFSQSxJQUNJQyxFQURBaEgsRUFBSSxFQUVKaUgsRUFBY0wsRUFBTTdGLE9BQ3BCbUcsRUFBYUgsRUFBS2hHLE9BS2ZmLEVBQUlrSCxJQUFjbEgsR0FDbkJnSCxFQUFPSixFQUFNNUcsS0FDZmdILEVBQUtiLFNBQVdZLEVBQUsvRyxHQUNyQjRGLEVBQU81RixHQUFLZ0gsR0FFWkgsRUFBTTdHLEdBQUssSUFBSThGLEVBQVVDLEVBQVFnQixFQUFLL0csSUFLMUMsS0FBT0EsRUFBSWlILElBQWVqSCxHQUNwQmdILEVBQU9KLEVBQU01RyxNQUNmOEcsRUFBSzlHLEdBQUtnSCxHQUtoQixTQUFTRyxFQUFRcEIsRUFBUWEsRUFBT0MsRUFBT2pCLEVBQVFrQixFQUFNQyxFQUFNSyxHQUN6RCxJQUFJcEgsRUFDQWdILEVBS0FLLEVBSkFDLEtBQ0FMLEVBQWNMLEVBQU03RixPQUNwQm1HLEVBQWFILEVBQUtoRyxPQUNsQndHLEVBQVksSUFBSTFCLE1BQU1vQixHQUsxQixJQUFLakgsRUFBSSxFQUFHQSxFQUFJaUgsSUFBZWpILEdBQ3pCZ0gsRUFBT0osRUFBTTVHLE1BQ2Z1SCxFQUFVdkgsR0FBS3FILEVBQVdYLEVBQVlVLEVBQUl6QixLQUFLcUIsRUFBTUEsRUFBS2IsU0FBVW5HLEVBQUc0RyxHQUNuRVMsS0FBWUMsRUFDZFIsRUFBSzlHLEdBQUtnSCxFQUVWTSxFQUFlRCxHQUFZTCxHQVFqQyxJQUFLaEgsRUFBSSxFQUFHQSxFQUFJa0gsSUFBY2xILEdBRXhCZ0gsRUFBT00sRUFEWEQsRUFBV1gsRUFBWVUsRUFBSXpCLEtBQUtJLEVBQVFnQixFQUFLL0csR0FBSUEsRUFBRytHLE1BRWxEbkIsRUFBTzVGLEdBQUtnSCxFQUNaQSxFQUFLYixTQUFXWSxFQUFLL0csR0FDckJzSCxFQUFlRCxHQUFZLE1BRTNCUixFQUFNN0csR0FBSyxJQUFJOEYsRUFBVUMsRUFBUWdCLEVBQUsvRyxJQUsxQyxJQUFLQSxFQUFJLEVBQUdBLEVBQUlpSCxJQUFlakgsR0FDeEJnSCxFQUFPSixFQUFNNUcsS0FBUXNILEVBQWVDLEVBQVV2SCxNQUFRZ0gsSUFDekRGLEVBQUs5RyxHQUFLZ0gsR0NsRGhCLFNBQVNRLEVBQVVDLEVBQUdDLEdBQ3BCLE9BQU9ELEVBQUlDLEdBQUssRUFBSUQsRUFBSUMsRUFBSSxFQUFJRCxHQUFLQyxFQUFJLEVBQUlDLElDdEJoQyxXQUFTWCxHQUN0QixPQUFRQSxFQUFLekMsZUFBaUJ5QyxFQUFLekMsY0FBY3FELGFBQ3pDWixFQUFLdkMsVUFBWXVDLEdBQ2xCQSxFQUFLWSxZQzRCUCxTQUFTQyxFQUFXYixFQUFNakgsR0FDL0IsT0FBT2lILEVBQUtjLE1BQU1DLGlCQUFpQmhJLElBQzVCNkgsRUFBWVosR0FBTWdCLGlCQUFpQmhCLEVBQU0sTUFBTWUsaUJBQWlCaEksR0NqQ3pFLFNBQVNrSSxFQUFXQyxHQUNsQixPQUFPQSxFQUFPQyxPQUFPQyxNQUFNLFNBRzdCLFNBQVNDLEVBQVVyQixHQUNqQixPQUFPQSxFQUFLcUIsV0FBYSxJQUFJQyxFQUFVdEIsR0FHekMsU0FBU3NCLEVBQVV0QixHQUNqQjFDLEtBQUtpRSxNQUFRdkIsRUFDYjFDLEtBQUtrRSxPQUFTUCxFQUFXakIsRUFBS3lCLGFBQWEsVUFBWSxJQXVCekQsU0FBU0MsRUFBVzFCLEVBQU0yQixHQUV4QixJQURBLElBQUlDLEVBQU9QLEVBQVVyQixHQUFPaEgsR0FBSyxFQUFHaUIsRUFBSTBILEVBQU01SCxTQUNyQ2YsRUFBSWlCLEdBQUcySCxFQUFLQyxJQUFJRixFQUFNM0ksSUFHakMsU0FBUzhJLEVBQWM5QixFQUFNMkIsR0FFM0IsSUFEQSxJQUFJQyxFQUFPUCxFQUFVckIsR0FBT2hILEdBQUssRUFBR2lCLEVBQUkwSCxFQUFNNUgsU0FDckNmLEVBQUlpQixHQUFHMkgsRUFBS0csT0FBT0osRUFBTTNJLElDeENwQyxTQUFTZ0osSUFDUDFFLEtBQUsyRSxZQUFjLEdDRHJCLFNBQVNDLElBQ1A1RSxLQUFLNkUsVUFBWSxHQ0RuQixTQUFTQyxJQUNIOUUsS0FBSytFLGFBQWEvRSxLQUFLZ0YsV0FBV2hELFlBQVloQyxNQ0RwRCxTQUFTaUYsSUFDSGpGLEtBQUtrRixpQkFBaUJsRixLQUFLZ0YsV0FBVzlDLGFBQWFsQyxLQUFNQSxLQUFLZ0YsV0FBV0csWUNFL0UsU0FBU0MsSUFDUCxPQUFPLEtDSlQsU0FBU1gsSUFDUCxJQUFJaEQsRUFBU3pCLEtBQUtnRixXQUNkdkQsR0FBUUEsRUFBTzRELFlBQVlyRixNQ0ZqQyxTQUFTc0YsSUFDUCxPQUFPdEYsS0FBS2dGLFdBQVc5QyxhQUFhbEMsS0FBS3VGLFdBQVUsR0FBUXZGLEtBQUsrRSxhQUdsRSxTQUFTUyxJQUNQLE9BQU94RixLQUFLZ0YsV0FBVzlDLGFBQWFsQyxLQUFLdUYsV0FBVSxHQUFPdkYsS0FBSytFLGFQUWpFZixFQUFVbEMsV0FDUnlDLElBQUssU0FBUzlJLEdBQ0p1RSxLQUFLa0UsT0FBT3pFLFFBQVFoRSxHQUNwQixJQUNOdUUsS0FBS2tFLE9BQU85RyxLQUFLM0IsR0FDakJ1RSxLQUFLaUUsTUFBTXdCLGFBQWEsUUFBU3pGLEtBQUtrRSxPQUFPckksS0FBSyxRQUd0RDRJLE9BQVEsU0FBU2hKLEdBQ2YsSUFBSUMsRUFBSXNFLEtBQUtrRSxPQUFPekUsUUFBUWhFLEdBQ3hCQyxHQUFLLElBQ1BzRSxLQUFLa0UsT0FBT3dCLE9BQU9oSyxFQUFHLEdBQ3RCc0UsS0FBS2lFLE1BQU13QixhQUFhLFFBQVN6RixLQUFLa0UsT0FBT3JJLEtBQUssUUFHdEQ4SixTQUFVLFNBQVNsSyxHQUNqQixPQUFPdUUsS0FBS2tFLE9BQU96RSxRQUFRaEUsSUFBUyxJUTdCeEMsSUFBSW1LLEtBRU9DLEVBQVEsS0FFSyxvQkFBYjFGLFdBRUgsaUJBRFFBLFNBQVNHLGtCQUVyQnNGLEdBQWdCRSxXQUFZLFlBQWFDLFdBQVksY0FJekQsU0FBU0MsRUFBc0JDLEVBQVVDLEVBQU81RCxHQUU5QyxPQURBMkQsRUFBV0UsRUFBZ0JGLEVBQVVDLEVBQU81RCxHQUNyQyxTQUFTdUQsR0FDZCxJQUFJTyxFQUFVUCxFQUFNUSxjQUNmRCxJQUFZQSxJQUFZcEcsTUFBa0QsRUFBeENvRyxFQUFRRSx3QkFBd0J0RyxRQUNyRWlHLEVBQVM1RSxLQUFLckIsS0FBTTZGLElBSzFCLFNBQVNNLEVBQWdCRixFQUFVQyxFQUFPNUQsR0FDeEMsT0FBTyxTQUFTaUUsR0FDZCxJQUFJQyxFQUFTWCxFQUNiQSxFQUFRVSxFQUNSLElBQ0VOLEVBQVM1RSxLQUFLckIsS0FBTUEsS0FBSzZCLFNBQVVxRSxFQUFPNUQsV0FFMUN1RCxFQUFRVyxJQWFkLFNBQVNDLEVBQVNDLEdBQ2hCLE9BQU8sV0FDTCxJQUFJQyxFQUFLM0csS0FBSzRHLEtBQ2QsR0FBS0QsRUFBTCxDQUNBLElBQUssSUFBa0NFLEVBQTlCN0osRUFBSSxFQUFHdEIsR0FBSyxFQUFHb0wsRUFBSUgsRUFBR2xLLE9BQVdPLEVBQUk4SixJQUFLOUosRUFDN0M2SixFQUFJRixFQUFHM0osR0FBTTBKLEVBQVNLLE1BQVFGLEVBQUVFLE9BQVNMLEVBQVNLLE1BQVNGLEVBQUVwTCxPQUFTaUwsRUFBU2pMLEtBR2pGa0wsSUFBS2pMLEdBQUttTCxFQUZWN0csS0FBS2dILG9CQUFvQkgsRUFBRUUsS0FBTUYsRUFBRVosU0FBVVksRUFBRUksV0FLN0N2TCxFQUFHaUwsRUFBR2xLLE9BQVNmLFNBQ1RzRSxLQUFLNEcsT0FJckIsU0FBU00sRUFBTVIsRUFBVVMsRUFBT0YsR0FDOUIsSUFBSUcsRUFBT3hCLEVBQWFqRyxlQUFlK0csRUFBU0ssTUFBUWYsRUFBd0JHLEVBQ2hGLE9BQU8sU0FBU2tCLEVBQUczTCxFQUFHNEcsR0FDcEIsSUFBb0J1RSxFQUFoQkYsRUFBSzNHLEtBQUs0RyxLQUFTWCxFQUFXbUIsRUFBS0QsRUFBT3pMLEVBQUc0RyxHQUNqRCxHQUFJcUUsRUFBSSxJQUFLLElBQUkzSixFQUFJLEVBQUc4SixFQUFJSCxFQUFHbEssT0FBUU8sRUFBSThKLElBQUs5SixFQUM5QyxJQUFLNkosRUFBSUYsRUFBRzNKLElBQUkrSixPQUFTTCxFQUFTSyxNQUFRRixFQUFFcEwsT0FBU2lMLEVBQVNqTCxLQUk1RCxPQUhBdUUsS0FBS2dILG9CQUFvQkgsRUFBRUUsS0FBTUYsRUFBRVosU0FBVVksRUFBRUksU0FDL0NqSCxLQUFLc0gsaUJBQWlCVCxFQUFFRSxLQUFNRixFQUFFWixTQUFXQSxFQUFVWSxFQUFFSSxRQUFVQSxRQUNqRUosRUFBRU0sTUFBUUEsR0FJZG5ILEtBQUtzSCxpQkFBaUJaLEVBQVNLLEtBQU1kLEVBQVVnQixHQUMvQ0osR0FBS0UsS0FBTUwsRUFBU0ssS0FBTXRMLEtBQU1pTCxFQUFTakwsS0FBTTBMLE1BQU9BLEVBQU9sQixTQUFVQSxFQUFVZ0IsUUFBU0EsR0FDckZOLEVBQ0FBLEVBQUd2SixLQUFLeUosR0FESjdHLEtBQUs0RyxNQUFRQyxJQ3JFMUIsU0FBU1UsRUFBYzdFLEVBQU1xRSxFQUFNUyxHQUNqQyxJQUFJQyxFQUFTbkUsRUFBWVosR0FDckJtRCxFQUFRNEIsRUFBT0MsWUFFRSxtQkFBVjdCLEVBQ1RBLEVBQVEsSUFBSUEsRUFBTWtCLEVBQU1TLElBRXhCM0IsRUFBUTRCLEVBQU90SCxTQUFTd0gsWUFBWSxTQUNoQ0gsR0FBUTNCLEVBQU0rQixVQUFVYixFQUFNUyxFQUFPSyxRQUFTTCxFQUFPTSxZQUFhakMsRUFBTWtDLE9BQVNQLEVBQU9PLFFBQ3ZGbEMsRUFBTStCLFVBQVViLEdBQU0sR0FBTyxJQUdwQ3JFLEVBQUs2RSxjQUFjMUIsR0NpQmQsSUFBSW1DLEdBQVEsTUFFWixTQUFTQyxHQUFVQyxFQUFRQyxHQUNoQ25JLEtBQUtvSSxRQUFVRixFQUNmbEksS0FBS3FJLFNBQVdGLEVBR2xCLFNBQVNHLEtBQ1AsT0FBTyxJQUFJTCxLQUFZOUgsU0FBU0csa0JBQW1CMEgsR0NyQ3RDLFlBQVN2SCxHQUN0QixNQUEyQixpQkFBYkEsRUFDUixJQUFJd0gsS0FBWTlILFNBQVNPLGNBQWNELE1BQWNOLFNBQVNHLGtCQUM5RCxJQUFJMkgsS0FBWXhILElBQVl1SCxHQ0hyQixjQUViLElBREEsSUFBcUJPLEVBQWpCQyxFQUFVM0MsRUFDUDBDLEVBQVNDLEVBQVFDLGFBQWFELEVBQVVELEVBQy9DLE9BQU9DLEVDRk0sWUFBUzlGLEdBQ3RCLElBQUltRCxFQUFRNEMsS0FFWixPQURJNUMsRUFBTTZDLGlCQUFnQjdDLEVBQVFBLEVBQU02QyxlQUFlLElDTDFDLFNBQVNoRyxFQUFNbUQsR0FDNUIsSUFBSXpHLEVBQU1zRCxFQUFLaUcsaUJBQW1CakcsRUFFbEMsR0FBSXRELEVBQUl3SixlQUFnQixDQUN0QixJQUFJQyxFQUFRekosRUFBSXdKLGlCQUdoQixPQUZBQyxFQUFNQyxFQUFJakQsRUFBTWtELFFBQVNGLEVBQU1HLEVBQUluRCxFQUFNb0QsVUFDekNKLEVBQVFBLEVBQU1LLGdCQUFnQnhHLEVBQUt5RyxlQUFlQyxZQUNwQ04sRUFBR0QsRUFBTUcsR0FHekIsSUFBSUssRUFBTzNHLEVBQUs0Ryx3QkFDaEIsT0FBUXpELEVBQU1rRCxRQUFVTSxFQUFLRSxLQUFPN0csRUFBSzhHLFdBQVkzRCxFQUFNb0QsUUFBVUksRUFBS0ksSUFBTS9HLEVBQUtnSCxXREw5RWIsQ0FBTW5HLEVBQU1tRCxHRU5OLFlBQVMxQyxFQUFHQyxHQUN6QixPQUFPRCxFQUFJQyxHQUFLLEVBQUlELEVBQUlDLEVBQUksRUFBSUQsR0FBS0MsRUFBSSxFQUFJQyxJTHlDL0M0RSxHQUFVbkcsVUFBWXdHLEdBQVV4RyxXQUM5QkMsWUFBYWtHLEdBQ2IwQixPTXpDYSxTQUFTQSxHQUNBLG1CQUFYQSxJQUF1QkEsRUFBU2xKLEVBQVNrSixJQUVwRCxJQUFLLElBQUl6QixFQUFTbEksS0FBS29JLFFBQVN0QixFQUFJb0IsRUFBT3pMLE9BQVFtTixFQUFZLElBQUlySSxNQUFNdUYsR0FBSTlKLEVBQUksRUFBR0EsRUFBSThKLElBQUs5SixFQUMzRixJQUFLLElBQWlGMEYsRUFBTW1ILEVBQW5GdkgsRUFBUTRGLEVBQU9sTCxHQUFJTCxFQUFJMkYsRUFBTTdGLE9BQVFxTixFQUFXRixFQUFVNU0sR0FBSyxJQUFJdUUsTUFBTTVFLEdBQW1CakIsRUFBSSxFQUFHQSxFQUFJaUIsSUFBS2pCLEdBQzlHZ0gsRUFBT0osRUFBTTVHLE1BQVFtTyxFQUFVRixFQUFPdEksS0FBS3FCLEVBQU1BLEVBQUtiLFNBQVVuRyxFQUFHNEcsTUFDbEUsYUFBY0ksSUFBTW1ILEVBQVFoSSxTQUFXYSxFQUFLYixVQUNoRGlJLEVBQVNwTyxHQUFLbU8sR0FLcEIsT0FBTyxJQUFJNUIsR0FBVTJCLEVBQVc1SixLQUFLcUksV044QnJDMEIsVU8xQ2EsU0FBU0osR0FDQSxtQkFBWEEsSUFBdUJBLEVBQVNLLEVBQVlMLElBRXZELElBQUssSUFBSXpCLEVBQVNsSSxLQUFLb0ksUUFBU3RCLEVBQUlvQixFQUFPekwsT0FBUW1OLEtBQWdCekIsS0FBY25MLEVBQUksRUFBR0EsRUFBSThKLElBQUs5SixFQUMvRixJQUFLLElBQXlDMEYsRUFBckNKLEVBQVE0RixFQUFPbEwsR0FBSUwsRUFBSTJGLEVBQU03RixPQUFjZixFQUFJLEVBQUdBLEVBQUlpQixJQUFLakIsR0FDOURnSCxFQUFPSixFQUFNNUcsTUFDZmtPLEVBQVV4TSxLQUFLdU0sRUFBT3RJLEtBQUtxQixFQUFNQSxFQUFLYixTQUFVbkcsRUFBRzRHLElBQ25ENkYsRUFBUS9LLEtBQUtzRixJQUtuQixPQUFPLElBQUl1RixHQUFVMkIsRUFBV3pCLElQK0JoQzhCLE9RM0NhLFNBQVNDLEdBQ0QsbUJBQVZBLElBQXNCQSxFQUFRckosRUFBUXFKLElBRWpELElBQUssSUFBSWhDLEVBQVNsSSxLQUFLb0ksUUFBU3RCLEVBQUlvQixFQUFPekwsT0FBUW1OLEVBQVksSUFBSXJJLE1BQU11RixHQUFJOUosRUFBSSxFQUFHQSxFQUFJOEosSUFBSzlKLEVBQzNGLElBQUssSUFBdUUwRixFQUFuRUosRUFBUTRGLEVBQU9sTCxHQUFJTCxFQUFJMkYsRUFBTTdGLE9BQVFxTixFQUFXRixFQUFVNU0sTUFBZXRCLEVBQUksRUFBR0EsRUFBSWlCLElBQUtqQixHQUMzRmdILEVBQU9KLEVBQU01RyxLQUFPd08sRUFBTTdJLEtBQUtxQixFQUFNQSxFQUFLYixTQUFVbkcsRUFBRzRHLElBQzFEd0gsRUFBUzFNLEtBQUtzRixHQUtwQixPQUFPLElBQUl1RixHQUFVMkIsRUFBVzVKLEtBQUtxSSxXUmlDckM1RixLZDZCYSxTQUFTMEUsRUFBT3JFLEdBQzdCLElBQUtxRSxFQUdILE9BRkExRSxFQUFPLElBQUlsQixNQUFNdkIsS0FBS21LLFFBQVNuTixHQUFLLEVBQ3BDZ0QsS0FBS29LLEtBQUssU0FBUy9DLEdBQUs1RSxJQUFPekYsR0FBS3FLLElBQzdCNUUsRUFHVCxJdUJuRnNCcUcsRXZCbUZsQnVCLEVBQU92SCxFQUFNRCxFQUFVUixFQUN2QjhGLEVBQVVuSSxLQUFLcUksU0FDZkgsRUFBU2xJLEtBQUtvSSxRQUVHLG1CQUFWakIsSXVCdkZXMkIsRXZCdUY0QjNCLEVBQWpCQSxFdUJ0RjFCLFdBQ0wsT0FBTzJCLEl2QnVGVCxJQUFLLElBQUloQyxFQUFJb0IsRUFBT3pMLE9BQVE2RSxFQUFTLElBQUlDLE1BQU11RixHQUFJdkUsRUFBUSxJQUFJaEIsTUFBTXVGLEdBQUl0RSxFQUFPLElBQUlqQixNQUFNdUYsR0FBSTlKLEVBQUksRUFBR0EsRUFBSThKLElBQUs5SixFQUFHLENBQy9HLElBQUl5RSxFQUFTMEcsRUFBUW5MLEdBQ2pCc0YsRUFBUTRGLEVBQU9sTCxHQUNmMkYsRUFBY0wsRUFBTTdGLE9BQ3BCZ0csRUFBTzBFLEVBQU05RixLQUFLSSxFQUFRQSxHQUFVQSxFQUFPSSxTQUFVN0UsRUFBR21MLEdBQ3hEdkYsRUFBYUgsRUFBS2hHLE9BQ2xCNk4sRUFBYS9ILEVBQU12RixHQUFLLElBQUl1RSxNQUFNcUIsR0FDbEMySCxFQUFjakosRUFBT3RFLEdBQUssSUFBSXVFLE1BQU1xQixHQUd4Q3lILEVBQUs1SSxFQUFRYSxFQUFPZ0ksRUFBWUMsRUFGaEIvSCxFQUFLeEYsR0FBSyxJQUFJdUUsTUFBTW9CLEdBRW9CRixFQUFNSyxHQUs5RCxJQUFLLElBQW9CMEgsRUFBVXJJLEVBQTFCc0ksRUFBSyxFQUFHQyxFQUFLLEVBQW1CRCxFQUFLN0gsSUFBYzZILEVBQzFELEdBQUlELEVBQVdGLEVBQVdHLEdBQUssQ0FFN0IsSUFESUEsR0FBTUMsSUFBSUEsRUFBS0QsRUFBSyxLQUNmdEksRUFBT29JLEVBQVlHLE9BQVVBLEVBQUs5SCxJQUMzQzRILEVBQVM3SSxNQUFRUSxHQUFRLE1BUS9CLE9BSEFiLEVBQVMsSUFBSTJHLEdBQVUzRyxFQUFRNkcsSUFDeEJ3QyxPQUFTcEksRUFDaEJqQixFQUFPc0osTUFBUXBJLEVBQ1JsQixHY3BFUGlCLE1mN0NhLFdBQ2IsT0FBTyxJQUFJMEYsR0FBVWpJLEtBQUsySyxRQUFVM0ssS0FBS29JLFFBQVE1TSxJQUFJcVAsR0FBUzdLLEtBQUtxSSxXZTZDbkU3RixLVTlDYSxXQUNiLE9BQU8sSUFBSXlGLEdBQVVqSSxLQUFLNEssT0FBUzVLLEtBQUtvSSxRQUFRNU0sSUFBSXFQLEdBQVM3SyxLQUFLcUksV1Y4Q2xFeUMsTVdoRGEsU0FBU3hDLEdBRXRCLElBQUssSUFBSXlDLEVBQVUvSyxLQUFLb0ksUUFBUzRDLEVBQVUxQyxFQUFVRixRQUFTNkMsRUFBS0YsRUFBUXRPLE9BQVF5TyxFQUFLRixFQUFRdk8sT0FBUXFLLEVBQUlxRSxLQUFLQyxJQUFJSCxFQUFJQyxHQUFLRyxFQUFTLElBQUk5SixNQUFNMEosR0FBS2pPLEVBQUksRUFBR0EsRUFBSThKLElBQUs5SixFQUNwSyxJQUFLLElBQW1HMEYsRUFBL0Y0SSxFQUFTUCxFQUFRL04sR0FBSXVPLEVBQVNQLEVBQVFoTyxHQUFJTCxFQUFJMk8sRUFBTzdPLE9BQVFxTyxFQUFRTyxFQUFPck8sR0FBSyxJQUFJdUUsTUFBTTVFLEdBQVVqQixFQUFJLEVBQUdBLEVBQUlpQixJQUFLakIsR0FDeEhnSCxFQUFPNEksRUFBTzVQLElBQU02UCxFQUFPN1AsTUFDN0JvUCxFQUFNcFAsR0FBS2dILEdBS2pCLEtBQU8xRixFQUFJaU8sSUFBTWpPLEVBQ2ZxTyxFQUFPck8sR0FBSytOLEVBQVEvTixHQUd0QixPQUFPLElBQUlpTCxHQUFVb0QsRUFBUXJMLEtBQUtxSSxXWG1DbENtRCxNWW5EYSxXQUViLElBQUssSUFBSXRELEVBQVNsSSxLQUFLb0ksUUFBU3BMLEdBQUssRUFBRzhKLEVBQUlvQixFQUFPekwsU0FBVU8sRUFBSThKLEdBQy9ELElBQUssSUFBOERwRSxFQUExREosRUFBUTRGLEVBQU9sTCxHQUFJdEIsRUFBSTRHLEVBQU03RixPQUFTLEVBQUcwRixFQUFPRyxFQUFNNUcsS0FBWUEsR0FBSyxJQUMxRWdILEVBQU9KLEVBQU01RyxNQUNYeUcsR0FBUUEsSUFBU08sRUFBS3FDLGFBQWE1QyxFQUFLNkMsV0FBVzlDLGFBQWFRLEVBQU1QLEdBQzFFQSxFQUFPTyxHQUtiLE9BQU8xQyxNWnlDUHlMLEtibERhLFNBQVNDLEdBR3RCLFNBQVNDLEVBQVl4SSxFQUFHQyxHQUN0QixPQUFPRCxHQUFLQyxFQUFJc0ksRUFBUXZJLEVBQUV0QixTQUFVdUIsRUFBRXZCLFdBQWFzQixHQUFLQyxFQUhyRHNJLElBQVNBLEVBQVV4SSxHQU14QixJQUFLLElBQUlnRixFQUFTbEksS0FBS29JLFFBQVN0QixFQUFJb0IsRUFBT3pMLE9BQVFtUCxFQUFhLElBQUlySyxNQUFNdUYsR0FBSTlKLEVBQUksRUFBR0EsRUFBSThKLElBQUs5SixFQUFHLENBQy9GLElBQUssSUFBbUYwRixFQUEvRUosRUFBUTRGLEVBQU9sTCxHQUFJTCxFQUFJMkYsRUFBTTdGLE9BQVFvUCxFQUFZRCxFQUFXNU8sR0FBSyxJQUFJdUUsTUFBTTVFLEdBQVVqQixFQUFJLEVBQUdBLEVBQUlpQixJQUFLakIsR0FDeEdnSCxFQUFPSixFQUFNNUcsTUFDZm1RLEVBQVVuUSxHQUFLZ0gsR0FHbkJtSixFQUFVSixLQUFLRSxHQUdqQixPQUFPLElBQUkxRCxHQUFVMkQsRUFBWTVMLEtBQUtxSSxVQUFVbUQsU2FtQ2hEbkssS2FyRGEsV0FDYixJQUFJeUssRUFBV0MsVUFBVSxHQUd6QixPQUZBQSxVQUFVLEdBQUsvTCxLQUNmOEwsRUFBU0UsTUFBTSxLQUFNRCxXQUNkL0wsTWJrRFBpTSxNY3REYSxXQUNiLElBQUlBLEVBQVEsSUFBSTFLLE1BQU12QixLQUFLbUssUUFBU3pPLEdBQUssRUFFekMsT0FEQXNFLEtBQUtvSyxLQUFLLFdBQWE2QixJQUFRdlEsR0FBS3NFLE9BQzdCaU0sR2RvRFB2SixLZXZEYSxXQUViLElBQUssSUFBSXdGLEVBQVNsSSxLQUFLb0ksUUFBU3BMLEVBQUksRUFBRzhKLEVBQUlvQixFQUFPekwsT0FBUU8sRUFBSThKLElBQUs5SixFQUNqRSxJQUFLLElBQUlzRixFQUFRNEYsRUFBT2xMLEdBQUl0QixFQUFJLEVBQUdpQixFQUFJMkYsRUFBTTdGLE9BQVFmLEVBQUlpQixJQUFLakIsRUFBRyxDQUMvRCxJQUFJZ0gsRUFBT0osRUFBTTVHLEdBQ2pCLEdBQUlnSCxFQUFNLE9BQU9BLEVBSXJCLE9BQU8sTWYrQ1B5SCxLZ0J4RGEsV0FDYixJQUFJQSxFQUFPLEVBRVgsT0FEQW5LLEtBQUtvSyxLQUFLLGFBQWVELElBQ2xCQSxHaEJzRFB4SixNaUJ6RGEsV0FDYixPQUFRWCxLQUFLMEMsUWpCeURiMEgsS2tCMURhLFNBQVMwQixHQUV0QixJQUFLLElBQUk1RCxFQUFTbEksS0FBS29JLFFBQVNwTCxFQUFJLEVBQUc4SixFQUFJb0IsRUFBT3pMLE9BQVFPLEVBQUk4SixJQUFLOUosRUFDakUsSUFBSyxJQUFnRDBGLEVBQTVDSixFQUFRNEYsRUFBT2xMLEdBQUl0QixFQUFJLEVBQUdpQixFQUFJMkYsRUFBTTdGLE9BQWNmLEVBQUlpQixJQUFLakIsR0FDOURnSCxFQUFPSixFQUFNNUcsS0FBSW9RLEVBQVN6SyxLQUFLcUIsRUFBTUEsRUFBS2IsU0FBVW5HLEVBQUc0RyxHQUkvRCxPQUFPdEMsTWxCbURQa00sS21CakJhLFNBQVN6USxFQUFNMEwsR0FDNUIsSUFBSXJILEVBQVdDLEVBQVV0RSxHQUV6QixHQUFJc1EsVUFBVXRQLE9BQVMsRUFBRyxDQUN4QixJQUFJaUcsRUFBTzFDLEtBQUswQyxPQUNoQixPQUFPNUMsRUFBU0QsTUFDVjZDLEVBQUt5SixlQUFlck0sRUFBU0YsTUFBT0UsRUFBU0QsT0FDN0M2QyxFQUFLeUIsYUFBYXJFLEdBRzFCLE9BQU9FLEtBQUtvSyxNQUFlLE1BQVRqRCxFQUNYckgsRUFBU0QsTUE3Q2xCLFNBQXNCQyxHQUNwQixPQUFPLFdBQ0xFLEtBQUtvTSxrQkFBa0J0TSxFQUFTRixNQUFPRSxFQUFTRCxTQVJwRCxTQUFvQnBFLEdBQ2xCLE9BQU8sV0FDTHVFLEtBQUtxTSxnQkFBZ0I1USxLQWlEZ0QsbUJBQVYwTCxFQUN0RHJILEVBQVNELE1BcEJsQixTQUF3QkMsRUFBVXFILEdBQ2hDLE9BQU8sV0FDTCxJQUFJbUYsRUFBSW5GLEVBQU02RSxNQUFNaE0sS0FBTStMLFdBQ2pCLE1BQUxPLEVBQVd0TSxLQUFLb00sa0JBQWtCdE0sRUFBU0YsTUFBT0UsRUFBU0QsT0FDMURHLEtBQUt1TSxlQUFlek0sRUFBU0YsTUFBT0UsRUFBU0QsTUFBT3lNLEtBWjdELFNBQXNCN1EsRUFBTTBMLEdBQzFCLE9BQU8sV0FDTCxJQUFJbUYsRUFBSW5GLEVBQU02RSxNQUFNaE0sS0FBTStMLFdBQ2pCLE1BQUxPLEVBQVd0TSxLQUFLcU0sZ0JBQWdCNVEsR0FDL0J1RSxLQUFLeUYsYUFBYWhLLEVBQU02USxLQXlCeEJ4TSxFQUFTRCxNQW5DbEIsU0FBd0JDLEVBQVVxSCxHQUNoQyxPQUFPLFdBQ0xuSCxLQUFLdU0sZUFBZXpNLEVBQVNGLE1BQU9FLEVBQVNELE1BQU9zSCxLQVJ4RCxTQUFzQjFMLEVBQU0wTCxHQUMxQixPQUFPLFdBQ0xuSCxLQUFLeUYsYUFBYWhLLEVBQU0wTCxNQXVDK0JySCxFQUFVcUgsS25CS25FM0QsTVh0Q2EsU0FBUy9ILEVBQU0wTCxFQUFPcUYsR0FDbkMsT0FBT1QsVUFBVXRQLE9BQVMsRUFDcEJ1RCxLQUFLb0ssTUFBZSxNQUFUakQsRUF0Qm5CLFNBQXFCMUwsR0FDbkIsT0FBTyxXQUNMdUUsS0FBS3dELE1BQU1pSixlQUFlaFIsS0FxQmUsbUJBQVYwTCxFQVhuQyxTQUF1QjFMLEVBQU0wTCxFQUFPcUYsR0FDbEMsT0FBTyxXQUNMLElBQUlGLEVBQUluRixFQUFNNkUsTUFBTWhNLEtBQU0rTCxXQUNqQixNQUFMTyxFQUFXdE0sS0FBS3dELE1BQU1pSixlQUFlaFIsR0FDcEN1RSxLQUFLd0QsTUFBTWtKLFlBQVlqUixFQUFNNlEsRUFBR0UsS0FWekMsU0FBdUIvUSxFQUFNMEwsRUFBT3FGLEdBQ2xDLE9BQU8sV0FDTHhNLEtBQUt3RCxNQUFNa0osWUFBWWpSLEVBQU0wTCxFQUFPcUYsTUFpQlgvUSxFQUFNMEwsRUFBbUIsTUFBWnFGLEVBQW1CLEdBQUtBLElBQzFEakosRUFBV3ZELEtBQUswQyxPQUFRakgsSVdpQzlCa1IsU29CekNhLFNBQVNsUixFQUFNMEwsR0FDNUIsT0FBTzRFLFVBQVV0UCxPQUFTLEVBQ3BCdUQsS0FBS29LLE1BQWUsTUFBVGpELEVBdEJuQixTQUF3QjFMLEdBQ3RCLE9BQU8sa0JBQ0V1RSxLQUFLdkUsS0FxQjhCLG1CQUFWMEwsRUFYcEMsU0FBMEIxTCxFQUFNMEwsR0FDOUIsT0FBTyxXQUNMLElBQUltRixFQUFJbkYsRUFBTTZFLE1BQU1oTSxLQUFNK0wsV0FDakIsTUFBTE8sU0FBa0J0TSxLQUFLdkUsR0FDdEJ1RSxLQUFLdkUsR0FBUTZRLElBVnRCLFNBQTBCN1EsRUFBTTBMLEdBQzlCLE9BQU8sV0FDTG5ILEtBQUt2RSxHQUFRMEwsS0FpQmExTCxFQUFNMEwsSUFDNUJuSCxLQUFLMEMsT0FBT2pILElwQm9DbEJtUixRVkRhLFNBQVNuUixFQUFNMEwsR0FDNUIsSUFBSTlDLEVBQVFWLEVBQVdsSSxFQUFPLElBRTlCLEdBQUlzUSxVQUFVdFAsT0FBUyxFQUFHLENBRXhCLElBREEsSUFBSTZILEVBQU9QLEVBQVUvRCxLQUFLMEMsUUFBU2hILEdBQUssRUFBR2lCLEVBQUkwSCxFQUFNNUgsU0FDNUNmLEVBQUlpQixHQUFHLElBQUsySCxFQUFLcUIsU0FBU3RCLEVBQU0zSSxJQUFLLE9BQU8sRUFDckQsT0FBTyxFQUdULE9BQU9zRSxLQUFLb0ssTUFBdUIsbUJBQVZqRCxFQWYzQixTQUF5QjlDLEVBQU84QyxHQUM5QixPQUFPLFlBQ0pBLEVBQU02RSxNQUFNaE0sS0FBTStMLFdBQWEzSCxFQUFhSSxHQUFleEUsS0FBTXFFLEtBYzVDOEMsRUE1QjFCLFNBQXFCOUMsR0FDbkIsT0FBTyxXQUNMRCxFQUFXcEUsS0FBTXFFLEtBSXJCLFNBQXNCQSxHQUNwQixPQUFPLFdBQ0xHLEVBQWN4RSxLQUFNcUUsTUFzQkZBLEVBQU84QyxLVVYzQi9LLEtUOUNhLFNBQVMrSyxHQUN0QixPQUFPNEUsVUFBVXRQLE9BQ1h1RCxLQUFLb0ssS0FBYyxNQUFUakQsRUFDTnpDLEdBQStCLG1CQUFWeUMsRUFWakMsU0FBc0JBLEdBQ3BCLE9BQU8sV0FDTCxJQUFJbUYsRUFBSW5GLEVBQU02RSxNQUFNaE0sS0FBTStMLFdBQzFCL0wsS0FBSzJFLFlBQW1CLE1BQUwySCxFQUFZLEdBQUtBLElBVHhDLFNBQXNCbkYsR0FDcEIsT0FBTyxXQUNMbkgsS0FBSzJFLFlBQWN3QyxLQWdCR0EsSUFDbEJuSCxLQUFLMEMsT0FBT2lDLGFTeUNsQmtJLEtSL0NhLFNBQVMxRixHQUN0QixPQUFPNEUsVUFBVXRQLE9BQ1h1RCxLQUFLb0ssS0FBYyxNQUFUakQsRUFDTnZDLEdBQStCLG1CQUFWdUMsRUFWakMsU0FBc0JBLEdBQ3BCLE9BQU8sV0FDTCxJQUFJbUYsRUFBSW5GLEVBQU02RSxNQUFNaE0sS0FBTStMLFdBQzFCL0wsS0FBSzZFLFVBQWlCLE1BQUx5SCxFQUFZLEdBQUtBLElBVHRDLFNBQXNCbkYsR0FDcEIsT0FBTyxXQUNMbkgsS0FBSzZFLFVBQVlzQyxLQWdCS0EsSUFDbEJuSCxLQUFLMEMsT0FBT21DLFdRMENsQkMsTVA3RGEsV0FDYixPQUFPOUUsS0FBS29LLEtBQUt0RixJTzZEakJHLE1OOURhLFdBQ2IsT0FBT2pGLEtBQUtvSyxLQUFLbkYsSU04RGpCNkgsT3FCakVhLFNBQVNyUixHQUN0QixJQUFJc0MsRUFBeUIsbUJBQVR0QyxFQUFzQkEsRUFBT3NSLEVBQVF0UixHQUN6RCxPQUFPdUUsS0FBSzJKLE9BQU8sV0FDakIsT0FBTzNKLEtBQUtnQyxZQUFZakUsRUFBT2lPLE1BQU1oTSxLQUFNK0wsZXJCK0Q3Q2lCLE9MN0RhLFNBQVN2UixFQUFNd1IsR0FDNUIsSUFBSWxQLEVBQXlCLG1CQUFUdEMsRUFBc0JBLEVBQU9zUixFQUFRdFIsR0FDckRrTyxFQUFtQixNQUFWc0QsRUFBaUI3SCxFQUFpQyxtQkFBWDZILEVBQXdCQSxFQUFTeE0sRUFBU3dNLEdBQzlGLE9BQU9qTixLQUFLMkosT0FBTyxXQUNqQixPQUFPM0osS0FBS2tDLGFBQWFuRSxFQUFPaU8sTUFBTWhNLEtBQU0rTCxXQUFZcEMsRUFBT3FDLE1BQU1oTSxLQUFNK0wsWUFBYyxTSzBEM0Z0SCxPSmhFYSxXQUNiLE9BQU96RSxLQUFLb0ssS0FBSzNGLElJZ0VqQnlJLE1IOURhLFNBQVNDLEdBQ3RCLE9BQU9uTixLQUFLMkosT0FBT3dELEVBQU8zSCxFQUFzQkYsSUc4RGhENUQsTXNCdkVhLFNBQVN5RixHQUN0QixPQUFPNEUsVUFBVXRQLE9BQ1h1RCxLQUFLMk0sU0FBUyxXQUFZeEYsR0FDMUJuSCxLQUFLMEMsT0FBT2IsVXRCcUVsQjhFLEdGSWEsU0FBU0QsRUFBVVMsRUFBT0YsR0FDdkMsSUFBK0N2TCxFQUF5QlksRUFBcEU4USxFQTVDTixTQUF3QkEsR0FDdEIsT0FBT0EsRUFBVXZKLE9BQU9DLE1BQU0sU0FBU3RJLElBQUksU0FBU2MsR0FDbEQsSUFBSWIsRUFBTyxHQUFJQyxFQUFJWSxFQUFFbUQsUUFBUSxLQUU3QixPQURJL0QsR0FBSyxJQUFHRCxFQUFPYSxFQUFFVyxNQUFNdkIsRUFBSSxHQUFJWSxFQUFJQSxFQUFFVyxNQUFNLEVBQUd2QixLQUMxQ3FMLEtBQU16SyxFQUFHYixLQUFNQSxLQXdDVDRSLENBQWUzRyxFQUFXLElBQVEvSixFQUFJeVEsRUFBVTNRLE9BRWhFLEtBQUlzUCxVQUFVdFAsT0FBUyxHQUF2QixDQWNBLElBRkFrSyxFQUFLUSxFQUFRRCxFQUFRVCxFQUNOLE1BQVhRLElBQWlCQSxHQUFVLEdBQzFCdkwsRUFBSSxFQUFHQSxFQUFJaUIsSUFBS2pCLEVBQUdzRSxLQUFLb0ssS0FBS3pELEVBQUd5RyxFQUFVMVIsR0FBSXlMLEVBQU9GLElBQzFELE9BQU9qSCxLQWRMLElBQUkyRyxFQUFLM0csS0FBSzBDLE9BQU9rRSxLQUNyQixHQUFJRCxFQUFJLElBQUssSUFBMEJFLEVBQXRCN0osRUFBSSxFQUFHOEosRUFBSUgsRUFBR2xLLE9BQVdPLEVBQUk4SixJQUFLOUosRUFDakQsSUFBS3RCLEVBQUksRUFBR21MLEVBQUlGLEVBQUczSixHQUFJdEIsRUFBSWlCLElBQUtqQixFQUM5QixJQUFLWSxFQUFJOFEsRUFBVTFSLElBQUlxTCxPQUFTRixFQUFFRSxNQUFRekssRUFBRWIsT0FBU29MLEVBQUVwTCxLQUNyRCxPQUFPb0wsRUFBRU0sT0VYakJtRyxTRDVDYSxTQUFTdkcsRUFBTVMsR0FDNUIsT0FBT3hILEtBQUtvSyxNQUF3QixtQkFBWDVDLEVBUDNCLFNBQTBCVCxFQUFNUyxHQUM5QixPQUFPLFdBQ0wsT0FBT0QsRUFBY3ZILEtBQU0rRyxFQUFNUyxFQUFPd0UsTUFBTWhNLEtBQU0rTCxjQVJ4RCxTQUEwQmhGLEVBQU1TLEdBQzlCLE9BQU8sV0FDTCxPQUFPRCxFQUFjdkgsS0FBTStHLEVBQU1TLE1BYVhULEVBQU1TLE13QjdCaEMsSUNEd0JrRSxHQTBCS3JQLEdEeEJsQmtSLElDRGMsS0FERDdCLEdEQ094SSxJQ0FqQnpHLFNBeUJlSixHQXpCNkJxUCxHQUE5QkEsR0EwQm5CLFNBQVNyRSxFQUFHeUIsR0FDakIsT0FBTzVGLEdBQVU3RyxHQUFFZ0wsR0FBSXlCLE1BekJ2QlMsS0FBTSxTQUFTcEcsRUFBRzJGLEVBQUcwRSxFQUFJQyxHQUd2QixJQUZVLE1BQU5ELElBQVlBLEVBQUssR0FDWCxNQUFOQyxJQUFZQSxFQUFLdEssRUFBRTFHLFFBQ2hCK1EsRUFBS0MsR0FBSSxDQUNkLElBQUlDLEVBQU1GLEVBQUtDLElBQU8sRUFDbEIvQixHQUFRdkksRUFBRXVLLEdBQU01RSxHQUFLLEVBQUcwRSxFQUFLRSxFQUFNLEVBQ2xDRCxFQUFLQyxFQUVaLE9BQU9GLEdBRVRHLE1BQU8sU0FBU3hLLEVBQUcyRixFQUFHMEUsRUFBSUMsR0FHeEIsSUFGVSxNQUFORCxJQUFZQSxFQUFLLEdBQ1gsTUFBTkMsSUFBWUEsRUFBS3RLLEVBQUUxRyxRQUNoQitRLEVBQUtDLEdBQUksQ0FDZCxJQUFJQyxFQUFNRixFQUFLQyxJQUFPLEVBQ2xCL0IsR0FBUXZJLEVBQUV1SyxHQUFNNUUsR0FBSyxFQUFHMkUsRUFBS0MsRUFDNUJGLEVBQUtFLEVBQU0sRUFFbEIsT0FBT0YsS0RuQjRCRyxNRUoxQixZQUFTN0UsR0FDdEIsT0FBYSxPQUFOQSxFQUFhekYsS0FBT3lGLEVDQ2QsWUFBUzhFLEVBQU92UixHQUM3QixJQUFJaVEsRUNEUyxTQUFTdUIsRUFBUUMsR0FDOUIsSUFJSTNHLEVBQ0E0RyxFQUxBcFIsRUFBSWtSLEVBQU9wUixPQUNYcUssRUFBSSxFQUNKcEwsR0FBSyxFQUNMc1MsRUFBTyxFQUdQQyxFQUFNLEVBRVYsR0FBZSxNQUFYSCxFQUNGLE9BQVNwUyxFQUFJaUIsR0FDTnVSLE1BQU0vRyxFQUFRZ0gsR0FBT04sRUFBT25TLE9BRy9CdVMsSUFGQUYsRUFBUTVHLEVBQVE2RyxJQUVBN0csR0FEaEI2RyxHQUFRRCxJQUFVakgsVUFPdEIsT0FBU3BMLEVBQUlpQixHQUNOdVIsTUFBTS9HLEVBQVFnSCxHQUFPTCxFQUFRRCxFQUFPblMsR0FBSUEsRUFBR21TLE9BRzlDSSxJQUZBRixFQUFRNUcsRUFBUTZHLElBRUE3RyxHQURoQjZHLEdBQVFELElBQVVqSCxLQU14QixHQUFJQSxFQUFJLEVBQUcsT0FBT21ILEdBQU9uSCxFQUFJLEdENUJyQnNILENBQVNSLEVBQU92UixHQUN4QixPQUFPaVEsRUFBSW5CLEtBQUtrRCxLQUFLL0IsR0FBS0EsRUVKYixZQUFTdUIsRUFBUUMsR0FDOUIsSUFFSTNHLEVBQ0FpRSxFQUNBa0QsRUFKQTNSLEVBQUlrUixFQUFPcFIsT0FDWGYsR0FBSyxFQUtULEdBQWUsTUFBWG9TLEdBQ0YsT0FBU3BTLEVBQUlpQixHQUNYLEdBQTJCLE9BQXRCd0ssRUFBUTBHLEVBQU9uUyxLQUFleUwsR0FBU0EsRUFFMUMsSUFEQWlFLEVBQU1rRCxFQUFNbkgsSUFDSHpMLEVBQUlpQixHQUNnQixPQUF0QndLLEVBQVEwRyxFQUFPblMsTUFDZDBQLEVBQU1qRSxJQUFPaUUsRUFBTWpFLEdBQ25CbUgsRUFBTW5ILElBQU9tSCxFQUFNbkgsU0FRL0IsT0FBU3pMLEVBQUlpQixHQUNYLEdBQStDLE9BQTFDd0ssRUFBUTJHLEVBQVFELEVBQU9uUyxHQUFJQSxFQUFHbVMsS0FBb0IxRyxHQUFTQSxFQUU5RCxJQURBaUUsRUFBTWtELEVBQU1uSCxJQUNIekwsRUFBSWlCLEdBQ29DLE9BQTFDd0ssRUFBUTJHLEVBQVFELEVBQU9uUyxHQUFJQSxFQUFHbVMsTUFDN0J6QyxFQUFNakUsSUFBT2lFLEVBQU1qRSxHQUNuQm1ILEVBQU1uSCxJQUFPbUgsRUFBTW5ILElBT2pDLE9BQVFpRSxFQUFLa0QsR0NuQ0EsWUFBU0MsRUFBT0MsRUFBTUMsR0FDbkNGLEdBQVNBLEVBQU9DLEdBQVFBLEVBQU1DLEdBQVE5UixFQUFJb1AsVUFBVXRQLFFBQVUsR0FBSytSLEVBQU9ELEVBQU9BLEVBQVEsRUFBRyxHQUFLNVIsRUFBSSxFQUFJLEdBQUs4UixFQU05RyxJQUpBLElBQUkvUyxHQUFLLEVBQ0xpQixFQUFvRCxFQUFoRHdPLEtBQUttRCxJQUFJLEVBQUduRCxLQUFLdUQsTUFBTUYsRUFBT0QsR0FBU0UsSUFDM0NFLEVBQVEsSUFBSXBOLE1BQU01RSxLQUViakIsRUFBSWlCLEdBQ1hnUyxFQUFNalQsR0FBSzZTLEVBQVE3UyxFQUFJK1MsRUFHekIsT0FBT0UsRUNYVCxJQUFJQyxHQUFNekQsS0FBS2tELEtBQUssSUFDaEJRLEdBQUsxRCxLQUFLa0QsS0FBSyxJQUNmUyxHQUFLM0QsS0FBS2tELEtBQUssR0ErQlosU0FBU1UsR0FBY1IsRUFBT0MsRUFBTVEsR0FDekMsSUFBSVAsR0FBUUQsRUFBT0QsR0FBU3BELEtBQUttRCxJQUFJLEVBQUdVLEdBQ3BDQyxFQUFROUQsS0FBSytELE1BQU0vRCxLQUFLZ0UsSUFBSVYsR0FBUXRELEtBQUtpRSxNQUN6Q0MsRUFBUVosRUFBT3RELEtBQUttRSxJQUFJLEdBQUlMLEdBQ2hDLE9BQU9BLEdBQVMsR0FDVEksR0FBU1QsR0FBTSxHQUFLUyxHQUFTUixHQUFLLEVBQUlRLEdBQVNQLEdBQUssRUFBSSxHQUFLM0QsS0FBS21FLElBQUksR0FBSUwsSUFDMUU5RCxLQUFLbUUsSUFBSSxJQUFLTCxJQUFVSSxHQUFTVCxHQUFNLEdBQUtTLEdBQVNSLEdBQUssRUFBSVEsR0FBU1AsR0FBSyxFQUFJLEdDckMxRSxZQUFTakIsRUFBUTBCLEVBQUd6QixHQUVqQyxHQURlLE1BQVhBLElBQWlCQSxFQUFVSyxJQUN6QnhSLEVBQUlrUixFQUFPcFIsT0FBakIsQ0FDQSxJQUFLOFMsR0FBS0EsSUFBTSxHQUFLNVMsRUFBSSxFQUFHLE9BQVFtUixFQUFRRCxFQUFPLEdBQUksRUFBR0EsR0FDMUQsR0FBSTBCLEdBQUssRUFBRyxPQUFRekIsRUFBUUQsRUFBT2xSLEVBQUksR0FBSUEsRUFBSSxFQUFHa1IsR0FDbEQsSUFBSWxSLEVBQ0FqQixHQUFLaUIsRUFBSSxHQUFLNFMsRUFDZDlFLEVBQUtVLEtBQUsrRCxNQUFNeFQsR0FDaEI4VCxHQUFVMUIsRUFBUUQsRUFBT3BELEdBQUtBLEVBQUlvRCxHQUV0QyxPQUFPMkIsSUFETzFCLEVBQVFELEVBQU9wRCxFQUFLLEdBQUlBLEVBQUssRUFBR29ELEdBQ3BCMkIsSUFBVzlULEVBQUkrTyxJQ1o1QixZQUFTb0QsRUFBUUMsR0FDOUIsSUFFSTNHLEVBQ0FtSCxFQUhBM1IsRUFBSWtSLEVBQU9wUixPQUNYZixHQUFLLEVBSVQsR0FBZSxNQUFYb1MsR0FDRixPQUFTcFMsRUFBSWlCLEdBQ1gsR0FBMkIsT0FBdEJ3SyxFQUFRMEcsRUFBT25TLEtBQWV5TCxHQUFTQSxFQUUxQyxJQURBbUgsRUFBTW5ILElBQ0d6TCxFQUFJaUIsR0FDZ0IsT0FBdEJ3SyxFQUFRMEcsRUFBT25TLEtBQWV5TCxFQUFRbUgsSUFDekNBLEVBQU1uSCxRQVFkLE9BQVN6TCxFQUFJaUIsR0FDWCxHQUErQyxPQUExQ3dLLEVBQVEyRyxFQUFRRCxFQUFPblMsR0FBSUEsRUFBR21TLEtBQW9CMUcsR0FBU0EsRUFFOUQsSUFEQW1ILEVBQU1uSCxJQUNHekwsRUFBSWlCLEdBQ29DLE9BQTFDd0ssRUFBUTJHLEVBQVFELEVBQU9uUyxHQUFJQSxFQUFHbVMsS0FBb0IxRyxFQUFRbUgsSUFDN0RBLEVBQU1uSCxHQU9oQixPQUFPbUgsRUM1Qk0sWUFBU1QsRUFBUUMsR0FDOUIsSUFFSTNHLEVBRkF4SyxFQUFJa1IsRUFBT3BSLE9BQ1hmLEdBQUssRUFFTCtULEtBRUosR0FBZSxNQUFYM0IsRUFDRixPQUFTcFMsRUFBSWlCLEdBQ051UixNQUFNL0csRUFBUWdILEdBQU9OLEVBQU9uUyxNQUMvQitULEVBQVFyUyxLQUFLK0osUUFNakIsT0FBU3pMLEVBQUlpQixHQUNOdVIsTUFBTS9HLEVBQVFnSCxHQUFPTCxFQUFRRCxFQUFPblMsR0FBSUEsRUFBR21TLE1BQzlDNEIsRUFBUXJTLEtBQUsrSixHQUtuQixPQUFPdUksR0FBU0QsRUFBUWhFLEtBQUt2SSxJQUFZLElDeEIzQyxTQUFTeU0sTUFrRFQsU0FBU25VLEdBQUlrQyxFQUFRckIsR0FDbkIsSUFBSWIsRUFBTSxJQUFJbVUsR0FHZCxHQUFJalMsYUFBa0JpUyxHQUFLalMsRUFBTzBNLEtBQUssU0FBU2pELEVBQU9yRSxHQUFPdEgsRUFBSW9VLElBQUk5TSxFQUFLcUUsVUFHdEUsR0FBSTVGLE1BQU1zTyxRQUFRblMsR0FBUyxDQUM5QixJQUVJbUosRUFGQW5MLEdBQUssRUFDTGlCLEVBQUllLEVBQU9qQixPQUdmLEdBQVMsTUFBTEosRUFBVyxPQUFTWCxFQUFJaUIsR0FBR25CLEVBQUlvVSxJQUFJbFUsRUFBR2dDLEVBQU9oQyxTQUM1QyxPQUFTQSxFQUFJaUIsR0FBR25CLEVBQUlvVSxJQUFJdlQsRUFBRXdLLEVBQUluSixFQUFPaEMsR0FBSUEsRUFBR2dDLEdBQVNtSixRQUl2RCxHQUFJbkosRUFBUSxJQUFLLElBQUlvRixLQUFPcEYsRUFBUWxDLEVBQUlvVSxJQUFJOU0sRUFBS3BGLEVBQU9vRixJQUU3RCxPQUFPdEgsRUNyRU0sY0FDYixJQUVJc1UsRUFDQUMsRUFDQUMsRUFKQUMsS0FDQUMsS0FLSixTQUFTbEUsRUFBTTRCLEVBQU91QyxFQUFPQyxFQUFjQyxHQUN6QyxHQUFJRixHQUFTRixFQUFLeFQsT0FFaEIsT0FEa0IsTUFBZHFULEdBQW9CbEMsRUFBTW5DLEtBQUtxRSxHQUNsQixNQUFWQyxFQUFpQkEsRUFBT25DLEdBQVNBLEVBWTFDLElBVEEsSUFHSTdLLEVBQ0FvRSxFQUVBMEcsRUFOQW5TLEdBQUssRUFDTGlCLEVBQUlpUixFQUFNblIsT0FDVnFHLEVBQU1tTixFQUFLRSxLQUdYRyxFQUFjOVUsS0FFZCtVLEVBQVNILE1BRUoxVSxFQUFJaUIsSUFDUGtSLEVBQVN5QyxFQUFZRSxJQUFJek4sRUFBV0QsRUFBSXFFLEVBQVF5RyxFQUFNbFMsSUFBTSxLQUM5RG1TLEVBQU96USxLQUFLK0osR0FFWm1KLEVBQVlWLElBQUk3TSxHQUFXb0UsSUFRL0IsT0FKQW1KLEVBQVlsRyxLQUFLLFNBQVN5RCxFQUFRL0ssR0FDaEN1TixFQUFVRSxFQUFRek4sRUFBS2tKLEVBQU02QixFQUFRc0MsRUFBT0MsRUFBY0MsTUFHckRFLEVBV1QsT0FBT1AsR0FDTHRTLE9BQVEsU0FBU2tRLEdBQVMsT0FBTzVCLEVBQU00QixFQUFPLEVBQUc2QyxHQUFjQyxLQUMvRGxWLElBQUssU0FBU29TLEdBQVMsT0FBTzVCLEVBQU00QixFQUFPLEVBQUcrQyxHQUFXQyxLQUN6REMsUUFBUyxTQUFTakQsR0FBUyxPQVg3QixTQUFTaUQsRUFBUXJWLEVBQUsyVSxHQUNwQixLQUFNQSxFQUFRRixFQUFLeFQsT0FBUSxPQUFPakIsRUFDbEMsSUFBSW9TLEVBQU9rRCxFQUFVWixFQUFTQyxFQUFRLEdBR3RDLE9BRmMsTUFBVkosR0FBa0JJLEdBQVNGLEVBQUt4VCxPQUFRbVIsRUFBUXBTLEVBQUlxVixXQUNuRGpELEtBQVlwUyxFQUFJNE8sS0FBSyxTQUFTa0MsRUFBR3lFLEdBQUtuRCxFQUFNeFEsTUFBTTBGLElBQUtpTyxFQUFHbEQsT0FBUWdELEVBQVF2RSxFQUFHNkQsUUFDaEUsTUFBWFcsRUFBa0JsRCxFQUFNbkMsS0FBSyxTQUFTdEksRUFBR0MsR0FBSyxPQUFPME4sRUFBUTNOLEVBQUVMLElBQUtNLEVBQUVOLE9BQVc4SyxFQU10RGlELENBQVE3RSxFQUFNNEIsRUFBTyxFQUFHK0MsR0FBV0MsSUFBUyxJQUM5RTlOLElBQUssU0FBU3VFLEdBQW1CLE9BQWQ0SSxFQUFLN1MsS0FBS2lLLEdBQVcySSxHQUN4Q0UsU0FBVSxTQUFTMUUsR0FBNEMsT0FBbkMwRSxFQUFTRCxFQUFLeFQsT0FBUyxHQUFLK08sRUFBY3dFLEdBQ3RFRixXQUFZLFNBQVN0RSxHQUE2QixPQUFwQnNFLEVBQWF0RSxFQUFjd0UsR0FDekRELE9BQVEsU0FBUzFULEdBQWlCLE9BQVowVCxFQUFTMVQsRUFBVTJULElBSTdDLFNBQVNTLEtBQ1AsU0FHRixTQUFTQyxHQUFVaFQsRUFBUW9GLEVBQUtxRSxHQUM5QnpKLEVBQU9vRixHQUFPcUUsRUFHaEIsU0FBU3dKLEtBQ1AsT0FBT25WLEtBR1QsU0FBU29WLEdBQU9wVixFQUFLc0gsRUFBS3FFLEdBQ3hCM0wsRUFBSW9VLElBQUk5TSxFQUFLcUUsR0NyRWYsU0FBUzZKLE1GRVRyQixHQUFJN04sVUFBWXRHLEdBQUlzRyxXQUNsQkMsWUFBYTROLEdBQ2JzQixJQUFLLFNBQVNuTyxHQUNaLE1BUGdCLElBT0NBLEtBQVE5QyxNQUUzQndRLElBQUssU0FBUzFOLEdBQ1osT0FBTzlDLEtBVlMsSUFVSzhDLElBRXZCOE0sSUFBSyxTQUFTOU0sRUFBS3FFLEdBRWpCLE9BREFuSCxLQWJnQixJQWFGOEMsR0FBT3FFLEVBQ2RuSCxNQUVUeUUsT0FBUSxTQUFTM0IsR0FDZixJQUFJNkosRUFqQlksSUFpQlE3SixFQUN4QixPQUFPNkosS0FBWTNNLGFBQWVBLEtBQUsyTSxJQUV6Q3VFLE1BQU8sV0FDTCxJQUFLLElBQUl2RSxLQUFZM00sS0FyQkwsTUFxQmUyTSxFQUFTLFdBQXNCM00sS0FBSzJNLElBRXJFc0QsS0FBTSxXQUNKLElBQUlBLEtBQ0osSUFBSyxJQUFJdEQsS0FBWTNNLEtBekJMLE1BeUJlMk0sRUFBUyxJQUFlc0QsRUFBSzdTLEtBQUt1UCxFQUFTMVAsTUFBTSxJQUNoRixPQUFPZ1QsR0FFVHBDLE9BQVEsV0FDTixJQUFJQSxLQUNKLElBQUssSUFBSWxCLEtBQVkzTSxLQTlCTCxNQThCZTJNLEVBQVMsSUFBZWtCLEVBQU96USxLQUFLNEMsS0FBSzJNLElBQ3hFLE9BQU9rQixHQUVUZ0QsUUFBUyxXQUNQLElBQUlBLEtBQ0osSUFBSyxJQUFJbEUsS0FBWTNNLEtBbkNMLE1BbUNlMk0sRUFBUyxJQUFla0UsRUFBUXpULE1BQU0wRixJQUFLNkosRUFBUzFQLE1BQU0sR0FBSWtLLE1BQU9uSCxLQUFLMk0sS0FDekcsT0FBT2tFLEdBRVQxRyxLQUFNLFdBQ0osSUFBSUEsRUFBTyxFQUNYLElBQUssSUFBSXdDLEtBQVkzTSxLQXhDTCxNQXdDZTJNLEVBQVMsTUFBaUJ4QyxFQUN6RCxPQUFPQSxHQUVUeEosTUFBTyxXQUNMLElBQUssSUFBSWdNLEtBQVkzTSxLQUFNLEdBNUNYLE1BNENlMk0sRUFBUyxHQUFlLE9BQU8sRUFDOUQsT0FBTyxHQUVUdkMsS0FBTSxTQUFTL04sR0FDYixJQUFLLElBQUlzUSxLQUFZM00sS0FoREwsTUFnRGUyTSxFQUFTLElBQWV0USxFQUFFMkQsS0FBSzJNLEdBQVdBLEVBQVMxUCxNQUFNLEdBQUkrQyxRRTVDaEcsSUFBSW1SLEdBQVEzVixHQUFJc0csVUFFaEJrUCxHQUFJbFAsVUFnQkosU0FBYXBFLEVBQVFyQixHQUNuQixJQUFJdVQsRUFBTSxJQUFJb0IsR0FHZCxHQUFJdFQsYUFBa0JzVCxHQUFLdFQsRUFBTzBNLEtBQUssU0FBU2pELEdBQVN5SSxFQUFJckwsSUFBSTRDLFVBRzVELEdBQUl6SixFQUFRLENBQ2YsSUFBSWhDLEdBQUssRUFBR2lCLEVBQUllLEVBQU9qQixPQUN2QixHQUFTLE1BQUxKLEVBQVcsT0FBU1gsRUFBSWlCLEdBQUdpVCxFQUFJckwsSUFBSTdHLEVBQU9oQyxTQUN6QyxPQUFTQSxFQUFJaUIsR0FBR2lULEVBQUlyTCxJQUFJbEksRUFBRXFCLEVBQU9oQyxHQUFJQSxFQUFHZ0MsSUFHL0MsT0FBT2tTLEdBN0JXOU4sV0FDbEJDLFlBQWFpUCxHQUNiQyxJQUFLRSxHQUFNRixJQUNYMU0sSUFBSyxTQUFTNEMsR0FHWixPQURBbkgsS0ZYZ0IsS0VVaEJtSCxHQUFTLEtBQ2NBLEVBQ2hCbkgsTUFFVHlFLE9BQVEwTSxHQUFNMU0sT0FDZHlNLE1BQU9DLEdBQU1ELE1BQ2JyRCxPQUFRc0QsR0FBTWxCLEtBQ2Q5RixLQUFNZ0gsR0FBTWhILEtBQ1p4SixNQUFPd1EsR0FBTXhRLE1BQ2J5SixLQUFNK0csR0FBTS9HLE1DbkJkLElBQUl3RCxHQUFRck0sTUFBTU8sVUFFUHRHLEdBQU1vUyxHQUFNcFMsSUFDWnlCLEdBQVEyUSxHQUFNM1EsTUNBZG1VLElBQVkzVixLQUFNLFlDQWQsU0FBUzRWLEtBQ3RCLElBSUk1QyxFQUNBNkMsRUFMQUMsRURDUyxTQUFTQyxFQUFRN0MsR0FDOUIsSUFBSXpJLEVBQVExSyxLQUNSaVcsS0FDQUMsRUFBVU4sR0FJZCxTQUFTRyxFQUFNbEssR0FDYixJQUFJdkUsRUFBTXVFLEVBQUksR0FBSTNMLEVBQUl3SyxFQUFNc0ssSUFBSTFOLEdBQ2hDLElBQUtwSCxFQUFHLENBQ04sR0FBSWdXLElBQVlOLEdBQVUsT0FBT00sRUFDakN4TCxFQUFNMEosSUFBSTlNLEVBQUtwSCxFQUFJK1YsRUFBT3JVLEtBQUtpSyxJQUVqQyxPQUFPc0gsR0FBT2pULEVBQUksR0FBS2lULEVBQU1sUyxRQTBCL0IsT0FsQ0FrUyxFQUFpQixNQUFUQSxLQUFxQjFSLEdBQU1vRSxLQUFLc04sR0FXeEM0QyxFQUFNRSxPQUFTLFNBQVNFLEdBQ3RCLElBQUs1RixVQUFVdFAsT0FBUSxPQUFPZ1YsRUFBT3hVLFFBQ3JDd1UsS0FBYXZMLEVBQVExSyxLQUVyQixJQURBLElBQTBCNkwsRUFBR3ZFLEVBQXpCcEgsR0FBSyxFQUFHaUIsRUFBSWdWLEVBQUVsVixTQUNUZixFQUFJaUIsR0FBUXVKLEVBQU0rSyxJQUFJbk8sR0FBT3VFLEVBQUlzSyxFQUFFalcsSUFBTSxLQUFLd0ssRUFBTTBKLElBQUk5TSxFQUFLMk8sRUFBT3JVLEtBQUtpSyxJQUNsRixPQUFPa0ssR0FHVEEsRUFBTTVDLE1BQVEsU0FBU2dELEdBQ3JCLE9BQU81RixVQUFVdFAsUUFBVWtTLEVBQVExUixHQUFNb0UsS0FBS3NRLEdBQUlKLEdBQVM1QyxFQUFNMVIsU0FHbkVzVSxFQUFNRyxRQUFVLFNBQVNDLEdBQ3ZCLE9BQU81RixVQUFVdFAsUUFBVWlWLEVBQVVDLEVBQUdKLEdBQVNHLEdBR25ESCxFQUFNSyxLQUFPLFdBQ1gsT0FBT0osSUFDRkMsT0FBT0EsR0FDUDlDLE1BQU1BLEdBQ04rQyxRQUFRQSxJQUdSSCxFQ3hDS0MsR0FBVUUsYUFBUUcsR0FDMUJKLEVBQVNGLEVBQU1FLE9BQ2ZLLEVBQWVQLEVBQU01QyxNQUNyQkEsR0FBUyxFQUFHLEdBR1pvRCxHQUFRLEVBQ1JDLEVBQWUsRUFDZkMsRUFBZSxFQUNmQyxFQUFRLEdBSVosU0FBU0MsSUFDUCxJQUFJeFYsRUFBSThVLElBQVNoVixPQUNiMlYsRUFBVXpELEVBQU0sR0FBS0EsRUFBTSxHQUMzQkosRUFBUUksRUFBTXlELEVBQVUsR0FDeEI1RCxFQUFPRyxFQUFNLEVBQUl5RCxHQUNyQjNELEdBQVFELEVBQU9ELEdBQVNwRCxLQUFLbUQsSUFBSSxFQUFHM1IsRUFBSXFWLEVBQThCLEVBQWZDLEdBQ25ERixJQUFPdEQsRUFBT3RELEtBQUsrRCxNQUFNVCxJQUM3QkYsSUFBVUMsRUFBT0QsRUFBUUUsR0FBUTlSLEVBQUlxVixJQUFpQkUsRUFDdERaLEVBQVk3QyxHQUFRLEVBQUl1RCxHQUNwQkQsSUFBT3hELEVBQVFwRCxLQUFLNEcsTUFBTXhELEdBQVErQyxFQUFZbkcsS0FBSzRHLE1BQU1ULElBQzdELElBQUl6RCxFQUFTd0UsR0FBUzFWLEdBQUduQixJQUFJLFNBQVNFLEdBQUssT0FBTzZTLEVBQVFFLEVBQU8vUyxJQUNqRSxPQUFPb1csRUFBYU0sRUFBVXZFLEVBQU91RSxVQUFZdkUsR0FxRG5ELGNBbEVPMEQsRUFBTUcsUUFnQmJILEVBQU1FLE9BQVMsU0FBU0UsR0FDdEIsT0FBTzVGLFVBQVV0UCxRQUFVZ1YsRUFBT0UsR0FBSVEsS0FBYVYsS0FHckRGLEVBQU01QyxNQUFRLFNBQVNnRCxHQUNyQixPQUFPNUYsVUFBVXRQLFFBQVVrUyxJQUFVZ0QsRUFBRSxJQUFLQSxFQUFFLElBQUtRLEtBQWF4RCxFQUFNMVIsU0FHeEVzVSxFQUFNZSxXQUFhLFNBQVNYLEdBQzFCLE9BQU9oRCxJQUFVZ0QsRUFBRSxJQUFLQSxFQUFFLElBQUtJLEdBQVEsRUFBTUksS0FHL0NaLEVBQU1ELFVBQVksV0FDaEIsT0FBT0EsR0FHVEMsRUFBTTlDLEtBQU8sV0FDWCxPQUFPQSxHQUdUOEMsRUFBTVEsTUFBUSxTQUFTSixHQUNyQixPQUFPNUYsVUFBVXRQLFFBQVVzVixJQUFVSixFQUFHUSxLQUFhSixHQUd2RFIsRUFBTWdCLFFBQVUsU0FBU1osR0FDdkIsT0FBTzVGLFVBQVV0UCxRQUFVdVYsRUFBZUMsRUFBZTlHLEtBQUttRCxJQUFJLEVBQUduRCxLQUFLQyxJQUFJLEVBQUd1RyxJQUFLUSxLQUFhSCxHQUdyR1QsRUFBTVMsYUFBZSxTQUFTTCxHQUM1QixPQUFPNUYsVUFBVXRQLFFBQVV1VixFQUFlN0csS0FBS21ELElBQUksRUFBR25ELEtBQUtDLElBQUksRUFBR3VHLElBQUtRLEtBQWFILEdBR3RGVCxFQUFNVSxhQUFlLFNBQVNOLEdBQzVCLE9BQU81RixVQUFVdFAsUUFBVXdWLEVBQWU5RyxLQUFLbUQsSUFBSSxFQUFHbkQsS0FBS0MsSUFBSSxFQUFHdUcsSUFBS1EsS0FBYUYsR0FHdEZWLEVBQU1XLE1BQVEsU0FBU1AsR0FDckIsT0FBTzVGLFVBQVV0UCxRQUFVeVYsRUFBUS9HLEtBQUttRCxJQUFJLEVBQUduRCxLQUFLQyxJQUFJLEVBQUd1RyxJQUFLUSxLQUFhRCxHQUcvRVgsRUFBTUssS0FBTyxXQUNYLE9BQU9QLEtBQ0ZJLE9BQU9BLEtBQ1A5QyxNQUFNQSxHQUNOb0QsTUFBTUEsR0FDTkMsYUFBYUEsR0FDYkMsYUFBYUEsR0FDYkMsTUFBTUEsSUFHTkMsSUNqRk0sWUFBU3BRLEVBQWF5USxFQUFTMVEsR0FDNUNDLEVBQVlELFVBQVkwUSxFQUFRMVEsVUFBWUEsRUFDNUNBLEVBQVVDLFlBQWNBLEVBR25CLFNBQVMwUSxHQUFPaFIsRUFBUWlSLEdBQzdCLElBQUk1USxFQUFZaEUsT0FBT0MsT0FBTzBELEVBQU9LLFdBQ3JDLElBQUssSUFBSWdCLEtBQU80UCxFQUFZNVEsRUFBVWdCLEdBQU80UCxFQUFXNVAsR0FDeEQsT0FBT2hCLEVDTkYsU0FBUzZRLE1BRVQsSUFHSEMsR0FBTSxzQkFDTkMsR0FBTSxnREFDTkMsR0FBTSxpREFDTkMsR0FBUyxtQkFDVEMsR0FBUyxtQkFDVEMsR0FBZSxJQUFJalgsT0FBTyxXQUFhNFcsR0FBS0EsR0FBS0EsSUFBTyxRQUN4RE0sR0FBZSxJQUFJbFgsT0FBTyxXQUFhOFcsR0FBS0EsR0FBS0EsSUFBTyxRQUN4REssR0FBZ0IsSUFBSW5YLE9BQU8sWUFBYzRXLEdBQUtBLEdBQUtBLEdBQUtDLElBQU8sUUFDL0RPLEdBQWdCLElBQUlwWCxPQUFPLFlBQWM4VyxHQUFLQSxHQUFLQSxHQUFLRCxJQUFPLFFBQy9EUSxHQUFlLElBQUlyWCxPQUFPLFdBQWE2VyxHQUFLQyxHQUFLQSxJQUFPLFFBQ3hEUSxHQUFnQixJQUFJdFgsT0FBTyxZQUFjNlcsR0FBS0MsR0FBS0EsR0FBS0QsSUFBTyxRQUUvRFUsSUFDRkMsVUFBVyxTQUNYQyxhQUFjLFNBQ2RDLEtBQU0sTUFDTkMsV0FBWSxRQUNaQyxNQUFPLFNBQ1BDLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxNQUFPLEVBQ1BDLGVBQWdCLFNBQ2hCQyxLQUFNLElBQ05DLFdBQVksUUFDWkMsTUFBTyxTQUNQQyxVQUFXLFNBQ1hDLFVBQVcsUUFDWEMsV0FBWSxRQUNaQyxVQUFXLFNBQ1hDLE1BQU8sU0FDUEMsZUFBZ0IsUUFDaEJDLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxLQUFNLE1BQ05DLFNBQVUsSUFDVkMsU0FBVSxNQUNWQyxjQUFlLFNBQ2ZDLFNBQVUsU0FDVkMsVUFBVyxNQUNYQyxTQUFVLFNBQ1ZDLFVBQVcsU0FDWEMsWUFBYSxRQUNiQyxlQUFnQixRQUNoQkMsV0FBWSxTQUNaQyxXQUFZLFNBQ1pDLFFBQVMsUUFDVEMsV0FBWSxTQUNaQyxhQUFjLFFBQ2RDLGNBQWUsUUFDZkMsY0FBZSxRQUNmQyxjQUFlLFFBQ2ZDLGNBQWUsTUFDZkMsV0FBWSxRQUNaQyxTQUFVLFNBQ1ZDLFlBQWEsTUFDYkMsUUFBUyxRQUNUQyxRQUFTLFFBQ1RDLFdBQVksUUFDWkMsVUFBVyxTQUNYQyxZQUFhLFNBQ2JDLFlBQWEsUUFDYkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLFdBQVksU0FDWkMsS0FBTSxTQUNOQyxVQUFXLFNBQ1hDLEtBQU0sUUFDTkMsTUFBTyxNQUNQQyxZQUFhLFNBQ2JDLEtBQU0sUUFDTkMsU0FBVSxTQUNWQyxRQUFTLFNBQ1RDLFVBQVcsU0FDWEMsT0FBUSxRQUNSQyxNQUFPLFNBQ1BDLE1BQU8sU0FDUEMsU0FBVSxTQUNWQyxjQUFlLFNBQ2ZDLFVBQVcsUUFDWEMsYUFBYyxTQUNkQyxVQUFXLFNBQ1hDLFdBQVksU0FDWkMsVUFBVyxTQUNYQyxxQkFBc0IsU0FDdEJDLFVBQVcsU0FDWEMsV0FBWSxRQUNaQyxVQUFXLFNBQ1hDLFVBQVcsU0FDWEMsWUFBYSxTQUNiQyxjQUFlLFFBQ2ZDLGFBQWMsUUFDZEMsZUFBZ0IsUUFDaEJDLGVBQWdCLFFBQ2hCQyxlQUFnQixTQUNoQkMsWUFBYSxTQUNiQyxLQUFNLE1BQ05DLFVBQVcsUUFDWEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLE9BQVEsUUFDUkMsaUJBQWtCLFFBQ2xCQyxXQUFZLElBQ1pDLGFBQWMsU0FDZEMsYUFBYyxRQUNkQyxlQUFnQixRQUNoQkMsZ0JBQWlCLFFBQ2pCQyxrQkFBbUIsTUFDbkJDLGdCQUFpQixRQUNqQkMsZ0JBQWlCLFNBQ2pCQyxhQUFjLFFBQ2RDLFVBQVcsU0FDWEMsVUFBVyxTQUNYQyxTQUFVLFNBQ1ZDLFlBQWEsU0FDYkMsS0FBTSxJQUNOQyxRQUFTLFNBQ1RDLE1BQU8sUUFDUEMsVUFBVyxRQUNYQyxPQUFRLFNBQ1JDLFVBQVcsU0FDWEMsT0FBUSxTQUNSQyxjQUFlLFNBQ2ZDLFVBQVcsU0FDWEMsY0FBZSxTQUNmQyxjQUFlLFNBQ2ZDLFdBQVksU0FDWkMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxXQUFZLFNBQ1pDLE9BQVEsUUFDUkMsY0FBZSxRQUNmQyxJQUFLLFNBQ0xDLFVBQVcsU0FDWEMsVUFBVyxRQUNYQyxZQUFhLFFBQ2JDLE9BQVEsU0FDUkMsV0FBWSxTQUNaQyxTQUFVLFFBQ1ZDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFFBQVMsUUFDVEMsVUFBVyxRQUNYQyxVQUFXLFFBQ1hDLFVBQVcsUUFDWEMsS0FBTSxTQUNOQyxZQUFhLE1BQ2JDLFVBQVcsUUFDWEMsSUFBSyxTQUNMQyxLQUFNLE1BQ05DLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxVQUFXLFFBQ1hDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsT0FBUSxTQUNSQyxZQUFhLFVBZUEsU0FBU0MsR0FBTWhmLEdBQzVCLElBQUlrSixFQUVKLE9BREFsSixHQUFVQSxFQUFTLElBQUlpRyxPQUFPZ1osZUFDdEIvVixFQUFJaU0sR0FBTytKLEtBQUtsZixJQUFvQyxJQUFJbWYsSUFBNUJqVyxFQUFJa1csU0FBU2xXLEVBQUUsR0FBSSxNQUFtQixFQUFJLEdBQVFBLEdBQUssRUFBSSxJQUFTQSxHQUFLLEVBQUksR0FBWSxJQUFKQSxHQUFpQixHQUFKQSxJQUFZLEVBQVUsR0FBSkEsRUFBVSxJQUMzSkEsRUFBSWtNLEdBQU84SixLQUFLbGYsSUFBV3FmLEdBQUtELFNBQVNsVyxFQUFFLEdBQUksTUFDL0NBLEVBQUltTSxHQUFhNkosS0FBS2xmLElBQVcsSUFBSW1mLEdBQUlqVyxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJLElBQzNEQSxFQUFJb00sR0FBYTRKLEtBQUtsZixJQUFXLElBQUltZixHQUFXLElBQVBqVyxFQUFFLEdBQVcsSUFBWSxJQUFQQSxFQUFFLEdBQVcsSUFBWSxJQUFQQSxFQUFFLEdBQVcsSUFBSyxJQUMvRkEsRUFBSXFNLEdBQWMySixLQUFLbGYsSUFBV3NmLEdBQUtwVyxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJQSxFQUFFLEtBQzNEQSxFQUFJc00sR0FBYzBKLEtBQUtsZixJQUFXc2YsR0FBWSxJQUFQcFcsRUFBRSxHQUFXLElBQVksSUFBUEEsRUFBRSxHQUFXLElBQVksSUFBUEEsRUFBRSxHQUFXLElBQUtBLEVBQUUsS0FDL0ZBLEVBQUl1TSxHQUFheUosS0FBS2xmLElBQVd1ZixHQUFLclcsRUFBRSxHQUFJQSxFQUFFLEdBQUssSUFBS0EsRUFBRSxHQUFLLElBQUssSUFDcEVBLEVBQUl3TSxHQUFjd0osS0FBS2xmLElBQVd1ZixHQUFLclcsRUFBRSxHQUFJQSxFQUFFLEdBQUssSUFBS0EsRUFBRSxHQUFLLElBQUtBLEVBQUUsSUFDeEV5TSxHQUFNNVQsZUFBZS9CLEdBQVVxZixHQUFLMUosR0FBTTNWLElBQy9CLGdCQUFYQSxFQUEyQixJQUFJbWYsR0FBSTFaLElBQUtBLElBQUtBLElBQUssR0FDbEQsS0FHUixTQUFTNFosR0FBS3RnQixHQUNaLE9BQU8sSUFBSW9nQixHQUFJcGdCLEdBQUssR0FBSyxJQUFNQSxHQUFLLEVBQUksSUFBVSxJQUFKQSxFQUFVLEdBRzFELFNBQVN1Z0IsR0FBS0UsRUFBR0MsRUFBR2phLEVBQUdELEdBRXJCLE9BRElBLEdBQUssSUFBR2lhLEVBQUlDLEVBQUlqYSxFQUFJQyxLQUNqQixJQUFJMFosR0FBSUssRUFBR0MsRUFBR2phLEVBQUdELEdBR25CLFNBQVNtYSxHQUFXelcsR0FFekIsT0FETUEsYUFBYThMLEtBQVE5TCxFQUFJK1YsR0FBTS9WLElBQ2hDQSxFQUVFLElBQUlrVyxJQURYbFcsRUFBSUEsRUFBRTBXLE9BQ1dILEVBQUd2VyxFQUFFd1csRUFBR3hXLEVBQUV6RCxFQUFHeUQsRUFBRTJXLFNBRmpCLElBQUlULEdBS2QsU0FBU1EsR0FBSUgsRUFBR0MsRUFBR2phLEVBQUdvYSxHQUMzQixPQUE0QixJQUFyQnpSLFVBQVV0UCxPQUFlNmdCLEdBQVdGLEdBQUssSUFBSUwsR0FBSUssRUFBR0MsRUFBR2phLEVBQWMsTUFBWG9hLEVBQWtCLEVBQUlBLEdBR2xGLFNBQVNULEdBQUlLLEVBQUdDLEVBQUdqYSxFQUFHb2EsR0FDM0J4ZCxLQUFLb2QsR0FBS0EsRUFDVnBkLEtBQUtxZCxHQUFLQSxFQUNWcmQsS0FBS29ELEdBQUtBLEVBQ1ZwRCxLQUFLd2QsU0FBV0EsRUFrQ2xCLFNBQVNDLEdBQUl0VyxHQUVYLFFBREFBLEVBQVFnRSxLQUFLbUQsSUFBSSxFQUFHbkQsS0FBS0MsSUFBSSxJQUFLRCxLQUFLNEcsTUFBTTVLLElBQVUsS0FDdkMsR0FBSyxJQUFNLElBQU1BLEVBQU11VyxTQUFTLElBR2xELFNBQVNQLEdBQUtRLEVBQUdDLEVBQUdDLEVBQUcxYSxHQUlyQixPQUhJQSxHQUFLLEVBQUd3YSxFQUFJQyxFQUFJQyxFQUFJeGEsSUFDZndhLEdBQUssR0FBS0EsR0FBSyxFQUFHRixFQUFJQyxFQUFJdmEsSUFDMUJ1YSxHQUFLLElBQUdELEVBQUl0YSxLQUNkLElBQUl5YSxHQUFJSCxFQUFHQyxFQUFHQyxFQUFHMWEsR0FpQzFCLFNBQVMyYSxHQUFJSCxFQUFHQyxFQUFHQyxFQUFHTCxHQUNwQnhkLEtBQUsyZCxHQUFLQSxFQUNWM2QsS0FBSzRkLEdBQUtBLEVBQ1Y1ZCxLQUFLNmQsR0FBS0EsRUFDVjdkLEtBQUt3ZCxTQUFXQSxFQWlDbEIsU0FBU08sR0FBUUosRUFBR3pTLEVBQUk4UyxHQUN0QixPQUdZLEtBSEpMLEVBQUksR0FBS3pTLEdBQU04UyxFQUFLOVMsR0FBTXlTLEVBQUksR0FDaENBLEVBQUksSUFBTUssRUFDVkwsRUFBSSxJQUFNelMsR0FBTThTLEVBQUs5UyxJQUFPLElBQU15UyxHQUFLLEdBQ3ZDelMsR0F6S1IrUyxHQUFPdEwsR0FBT2lLLElBQ1pzQixZQUFhLFdBQ1gsT0FBT2xlLEtBQUt1ZCxNQUFNVyxlQUVwQlQsSUFBSyxXQUNILE9BQU96ZCxLQUFLdWQsTUFBTUUsT0FFcEJDLFNBQVUsV0FDUixPQUFPMWQsS0FBS3VkLE1BQVEsTUErQ3hCVSxHQUFPbEIsR0FBS1EsR0FBSzlLLEdBQU9FLElBQ3RCd0wsU0FBVSxTQUFTcE4sR0FFakIsT0FEQUEsRUFBUyxNQUFMQSxFQTlOYyxFQURGLEdBK05XNUYsS0FBS21FLElBOU5kLEVBREYsR0ErTjhCeUIsR0FDdkMsSUFBSWdNLEdBQUkvYyxLQUFLb2QsRUFBSXJNLEVBQUcvUSxLQUFLcWQsRUFBSXRNLEVBQUcvUSxLQUFLb0QsRUFBSTJOLEVBQUcvUSxLQUFLd2QsVUFFMURZLE9BQVEsU0FBU3JOLEdBRWYsT0FEQUEsRUFBUyxNQUFMQSxFQW5PWSxHQW1PUzVGLEtBQUttRSxJQW5PZCxHQW1PMEJ5QixHQUNuQyxJQUFJZ00sR0FBSS9jLEtBQUtvZCxFQUFJck0sRUFBRy9RLEtBQUtxZCxFQUFJdE0sRUFBRy9RLEtBQUtvRCxFQUFJMk4sRUFBRy9RLEtBQUt3ZCxVQUUxREQsSUFBSyxXQUNILE9BQU92ZCxNQUVUa2UsWUFBYSxXQUNYLE9BQVEsR0FBS2xlLEtBQUtvZCxHQUFLcGQsS0FBS29kLEdBQUssS0FDekIsR0FBS3BkLEtBQUtxZCxHQUFLcmQsS0FBS3FkLEdBQUssS0FDekIsR0FBS3JkLEtBQUtvRCxHQUFLcEQsS0FBS29ELEdBQUssS0FDekIsR0FBS3BELEtBQUt3ZCxTQUFXeGQsS0FBS3dkLFNBQVcsR0FFL0NDLElBQUssV0FDSCxNQUFPLElBQU1BLEdBQUl6ZCxLQUFLb2QsR0FBS0ssR0FBSXpkLEtBQUtxZCxHQUFLSSxHQUFJemQsS0FBS29ELElBRXBEc2EsU0FBVSxXQUNSLElBQUl2YSxFQUFJbkQsS0FBS3dkLFFBQ2IsT0FBYyxLQURRcmEsRUFBSStLLE1BQU0vSyxHQUFLLEVBQUlnSSxLQUFLbUQsSUFBSSxFQUFHbkQsS0FBS0MsSUFBSSxFQUFHakksS0FDL0MsT0FBUyxTQUNyQmdJLEtBQUttRCxJQUFJLEVBQUduRCxLQUFLQyxJQUFJLElBQUtELEtBQUs0RyxNQUFNL1IsS0FBS29kLElBQU0sSUFBTSxLQUN0RGpTLEtBQUttRCxJQUFJLEVBQUduRCxLQUFLQyxJQUFJLElBQUtELEtBQUs0RyxNQUFNL1IsS0FBS3FkLElBQU0sSUFBTSxLQUN0RGxTLEtBQUttRCxJQUFJLEVBQUduRCxLQUFLQyxJQUFJLElBQUtELEtBQUs0RyxNQUFNL1IsS0FBS29ELElBQU0sS0FDekMsSUFBTkQsRUFBVSxJQUFNLEtBQU9BLEVBQUksU0FxRHRDOGEsR0FBT0gsR0FYQSxTQUFhSCxFQUFHQyxFQUFHQyxFQUFHTCxHQUMzQixPQUE0QixJQUFyQnpSLFVBQVV0UCxPQTNCWixTQUFvQm9LLEdBQ3pCLEdBQUlBLGFBQWFpWCxHQUFLLE9BQU8sSUFBSUEsR0FBSWpYLEVBQUU4VyxFQUFHOVcsRUFBRStXLEVBQUcvVyxFQUFFZ1gsRUFBR2hYLEVBQUUyVyxTQUV0RCxHQURNM1csYUFBYThMLEtBQVE5TCxFQUFJK1YsR0FBTS9WLEtBQ2hDQSxFQUFHLE9BQU8sSUFBSWlYLEdBQ25CLEdBQUlqWCxhQUFhaVgsR0FBSyxPQUFPalgsRUFFN0IsSUFBSXVXLEdBREp2VyxFQUFJQSxFQUFFMFcsT0FDSUgsRUFBSSxJQUNWQyxFQUFJeFcsRUFBRXdXLEVBQUksSUFDVmphLEVBQUl5RCxFQUFFekQsRUFBSSxJQUNWZ0ksRUFBTUQsS0FBS0MsSUFBSWdTLEVBQUdDLEVBQUdqYSxHQUNyQmtMLEVBQU1uRCxLQUFLbUQsSUFBSThPLEVBQUdDLEVBQUdqYSxHQUNyQnVhLEVBQUl0YSxJQUNKdWEsRUFBSXRQLEVBQU1sRCxFQUNWeVMsR0FBS3ZQLEVBQU1sRCxHQUFPLEVBVXRCLE9BVEl3UyxHQUNhRCxFQUFYUCxJQUFNOU8sR0FBVStPLEVBQUlqYSxHQUFLd2EsRUFBYyxHQUFUUCxFQUFJamEsR0FDN0JpYSxJQUFNL08sR0FBVWxMLEVBQUlnYSxHQUFLUSxFQUFJLEdBQzVCUixFQUFJQyxHQUFLTyxFQUFJLEVBQ3ZCQSxHQUFLQyxFQUFJLEdBQU12UCxFQUFNbEQsRUFBTSxFQUFJa0QsRUFBTWxELEVBQ3JDdVMsR0FBSyxJQUVMQyxFQUFJQyxFQUFJLEdBQUtBLEVBQUksRUFBSSxFQUFJRixFQUVwQixJQUFJRyxHQUFJSCxFQUFHQyxFQUFHQyxFQUFHaFgsRUFBRTJXLFNBSU1hLENBQVdWLEdBQUssSUFBSUcsR0FBSUgsRUFBR0MsRUFBR0MsRUFBYyxNQUFYTCxFQUFrQixFQUFJQSxJQVV4RS9LLEdBQU9FLElBQ3RCd0wsU0FBVSxTQUFTcE4sR0FFakIsT0FEQUEsRUFBUyxNQUFMQSxFQTlTYyxFQURGLEdBK1NXNUYsS0FBS21FLElBOVNkLEVBREYsR0ErUzhCeUIsR0FDdkMsSUFBSStNLEdBQUk5ZCxLQUFLMmQsRUFBRzNkLEtBQUs0ZCxFQUFHNWQsS0FBSzZkLEVBQUk5TSxFQUFHL1EsS0FBS3dkLFVBRWxEWSxPQUFRLFNBQVNyTixHQUVmLE9BREFBLEVBQVMsTUFBTEEsRUFuVFksR0FtVFM1RixLQUFLbUUsSUFuVGQsR0FtVDBCeUIsR0FDbkMsSUFBSStNLEdBQUk5ZCxLQUFLMmQsRUFBRzNkLEtBQUs0ZCxFQUFHNWQsS0FBSzZkLEVBQUk5TSxFQUFHL1EsS0FBS3dkLFVBRWxERCxJQUFLLFdBQ0gsSUFBSUksRUFBSTNkLEtBQUsyZCxFQUFJLElBQXFCLEtBQWQzZCxLQUFLMmQsRUFBSSxHQUM3QkMsRUFBSTFQLE1BQU15UCxJQUFNelAsTUFBTWxPLEtBQUs0ZCxHQUFLLEVBQUk1ZCxLQUFLNGQsRUFDekNDLEVBQUk3ZCxLQUFLNmQsRUFDVEcsRUFBS0gsR0FBS0EsRUFBSSxHQUFNQSxFQUFJLEVBQUlBLEdBQUtELEVBQ2pDMVMsRUFBSyxFQUFJMlMsRUFBSUcsRUFDakIsT0FBTyxJQUFJakIsR0FDVGdCLEdBQVFKLEdBQUssSUFBTUEsRUFBSSxJQUFNQSxFQUFJLElBQUt6UyxFQUFJOFMsR0FDMUNELEdBQVFKLEVBQUd6UyxFQUFJOFMsR0FDZkQsR0FBUUosRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQUksSUFBS3pTLEVBQUk4UyxHQUN6Q2hlLEtBQUt3ZCxVQUdUVSxZQUFhLFdBQ1gsT0FBUSxHQUFLbGUsS0FBSzRkLEdBQUs1ZCxLQUFLNGQsR0FBSyxHQUFLMVAsTUFBTWxPLEtBQUs0ZCxLQUN6QyxHQUFLNWQsS0FBSzZkLEdBQUs3ZCxLQUFLNmQsR0FBSyxHQUN6QixHQUFLN2QsS0FBS3dkLFNBQVd4ZCxLQUFLd2QsU0FBVyxNQzFVMUMsSUFBSWMsR0FBVW5ULEtBQUtvVCxHQUFLLElBQ3BCQyxHQUFVLElBQU1yVCxLQUFLb1QsR0NLNUJFLEdBQUssT0FDTEMsR0FBSyxFQUNMQyxHQUFLLE9BQ0xDLEdBQUssRUFBSSxHQUNUQyxHQUFLLEVBQUksR0FDVEMsR0FBSyxFQUFJRCxHQUFLQSxHQUNkRSxHQUFLRixHQUFLQSxHQUFLQSxHQUVuQixTQUFTRyxHQUFXblksR0FDbEIsR0FBSUEsYUFBYW9ZLEdBQUssT0FBTyxJQUFJQSxHQUFJcFksRUFBRWdYLEVBQUdoWCxFQUFFMUQsRUFBRzBELEVBQUV6RCxFQUFHeUQsRUFBRTJXLFNBQ3RELEdBQUkzVyxhQUFhcVksR0FBSyxDQUNwQixHQUFJaFIsTUFBTXJILEVBQUU4VyxHQUFJLE9BQU8sSUFBSXNCLEdBQUlwWSxFQUFFZ1gsRUFBRyxFQUFHLEVBQUdoWCxFQUFFMlcsU0FDNUMsSUFBSUcsRUFBSTlXLEVBQUU4VyxFQUFJVyxHQUNkLE9BQU8sSUFBSVcsR0FBSXBZLEVBQUVnWCxFQUFHMVMsS0FBS2dVLElBQUl4QixHQUFLOVcsRUFBRTlKLEVBQUdvTyxLQUFLaVUsSUFBSXpCLEdBQUs5VyxFQUFFOUosRUFBRzhKLEVBQUUyVyxTQUV4RDNXLGFBQWFrVyxLQUFNbFcsRUFBSXlXLEdBQVd6VyxJQUN4QyxJQUd1RWlDLEVBQUd1VyxFQUh0RWpDLEVBQUlrQyxHQUFTelksRUFBRXVXLEdBQ2ZDLEVBQUlpQyxHQUFTelksRUFBRXdXLEdBQ2ZqYSxFQUFJa2MsR0FBU3pZLEVBQUV6RCxHQUNmNEYsRUFBSXVXLElBQVMsU0FBWW5DLEVBQUksU0FBWUMsRUFBSSxTQUFZamEsR0FBS3NiLElBS2xFLE9BSkl0QixJQUFNQyxHQUFLQSxJQUFNamEsRUFBRzBGLEVBQUl1VyxFQUFJclcsR0FDOUJGLEVBQUl5VyxJQUFTLFNBQVluQyxFQUFJLFNBQVlDLEVBQUksU0FBWWphLEdBQUtxYixJQUM5RFksRUFBSUUsSUFBUyxTQUFZbkMsRUFBSSxTQUFZQyxFQUFJLFNBQVlqYSxHQUFLdWIsS0FFekQsSUFBSU0sR0FBSSxJQUFNalcsRUFBSSxHQUFJLEtBQU9GLEVBQUlFLEdBQUksS0FBT0EsRUFBSXFXLEdBQUl4WSxFQUFFMlcsU0FXeEQsU0FBU3lCLEdBQUlwQixFQUFHMWEsRUFBR0MsRUFBR29hLEdBQzNCeGQsS0FBSzZkLEdBQUtBLEVBQ1Y3ZCxLQUFLbUQsR0FBS0EsRUFDVm5ELEtBQUtvRCxHQUFLQSxFQUNWcEQsS0FBS3dkLFNBQVdBLEVBMEJsQixTQUFTK0IsR0FBUWpqQixHQUNmLE9BQU9BLEVBQUl5aUIsR0FBSzVULEtBQUttRSxJQUFJaFQsRUFBRyxFQUFJLEdBQUtBLEVBQUl3aUIsR0FBS0YsR0FHaEQsU0FBU1ksR0FBUWxqQixHQUNmLE9BQU9BLEVBQUl1aUIsR0FBS3ZpQixFQUFJQSxFQUFJQSxFQUFJd2lCLElBQU14aUIsRUFBSXNpQixJQUd4QyxTQUFTYSxHQUFTM1csR0FDaEIsT0FBTyxLQUFPQSxHQUFLLFNBQVksTUFBUUEsRUFBSSxNQUFRcUMsS0FBS21FLElBQUl4RyxFQUFHLEVBQUksS0FBTyxNQUc1RSxTQUFTd1csR0FBU3hXLEdBQ2hCLE9BQVFBLEdBQUssTUFBUSxPQUFVQSxFQUFJLE1BQVFxQyxLQUFLbUUsS0FBS3hHLEVBQUksTUFBUyxNQUFPLEtBbUJwRSxTQUFTb1csR0FBSXZCLEVBQUc1Z0IsRUFBRzhnQixFQUFHTCxHQUMzQnhkLEtBQUsyZCxHQUFLQSxFQUNWM2QsS0FBS2pELEdBQUtBLEVBQ1ZpRCxLQUFLNmQsR0FBS0EsRUFDVjdkLEtBQUt3ZCxTQUFXQSxFQTNEbEJTLEdBQU9nQixHQVhRLFNBQWFwQixFQUFHMWEsRUFBR0MsRUFBR29hLEdBQ25DLE9BQTRCLElBQXJCelIsVUFBVXRQLE9BQWV1aUIsR0FBV25CLEdBQUssSUFBSW9CLEdBQUlwQixFQUFHMWEsRUFBR0MsRUFBYyxNQUFYb2EsRUFBa0IsRUFBSUEsSUFVeEUvSyxHQUFPRSxJQUN0QndMLFNBQVUsU0FBU3BOLEdBQ2pCLE9BQU8sSUFBSWtPLEdBQUlqZixLQUFLNmQsRUE3Q2hCLElBNkM4QixNQUFMOU0sRUFBWSxFQUFJQSxHQUFJL1EsS0FBS21ELEVBQUduRCxLQUFLb0QsRUFBR3BELEtBQUt3ZCxVQUV4RVksT0FBUSxTQUFTck4sR0FDZixPQUFPLElBQUlrTyxHQUFJamYsS0FBSzZkLEVBaERoQixJQWdEOEIsTUFBTDlNLEVBQVksRUFBSUEsR0FBSS9RLEtBQUttRCxFQUFHbkQsS0FBS29ELEVBQUdwRCxLQUFLd2QsVUFFeEVELElBQUssV0FDSCxJQUFJdlUsR0FBS2hKLEtBQUs2ZCxFQUFJLElBQU0sSUFDcEIvVSxFQUFJb0YsTUFBTWxPLEtBQUttRCxHQUFLNkYsRUFBSUEsRUFBSWhKLEtBQUttRCxFQUFJLElBQ3JDa2MsRUFBSW5SLE1BQU1sTyxLQUFLb0QsR0FBSzRGLEVBQUlBLEVBQUloSixLQUFLb0QsRUFBSSxJQUl6QyxPQUFPLElBQUkyWixHQUNUMEMsR0FBVSxXQUpaM1csRUFBSTJWLEdBQUtlLEdBQVExVyxJQUlXLFdBSDVCRSxFQUFJMFYsR0FBS2MsR0FBUXhXLElBRzJCLFVBRjVDcVcsRUFBSVYsR0FBS2EsR0FBUUgsS0FHZkksSUFBVSxTQUFZM1csRUFBSSxVQUFZRSxFQUFJLFFBQVlxVyxHQUN0REksR0FBVSxTQUFZM1csRUFBSSxTQUFZRSxFQUFJLFVBQVlxVyxHQUN0RHJmLEtBQUt3ZCxhQTRDWFMsR0FBT2lCLEdBWEEsU0FBYXZCLEVBQUc1Z0IsRUFBRzhnQixFQUFHTCxHQUMzQixPQUE0QixJQUFyQnpSLFVBQVV0UCxPQWJuQixTQUFvQm9LLEdBQ2xCLEdBQUlBLGFBQWFxWSxHQUFLLE9BQU8sSUFBSUEsR0FBSXJZLEVBQUU4VyxFQUFHOVcsRUFBRTlKLEVBQUc4SixFQUFFZ1gsRUFBR2hYLEVBQUUyVyxTQUV0RCxHQURNM1csYUFBYW9ZLEtBQU1wWSxFQUFJbVksR0FBV25ZLElBQzVCLElBQVJBLEVBQUUxRCxHQUFtQixJQUFSMEQsRUFBRXpELEVBQVMsT0FBTyxJQUFJOGIsR0FBSTdiLElBQUssRUFBR3dELEVBQUVnWCxFQUFHaFgsRUFBRTJXLFNBQzFELElBQUlHLEVBQUl4UyxLQUFLdVUsTUFBTTdZLEVBQUV6RCxFQUFHeUQsRUFBRTFELEdBQUtxYixHQUMvQixPQUFPLElBQUlVLEdBQUl2QixFQUFJLEVBQUlBLEVBQUksSUFBTUEsRUFBR3hTLEtBQUtrRCxLQUFLeEgsRUFBRTFELEVBQUkwRCxFQUFFMUQsRUFBSTBELEVBQUV6RCxFQUFJeUQsRUFBRXpELEdBQUl5RCxFQUFFZ1gsRUFBR2hYLEVBQUUyVyxTQVE3Q21DLENBQVdoQyxHQUFLLElBQUl1QixHQUFJdkIsRUFBRzVnQixFQUFHOGdCLEVBQWMsTUFBWEwsRUFBa0IsRUFBSUEsSUFVeEUvSyxHQUFPRSxJQUN0QndMLFNBQVUsU0FBU3BOLEdBQ2pCLE9BQU8sSUFBSW1PLEdBQUlsZixLQUFLMmQsRUFBRzNkLEtBQUtqRCxFQUFHaUQsS0FBSzZkLEVBM0doQyxJQTJHOEMsTUFBTDlNLEVBQVksRUFBSUEsR0FBSS9RLEtBQUt3ZCxVQUV4RVksT0FBUSxTQUFTck4sR0FDZixPQUFPLElBQUltTyxHQUFJbGYsS0FBSzJkLEVBQUczZCxLQUFLakQsRUFBR2lELEtBQUs2ZCxFQTlHaEMsSUE4RzhDLE1BQUw5TSxFQUFZLEVBQUlBLEdBQUkvUSxLQUFLd2QsVUFFeEVELElBQUssV0FDSCxPQUFPeUIsR0FBV2hmLE1BQU11ZCxVQ2xINUIsSUFBSXFDLElBQUssT0FDTEMsR0FBSSxRQUNKQyxJQUFLLE9BQ0xDLElBQUssT0FDTEMsR0FBSSxRQUNKQyxHQUFLRCxHQUFJRCxHQUNURyxHQUFLRixHQUFJSCxHQUNUTSxHQUFRTixHQUFJQyxHQUFJQyxHQUFJSCxHQW9CakIsU0FBU1EsR0FBVXpDLEVBQUdDLEVBQUdDLEVBQUdMLEdBQ2pDeGQsS0FBSzJkLEdBQUtBLEVBQ1YzZCxLQUFLNGQsR0FBS0EsRUFDVjVkLEtBQUs2ZCxHQUFLQSxFQUNWN2QsS0FBS3dkLFNBQVdBLEVDbkNILFlBQVMxVSxHQUN0QixPQUFPLFdBQ0wsT0FBT0EsR0NpQkosU0FBU3VYLEdBQU1yWCxHQUNwQixPQUFvQixJQUFaQSxHQUFLQSxHQUFXc1gsR0FBVSxTQUFTbmQsRUFBR0MsR0FDNUMsT0FBT0EsRUFBSUQsRUFiZixTQUFxQkEsRUFBR0MsRUFBRzRGLEdBQ3pCLE9BQU83RixFQUFJZ0ksS0FBS21FLElBQUluTSxFQUFHNkYsR0FBSTVGLEVBQUkrSCxLQUFLbUUsSUFBSWxNLEVBQUc0RixHQUFLN0YsRUFBRzZGLEVBQUksRUFBSUEsRUFBRyxTQUFTMU0sR0FDckUsT0FBTzZPLEtBQUttRSxJQUFJbk0sRUFBSTdHLEVBQUk4RyxFQUFHNEYsSUFXWnVYLENBQVlwZCxFQUFHQyxFQUFHNEYsR0FBS3dYLEdBQVN0UyxNQUFNL0ssR0FBS0MsRUFBSUQsSUFJbkQsU0FBU21kLEdBQVFuZCxFQUFHQyxHQUNqQyxJQUFJaUUsRUFBSWpFLEVBQUlELEVBQ1osT0FBT2tFLEVBekJULFNBQWdCbEUsRUFBR2tFLEdBQ2pCLE9BQU8sU0FBUy9LLEdBQ2QsT0FBTzZHLEVBQUk3RyxFQUFJK0ssR0F1Qk5vWixDQUFPdGQsRUFBR2tFLEdBQUttWixHQUFTdFMsTUFBTS9LLEdBQUtDLEVBQUlELEdGV3BEOGEsR0FBT21DLEdBWFEsU0FBbUJ6QyxFQUFHQyxFQUFHQyxFQUFHTCxHQUN6QyxPQUE0QixJQUFyQnpSLFVBQVV0UCxPQWZuQixTQUEwQm9LLEdBQ3hCLEdBQUlBLGFBQWF1WixHQUFXLE9BQU8sSUFBSUEsR0FBVXZaLEVBQUU4VyxFQUFHOVcsRUFBRStXLEVBQUcvVyxFQUFFZ1gsRUFBR2hYLEVBQUUyVyxTQUM1RDNXLGFBQWFrVyxLQUFNbFcsRUFBSXlXLEdBQVd6VyxJQUN4QyxJQUFJdVcsRUFBSXZXLEVBQUV1VyxFQUFJLElBQ1ZDLEVBQUl4VyxFQUFFd1csRUFBSSxJQUNWamEsRUFBSXlELEVBQUV6RCxFQUFJLElBQ1Z5YSxHQUFLc0MsR0FBUS9jLEVBQUk2YyxHQUFLN0MsRUFBSThDLEdBQUs3QyxJQUFNOEMsR0FBUUYsR0FBS0MsSUFDbERRLEVBQUt0ZCxFQUFJeWEsRUFDVDlNLEdBQUtpUCxJQUFLM0MsRUFBSVEsR0FBS2lDLEdBQUlZLEdBQU1YLEdBQzdCbkMsRUFBSXpTLEtBQUtrRCxLQUFLMEMsRUFBSUEsRUFBSTJQLEVBQUtBLElBQU9WLEdBQUluQyxHQUFLLEVBQUlBLElBQy9DRixFQUFJQyxFQUFJelMsS0FBS3VVLE1BQU0zTyxFQUFHMlAsR0FBTWxDLEdBQVUsSUFBTW5iLElBQ2hELE9BQU8sSUFBSStjLEdBQVV6QyxFQUFJLEVBQUlBLEVBQUksSUFBTUEsRUFBR0MsRUFBR0MsRUFBR2hYLEVBQUUyVyxTQUlsQm1ELENBQWlCaEQsR0FBSyxJQUFJeUMsR0FBVXpDLEVBQUdDLEVBQUdDLEVBQWMsTUFBWEwsRUFBa0IsRUFBSUEsSUFVeEUvSyxHQUFPRSxJQUNsQ3dMLFNBQVUsU0FBU3BOLEdBRWpCLE9BREFBLEVBQVMsTUFBTEEsRUhuQ2MsRUFERixHR29DVzVGLEtBQUttRSxJSG5DZCxFQURGLEdHb0M4QnlCLEdBQ3ZDLElBQUlxUCxHQUFVcGdCLEtBQUsyZCxFQUFHM2QsS0FBSzRkLEVBQUc1ZCxLQUFLNmQsRUFBSTlNLEVBQUcvUSxLQUFLd2QsVUFFeERZLE9BQVEsU0FBU3JOLEdBRWYsT0FEQUEsRUFBUyxNQUFMQSxFSHhDWSxHR3dDUzVGLEtBQUttRSxJSHhDZCxHR3dDMEJ5QixHQUNuQyxJQUFJcVAsR0FBVXBnQixLQUFLMmQsRUFBRzNkLEtBQUs0ZCxFQUFHNWQsS0FBSzZkLEVBQUk5TSxFQUFHL1EsS0FBS3dkLFVBRXhERCxJQUFLLFdBQ0gsSUFBSUksRUFBSXpQLE1BQU1sTyxLQUFLMmQsR0FBSyxHQUFLM2QsS0FBSzJkLEVBQUksS0FBT1csR0FDekNULEdBQUs3ZCxLQUFLNmQsRUFDVjFhLEVBQUkrSyxNQUFNbE8sS0FBSzRkLEdBQUssRUFBSTVkLEtBQUs0ZCxFQUFJQyxHQUFLLEVBQUlBLEdBQzFDK0MsRUFBT3pWLEtBQUtnVSxJQUFJeEIsR0FDaEJrRCxFQUFPMVYsS0FBS2lVLElBQUl6QixHQUNwQixPQUFPLElBQUlaLEdBQ1QsS0FBT2MsRUFBSTFhLEdBQUt5YyxHQUFJZ0IsRUFBT2YsR0FBSWdCLElBQy9CLEtBQU9oRCxFQUFJMWEsR0FBSzJjLEdBQUljLEVBQU9iLEdBQUljLElBQy9CLEtBQU9oRCxFQUFJMWEsR0FBSzZjLEdBQUlZLElBQ3BCNWdCLEtBQUt3ZCxvQkdwREksU0FBVXNELEVBQVM5WCxHQUNoQyxJQUFJNFQsRUFBUXlELEdBQU1yWCxHQUVsQixTQUFTdVUsRUFBSWhQLEVBQU93UyxHQUNsQixJQUFJM0QsRUFBSVIsR0FBT3JPLEVBQVF5UyxHQUFTelMsSUFBUTZPLEdBQUkyRCxFQUFNQyxHQUFTRCxJQUFNM0QsR0FDN0RDLEVBQUlULEVBQU1yTyxFQUFNOE8sRUFBRzBELEVBQUkxRCxHQUN2QmphLEVBQUl3WixFQUFNck8sRUFBTW5MLEVBQUcyZCxFQUFJM2QsR0FDdkJvYSxFQUFVOEMsR0FBUS9SLEVBQU1pUCxRQUFTdUQsRUFBSXZELFNBQ3pDLE9BQU8sU0FBU2xoQixHQUtkLE9BSkFpUyxFQUFNNk8sRUFBSUEsRUFBRTlnQixHQUNaaVMsRUFBTThPLEVBQUlBLEVBQUUvZ0IsR0FDWmlTLEVBQU1uTCxFQUFJQSxFQUFFOUcsR0FDWmlTLEVBQU1pUCxRQUFVQSxFQUFRbGhCLEdBQ2pCaVMsRUFBUSxJQU1uQixPQUZBZ1AsRUFBSThDLE1BQVFTLEVBRUx2RCxFQW5CTSxDQW9CWixHQ3pCWSxZQUFTcGEsRUFBR0MsR0FDekIsT0FBZUEsR0FBUkQsR0FBS0EsRUFBVyxTQUFTN0csR0FDOUIsT0FBTzZHLEVBQUlDLEVBQUk5RyxHQ0FuQixJQUFJMmtCLEdBQU0sOENBQ05DLEdBQU0sSUFBSWxsQixPQUFPaWxCLEdBQUkxWSxPQUFRLEtBY2xCLFlBQVNwRixFQUFHQyxHQUN6QixJQUNJK2QsRUFDQUMsRUFDQUMsRUFIQUMsRUFBS0wsR0FBSU0sVUFBWUwsR0FBSUssVUFBWSxFQUlyQzdsQixHQUFLLEVBQ0xraUIsS0FDQTRELEtBTUosSUFIQXJlLEdBQVEsR0FBSUMsR0FBUSxJQUdaK2QsRUFBS0YsR0FBSW5FLEtBQUszWixNQUNkaWUsRUFBS0YsR0FBSXBFLEtBQUsxWixNQUNmaWUsRUFBS0QsRUFBR2xiLE9BQVNvYixJQUNwQkQsRUFBS2plLEVBQUVuRyxNQUFNcWtCLEVBQUlELEdBQ2J6RCxFQUFFbGlCLEdBQUlraUIsRUFBRWxpQixJQUFNMmxCLEVBQ2J6RCxJQUFJbGlCLEdBQUsybEIsSUFFWEYsRUFBS0EsRUFBRyxPQUFTQyxFQUFLQSxFQUFHLElBQ3hCeEQsRUFBRWxpQixHQUFJa2lCLEVBQUVsaUIsSUFBTTBsQixFQUNieEQsSUFBSWxpQixHQUFLMGxCLEdBRWR4RCxJQUFJbGlCLEdBQUssS0FDVDhsQixFQUFFcGtCLE1BQU0xQixFQUFHQSxFQUFHb04sRUFBR3FGLEdBQU9nVCxFQUFJQyxNQUU5QkUsRUFBS0osR0FBSUssVUFZWCxPQVJJRCxFQUFLbGUsRUFBRTNHLFNBQ1Q0a0IsRUFBS2plLEVBQUVuRyxNQUFNcWtCLEdBQ1QxRCxFQUFFbGlCLEdBQUlraUIsRUFBRWxpQixJQUFNMmxCLEVBQ2J6RCxJQUFJbGlCLEdBQUsybEIsR0FLVHpELEVBQUVuaEIsT0FBUyxFQUFLK2tCLEVBQUUsR0E3QzNCLFNBQWFwZSxHQUNYLE9BQU8sU0FBUzlHLEdBQ2QsT0FBTzhHLEVBQUU5RyxHQUFLLElBNENWbWxCLENBQUlELEVBQUUsR0FBRzFZLEdBcERqQixTQUFjMUYsR0FDWixPQUFPLFdBQ0wsT0FBT0EsR0FtREhzZSxDQUFLdGUsSUFDSkEsRUFBSW9lLEVBQUUva0IsT0FBUSxTQUFTSCxHQUN0QixJQUFLLElBQVd1SyxFQUFQbkwsRUFBSSxFQUFNQSxFQUFJMEgsSUFBSzFILEVBQUdraUIsR0FBRy9XLEVBQUkyYSxFQUFFOWxCLElBQUlBLEdBQUttTCxFQUFFaUMsRUFBRXhNLEdBQ3JELE9BQU9zaEIsRUFBRS9oQixLQUFLLE1DcERULFlBQVNzSCxFQUFHQyxHQUN6QixJQUFrQnJHLEVBQWRULFNBQVc4RyxFQUNmLE9BQVksTUFBTEEsR0FBbUIsWUFBTjlHLEVBQWtCa2tCLEdBQVNwZCxJQUNsQyxXQUFOOUcsRUFBaUI2UixHQUNaLFdBQU43UixHQUFtQlMsRUFBSTZmLEdBQU14WixLQUFPQSxFQUFJckcsRUFBR3dnQixJQUFPM1osR0FDbERSLGFBQWF3WixHQUFRVyxHQUNyQm5hLGFBQWF1ZSxLQ2ZOLFNBQVN4ZSxFQUFHQyxHQUN6QixJQUFJaUUsRUFBSSxJQUFJc2EsS0FDWixPQUFldmUsR0FBUkQsR0FBS0EsRUFBVyxTQUFTN0csR0FDOUIsT0FBTytLLEVBQUV1YSxRQUFRemUsRUFBSUMsRUFBSTlHLEdBQUkrSyxJRGF6QjlGLE1BQU1zTyxRQUFRek0sR0VkUCxTQUFTRCxFQUFHQyxHQUN6QixJQUlJMUgsRUFKQW1tQixFQUFLemUsRUFBSUEsRUFBRTNHLE9BQVMsRUFDcEJxbEIsRUFBSzNlLEVBQUlnSSxLQUFLQyxJQUFJeVcsRUFBSTFlLEVBQUUxRyxRQUFVLEVBQ2xDcU0sRUFBSSxJQUFJdkgsTUFBTXVnQixHQUNkL2tCLEVBQUksSUFBSXdFLE1BQU1zZ0IsR0FHbEIsSUFBS25tQixFQUFJLEVBQUdBLEVBQUlvbUIsSUFBTXBtQixFQUFHb04sRUFBRXBOLEdBQUt5TCxHQUFNaEUsRUFBRXpILEdBQUkwSCxFQUFFMUgsSUFDOUMsS0FBT0EsRUFBSW1tQixJQUFNbm1CLEVBQUdxQixFQUFFckIsR0FBSzBILEVBQUUxSCxHQUU3QixPQUFPLFNBQVNZLEdBQ2QsSUFBS1osRUFBSSxFQUFHQSxFQUFJb21CLElBQU1wbUIsRUFBR3FCLEVBQUVyQixHQUFLb04sRUFBRXBOLEdBQUdZLEdBQ3JDLE9BQU9TLElGR2tCLG1CQUFkcUcsRUFBRTJlLFNBQWdELG1CQUFmM2UsRUFBRXNhLFVBQTJCeFAsTUFBTTlLLEdHZnRFLFNBQVNELEVBQUdDLEdBQ3pCLElBRUkyTixFQUZBclYsS0FDQXFCLEtBTUosSUFBS2dVLEtBSEssT0FBTjVOLEdBQTJCLGlCQUFOQSxJQUFnQkEsTUFDL0IsT0FBTkMsR0FBMkIsaUJBQU5BLElBQWdCQSxNQUUvQkEsRUFDSjJOLEtBQUs1TixFQUNQekgsRUFBRXFWLEdBQUs1SixHQUFNaEUsRUFBRTROLEdBQUkzTixFQUFFMk4sSUFFckJoVSxFQUFFZ1UsR0FBSzNOLEVBQUUyTixHQUliLE9BQU8sU0FBU3pVLEdBQ2QsSUFBS3lVLEtBQUtyVixFQUFHcUIsRUFBRWdVLEdBQUtyVixFQUFFcVYsR0FBR3pVLEdBQ3pCLE9BQU9TLElIRkhvUixJQUFRaEwsRUFBR0MsR0lsQkosWUFBU0QsRUFBR0MsR0FDekIsT0FBZUEsR0FBUkQsR0FBS0EsRUFBVyxTQUFTN0csR0FDOUIsT0FBTzZPLEtBQUs0RyxNQUFNNU8sRUFBSUMsRUFBSTlHLElDRjlCLElDRUkwbEIsR0FDQUMsR0FDQUMsR0FDQUMsR0RMQUMsR0FBVSxJQUFNalgsS0FBS29ULEdBRWQ4RCxJQUNUQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsT0FBUSxFQUNSQyxNQUFPLEVBQ1BDLE9BQVEsRUFDUkMsT0FBUSxHQUdLLFlBQVN4ZixFQUFHQyxFQUFHckcsRUFBR3NLLEVBQUd1YixFQUFHdm1CLEdBQ3JDLElBQUlxbUIsRUFBUUMsRUFBUUYsRUFLcEIsT0FKSUMsRUFBU3ZYLEtBQUtrRCxLQUFLbEwsRUFBSUEsRUFBSUMsRUFBSUEsTUFBSUQsR0FBS3VmLEVBQVF0ZixHQUFLc2YsSUFDckRELEVBQVF0ZixFQUFJcEcsRUFBSXFHLEVBQUlpRSxLQUFHdEssR0FBS29HLEVBQUlzZixFQUFPcGIsR0FBS2pFLEVBQUlxZixJQUNoREUsRUFBU3hYLEtBQUtrRCxLQUFLdFIsRUFBSUEsRUFBSXNLLEVBQUlBLE1BQUl0SyxHQUFLNGxCLEVBQVF0YixHQUFLc2IsRUFBUUYsR0FBU0UsR0FDdEV4ZixFQUFJa0UsRUFBSWpFLEVBQUlyRyxJQUFHb0csR0FBS0EsRUFBR0MsR0FBS0EsRUFBR3FmLEdBQVNBLEVBQU9DLEdBQVVBLElBRTNESixXQUFZTSxFQUNaTCxXQUFZbG1CLEVBQ1ptbUIsT0FBUXJYLEtBQUt1VSxNQUFNdGMsRUFBR0QsR0FBS2lmLEdBQzNCSyxNQUFPdFgsS0FBSzBYLEtBQUtKLEdBQVNMLEdBQzFCTSxPQUFRQSxFQUNSQyxPQUFRQSxHRXBCWixTQUFTRyxHQUFxQnRsQixFQUFPdWxCLEVBQVNDLEVBQVNDLEdBRXJELFNBQVNDLEVBQUl0RixHQUNYLE9BQU9BLEVBQUVuaEIsT0FBU21oQixFQUFFc0YsTUFBUSxJQUFNLEdBc0NwQyxPQUFPLFNBQVMvZixFQUFHQyxHQUNqQixJQUFJd2EsS0FDQTRELEtBT0osT0FOQXJlLEVBQUkzRixFQUFNMkYsR0FBSUMsRUFBSTVGLEVBQU00RixHQXRDMUIsU0FBbUIrZixFQUFJQyxFQUFJQyxFQUFJQyxFQUFJMUYsRUFBRzRELEdBQ3BDLEdBQUkyQixJQUFPRSxHQUFNRCxJQUFPRSxFQUFJLENBQzFCLElBQUk1bkIsRUFBSWtpQixFQUFFeGdCLEtBQUssYUFBYyxLQUFNMmxCLEVBQVMsS0FBTUMsR0FDbER4QixFQUFFcGtCLE1BQU0xQixFQUFHQSxFQUFJLEVBQUdvTixFQUFHcUYsR0FBT2dWLEVBQUlFLEtBQU8zbkIsRUFBR0EsRUFBSSxFQUFHb04sRUFBR3FGLEdBQU9pVixFQUFJRSxVQUN0REQsR0FBTUMsSUFDZjFGLEVBQUV4Z0IsS0FBSyxhQUFlaW1CLEVBQUtOLEVBQVVPLEVBQUtOLEdBa0M1Q08sQ0FBVXBnQixFQUFFbWYsV0FBWW5mLEVBQUVvZixXQUFZbmYsRUFBRWtmLFdBQVlsZixFQUFFbWYsV0FBWTNFLEVBQUc0RCxHQTlCdkUsU0FBZ0JyZSxFQUFHQyxFQUFHd2EsRUFBRzRELEdBQ25CcmUsSUFBTUMsR0FDSkQsRUFBSUMsRUFBSSxJQUFLQSxHQUFLLElBQWNBLEVBQUlELEVBQUksTUFBS0EsR0FBSyxLQUN0RHFlLEVBQUVwa0IsTUFBTTFCLEVBQUdraUIsRUFBRXhnQixLQUFLOGxCLEVBQUl0RixHQUFLLFVBQVcsS0FBTXFGLEdBQVksRUFBR25hLEVBQUdxRixHQUFPaEwsRUFBR0MsTUFDL0RBLEdBQ1R3YSxFQUFFeGdCLEtBQUs4bEIsRUFBSXRGLEdBQUssVUFBWXhhLEVBQUk2ZixHQTBCbENULENBQU9yZixFQUFFcWYsT0FBUXBmLEVBQUVvZixPQUFRNUUsRUFBRzRELEdBdEJoQyxTQUFlcmUsRUFBR0MsRUFBR3dhLEVBQUc0RCxHQUNsQnJlLElBQU1DLEVBQ1JvZSxFQUFFcGtCLE1BQU0xQixFQUFHa2lCLEVBQUV4Z0IsS0FBSzhsQixFQUFJdEYsR0FBSyxTQUFVLEtBQU1xRixHQUFZLEVBQUduYSxFQUFHcUYsR0FBT2hMLEVBQUdDLEtBQzlEQSxHQUNUd2EsRUFBRXhnQixLQUFLOGxCLEVBQUl0RixHQUFLLFNBQVd4YSxFQUFJNmYsR0FtQmpDUixDQUFNdGYsRUFBRXNmLE1BQU9yZixFQUFFcWYsTUFBTzdFLEVBQUc0RCxHQWY3QixTQUFlMkIsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSTFGLEVBQUc0RCxHQUNoQyxHQUFJMkIsSUFBT0UsR0FBTUQsSUFBT0UsRUFBSSxDQUMxQixJQUFJNW5CLEVBQUlraUIsRUFBRXhnQixLQUFLOGxCLEVBQUl0RixHQUFLLFNBQVUsS0FBTSxJQUFLLEtBQU0sS0FDbkQ0RCxFQUFFcGtCLE1BQU0xQixFQUFHQSxFQUFJLEVBQUdvTixFQUFHcUYsR0FBT2dWLEVBQUlFLEtBQU8zbkIsRUFBR0EsRUFBSSxFQUFHb04sRUFBR3FGLEdBQU9pVixFQUFJRSxVQUMvQyxJQUFQRCxHQUFtQixJQUFQQyxHQUNyQjFGLEVBQUV4Z0IsS0FBSzhsQixFQUFJdEYsR0FBSyxTQUFXeUYsRUFBSyxJQUFNQyxFQUFLLEtBVzdDL1IsQ0FBTXBPLEVBQUV1ZixPQUFRdmYsRUFBRXdmLE9BQVF2ZixFQUFFc2YsT0FBUXRmLEVBQUV1ZixPQUFRL0UsRUFBRzRELEdBQ2pEcmUsRUFBSUMsRUFBSSxLQUNELFNBQVM5RyxHQUVkLElBREEsSUFBMEJ1SyxFQUF0Qm5MLEdBQUssRUFBR2lCLEVBQUk2a0IsRUFBRS9rQixTQUNUZixFQUFJaUIsR0FBR2loQixHQUFHL1csRUFBSTJhLEVBQUU5bEIsSUFBSUEsR0FBS21MLEVBQUVpQyxFQUFFeE0sR0FDdEMsT0FBT3NoQixFQUFFL2hCLEtBQUssTUFLYixJQUFJMm5CLEdBQTBCVixHRHREOUIsU0FBa0IzYixHQUN2QixNQUFjLFNBQVZBLEVBQXlCa2IsSUFDeEJMLEtBQVNBLEdBQVU3aEIsU0FBU0ksY0FBYyxPQUFRMGhCLEdBQVU5aEIsU0FBU0csZ0JBQWlCNGhCLEdBQVUvaEIsU0FBU21ELGFBQzlHMGUsR0FBUXhlLE1BQU1pZ0IsVUFBWXRjLEVBQzFCQSxFQUFRK2EsR0FBUXhlLGlCQUFpQnVlLEdBQVFqZ0IsWUFBWWdnQixJQUFVLE1BQU12ZSxpQkFBaUIsYUFDdEZ3ZSxHQUFRNWMsWUFBWTJjLElBRWIwQixLQURQdmMsRUFBUUEsRUFBTWxLLE1BQU0sR0FBSSxHQUFHNkcsTUFBTSxNQUNULElBQUtxRCxFQUFNLElBQUtBLEVBQU0sSUFBS0EsRUFBTSxJQUFLQSxFQUFNLElBQUtBLEVBQU0sTUMrQ2IsT0FBUSxNQUFPLFFBQ3hFd2MsR0FBMEJiLEdEN0M5QixTQUFrQjNiLEdBQ3ZCLE9BQWEsTUFBVEEsRUFBc0JrYixJQUNyQkYsS0FBU0EsR0FBVWhpQixTQUFTRCxnQkFBZ0IsNkJBQThCLE1BQy9FaWlCLEdBQVExYyxhQUFhLFlBQWEwQixJQUM1QkEsRUFBUWdiLEdBQVFzQixVQUFVRyxRQUFRQyxlQUVqQ0gsSUFEUHZjLEVBQVFBLEVBQU0yYyxRQUNTM2dCLEVBQUdnRSxFQUFNL0QsRUFBRytELEVBQU1wSyxFQUFHb0ssRUFBTUUsRUFBR0YsRUFBTXliLEVBQUd6YixFQUFNOUssR0FGTGdtQixLQ3lDRyxLQUFNLElBQUssS0M5RHJFbFgsS0FBSzRZLE1DQUEsWUFBU2piLEdBQ3RCLE9BQVFBLEVDS1YsSUFBSWtiLElBQVEsRUFBRyxHQUVSLFNBQVNDLEdBQW9COWdCLEVBQUdDLEdBQ3JDLE9BQVFBLEdBQU1ELEdBQUtBLEdBQ2IsU0FBUzJGLEdBQUssT0FBUUEsRUFBSTNGLEdBQUtDLElDVmYwRixFRFdQMUYsRUNWUixXQUNMLE9BQU8wRixJQUZJLElBQVNBLEVENEJ4QixTQUFTb2IsR0FBTXpTLEVBQVE5QyxFQUFPd1YsRUFBZUMsR0FDM0MsSUFBSUMsRUFBSzVTLEVBQU8sR0FBSTZTLEVBQUs3UyxFQUFPLEdBQUk4UyxFQUFLNVYsRUFBTSxHQUFJNlYsRUFBSzdWLEVBQU0sR0FHOUQsT0FGSTJWLEVBQUtELEdBQUlBLEVBQUtGLEVBQWNHLEVBQUlELEdBQUtFLEVBQUtILEVBQWNJLEVBQUlELEtBQzNERixFQUFLRixFQUFjRSxFQUFJQyxHQUFLQyxFQUFLSCxFQUFjRyxFQUFJQyxJQUNqRCxTQUFTMWIsR0FBSyxPQUFPeWIsRUFBR0YsRUFBR3ZiLEtBR3BDLFNBQVMyYixHQUFRaFQsRUFBUTlDLEVBQU93VixFQUFlQyxHQUM3QyxJQUFJcG5CLEVBQUltTyxLQUFLQyxJQUFJcUcsRUFBT2hWLE9BQVFrUyxFQUFNbFMsUUFBVSxFQUM1QzRLLEVBQUksSUFBSTlGLE1BQU12RSxHQUNkb2dCLEVBQUksSUFBSTdiLE1BQU12RSxHQUNkdEIsR0FBSyxFQVFULElBTEkrVixFQUFPelUsR0FBS3lVLEVBQU8sS0FDckJBLEVBQVNBLEVBQU94VSxRQUFRbVYsVUFDeEJ6RCxFQUFRQSxFQUFNMVIsUUFBUW1WLGFBR2YxVyxFQUFJc0IsR0FDWHFLLEVBQUUzTCxHQUFLeW9CLEVBQWMxUyxFQUFPL1YsR0FBSStWLEVBQU8vVixFQUFJLElBQzNDMGhCLEVBQUUxaEIsR0FBSzBvQixFQUFjelYsRUFBTWpULEdBQUlpVCxFQUFNalQsRUFBSSxJQUczQyxPQUFPLFNBQVNvTixHQUNkLElBQUlwTixFQUFJZ3BCLEdBQU9qVCxFQUFRM0ksRUFBRyxFQUFHOUwsR0FBSyxFQUNsQyxPQUFPb2dCLEVBQUUxaEIsR0FBRzJMLEVBQUUzTCxHQUFHb04sS0VuRE4sWUFBU0EsRUFBR3lHLEdBQ3pCLElBQUs3VCxHQUFLb04sRUFBSXlHLEVBQUl6RyxFQUFFNmIsY0FBY3BWLEVBQUksR0FBS3pHLEVBQUU2YixpQkFBaUJsbEIsUUFBUSxNQUFRLEVBQUcsT0FBTyxLQUN4RixJQUFJL0QsRUFBR2twQixFQUFjOWIsRUFBRTdMLE1BQU0sRUFBR3ZCLEdBSWhDLE9BQ0VrcEIsRUFBWW5vQixPQUFTLEVBQUltb0IsRUFBWSxHQUFLQSxFQUFZM25CLE1BQU0sR0FBSzJuQixHQUNoRTliLEVBQUU3TCxNQUFNdkIsRUFBSSxJQ1RGLFlBQVNvTixHQUN0QixPQUFPQSxFQUFJK2IsR0FBYzFaLEtBQUsyWixJQUFJaGMsS0FBU0EsRUFBRSxHQUFLekYsSUNGcEQsSUNDVzBoQixHRERQQyxHQUFLLDRFQUVNLFNBQVNDLEdBQWdCQyxHQUN0QyxPQUFPLElBQUlDLEdBQWdCRCxHQUs3QixTQUFTQyxHQUFnQkQsR0FDdkIsS0FBTWhiLEVBQVE4YSxHQUFHbEksS0FBS29JLElBQWEsTUFBTSxJQUFJdm1CLE1BQU0sbUJBQXFCdW1CLEdBQ3hFLElBQUloYixFQUNKbEssS0FBS29sQixLQUFPbGIsRUFBTSxJQUFNLElBQ3hCbEssS0FBS2tTLE1BQVFoSSxFQUFNLElBQU0sSUFDekJsSyxLQUFLcWxCLEtBQU9uYixFQUFNLElBQU0sSUFDeEJsSyxLQUFLc2xCLE9BQVNwYixFQUFNLElBQU0sR0FDMUJsSyxLQUFLMGhCLE9BQVN4WCxFQUFNLEdBQ3BCbEssS0FBS3VsQixNQUFRcmIsRUFBTSxLQUFPQSxFQUFNLEdBQ2hDbEssS0FBS3dsQixRQUFVdGIsRUFBTSxHQUNyQmxLLEtBQUt5bEIsVUFBWXZiLEVBQU0sS0FBT0EsRUFBTSxHQUFHak4sTUFBTSxHQUM3QytDLEtBQUs2RCxPQUFTcUcsRUFBTSxHQUNwQmxLLEtBQUsrRyxLQUFPbUQsRUFBTSxLQUFPLEdFbkJaLFlBQVNwQixFQUFHeUcsR0FDekIsSUFBSWxJLEVBQUl3ZCxHQUFjL2IsRUFBR3lHLEdBQ3pCLElBQUtsSSxFQUFHLE9BQU95QixFQUFJLEdBQ25CLElBQUk4YixFQUFjdmQsRUFBRSxHQUNoQnFlLEVBQVdyZSxFQUFFLEdBQ2pCLE9BQU9xZSxFQUFXLEVBQUksS0FBTyxJQUFJbmtCLE9BQU9ta0IsR0FBVTdwQixLQUFLLEtBQU8rb0IsRUFDeERBLEVBQVlub0IsT0FBU2lwQixFQUFXLEVBQUlkLEVBQVkzbkIsTUFBTSxFQUFHeW9CLEVBQVcsR0FBSyxJQUFNZCxFQUFZM25CLE1BQU15b0IsRUFBVyxHQUM1R2QsRUFBYyxJQUFJcmpCLE1BQU1ta0IsRUFBV2QsRUFBWW5vQixPQUFTLEdBQUdaLEtBQUssS0ZGeEVvcEIsR0FBZ0JuakIsVUFBWXFqQixHQUFnQnJqQixVQWlCNUNxakIsR0FBZ0JyakIsVUFBVTRiLFNBQVcsV0FDbkMsT0FBTzFkLEtBQUtvbEIsS0FDTnBsQixLQUFLa1MsTUFDTGxTLEtBQUtxbEIsS0FDTHJsQixLQUFLc2xCLFFBQ0p0bEIsS0FBSzBoQixLQUFPLElBQU0sS0FDSixNQUFkMWhCLEtBQUt1bEIsTUFBZ0IsR0FBS3BhLEtBQUttRCxJQUFJLEVBQWdCLEVBQWJ0TyxLQUFLdWxCLFNBQzNDdmxCLEtBQUt3bEIsTUFBUSxJQUFNLEtBQ0QsTUFBbEJ4bEIsS0FBS3lsQixVQUFvQixHQUFLLElBQU10YSxLQUFLbUQsSUFBSSxFQUFvQixFQUFqQnRPLEtBQUt5bEIsYUFDckR6bEIsS0FBSzZELEtBQU8sSUFBTSxJQUNuQjdELEtBQUsrRyxjRzlCWDRlLElBQUssU0FBUzdjLEVBQUd5RyxHQUFLLE9BQVksSUFBSnpHLEdBQVM4YyxRQUFRclcsSUFDL0NuTSxFQUFLLFNBQVMwRixHQUFLLE9BQU9xQyxLQUFLNEcsTUFBTWpKLEdBQUc0VSxTQUFTLElBQ2pEM2dCLEVBQUssU0FBUytMLEdBQUssT0FBT0EsRUFBSSxJQUM5QnpCLEVBQUssU0FBU3lCLEdBQUssT0FBT3FDLEtBQUs0RyxNQUFNakosR0FBRzRVLFNBQVMsS0FDakRrRixFQUFLLFNBQVM5WixFQUFHeUcsR0FBSyxPQUFPekcsRUFBRTZiLGNBQWNwVixJQUM3Q2xULEVBQUssU0FBU3lNLEVBQUd5RyxHQUFLLE9BQU96RyxFQUFFOGMsUUFBUXJXLElBQ3ZDOE4sRUFBSyxTQUFTdlUsRUFBR3lHLEdBQUssT0FBT3pHLEVBQUUrYyxZQUFZdFcsSUFDM0MxSSxFQUFLLFNBQVNpQyxHQUFLLE9BQU9xQyxLQUFLNEcsTUFBTWpKLEdBQUc0VSxTQUFTLElBQ2pEbk8sRUFBSyxTQUFTekcsRUFBR3lHLEdBQUssT0FBT3VXLEdBQWtCLElBQUpoZCxFQUFTeUcsSUFDcEQ2TixFQUFLMEksR0FDTGxJLEVGVmEsU0FBUzlVLEVBQUd5RyxHQUN6QixJQUFJbEksRUFBSXdkLEdBQWMvYixFQUFHeUcsR0FDekIsSUFBS2xJLEVBQUcsT0FBT3lCLEVBQUksR0FDbkIsSUFBSThiLEVBQWN2ZCxFQUFFLEdBQ2hCcWUsRUFBV3JlLEVBQUUsR0FDYjNMLEVBQUlncUIsR0FBWVgsR0FBdUUsRUFBdEQ1WixLQUFLbUQsS0FBSyxFQUFHbkQsS0FBS0MsSUFBSSxFQUFHRCxLQUFLK0QsTUFBTXdXLEVBQVcsTUFBWSxFQUM1Ri9vQixFQUFJaW9CLEVBQVlub0IsT0FDcEIsT0FBT2YsSUFBTWlCLEVBQUlpb0IsRUFDWGxwQixFQUFJaUIsRUFBSWlvQixFQUFjLElBQUlyakIsTUFBTTdGLEVBQUlpQixFQUFJLEdBQUdkLEtBQUssS0FDaERILEVBQUksRUFBSWtwQixFQUFZM25CLE1BQU0sRUFBR3ZCLEdBQUssSUFBTWtwQixFQUFZM25CLE1BQU12QixHQUMxRCxLQUFPLElBQUk2RixNQUFNLEVBQUk3RixHQUFHRyxLQUFLLEtBQU9ncEIsR0FBYy9iLEVBQUdxQyxLQUFLbUQsSUFBSSxFQUFHaUIsRUFBSTdULEVBQUksSUFBSSxJRUNuRnFxQixFQUFLLFNBQVNqZCxHQUFLLE9BQU9xQyxLQUFLNEcsTUFBTWpKLEdBQUc0VSxTQUFTLElBQUlzSSxlQUNyRGxkLEVBQUssU0FBU0EsR0FBSyxPQUFPcUMsS0FBSzRHLE1BQU1qSixHQUFHNFUsU0FBUyxNQ2hCcEMsWUFBUzVVLEdBQ3RCLE9BQU9BLEVDUVQsSUNQSW1kLEdBQ09yb0IsR0FDQXNvQixHREtQQyxJQUFZLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FFaEUsWUFBU0YsR0FDdEIsSUVac0JHLEVBQVVDLEVGWTVCL2pCLEVBQVEyakIsRUFBT0csVUFBWUgsRUFBT0ksV0VaaEJELEVGWXdDSCxFQUFPRyxTRVpyQ0MsRUZZK0NKLEVBQU9JLFVFWC9FLFNBQVNsZixFQUFPb2UsR0FPckIsSUFOQSxJQUFJN3BCLEVBQUl5TCxFQUFNMUssT0FDVkgsS0FDQVUsRUFBSSxFQUNKcWdCLEVBQUkrSSxFQUFTLEdBQ2IzcEIsRUFBUyxFQUVOZixFQUFJLEdBQUsyaEIsRUFBSSxJQUNkNWdCLEVBQVM0Z0IsRUFBSSxFQUFJa0ksSUFBT2xJLEVBQUlsUyxLQUFLbUQsSUFBSSxFQUFHaVgsRUFBUTlvQixJQUNwREgsRUFBRWMsS0FBSytKLEVBQU1tZixVQUFVNXFCLEdBQUsyaEIsRUFBRzNoQixFQUFJMmhCLE9BQzlCNWdCLEdBQVU0Z0IsRUFBSSxHQUFLa0ksS0FDeEJsSSxFQUFJK0ksRUFBU3BwQixHQUFLQSxFQUFJLEdBQUtvcEIsRUFBUzNwQixRQUd0QyxPQUFPSCxFQUFFOFYsVUFBVXZXLEtBQUt3cUIsS0ZIeUVoRSxHQUMvRmtFLEVBQVdOLEVBQU9NLFNBQ2xCQyxFQUFVUCxFQUFPTyxRQUNqQkMsRUFBV1IsRUFBT1EsU0dmVCxTQUFTQSxHQUN0QixPQUFPLFNBQVN0ZixHQUNkLE9BQU9BLEVBQU1qSyxRQUFRLFNBQVUsU0FBU3hCLEdBQ3RDLE9BQU8rcUIsR0FBVS9xQixNSFlZZ3JCLENBQWVULEVBQU9RLFVBQVlwRSxHQUMvRHNFLEVBQVVWLEVBQU9VLFNBQVcsSUFFaEMsU0FBU0MsRUFBVTFCLEdBR2pCLElBQUlFLEdBRkpGLEVBQVlELEdBQWdCQyxJQUVQRSxLQUNqQmxULEVBQVFnVCxFQUFVaFQsTUFDbEJtVCxFQUFPSCxFQUFVRyxLQUNqQkMsRUFBU0osRUFBVUksT0FDbkI1RCxFQUFPd0QsRUFBVXhELEtBQ2pCNkQsRUFBUUwsRUFBVUssTUFDbEJDLEVBQVFOLEVBQVVNLE1BQ2xCQyxFQUFZUCxFQUFVTyxVQUN0QjVoQixFQUFPcWhCLEVBQVVyaEIsS0FDakJrRCxFQUFPbWUsRUFBVW5lLEtBR1IsTUFBVEEsR0FBY3llLEdBQVEsRUFBTXplLEVBQU8sS0FHN0I4ZixHQUFZOWYsS0FBb0IsTUFBYjBlLElBQXNCQSxFQUFZLElBQUs1aEIsR0FBTyxFQUFNa0QsRUFBTyxNQUdwRjJhLEdBQWtCLE1BQVQwRCxHQUEwQixNQUFWbFQsS0FBZ0J3UCxHQUFPLEVBQU0wRCxFQUFPLElBQUtsVCxFQUFRLEtBSTlFLElBQUkxUyxFQUFvQixNQUFYOGxCLEVBQWlCaUIsRUFBUyxHQUFnQixNQUFYakIsR0FBa0IsU0FBUy9uQixLQUFLd0osR0FBUSxJQUFNQSxFQUFLOFYsY0FBZ0IsR0FDM0dpSyxFQUFvQixNQUFYeEIsRUFBaUJpQixFQUFTLEdBQUssT0FBT2hwQixLQUFLd0osR0FBUTRmLEVBQVUsR0FLdEVJLEVBQWFGLEdBQVk5ZixHQUN6QmlnQixFQUFjLGFBQWF6cEIsS0FBS3dKLEdBVXBDLFNBQVNuSixFQUFPdUosR0FDZCxJQUVJekwsRUFBR2lCLEVBQUdJLEVBRk5rcUIsRUFBY3puQixFQUNkMG5CLEVBQWNKLEVBR2xCLEdBQWEsTUFBVC9mLEVBQ0ZtZ0IsRUFBY0gsRUFBVzVmLEdBQVMrZixFQUNsQy9mLEVBQVEsT0FDSCxDQUlMLElBQUlnZ0IsR0FISmhnQixHQUFTQSxHQUdtQixFQWU1QixHQWRBQSxFQUFRNGYsRUFBVzViLEtBQUsyWixJQUFJM2QsR0FBUXNlLEdBR2hDNWhCLElBQU1zRCxFSTNFSCxTQUFTeVcsR0FDdEJ3SixFQUFLLElBQUssSUFBa0MxYyxFQUE5Qi9OLEVBQUlpaEIsRUFBRW5oQixPQUFRZixFQUFJLEVBQUcrTyxHQUFNLEVBQU8vTyxFQUFJaUIsSUFBS2pCLEVBQ3ZELE9BQVFraUIsRUFBRWxpQixJQUNSLElBQUssSUFBSytPLEVBQUtDLEVBQUtoUCxFQUFHLE1BQ3ZCLElBQUssSUFBZ0IsSUFBUCtPLElBQVVBLEVBQUsvTyxHQUFHZ1AsRUFBS2hQLEVBQUcsTUFDeEMsUUFBUyxHQUFJK08sRUFBSyxFQUFHLENBQUUsS0FBTW1ULEVBQUVsaUIsR0FBSSxNQUFNMHJCLEVBQUszYyxFQUFLLEdBR3ZELE9BQU9BLEVBQUssRUFBSW1ULEVBQUUzZ0IsTUFBTSxFQUFHd04sR0FBTW1ULEVBQUUzZ0IsTUFBTXlOLEVBQUssR0FBS2tULEVKbUUzQnlKLENBQVdsZ0IsSUFHekJnZ0IsR0FBNEIsSUFBVmhnQixJQUFhZ2dCLEdBQWdCLEdBR25ERixHQUFlRSxFQUEwQixNQUFUOUIsRUFBZUEsRUFBTyxJQUFnQixNQUFUQSxHQUF5QixNQUFUQSxFQUFlLEdBQUtBLEdBQVE0QixFQUN6R0MsR0FBd0IsTUFBVG5nQixFQUFlb2YsR0FBUyxFQUFJcEIsR0FBaUIsR0FBSyxJQUFNbUMsR0FBZUMsR0FBMEIsTUFBVDlCLEVBQWUsSUFBTSxJQUl4SDJCLEVBRUYsSUFEQXRyQixHQUFLLEVBQUdpQixFQUFJd0ssRUFBTTFLLFNBQ1RmLEVBQUlpQixHQUNYLEdBQTZCLElBQXpCSSxFQUFJb0ssRUFBTWpMLFdBQVdSLEtBQWNxQixFQUFJLEdBQUksQ0FDN0NtcUIsR0FBcUIsS0FBTm5xQixFQUFXeXBCLEVBQVVyZixFQUFNbEssTUFBTXZCLEVBQUksR0FBS3lMLEVBQU1sSyxNQUFNdkIsSUFBTXdyQixFQUMzRS9mLEVBQVFBLEVBQU1sSyxNQUFNLEVBQUd2QixHQUN2QixPQU9KOHBCLElBQVU5RCxJQUFNdmEsRUFBUTdFLEVBQU02RSxFQUFPbWdCLEVBQUFBLElBR3pDLElBQUk3cUIsRUFBU3dxQixFQUFZeHFCLE9BQVMwSyxFQUFNMUssT0FBU3lxQixFQUFZenFCLE9BQ3pEOFYsRUFBVTlWLEVBQVM4b0IsRUFBUSxJQUFJaGtCLE1BQU1na0IsRUFBUTlvQixFQUFTLEdBQUdaLEtBQUt1cEIsR0FBUSxHQU0xRSxPQUhJSSxHQUFTOUQsSUFBTXZhLEVBQVE3RSxFQUFNaVEsRUFBVXBMLEVBQU9vTCxFQUFROVYsT0FBUzhvQixFQUFRMkIsRUFBWXpxQixPQUFTNnFCLEVBQUFBLEdBQVcvVSxFQUFVLElBRzdHTCxHQUNOLElBQUssSUFBSy9LLEVBQVE4ZixFQUFjOWYsRUFBUStmLEVBQWMzVSxFQUFTLE1BQy9ELElBQUssSUFBS3BMLEVBQVE4ZixFQUFjMVUsRUFBVXBMLEVBQVErZixFQUFhLE1BQy9ELElBQUssSUFBSy9mLEVBQVFvTCxFQUFRdFYsTUFBTSxFQUFHUixFQUFTOFYsRUFBUTlWLFFBQVUsR0FBS3dxQixFQUFjOWYsRUFBUStmLEVBQWMzVSxFQUFRdFYsTUFBTVIsR0FBUyxNQUM5SCxRQUFTMEssRUFBUW9MLEVBQVUwVSxFQUFjOWYsRUFBUStmLEVBR25ELE9BQU9ULEVBQVN0ZixHQU9sQixPQXBFQXNlLEVBQXlCLE1BQWJBLEVBQW9CLEVBQzFCLFNBQVNsb0IsS0FBS3dKLEdBQVFvRSxLQUFLbUQsSUFBSSxFQUFHbkQsS0FBS0MsSUFBSSxHQUFJcWEsSUFDL0N0YSxLQUFLbUQsSUFBSSxFQUFHbkQsS0FBS0MsSUFBSSxHQUFJcWEsSUE4RC9CN25CLEVBQU84ZixTQUFXLFdBQ2hCLE9BQU93SCxFQUFZLElBR2R0bkIsRUFhVCxPQUNFQSxPQUFRZ3BCLEVBQ1JWLGFBWkYsU0FBc0JoQixFQUFXL2QsR0FDL0IsSUFBSTlLLEVBQUl1cUIsSUFBVzFCLEVBQVlELEdBQWdCQyxJQUFzQm5lLEtBQU8sSUFBS21lLElBQzdFdEMsRUFBaUUsRUFBN0R6WCxLQUFLbUQsS0FBSyxFQUFHbkQsS0FBS0MsSUFBSSxFQUFHRCxLQUFLK0QsTUFBTXdXLEdBQVN2ZSxHQUFTLEtBQzFENEosRUFBSTVGLEtBQUttRSxJQUFJLElBQUtzVCxHQUNsQnBqQixFQUFTMm1CLEdBQVMsRUFBSXZELEVBQUksR0FDOUIsT0FBTyxTQUFTemIsR0FDZCxPQUFPOUssRUFBRTBVLEVBQUk1SixHQUFTM0gsS0tsSWIsWUFBU2lTLEVBQVF6QyxFQUFPa1csR0FDckMsSUFHSU8sRUFIQWxYLEVBQVFrRCxFQUFPLEdBQ2ZqRCxFQUFPaUQsRUFBT0EsRUFBT2hWLE9BQVMsR0FDOUJnUyxFNUNvQ0MsU0FBa0JGLEVBQU9DLEVBQU1RLEdBQ3BDLElBQUl1WSxFQUFRcGMsS0FBSzJaLElBQUl0VyxFQUFPRCxHQUFTcEQsS0FBS21ELElBQUksRUFBR1UsR0FDN0N3WSxFQUFRcmMsS0FBS21FLElBQUksR0FBSW5FLEtBQUsrRCxNQUFNL0QsS0FBS2dFLElBQUlvWSxHQUFTcGMsS0FBS2lFLE9BQ3ZEQyxFQUFRa1ksRUFBUUMsRUFJcEIsT0FISW5ZLEdBQVNULEdBQUs0WSxHQUFTLEdBQ2xCblksR0FBU1IsR0FBSTJZLEdBQVMsRUFDdEJuWSxHQUFTUCxLQUFJMFksR0FBUyxHQUN4QmhaLEVBQU9ELEdBQVNpWixFQUFRQSxFNEMzQ3BCQyxDQUFTbFosRUFBT0MsRUFBZSxNQUFUUSxFQUFnQixHQUFLQSxHQUd0RCxRQURBa1csRUFBWUQsR0FBNkIsTUFBYkMsRUFBb0IsS0FBT0EsSUFDckNuZSxNQUNoQixJQUFLLElBQ0gsSUFBSUksRUFBUWdFLEtBQUttRCxJQUFJbkQsS0FBSzJaLElBQUl2VyxHQUFRcEQsS0FBSzJaLElBQUl0VyxJQUUvQyxPQUQyQixNQUF2QjBXLEVBQVVPLFdBQXNCdlgsTUFBTXVYLEVDVmpDLFNBQVNoWCxFQUFNdEgsR0FDNUIsT0FBT2dFLEtBQUttRCxJQUFJLEVBQWdFLEVBQTdEbkQsS0FBS21ELEtBQUssRUFBR25ELEtBQUtDLElBQUksRUFBR0QsS0FBSytELE1BQU13VyxHQUFTdmUsR0FBUyxLQUFXdWUsR0FBU3ZhLEtBQUsyWixJQUFJclcsS0RTNUNpWixDQUFnQmpaLEVBQU10SCxNQUFTK2QsRUFBVU8sVUFBWUEsR0FDcEdTLEdBQWFoQixFQUFXL2QsR0FFakMsSUFBSyxHQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDd0IsTUFBdkIrZCxFQUFVTyxXQUFzQnZYLE1BQU11WCxFRWxCakMsU0FBU2hYLEVBQU1ILEdBRTVCLE9BREFHLEVBQU90RCxLQUFLMlosSUFBSXJXLEdBQU9ILEVBQU1uRCxLQUFLMlosSUFBSXhXLEdBQU9HLEVBQ3RDdEQsS0FBS21ELElBQUksRUFBR29YLEdBQVNwWCxHQUFPb1gsR0FBU2pYLElBQVMsRUZnQktrWixDQUFlbFosRUFBTXRELEtBQUttRCxJQUFJbkQsS0FBSzJaLElBQUl2VyxHQUFRcEQsS0FBSzJaLElBQUl0VyxRQUFVMFcsRUFBVU8sVUFBWUEsR0FBZ0MsTUFBbkJQLEVBQVVuZSxPQUNySyxNQUVGLElBQUssSUFDTCxJQUFLLElBQ3dCLE1BQXZCbWUsRUFBVU8sV0FBc0J2WCxNQUFNdVgsRUd2QmpDLFNBQVNoWCxHQUN0QixPQUFPdEQsS0FBS21ELElBQUksR0FBSW9YLEdBQVN2YSxLQUFLMlosSUFBSXJXLEtIc0JvQm1aLENBQWVuWixNQUFReVcsRUFBVU8sVUFBWUEsRUFBdUMsR0FBUCxNQUFuQlAsRUFBVW5lLE9BSTlILE9BQU9uSixHQUFPc25CLEdJeEJULFNBQVMyQyxHQUFVdFcsR0FDeEIsSUFBSUUsRUFBU0YsRUFBTUUsT0FtRG5CLE9BakRBRixFQUFNdVcsTUFBUSxTQUFTOVksR0FDckIsSUFBSTNILEVBQUlvSyxJQUNSLE9oRE5XLFNBQVNsRCxFQUFPQyxFQUFNUSxHQUNuQyxJQUFJb0QsRUFFQXpWLEVBQ0FtckIsRUFDQXJaLEVBSEEvUyxHQUFLLEVBTVQsR0FEOEJzVCxHQUFTQSxHQUF6QlQsR0FBU0EsS0FBdkJDLEdBQVFBLElBQ2NRLEVBQVEsRUFBRyxPQUFRVCxHQUV6QyxJQURJNkQsRUFBVTVELEVBQU9ELEtBQU81UixFQUFJNFIsRUFBT0EsRUFBUUMsRUFBTUEsRUFBTzdSLEdBQ1QsS0FBOUM4UixFQUFPTSxHQUFjUixFQUFPQyxFQUFNUSxNQUFrQitZLFNBQVN0WixHQUFPLFNBRXpFLEdBQUlBLEVBQU8sRUFJVCxJQUhBRixFQUFRcEQsS0FBS3VELEtBQUtILEVBQVFFLEdBQzFCRCxFQUFPckQsS0FBSytELE1BQU1WLEVBQU9DLEdBQ3pCcVosRUFBUSxJQUFJdm1CLE1BQU01RSxFQUFJd08sS0FBS3VELEtBQUtGLEVBQU9ELEVBQVEsTUFDdEM3UyxFQUFJaUIsR0FBR21yQixFQUFNcHNCLElBQU02UyxFQUFRN1MsR0FBSytTLE9BS3pDLElBSEFGLEVBQVFwRCxLQUFLK0QsTUFBTVgsRUFBUUUsR0FDM0JELEVBQU9yRCxLQUFLdUQsS0FBS0YsRUFBT0MsR0FDeEJxWixFQUFRLElBQUl2bUIsTUFBTTVFLEVBQUl3TyxLQUFLdUQsS0FBS0gsRUFBUUMsRUFBTyxNQUN0QzlTLEVBQUlpQixHQUFHbXJCLEVBQU1wc0IsSUFBTTZTLEVBQVE3UyxHQUFLK1MsRUFLM0MsT0FGSTJELEdBQVMwVixFQUFNMVYsVUFFWjBWLEVnRHBCRUEsQ0FBTXpnQixFQUFFLEdBQUlBLEVBQUVBLEVBQUU1SyxPQUFTLEdBQWEsTUFBVHVTLEVBQWdCLEdBQUtBLElBRzNEdUMsRUFBTXlXLFdBQWEsU0FBU2haLEVBQU9rVyxHQUNqQyxPQUFPOEMsR0FBV3ZXLElBQVV6QyxFQUFPa1csSUFHckMzVCxFQUFNMFcsS0FBTyxTQUFTalosR0FDUCxNQUFUQSxJQUFlQSxFQUFRLElBRTNCLElBS0lQLEVBTEFwSCxFQUFJb0ssSUFDSmhILEVBQUssRUFDTEMsRUFBS3JELEVBQUU1SyxPQUFTLEVBQ2hCOFIsRUFBUWxILEVBQUVvRCxHQUNWK0QsRUFBT25ILEVBQUVxRCxHQThCYixPQTNCSThELEVBQU9ELElBQ1RFLEVBQU9GLEVBQU9BLEVBQVFDLEVBQU1BLEVBQU9DLEVBQ25DQSxFQUFPaEUsRUFBSUEsRUFBS0MsRUFBSUEsRUFBSytELElBRzNCQSxFQUFPTSxHQUFjUixFQUFPQyxFQUFNUSxJQUV2QixFQUdUUCxFQUFPTSxHQUZQUixFQUFRcEQsS0FBSytELE1BQU1YLEVBQVFFLEdBQVFBLEVBQ25DRCxFQUFPckQsS0FBS3VELEtBQUtGLEVBQU9DLEdBQVFBLEVBQ0VPLEdBQ3pCUCxFQUFPLElBR2hCQSxFQUFPTSxHQUZQUixFQUFRcEQsS0FBS3VELEtBQUtILEVBQVFFLEdBQVFBLEVBQ2xDRCxFQUFPckQsS0FBSytELE1BQU1WLEVBQU9DLEdBQVFBLEVBQ0NPLElBR2hDUCxFQUFPLEdBQ1RwSCxFQUFFb0QsR0FBTVUsS0FBSytELE1BQU1YLEVBQVFFLEdBQVFBLEVBQ25DcEgsRUFBRXFELEdBQU1TLEtBQUt1RCxLQUFLRixFQUFPQyxHQUFRQSxFQUNqQ2dELEVBQU9wSyxJQUNFb0gsRUFBTyxJQUNoQnBILEVBQUVvRCxHQUFNVSxLQUFLdUQsS0FBS0gsRUFBUUUsR0FBUUEsRUFDbENwSCxFQUFFcUQsR0FBTVMsS0FBSytELE1BQU1WLEVBQU9DLEdBQVFBLEVBQ2xDZ0QsRUFBT3BLLElBR0ZrSyxHQUdGQSxFQUdNLFNBQVNrUCxLQUN0QixJQUFJbFAsRWxCT1MsU0FBb0I0UyxFQUFlQyxHQUNoRCxJQUlJOEQsRUFDQUMsRUFDQXBwQixFQU5BMFMsRUFBU3VTLEdBQ1RyVixFQUFRcVYsR0FDUm9FLEVBQWNDLEdBQ2RDLEdBQVEsRUFLWixTQUFTblcsSUFHUCxPQUZBK1YsRUFBWS9jLEtBQUtDLElBQUlxRyxFQUFPaFYsT0FBUWtTLEVBQU1sUyxRQUFVLEVBQUlnb0IsR0FBVVAsR0FDbEVpRSxFQUFTcHBCLEVBQVEsS0FDVndTLEVBR1QsU0FBU0EsRUFBTXpJLEdBQ2IsT0FBUXFmLElBQVdBLEVBQVNELEVBQVV6VyxFQUFROUMsRUFBTzJaLEVBdEV6RCxTQUE0Qm5FLEdBQzFCLE9BQU8sU0FBU2hoQixFQUFHQyxHQUNqQixJQUFJaUUsRUFBSThjLEVBQWNoaEIsR0FBS0EsRUFBR0MsR0FBS0EsR0FDbkMsT0FBTyxTQUFTMEYsR0FBSyxPQUFPQSxHQUFLM0YsRUFBSSxFQUFJMkYsR0FBSzFGLEVBQUksRUFBSWlFLEVBQUV5QixLQW1FS3lmLENBQW1CcEUsR0FBaUJBLEVBQWVpRSxNQUFnQnRmLEdBMkJsSSxPQXhCQXlJLEVBQU1pWCxPQUFTLFNBQVN4ZixHQUN0QixPQUFRakssSUFBVUEsRUFBUW1wQixFQUFVdlosRUFBTzhDLEVBQVF3UyxHQUFxQnFFLEVBbkU1RSxTQUE0QmxFLEdBQzFCLE9BQU8sU0FBU2poQixFQUFHQyxHQUNqQixJQUFJZ2EsRUFBSWdILEVBQWNqaEIsR0FBS0EsRUFBR0MsR0FBS0EsR0FDbkMsT0FBTyxTQUFTOUcsR0FBSyxPQUFPQSxHQUFLLEVBQUk2RyxFQUFJN0csR0FBSyxFQUFJOEcsRUFBSWdhLEVBQUU5Z0IsS0FnRXdCbXNCLENBQW1CckUsR0FBaUJBLE1BQWtCcGIsSUFHeEl1SSxFQUFNRSxPQUFTLFNBQVNFLEdBQ3RCLE9BQU81RixVQUFVdFAsUUFBVWdWLEVBQVNqVyxHQUFJNkYsS0FBS3NRLEVBQUd4RCxJQUFTZ0UsS0FBYVYsRUFBT3hVLFNBRy9Fc1UsRUFBTTVDLE1BQVEsU0FBU2dELEdBQ3JCLE9BQU81RixVQUFVdFAsUUFBVWtTLEVBQVExUixHQUFNb0UsS0FBS3NRLEdBQUlRLEtBQWF4RCxFQUFNMVIsU0FHdkVzVSxFQUFNZSxXQUFhLFNBQVNYLEdBQzFCLE9BQU9oRCxFQUFRMVIsR0FBTW9FLEtBQUtzUSxHQUFJeVcsRUFBY00sR0FBa0J2VyxLQUdoRVosRUFBTStXLE1BQVEsU0FBUzNXLEdBQ3JCLE9BQU81RixVQUFVdFAsUUFBVTZyQixJQUFVM1csRUFBR1EsS0FBYW1XLEdBR3ZEL1csRUFBTTZXLFlBQWMsU0FBU3pXLEdBQzNCLE9BQU81RixVQUFVdFAsUUFBVTJyQixFQUFjelcsRUFBR1EsS0FBYWlXLEdBR3BEalcsSWtCbERLd1csQ0FBV3hFLEdBQWVDLElBTXRDLE9BSkE3UyxFQUFNSyxLQUFPLFdBQ1gsT2xCTmlCckosRWtCTUxnSixFQUFPa1AsS2xCSmhCaFAsT0FBT2xKLEVBQU9rSixVQUNkOUMsTUFBTXBHLEVBQU9vRyxTQUNieVosWUFBWTdmLEVBQU82ZixlQUNuQkUsTUFBTS9mLEVBQU8rZixTQUxiLElBQWMvZixHa0JTWnNmLEdBQVV0VyxHUnJEakIwVSxHQUFTMkMsSUFQVHBDLFFBQVMsSUFDVEgsVUFBVyxJQUNYRCxVQUFXLEdBQ1hHLFVBQVcsSUFBSyxNQUtoQjNvQixHQUFTcW9CLEdBQU9yb0IsT0FDaEJzb0IsR0FBZUQsR0FBT0MsYVNoQnhCLElBQUl0SCxHQUFLLElBQUkrQyxLQUNUOUMsR0FBSyxJQUFJOEMsS0FFRSxTQUFTa0gsR0FBWUMsRUFBUUMsRUFBUy9aLEVBQU9nYSxHQUUxRCxTQUFTQyxFQUFTQyxHQUNoQixPQUFPSixFQUFPSSxFQUFPLElBQUl2SCxNQUFNdUgsSUFBUUEsRUE0RHpDLE9BekRBRCxFQUFTL1osTUFBUStaLEVBRWpCQSxFQUFTdmEsS0FBTyxTQUFTd2EsR0FDdkIsT0FBT0osRUFBT0ksRUFBTyxJQUFJdkgsS0FBS3VILEVBQU8sSUFBS0gsRUFBUUcsRUFBTSxHQUFJSixFQUFPSSxHQUFPQSxHQUc1RUQsRUFBU2xYLE1BQVEsU0FBU21YLEdBQ3hCLElBQUk3RSxFQUFLNEUsRUFBU0MsR0FDZDVFLEVBQUsyRSxFQUFTdmEsS0FBS3dhLEdBQ3ZCLE9BQU9BLEVBQU83RSxFQUFLQyxFQUFLNEUsRUFBTzdFLEVBQUtDLEdBR3RDMkUsRUFBU0UsT0FBUyxTQUFTRCxFQUFNemEsR0FDL0IsT0FBT3NhLEVBQVFHLEVBQU8sSUFBSXZILE1BQU11SCxHQUFlLE1BQVJ6YSxFQUFlLEVBQUl0RCxLQUFLK0QsTUFBTVQsSUFBUXlhLEdBRy9FRCxFQUFTdGEsTUFBUSxTQUFTSixFQUFPQyxFQUFNQyxHQUNyQyxJQUFnQmpFLEVBQVptRSxLQUdKLEdBRkFKLEVBQVEwYSxFQUFTdmEsS0FBS0gsR0FDdEJFLEVBQWUsTUFBUkEsRUFBZSxFQUFJdEQsS0FBSytELE1BQU1ULEtBQy9CRixFQUFRQyxHQUFXQyxFQUFPLEdBQUksT0FBT0UsRUFDM0MsR0FBR0EsRUFBTXZSLEtBQUtvTixFQUFXLElBQUltWCxNQUFNcFQsSUFBU3dhLEVBQVF4YSxFQUFPRSxHQUFPcWEsRUFBT3ZhLFNBQ2xFL0QsRUFBVytELEdBQVNBLEVBQVFDLEdBQ25DLE9BQU9HLEdBR1RzYSxFQUFTaGYsT0FBUyxTQUFTMU0sR0FDekIsT0FBT3NyQixHQUFZLFNBQVNLLEdBQzFCLEdBQUlBLEdBQVFBLEVBQU0sS0FBT0osRUFBT0ksSUFBUTNyQixFQUFLMnJCLElBQU9BLEVBQUt0SCxRQUFRc0gsRUFBTyxJQUN2RSxTQUFTQSxFQUFNemEsR0FDaEIsR0FBSXlhLEdBQVFBLEVBQ1YsR0FBSXphLEVBQU8sRUFBRyxPQUFTQSxHQUFRLEdBQzdCLEtBQU9zYSxFQUFRRyxHQUFPLElBQUszckIsRUFBSzJyQixVQUMzQixPQUFTemEsR0FBUSxHQUN0QixLQUFPc2EsRUFBUUcsRUFBTSxJQUFNM3JCLEVBQUsyckIsU0FNcENsYSxJQUNGaWEsRUFBU2phLE1BQVEsU0FBU1QsRUFBT3dTLEdBRy9CLE9BRkFuQyxHQUFHZ0QsU0FBU3JULEdBQVFzUSxHQUFHK0MsU0FBU2IsR0FDaEMrSCxFQUFPbEssSUFBS2tLLEVBQU9qSyxJQUNaMVQsS0FBSytELE1BQU1GLEVBQU00UCxHQUFJQyxNQUc5Qm9LLEVBQVNHLE1BQVEsU0FBUzNhLEdBRXhCLE9BREFBLEVBQU90RCxLQUFLK0QsTUFBTVQsR0FDVnNaLFNBQVN0WixJQUFXQSxFQUFPLEVBQzNCQSxFQUFPLEVBQ1R3YSxFQUFTaGYsT0FBTytlLEVBQ1osU0FBUzNoQixHQUFLLE9BQU8yaEIsRUFBTTNoQixHQUFLb0gsR0FBUyxHQUN6QyxTQUFTcEgsR0FBSyxPQUFPNGhCLEVBQVNqYSxNQUFNLEVBQUczSCxHQUFLb0gsR0FBUyxJQUgzQ3dhLEVBRG9CLE9BUXJDQSxFQ2hFVCxJQUFJSSxHQUFjSixHQUFTLGFBRXhCLFNBQVNDLEVBQU16YSxHQUNoQnlhLEVBQUt0SCxTQUFTc0gsRUFBT3phLElBQ3BCLFNBQVNGLEVBQU93UyxHQUNqQixPQUFPQSxFQUFNeFMsSUFJZjhhLEdBQVlELE1BQVEsU0FBU3JZLEdBRTNCLE9BREFBLEVBQUk1RixLQUFLK0QsTUFBTTZCLEdBQ1ZnWCxTQUFTaFgsSUFBUUEsRUFBSSxFQUNwQkEsRUFBSSxFQUNIa1ksR0FBUyxTQUFTQyxHQUN2QkEsRUFBS3RILFFBQVF6VyxLQUFLK0QsTUFBTWdhLEVBQU9uWSxHQUFLQSxJQUNuQyxTQUFTbVksRUFBTXphLEdBQ2hCeWEsRUFBS3RILFNBQVNzSCxFQUFPemEsRUFBT3NDLElBQzNCLFNBQVN4QyxFQUFPd1MsR0FDakIsT0FBUUEsRUFBTXhTLEdBQVN3QyxJQU5Kc1ksR0FEZ0IsTUFZYkEsR0FBWTFhLE1BQS9CLElDeEJJMmEsR0FBaUIsSUFHakJDLEdBQWUsT0NEdEJDLElDQVNQLEdBQVMsU0FBU0MsR0FDN0JBLEVBQUt0SCxRRkpxQixJRUlielcsS0FBSytELE1BQU1nYSxFRkpFLE9FS3pCLFNBQVNBLEVBQU16YSxHQUNoQnlhLEVBQUt0SCxTQUFTc0gsRUZOWSxJRU1MemEsSUFDcEIsU0FBU0YsRUFBT3dTLEdBQ2pCLE9BQVFBLEVBQU14UyxHRlJZLEtFU3pCLFNBQVMyYSxHQUNWLE9BQU9BLEVBQUtPLGtCQUljOWEsTUNYZnNhLEdBQVMsU0FBU0MsR0FDN0JBLEVBQUt0SCxRQUFRelcsS0FBSytELE1BQU1nYSxFQUFPSSxJQUFrQkEsS0FDaEQsU0FBU0osRUFBTXphLEdBQ2hCeWEsRUFBS3RILFNBQVNzSCxFQUFPemEsRUFBTzZhLEtBQzNCLFNBQVMvYSxFQUFPd1MsR0FDakIsT0FBUUEsRUFBTXhTLEdBQVMrYSxJQUN0QixTQUFTSixHQUNWLE9BQU9BLEVBQUtRLGVBSWMvYSxNQ1hqQnNhLEdBQVMsU0FBU0MsR0FDM0IsSUFBSUMsRUFBU0QsRUFBS1Msb0JBQXNCTCxHSkZoQixLSUdwQkgsRUFBUyxJQUFHQSxHSkhRLE1JSXhCRCxFQUFLdEgsUUpKbUIsS0lJWHpXLEtBQUsrRCxRQUFRZ2EsRUFBT0MsR0pKVCxNSUlrREEsSUFDekUsU0FBU0QsRUFBTXphLEdBQ2hCeWEsRUFBS3RILFNBQVNzSCxFSk5VLEtJTUh6YSxJQUNwQixTQUFTRixFQUFPd1MsR0FDakIsT0FBUUEsRUFBTXhTLEdKUlUsTUlTdkIsU0FBUzJhLEdBQ1YsT0FBT0EsRUFBS1UsYUFJVWpiLE1IYmRzYSxHQUFTLFNBQVNDLEdBQzFCQSxFQUFLVyxTQUFTLEVBQUcsRUFBRyxFQUFHLElBQ3RCLFNBQVNYLEVBQU16YSxHQUNoQnlhLEVBQUtZLFFBQVFaLEVBQUthLFVBQVl0YixJQUM3QixTQUFTRixFQUFPd1MsR0FDakIsT0FBUUEsRUFBTXhTLEdBQVN3UyxFQUFJNEksb0JBQXNCcGIsRUFBTW9iLHFCQUF1QkwsSURMdkQsT0NNdEIsU0FBU0osR0FDVixPQUFPQSxFQUFLYSxVQUFZLEtBSVJQLEdBQUk3YSxNSVh0QixTQUFTcWIsR0FBUXR1QixHQUNmLE9BQU91dEIsR0FBUyxTQUFTQyxHQUN2QkEsRUFBS1ksUUFBUVosRUFBS2EsV0FBYWIsRUFBS2UsU0FBVyxFQUFJdnVCLEdBQUssR0FDeER3dEIsRUFBS1csU0FBUyxFQUFHLEVBQUcsRUFBRyxJQUN0QixTQUFTWCxFQUFNemEsR0FDaEJ5YSxFQUFLWSxRQUFRWixFQUFLYSxVQUFtQixFQUFQdGIsSUFDN0IsU0FBU0YsRUFBT3dTLEdBQ2pCLE9BQVFBLEVBQU14UyxHQUFTd1MsRUFBSTRJLG9CQUFzQnBiLEVBQU1vYixxQkFBdUJMLElBQWtCQyxLQUk3RixJQUFJVyxHQUFTRixHQUFRLEdBQ2pCRyxHQUFTSCxHQUFRLEdBR2pCSSxJQUZVSixHQUFRLEdBQ05BLEdBQVEsR0FDVEEsR0FBUSxJQ2hCMUJLLElEaUJnQkwsR0FBUSxHQUNOQSxHQUFRLEdBRVRFLEdBQU92YixNRXBCaEJzYSxHQUFTLFNBQVNDLEdBQzVCQSxFQUFLWSxRQUFRLEdBQ2JaLEVBQUtXLFNBQVMsRUFBRyxFQUFHLEVBQUcsSUFDdEIsU0FBU1gsRUFBTXphLEdBQ2hCeWEsRUFBS29CLFNBQVNwQixFQUFLcUIsV0FBYTliLElBQy9CLFNBQVNGLEVBQU93UyxHQUNqQixPQUFPQSxFQUFJd0osV0FBYWhjLEVBQU1nYyxXQUF5RCxJQUEzQ3hKLEVBQUl5SixjQUFnQmpjLEVBQU1pYyxnQkFDckUsU0FBU3RCLEdBQ1YsT0FBT0EsRUFBS3FCLGFBSVk1YixNRFpmc2EsR0FBUyxTQUFTQyxHQUMzQkEsRUFBS29CLFNBQVMsRUFBRyxHQUNqQnBCLEVBQUtXLFNBQVMsRUFBRyxFQUFHLEVBQUcsSUFDdEIsU0FBU1gsRUFBTXphLEdBQ2hCeWEsRUFBS3VCLFlBQVl2QixFQUFLc0IsY0FBZ0IvYixJQUNyQyxTQUFTRixFQUFPd1MsR0FDakIsT0FBT0EsRUFBSXlKLGNBQWdCamMsRUFBTWljLGVBQ2hDLFNBQVN0QixHQUNWLE9BQU9BLEVBQUtzQixpQkFJZEgsR0FBS2pCLE1BQVEsU0FBU3JZLEdBQ3BCLE9BQVFnWCxTQUFTaFgsRUFBSTVGLEtBQUsrRCxNQUFNNkIsS0FBU0EsRUFBSSxFQUFZa1ksR0FBUyxTQUFTQyxHQUN6RUEsRUFBS3VCLFlBQVl0ZixLQUFLK0QsTUFBTWdhLEVBQUtzQixjQUFnQnpaLEdBQUtBLEdBQ3REbVksRUFBS29CLFNBQVMsRUFBRyxHQUNqQnBCLEVBQUtXLFNBQVMsRUFBRyxFQUFHLEVBQUcsSUFDdEIsU0FBU1gsRUFBTXphLEdBQ2hCeWEsRUFBS3VCLFlBQVl2QixFQUFLc0IsY0FBZ0IvYixFQUFPc0MsS0FMRyxNQVVqQ3NaLEdBQUsxYixNRXRCUnNhLEdBQVMsU0FBU0MsR0FDaENBLEVBQUt3QixjQUFjLEVBQUcsSUFDckIsU0FBU3hCLEVBQU16YSxHQUNoQnlhLEVBQUt0SCxTQUFTc0gsRUFBT3phLEVBQU82YSxLQUMzQixTQUFTL2EsRUFBT3dTLEdBQ2pCLE9BQVFBLEVBQU14UyxHQUFTK2EsSUFDdEIsU0FBU0osR0FDVixPQUFPQSxFQUFLeUIsa0JBSW9CaGMsTUNYcEJzYSxHQUFTLFNBQVNDLEdBQzlCQSxFQUFLMEIsY0FBYyxFQUFHLEVBQUcsSUFDeEIsU0FBUzFCLEVBQU16YSxHQUNoQnlhLEVBQUt0SCxTQUFTc0gsRVRKVSxLU0lIemEsSUFDcEIsU0FBU0YsRUFBT3dTLEdBQ2pCLE9BQVFBLEVBQU14UyxHVE5VLE1TT3ZCLFNBQVMyYSxHQUNWLE9BQU9BLEVBQUsyQixnQkFJZ0JsYyxNSFd2QixJSXRCSG1jLEdBQVM3QixHQUFTLFNBQVNDLEdBQzdCQSxFQUFLNkIsWUFBWSxFQUFHLEVBQUcsRUFBRyxJQUN6QixTQUFTN0IsRUFBTXphLEdBQ2hCeWEsRUFBSzhCLFdBQVc5QixFQUFLK0IsYUFBZXhjLElBQ25DLFNBQVNGLEVBQU93UyxHQUNqQixPQUFRQSxFQUFNeFMsR1ZMUyxPVU10QixTQUFTMmEsR0FDVixPQUFPQSxFQUFLK0IsYUFBZSxJQUlSSCxHQUFPbmMsTUNYNUIsU0FBU3VjLEdBQVd4dkIsR0FDbEIsT0FBT3V0QixHQUFTLFNBQVNDLEdBQ3ZCQSxFQUFLOEIsV0FBVzlCLEVBQUsrQixjQUFnQi9CLEVBQUtpQyxZQUFjLEVBQUl6dkIsR0FBSyxHQUNqRXd0QixFQUFLNkIsWUFBWSxFQUFHLEVBQUcsRUFBRyxJQUN6QixTQUFTN0IsRUFBTXphLEdBQ2hCeWEsRUFBSzhCLFdBQVc5QixFQUFLK0IsYUFBc0IsRUFBUHhjLElBQ25DLFNBQVNGLEVBQU93UyxHQUNqQixPQUFRQSxFQUFNeFMsR0FBU2diLEtBSXBCLElBQUk2QixHQUFZRixHQUFXLEdBQ3ZCRyxHQUFZSCxHQUFXLEdBR3ZCSSxJQUZhSixHQUFXLEdBQ1RBLEdBQVcsR0FDWkEsR0FBVyxJQ2hCaENLLElEaUJtQkwsR0FBVyxHQUNUQSxHQUFXLEdBRVpFLEdBQVV6YyxNRXBCbkJzYSxHQUFTLFNBQVNDLEdBQy9CQSxFQUFLOEIsV0FBVyxHQUNoQjlCLEVBQUs2QixZQUFZLEVBQUcsRUFBRyxFQUFHLElBQ3pCLFNBQVM3QixFQUFNemEsR0FDaEJ5YSxFQUFLc0MsWUFBWXRDLEVBQUt1QyxjQUFnQmhkLElBQ3JDLFNBQVNGLEVBQU93UyxHQUNqQixPQUFPQSxFQUFJMEssY0FBZ0JsZCxFQUFNa2QsY0FBa0UsSUFBakQxSyxFQUFJMkssaUJBQW1CbmQsRUFBTW1kLG1CQUM5RSxTQUFTeEMsR0FDVixPQUFPQSxFQUFLdUMsZ0JBSWtCOWMsTURabEJzYSxHQUFTLFNBQVNDLEdBQzlCQSxFQUFLc0MsWUFBWSxFQUFHLEdBQ3BCdEMsRUFBSzZCLFlBQVksRUFBRyxFQUFHLEVBQUcsSUFDekIsU0FBUzdCLEVBQU16YSxHQUNoQnlhLEVBQUt5QyxlQUFlekMsRUFBS3dDLGlCQUFtQmpkLElBQzNDLFNBQVNGLEVBQU93UyxHQUNqQixPQUFPQSxFQUFJMkssaUJBQW1CbmQsRUFBTW1kLGtCQUNuQyxTQUFTeEMsR0FDVixPQUFPQSxFQUFLd0Msb0JBSWRILEdBQVFuQyxNQUFRLFNBQVNyWSxHQUN2QixPQUFRZ1gsU0FBU2hYLEVBQUk1RixLQUFLK0QsTUFBTTZCLEtBQVNBLEVBQUksRUFBWWtZLEdBQVMsU0FBU0MsR0FDekVBLEVBQUt5QyxlQUFleGdCLEtBQUsrRCxNQUFNZ2EsRUFBS3dDLGlCQUFtQjNhLEdBQUtBLEdBQzVEbVksRUFBS3NDLFlBQVksRUFBRyxHQUNwQnRDLEVBQUs2QixZQUFZLEVBQUcsRUFBRyxFQUFHLElBQ3pCLFNBQVM3QixFQUFNemEsR0FDaEJ5YSxFQUFLeUMsZUFBZXpDLEVBQUt3QyxpQkFBbUJqZCxFQUFPc0MsS0FMSCxNQVU5QndhLEdBQVE1YyxNRVo5QixTQUFTaWQsR0FBVXZrQixHQUNqQixHQUFJLEdBQUtBLEVBQUUyQixHQUFLM0IsRUFBRTJCLEVBQUksSUFBSyxDQUN6QixJQUFJa2dCLEVBQU8sSUFBSXZILE1BQU0sRUFBR3RhLEVBQUVQLEVBQUdPLEVBQUVBLEVBQUdBLEVBQUV3a0IsRUFBR3hrQixFQUFFeWtCLEVBQUd6a0IsRUFBRTBrQixFQUFHMWtCLEVBQUUya0IsR0FFbkQsT0FEQTlDLEVBQUt1QixZQUFZcGpCLEVBQUUyQixHQUNaa2dCLEVBRVQsT0FBTyxJQUFJdkgsS0FBS3RhLEVBQUUyQixFQUFHM0IsRUFBRVAsRUFBR08sRUFBRUEsRUFBR0EsRUFBRXdrQixFQUFHeGtCLEVBQUV5a0IsRUFBR3prQixFQUFFMGtCLEVBQUcxa0IsRUFBRTJrQixHQUdsRCxTQUFTQyxHQUFRNWtCLEdBQ2YsR0FBSSxHQUFLQSxFQUFFMkIsR0FBSzNCLEVBQUUyQixFQUFJLElBQUssQ0FDekIsSUFBSWtnQixFQUFPLElBQUl2SCxLQUFLQSxLQUFLdUssS0FBSyxFQUFHN2tCLEVBQUVQLEVBQUdPLEVBQUVBLEVBQUdBLEVBQUV3a0IsRUFBR3hrQixFQUFFeWtCLEVBQUd6a0IsRUFBRTBrQixFQUFHMWtCLEVBQUUya0IsSUFFNUQsT0FEQTlDLEVBQUt5QyxlQUFldGtCLEVBQUUyQixHQUNma2dCLEVBRVQsT0FBTyxJQUFJdkgsS0FBS0EsS0FBS3VLLElBQUk3a0IsRUFBRTJCLEVBQUczQixFQUFFUCxFQUFHTyxFQUFFQSxFQUFHQSxFQUFFd2tCLEVBQUd4a0IsRUFBRXlrQixFQUFHemtCLEVBQUUwa0IsRUFBRzFrQixFQUFFMmtCLElBRzNELFNBQVNHLEdBQVFuakIsR0FDZixPQUFRQSxFQUFHQSxFQUFHbEMsRUFBRyxFQUFHTyxFQUFHLEVBQUd3a0IsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsRUFBR0MsRUFBRyxHQTJVakQsSUN6V0kvRixHQUdPbUcsR0FDQUMsR0RxV1BDLElBQVFDLElBQUssR0FBSTVhLEVBQUssSUFBSzZhLEVBQUssS0FDaENDLEdBQVcsVUFDWEMsR0FBWSxLQUNaQyxHQUFZLHNCQUVoQixTQUFTQyxHQUFJemxCLEVBQU9pZSxFQUFNRyxHQUN4QixJQUFJRixFQUFPbGUsRUFBUSxFQUFJLElBQU0sR0FDekJ2RCxHQUFVeWhCLEdBQVFsZSxFQUFRQSxHQUFTLEdBQ25DMUssRUFBU21ILEVBQU9uSCxPQUNwQixPQUFPNG9CLEdBQVE1b0IsRUFBUzhvQixFQUFRLElBQUloa0IsTUFBTWdrQixFQUFROW9CLEVBQVMsR0FBR1osS0FBS3VwQixHQUFReGhCLEVBQVNBLEdBR3RGLFNBQVNpcEIsR0FBUWpQLEdBQ2YsT0FBT0EsRUFBRTFnQixRQUFReXZCLEdBQVcsUUFHOUIsU0FBU0csR0FBU3pvQixHQUNoQixPQUFPLElBQUlySSxPQUFPLE9BQVNxSSxFQUFNN0ksSUFBSXF4QixJQUFTaHhCLEtBQUssS0FBTyxJQUFLLEtBR2pFLFNBQVNreEIsR0FBYTFvQixHQUVwQixJQURBLElBQUk3SSxLQUFVRSxHQUFLLEVBQUdpQixFQUFJMEgsRUFBTTVILFNBQ3ZCZixFQUFJaUIsR0FBR25CLEVBQUk2SSxFQUFNM0ksR0FBR21oQixlQUFpQm5oQixFQUM5QyxPQUFPRixFQUdULFNBQVN3eEIsR0FBeUIzbEIsRUFBR3pELEVBQVFsSSxHQUMzQyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUU0bEIsR0FBS3R3QixFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVN5d0IsR0FBeUI3bEIsRUFBR3pELEVBQVFsSSxHQUMzQyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUU4bEIsR0FBS3h3QixFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVMyd0IsR0FBc0IvbEIsRUFBR3pELEVBQVFsSSxHQUN4QyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUVnbUIsR0FBSzF3QixFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVM2d0IsR0FBbUJqbUIsRUFBR3pELEVBQVFsSSxHQUNyQyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUVrbUIsR0FBSzV3QixFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVMrd0IsR0FBc0JubUIsRUFBR3pELEVBQVFsSSxHQUN4QyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUVvbUIsR0FBSzl3QixFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVNpeEIsR0FBY3JtQixFQUFHekQsRUFBUWxJLEdBQ2hDLElBQUlpQixFQUFJOHZCLEdBQVMzUCxLQUFLbFosRUFBTzNHLE1BQU12QixFQUFHQSxFQUFJLElBQzFDLE9BQU9pQixHQUFLMEssRUFBRTJCLEdBQUtyTSxFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVNreEIsR0FBVXRtQixFQUFHekQsRUFBUWxJLEdBQzVCLElBQUlpQixFQUFJOHZCLEdBQVMzUCxLQUFLbFosRUFBTzNHLE1BQU12QixFQUFHQSxFQUFJLElBQzFDLE9BQU9pQixHQUFLMEssRUFBRTJCLEdBQUtyTSxFQUFFLEtBQU9BLEVBQUUsR0FBSyxHQUFLLEtBQU8sS0FBT2pCLEVBQUlpQixFQUFFLEdBQUdGLFNBQVcsRUFHNUUsU0FBU214QixHQUFVdm1CLEVBQUd6RCxFQUFRbEksR0FDNUIsSUFBSWlCLEVBQUksK0JBQStCbWdCLEtBQUtsWixFQUFPM0csTUFBTXZCLEVBQUdBLEVBQUksSUFDaEUsT0FBT2lCLEdBQUswSyxFQUFFd21CLEVBQUlseEIsRUFBRSxHQUFLLElBQU1BLEVBQUUsSUFBTUEsRUFBRSxJQUFNLE9BQVFqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRzdFLFNBQVNxeEIsR0FBaUJ6bUIsRUFBR3pELEVBQVFsSSxHQUNuQyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUVQLEVBQUluSyxFQUFFLEdBQUssRUFBR2pCLEVBQUlpQixFQUFFLEdBQUdGLFNBQVcsRUFHbEQsU0FBU3N4QixHQUFnQjFtQixFQUFHekQsRUFBUWxJLEdBQ2xDLElBQUlpQixFQUFJOHZCLEdBQVMzUCxLQUFLbFosRUFBTzNHLE1BQU12QixFQUFHQSxFQUFJLElBQzFDLE9BQU9pQixHQUFLMEssRUFBRUEsR0FBSzFLLEVBQUUsR0FBSWpCLEVBQUlpQixFQUFFLEdBQUdGLFNBQVcsRUFHL0MsU0FBU3V4QixHQUFlM21CLEVBQUd6RCxFQUFRbEksR0FDakMsSUFBSWlCLEVBQUk4dkIsR0FBUzNQLEtBQUtsWixFQUFPM0csTUFBTXZCLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lCLEdBQUswSyxFQUFFUCxFQUFJLEVBQUdPLEVBQUVBLEdBQUsxSyxFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBR3hELFNBQVN3eEIsR0FBWTVtQixFQUFHekQsRUFBUWxJLEdBQzlCLElBQUlpQixFQUFJOHZCLEdBQVMzUCxLQUFLbFosRUFBTzNHLE1BQU12QixFQUFHQSxFQUFJLElBQzFDLE9BQU9pQixHQUFLMEssRUFBRXdrQixHQUFLbHZCLEVBQUUsR0FBSWpCLEVBQUlpQixFQUFFLEdBQUdGLFNBQVcsRUFHL0MsU0FBU3l4QixHQUFhN21CLEVBQUd6RCxFQUFRbEksR0FDL0IsSUFBSWlCLEVBQUk4dkIsR0FBUzNQLEtBQUtsWixFQUFPM0csTUFBTXZCLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lCLEdBQUswSyxFQUFFeWtCLEdBQUtudkIsRUFBRSxHQUFJakIsRUFBSWlCLEVBQUUsR0FBR0YsU0FBVyxFQUcvQyxTQUFTMHhCLEdBQWE5bUIsRUFBR3pELEVBQVFsSSxHQUMvQixJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUUwa0IsR0FBS3B2QixFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVMyeEIsR0FBa0IvbUIsRUFBR3pELEVBQVFsSSxHQUNwQyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUUya0IsR0FBS3J2QixFQUFFLEdBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEVBRy9DLFNBQVM0eEIsR0FBa0JobkIsRUFBR3pELEVBQVFsSSxHQUNwQyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUIsR0FBSzBLLEVBQUUya0IsRUFBSTdnQixLQUFLK0QsTUFBTXZTLEVBQUUsR0FBSyxLQUFPakIsRUFBSWlCLEVBQUUsR0FBR0YsU0FBVyxFQUdqRSxTQUFTNnhCLEdBQW9Cam5CLEVBQUd6RCxFQUFRbEksR0FDdEMsSUFBSWlCLEVBQUkrdkIsR0FBVTVQLEtBQUtsWixFQUFPM0csTUFBTXZCLEVBQUdBLEVBQUksSUFDM0MsT0FBT2lCLEVBQUlqQixFQUFJaUIsRUFBRSxHQUFHRixRQUFVLEVBR2hDLFNBQVM4eEIsR0FBbUJsbkIsRUFBR3pELEVBQVFsSSxHQUNyQyxJQUFJaUIsRUFBSTh2QixHQUFTM1AsS0FBS2xaLEVBQU8zRyxNQUFNdkIsSUFDbkMsT0FBT2lCLEdBQUswSyxFQUFFbW5CLEdBQUs3eEIsRUFBRSxHQUFJakIsRUFBSWlCLEVBQUUsR0FBR0YsU0FBVyxFQUcvQyxTQUFTZ3lCLEdBQTBCcG5CLEVBQUd6RCxFQUFRbEksR0FDNUMsSUFBSWlCLEVBQUk4dkIsR0FBUzNQLEtBQUtsWixFQUFPM0csTUFBTXZCLElBQ25DLE9BQU9pQixHQUFLMEssRUFBRW1uQixFQUFjLEtBQVI3eEIsRUFBRSxHQUFZakIsRUFBSWlCLEVBQUUsR0FBR0YsU0FBVyxFQUd4RCxTQUFTaXlCLEdBQWlCcm5CLEVBQUdrSSxHQUMzQixPQUFPcWQsR0FBSXZsQixFQUFFMGlCLFVBQVd4YSxFQUFHLEdBRzdCLFNBQVNvZixHQUFhdG5CLEVBQUdrSSxHQUN2QixPQUFPcWQsR0FBSXZsQixFQUFFdWlCLFdBQVlyYSxFQUFHLEdBRzlCLFNBQVNxZixHQUFhdm5CLEVBQUdrSSxHQUN2QixPQUFPcWQsR0FBSXZsQixFQUFFdWlCLFdBQWEsSUFBTSxHQUFJcmEsRUFBRyxHQUd6QyxTQUFTc2YsR0FBZ0J4bkIsRUFBR2tJLEdBQzFCLE9BQU9xZCxHQUFJLEVBQUlrQyxHQUFROWYsTUFBTStmLEdBQVMxbkIsR0FBSUEsR0FBSWtJLEVBQUcsR0FHbkQsU0FBU3lmLEdBQW1CM25CLEVBQUdrSSxHQUM3QixPQUFPcWQsR0FBSXZsQixFQUFFNG5CLGtCQUFtQjFmLEVBQUcsR0FHckMsU0FBUzJmLEdBQW1CN25CLEVBQUdrSSxHQUM3QixPQUFPeWYsR0FBbUIzbkIsRUFBR2tJLEdBQUssTUFHcEMsU0FBUzRmLEdBQWtCOW5CLEVBQUdrSSxHQUM1QixPQUFPcWQsR0FBSXZsQixFQUFFa2pCLFdBQWEsRUFBR2hiLEVBQUcsR0FHbEMsU0FBUzZmLEdBQWMvbkIsRUFBR2tJLEdBQ3hCLE9BQU9xZCxHQUFJdmxCLEVBQUVxaUIsYUFBY25hLEVBQUcsR0FHaEMsU0FBUzhmLEdBQWNob0IsRUFBR2tJLEdBQ3hCLE9BQU9xZCxHQUFJdmxCLEVBQUVpb0IsYUFBYy9mLEVBQUcsR0FHaEMsU0FBU2dnQixHQUEwQmxvQixHQUNqQyxJQUFJbWlCLEVBQU1uaUIsRUFBRTRpQixTQUNaLE9BQWUsSUFBUlQsRUFBWSxFQUFJQSxFQUd6QixTQUFTZ0csR0FBdUJub0IsRUFBR2tJLEdBQ2pDLE9BQU9xZCxHQUFJNkMsR0FBV3pnQixNQUFNK2YsR0FBUzFuQixHQUFJQSxHQUFJa0ksRUFBRyxHQUdsRCxTQUFTbWdCLEdBQW9Ccm9CLEVBQUdrSSxHQUM5QixJQUFJaWEsRUFBTW5pQixFQUFFNGlCLFNBRVosT0FEQTVpQixFQUFLbWlCLEdBQU8sR0FBYSxJQUFSQSxFQUFhbUcsR0FBYXRvQixHQUFLc29CLEdBQWFqaEIsS0FBS3JILEdBQzNEdWxCLEdBQUkrQyxHQUFhM2dCLE1BQU0rZixHQUFTMW5CLEdBQUlBLElBQStCLElBQXpCMG5CLEdBQVMxbkIsR0FBRzRpQixVQUFpQjFhLEVBQUcsR0FHbkYsU0FBU3FnQixHQUEwQnZvQixHQUNqQyxPQUFPQSxFQUFFNGlCLFNBR1gsU0FBUzRGLEdBQXVCeG9CLEVBQUdrSSxHQUNqQyxPQUFPcWQsR0FBSWtELEdBQVc5Z0IsTUFBTStmLEdBQVMxbkIsR0FBSUEsR0FBSWtJLEVBQUcsR0FHbEQsU0FBU3dnQixHQUFXMW9CLEVBQUdrSSxHQUNyQixPQUFPcWQsR0FBSXZsQixFQUFFbWpCLGNBQWdCLElBQUtqYixFQUFHLEdBR3ZDLFNBQVN5Z0IsR0FBZTNvQixFQUFHa0ksR0FDekIsT0FBT3FkLEdBQUl2bEIsRUFBRW1qQixjQUFnQixJQUFPamIsRUFBRyxHQUd6QyxTQUFTMGdCLEdBQVc1b0IsR0FDbEIsSUFBSWdZLEVBQUloWSxFQUFFc2lCLG9CQUNWLE9BQVF0SyxFQUFJLEVBQUksS0FBT0EsSUFBTSxFQUFHLE1BQzFCdU4sR0FBSXZOLEVBQUksR0FBSyxFQUFHLElBQUssR0FDckJ1TixHQUFJdk4sRUFBSSxHQUFJLElBQUssR0FHekIsU0FBUzZRLEdBQW9CN29CLEVBQUdrSSxHQUM5QixPQUFPcWQsR0FBSXZsQixFQUFFNGpCLGFBQWMxYixFQUFHLEdBR2hDLFNBQVM0Z0IsR0FBZ0I5b0IsRUFBR2tJLEdBQzFCLE9BQU9xZCxHQUFJdmxCLEVBQUV3akIsY0FBZXRiLEVBQUcsR0FHakMsU0FBUzZnQixHQUFnQi9vQixFQUFHa0ksR0FDMUIsT0FBT3FkLEdBQUl2bEIsRUFBRXdqQixjQUFnQixJQUFNLEdBQUl0YixFQUFHLEdBRzVDLFNBQVM4Z0IsR0FBbUJocEIsRUFBR2tJLEdBQzdCLE9BQU9xZCxHQUFJLEVBQUk5QixHQUFPOWIsTUFBTXVjLEdBQVFsa0IsR0FBSUEsR0FBSWtJLEVBQUcsR0FHakQsU0FBUytnQixHQUFzQmpwQixFQUFHa0ksR0FDaEMsT0FBT3FkLEdBQUl2bEIsRUFBRWtwQixxQkFBc0JoaEIsRUFBRyxHQUd4QyxTQUFTaWhCLEdBQXNCbnBCLEVBQUdrSSxHQUNoQyxPQUFPK2dCLEdBQXNCanBCLEVBQUdrSSxHQUFLLE1BR3ZDLFNBQVNraEIsR0FBcUJwcEIsRUFBR2tJLEdBQy9CLE9BQU9xZCxHQUFJdmxCLEVBQUVva0IsY0FBZ0IsRUFBR2xjLEVBQUcsR0FHckMsU0FBU21oQixHQUFpQnJwQixFQUFHa0ksR0FDM0IsT0FBT3FkLEdBQUl2bEIsRUFBRXNqQixnQkFBaUJwYixFQUFHLEdBR25DLFNBQVNvaEIsR0FBaUJ0cEIsRUFBR2tJLEdBQzNCLE9BQU9xZCxHQUFJdmxCLEVBQUVvaUIsZ0JBQWlCbGEsRUFBRyxHQUduQyxTQUFTcWhCLEdBQTZCdnBCLEdBQ3BDLElBQUl3cEIsRUFBTXhwQixFQUFFOGpCLFlBQ1osT0FBZSxJQUFSMEYsRUFBWSxFQUFJQSxFQUd6QixTQUFTQyxHQUEwQnpwQixFQUFHa0ksR0FDcEMsT0FBT3FkLEdBQUl4QixHQUFVcGMsTUFBTXVjLEdBQVFsa0IsR0FBSUEsR0FBSWtJLEVBQUcsR0FHaEQsU0FBU3doQixHQUF1QjFwQixFQUFHa0ksR0FDakMsSUFBSWlhLEVBQU1uaUIsRUFBRThqQixZQUVaLE9BREE5akIsRUFBS21pQixHQUFPLEdBQWEsSUFBUkEsRUFBYThCLEdBQVlqa0IsR0FBS2lrQixHQUFZNWMsS0FBS3JILEdBQ3pEdWxCLEdBQUl0QixHQUFZdGMsTUFBTXVjLEdBQVFsa0IsR0FBSUEsSUFBaUMsSUFBM0Jra0IsR0FBUWxrQixHQUFHOGpCLGFBQW9CNWIsRUFBRyxHQUduRixTQUFTeWhCLEdBQTZCM3BCLEdBQ3BDLE9BQU9BLEVBQUU4akIsWUFHWCxTQUFTOEYsR0FBMEI1cEIsRUFBR2tJLEdBQ3BDLE9BQU9xZCxHQUFJdkIsR0FBVXJjLE1BQU11YyxHQUFRbGtCLEdBQUlBLEdBQUlrSSxFQUFHLEdBR2hELFNBQVMyaEIsR0FBYzdwQixFQUFHa0ksR0FDeEIsT0FBT3FkLEdBQUl2bEIsRUFBRXFrQixpQkFBbUIsSUFBS25jLEVBQUcsR0FHMUMsU0FBUzRoQixHQUFrQjlwQixFQUFHa0ksR0FDNUIsT0FBT3FkLEdBQUl2bEIsRUFBRXFrQixpQkFBbUIsSUFBT25jLEVBQUcsR0FHNUMsU0FBUzZoQixLQUNQLE1BQU8sUUFHVCxTQUFTQyxLQUNQLE1BQU8sSUFHVCxTQUFTQyxHQUFvQmpxQixHQUMzQixPQUFRQSxFQUdWLFNBQVNrcUIsR0FBMkJscUIsR0FDbEMsT0FBTzhELEtBQUsrRCxPQUFPN0gsRUFBSSxNQzNtQlYsU0FBdUJxTCxHQUNwQ3VULEdEZWEsU0FBc0JBLEdBQ25DLElBQUl1TCxFQUFrQnZMLEVBQU93TCxTQUN6QkMsRUFBY3pMLEVBQU9pRCxLQUNyQnlJLEVBQWMxTCxFQUFPMkwsS0FDckJDLEVBQWlCNUwsRUFBTzZMLFFBQ3hCQyxFQUFrQjlMLEVBQU8rTCxLQUN6QkMsRUFBdUJoTSxFQUFPaU0sVUFDOUJDLEVBQWdCbE0sRUFBT21NLE9BQ3ZCQyxFQUFxQnBNLEVBQU9xTSxZQUU1QkMsRUFBV3pGLEdBQVMrRSxHQUNwQlcsRUFBZXpGLEdBQWE4RSxHQUM1QlksRUFBWTNGLEdBQVNpRixHQUNyQlcsRUFBZ0IzRixHQUFhZ0YsR0FDN0JZLEVBQWlCN0YsR0FBU21GLEdBQzFCVyxFQUFxQjdGLEdBQWFrRixHQUNsQ1ksRUFBVS9GLEdBQVNxRixHQUNuQlcsRUFBYy9GLEdBQWFvRixHQUMzQlksRUFBZWpHLEdBQVN1RixHQUN4QlcsRUFBbUJqRyxHQUFhc0YsR0FFaENZLEdBQ0Y5dkIsRUFrUEYsU0FBNEJrRSxHQUMxQixPQUFPNHFCLEVBQXFCNXFCLEVBQUU0aUIsV0FsUDlCckssRUFxUEYsU0FBdUJ2WSxHQUNyQixPQUFPMHFCLEVBQWdCMXFCLEVBQUU0aUIsV0FyUHpCN21CLEVBd1BGLFNBQTBCaUUsR0FDeEIsT0FBT2dyQixFQUFtQmhyQixFQUFFa2pCLGFBeFA1QjFLLEVBMlBGLFNBQXFCeFksR0FDbkIsT0FBTzhxQixFQUFjOXFCLEVBQUVrakIsYUEzUHZCeHRCLEVBQUssS0FDTHNLLEVBQUtxbkIsR0FDTDlMLEVBQUs4TCxHQUNMcnlCLEVBQUs2eUIsR0FDTHJELEVBQUs4QyxHQUNManlCLEVBQUtreUIsR0FDTDV4QixFQUFLNnhCLEdBQ0w3QyxFQUFLZ0QsR0FDTGxvQixFQUFLcW9CLEdBQ0xyRCxFQUFLc0QsR0FDTDdmLEVBb1BGLFNBQXNCbEksR0FDcEIsT0FBT3dxQixJQUFpQnhxQixFQUFFdWlCLFlBQWMsTUFwUHhDNEUsRUFBSzhDLEdBQ0wxVCxFQUFLMlQsR0FDTHhGLEVBQUtzRCxHQUNMbEMsRUFBS29DLEdBQ0xsQyxFQUFLbUMsR0FDTGpDLEVBQUttQyxHQUNMekMsRUFBSzJDLEdBQ0xuQyxFQUFLb0MsR0FDTC9tQixFQUFLLEtBQ0xpZCxFQUFLLEtBQ0wvYyxFQUFLK21CLEdBQ0xtRCxFQUFLbEQsR0FDTG5DLEVBQUtvQyxHQUNMdEssSUFBSzBMLElBR0g4QixHQUNGaHdCLEVBc09GLFNBQStCa0UsR0FDN0IsT0FBTzRxQixFQUFxQjVxQixFQUFFOGpCLGNBdE85QnZMLEVBeU9GLFNBQTBCdlksR0FDeEIsT0FBTzBxQixFQUFnQjFxQixFQUFFOGpCLGNBek96Qi9uQixFQTRPRixTQUE2QmlFLEdBQzNCLE9BQU9nckIsRUFBbUJockIsRUFBRW9rQixnQkE1TzVCNUwsRUErT0YsU0FBd0J4WSxHQUN0QixPQUFPOHFCLEVBQWM5cUIsRUFBRW9rQixnQkEvT3ZCMXVCLEVBQUssS0FDTHNLLEVBQUs2b0IsR0FDTHROLEVBQUtzTixHQUNMN3pCLEVBQUttMEIsR0FDTDNFLEVBQUtzRSxHQUNMenpCLEVBQUswekIsR0FDTHB6QixFQUFLcXpCLEdBQ0xyRSxFQUFLc0UsR0FDTHhwQixFQUFLMnBCLEdBQ0wzRSxFQUFLNEUsR0FDTG5oQixFQXdPRixTQUF5QmxJLEdBQ3ZCLE9BQU93cUIsSUFBaUJ4cUIsRUFBRXdqQixlQUFpQixNQXhPM0MyRCxFQUFLOEMsR0FDTDFULEVBQUsyVCxHQUNMeEYsRUFBSzRFLEdBQ0x4RCxFQUFLeUQsR0FDTHZELEVBQUt5RCxHQUNMdkQsRUFBS3dELEdBQ0w5RCxFQUFLK0QsR0FDTHZELEVBQUt3RCxHQUNMbm9CLEVBQUssS0FDTGlkLEVBQUssS0FDTC9jLEVBQUtrb0IsR0FDTGdDLEVBQUsvQixHQUNMdEQsRUFBS3VELEdBQ0x6TCxJQUFLMEwsSUFHSCtCLEdBQ0Zqd0IsRUFrSkYsU0FBMkJrRSxFQUFHekQsRUFBUWxJLEdBQ3BDLElBQUlpQixFQUFJZzJCLEVBQWU3VixLQUFLbFosRUFBTzNHLE1BQU12QixJQUN6QyxPQUFPaUIsR0FBSzBLLEVBQUU0bEIsRUFBSTJGLEVBQW1CajJCLEVBQUUsR0FBR2tnQixlQUFnQm5oQixFQUFJaUIsRUFBRSxHQUFHRixTQUFXLEdBbko5RW1qQixFQXNKRixTQUFzQnZZLEVBQUd6RCxFQUFRbEksR0FDL0IsSUFBSWlCLEVBQUk4MUIsRUFBVTNWLEtBQUtsWixFQUFPM0csTUFBTXZCLElBQ3BDLE9BQU9pQixHQUFLMEssRUFBRTRsQixFQUFJeUYsRUFBYy8xQixFQUFFLEdBQUdrZ0IsZUFBZ0JuaEIsRUFBSWlCLEVBQUUsR0FBR0YsU0FBVyxHQXZKekUyRyxFQTBKRixTQUF5QmlFLEVBQUd6RCxFQUFRbEksR0FDbEMsSUFBSWlCLEVBQUlvMkIsRUFBYWpXLEtBQUtsWixFQUFPM0csTUFBTXZCLElBQ3ZDLE9BQU9pQixHQUFLMEssRUFBRVAsRUFBSWtzQixFQUFpQnIyQixFQUFFLEdBQUdrZ0IsZUFBZ0JuaEIsRUFBSWlCLEVBQUUsR0FBR0YsU0FBVyxHQTNKNUVvakIsRUE4SkYsU0FBb0J4WSxFQUFHekQsRUFBUWxJLEdBQzdCLElBQUlpQixFQUFJazJCLEVBQVEvVixLQUFLbFosRUFBTzNHLE1BQU12QixJQUNsQyxPQUFPaUIsR0FBSzBLLEVBQUVQLEVBQUlnc0IsRUFBWW4yQixFQUFFLEdBQUdrZ0IsZUFBZ0JuaEIsRUFBSWlCLEVBQUUsR0FBR0YsU0FBVyxHQS9KdkVNLEVBa0tGLFNBQTZCc0ssRUFBR3pELEVBQVFsSSxHQUN0QyxPQUFPMjNCLEVBQWVoc0IsRUFBR21xQixFQUFpQjV0QixFQUFRbEksSUFsS2xEMkwsRUFBSzBtQixHQUNMbkwsRUFBS21MLEdBQ0wxeEIsRUFBS2d5QixHQUNMeEMsRUFBS29DLEdBQ0x2eEIsRUFBS3V4QixHQUNManhCLEVBQUtneEIsR0FDTGhDLEVBQUtvQyxHQUNMdG5CLEVBQUtnbkIsR0FDTGhDLEVBQUtvQyxHQUNMM2UsRUErSEYsU0FBcUJsSSxFQUFHekQsRUFBUWxJLEdBQzlCLElBQUlpQixFQUFJNDFCLEVBQVN6VixLQUFLbFosRUFBTzNHLE1BQU12QixJQUNuQyxPQUFPaUIsR0FBSzBLLEVBQUVrSSxFQUFJaWpCLEVBQWE3MUIsRUFBRSxHQUFHa2dCLGVBQWdCbmhCLEVBQUlpQixFQUFFLEdBQUdGLFNBQVcsR0FoSXhFK3hCLEVBQUtELEdBQ0wzUSxFQUFLNlEsR0FDTDFDLEVBQUtvQyxHQUNMaEIsRUFBS0QsR0FDTEcsRUFBS0QsR0FDTEcsRUFBS0QsR0FDTEwsRUFBS0QsR0FDTFMsRUFBS0QsR0FDTDFrQixFQW1KRixTQUF5QnpCLEVBQUd6RCxFQUFRbEksR0FDbEMsT0FBTzIzQixFQUFlaHNCLEVBQUdxcUIsRUFBYTl0QixFQUFRbEksSUFuSjlDcXFCLEVBc0pGLFNBQXlCMWUsRUFBR3pELEVBQVFsSSxHQUNsQyxPQUFPMjNCLEVBQWVoc0IsRUFBR3NxQixFQUFhL3RCLEVBQVFsSSxJQXRKOUNzTixFQUFLMmtCLEdBQ0x1RixFQUFLeEYsR0FDTEcsRUFBS0QsR0FDTGpJLElBQUsySSxJQVdQLFNBQVMxSCxFQUFVMUIsRUFBVytOLEdBQzVCLE9BQU8sU0FBUy9KLEdBQ2QsSUFJSW5zQixFQUNBNnZCLEVBQ0FodkIsRUFOQWdHLEtBQ0FsSSxHQUFLLEVBQ0xzQixFQUFJLEVBQ0pMLEVBQUl1b0IsRUFBVXpvQixPQU9sQixJQUZNeXNCLGFBQWdCdkgsT0FBT3VILEVBQU8sSUFBSXZILE1BQU11SCxNQUVyQ3h0QixFQUFJaUIsR0FDcUIsS0FBNUJ1b0IsRUFBVWhwQixXQUFXUixLQUN2QmtJLEVBQU94RyxLQUFLOG5CLEVBQVVqb0IsTUFBTUQsRUFBR3RCLElBQ2dCLE9BQTFDa3hCLEVBQU1OLEdBQUt2dkIsRUFBSW1vQixFQUFVb08sU0FBUzUzQixLQUFjcUIsRUFBSW1vQixFQUFVb08sU0FBUzUzQixHQUN2RWt4QixFQUFZLE1BQU43dkIsRUFBWSxJQUFNLEtBQ3pCYSxFQUFTcTFCLEVBQVFsMkIsTUFBSUEsRUFBSWEsRUFBT3NyQixFQUFNMEQsSUFDMUNocEIsRUFBT3hHLEtBQUtMLEdBQ1pDLEVBQUl0QixFQUFJLEdBS1osT0FEQWtJLEVBQU94RyxLQUFLOG5CLEVBQVVqb0IsTUFBTUQsRUFBR3RCLElBQ3hCa0ksRUFBTy9ILEtBQUssS0FJdkIsU0FBUzAzQixFQUFTck8sRUFBV3NPLEdBQzNCLE9BQU8sU0FBUzV2QixHQUNkLElBRUk2dkIsRUFBTWpLLEVBRk5uaUIsRUFBSThrQixHQUFRLE1BR2hCLEdBRlFrSCxFQUFlaHNCLEVBQUc2ZCxFQUFXdGhCLEdBQVUsR0FBSSxJQUUxQ0EsRUFBT25ILE9BQVEsT0FBTyxLQUcvQixHQUFJLE1BQU80SyxFQUFHLE9BQU8sSUFBSXNhLEtBQUt0YSxFQUFFbW5CLEdBTWhDLEdBSEksTUFBT25uQixJQUFHQSxFQUFFd2tCLEVBQUl4a0IsRUFBRXdrQixFQUFJLEdBQVcsR0FBTnhrQixFQUFFa0ksR0FHN0IsTUFBT2xJLEVBQUcsQ0FDWixHQUFJQSxFQUFFa21CLEVBQUksR0FBS2xtQixFQUFFa21CLEVBQUksR0FBSSxPQUFPLEtBQzFCLE1BQU9sbUIsSUFBSUEsRUFBRTRsQixFQUFJLEdBQ25CLE1BQU81bEIsR0FFVG9zQixHQUQ4QmpLLEdBQTlCaUssRUFBT3hILEdBQVFFLEdBQVE5a0IsRUFBRTJCLEtBQWdCbWlCLGFBQzVCLEdBQWEsSUFBUjNCLEVBQVk2QixHQUFVM2MsS0FBSytrQixHQUFRcEksR0FBVW9JLEdBQy9EQSxFQUFPM0ksR0FBTzNCLE9BQU9zSyxFQUFrQixHQUFYcHNCLEVBQUVrbUIsRUFBSSxJQUNsQ2xtQixFQUFFMkIsRUFBSXlxQixFQUFLL0gsaUJBQ1hya0IsRUFBRVAsRUFBSTJzQixFQUFLaEksY0FDWHBrQixFQUFFQSxFQUFJb3NCLEVBQUt4SSxjQUFnQjVqQixFQUFFNGxCLEVBQUksR0FBSyxJQUd0Q3dHLEdBRDhCakssR0FBOUJpSyxFQUFPRCxFQUFRckgsR0FBUTlrQixFQUFFMkIsS0FBZ0JpaEIsVUFDNUIsR0FBYSxJQUFSVCxFQUFZc0csR0FBV3BoQixLQUFLK2tCLEdBQVEzRCxHQUFXMkQsR0FDakVBLEVBQU8zRSxHQUFRM0YsT0FBT3NLLEVBQWtCLEdBQVhwc0IsRUFBRWttQixFQUFJLElBQ25DbG1CLEVBQUUyQixFQUFJeXFCLEVBQUtqSixjQUNYbmpCLEVBQUVQLEVBQUkyc0IsRUFBS2xKLFdBQ1hsakIsRUFBRUEsRUFBSW9zQixFQUFLMUosV0FBYTFpQixFQUFFNGxCLEVBQUksR0FBSyxRQUU1QixNQUFPNWxCLEdBQUssTUFBT0EsS0FDdEIsTUFBT0EsSUFBSUEsRUFBRTRsQixFQUFJLE1BQU81bEIsRUFBSUEsRUFBRThsQixFQUFJLEVBQUksTUFBTzlsQixFQUFJLEVBQUksR0FDM0RtaUIsRUFBTSxNQUFPbmlCLEVBQUk0a0IsR0FBUUUsR0FBUTlrQixFQUFFMkIsSUFBSW1pQixZQUFjcUksRUFBUXJILEdBQVE5a0IsRUFBRTJCLElBQUlpaEIsU0FDM0U1aUIsRUFBRVAsRUFBSSxFQUNOTyxFQUFFQSxFQUFJLE1BQU9BLEdBQUtBLEVBQUU0bEIsRUFBSSxHQUFLLEVBQVUsRUFBTjVsQixFQUFFb21CLEdBQVNqRSxFQUFNLEdBQUssRUFBSW5pQixFQUFFNGxCLEVBQVUsRUFBTjVsQixFQUFFZ21CLEdBQVM3RCxFQUFNLEdBQUssR0FLekYsTUFBSSxNQUFPbmlCLEdBQ1RBLEVBQUV3a0IsR0FBS3hrQixFQUFFd21CLEVBQUksSUFBTSxFQUNuQnhtQixFQUFFeWtCLEdBQUt6a0IsRUFBRXdtQixFQUFJLElBQ041QixHQUFRNWtCLElBSVZtc0IsRUFBUW5zQixJQUluQixTQUFTZ3NCLEVBQWVoc0IsRUFBRzZkLEVBQVd0aEIsRUFBUTVHLEdBTzVDLElBTkEsSUFHSUQsRUFDQVMsRUFKQTlCLEVBQUksRUFDSmlCLEVBQUl1b0IsRUFBVXpvQixPQUNkcUssRUFBSWxELEVBQU9uSCxPQUlSZixFQUFJaUIsR0FBRyxDQUNaLEdBQUlLLEdBQUs4SixFQUFHLE9BQVEsRUFFcEIsR0FBVSxNQURWL0osRUFBSW1vQixFQUFVaHBCLFdBQVdSLE9BSXZCLEdBRkFxQixFQUFJbW9CLEVBQVVvTyxPQUFPNTNCLE9BQ3JCOEIsRUFBUTQxQixFQUFPcjJCLEtBQUt1dkIsR0FBT3BILEVBQVVvTyxPQUFPNTNCLEtBQU9xQixNQUNuQ0MsRUFBSVEsRUFBTTZKLEVBQUd6RCxFQUFRNUcsSUFBTSxFQUFJLE9BQVEsT0FDbEQsR0FBSUQsR0FBSzZHLEVBQU8xSCxXQUFXYyxLQUNoQyxPQUFRLEVBSVosT0FBT0EsRUFnRlQsT0ExTEFpMkIsRUFBUW5xQixFQUFJOGQsRUFBVThLLEVBQWF1QixHQUNuQ0EsRUFBUWxOLEVBQUlhLEVBQVUrSyxFQUFhc0IsR0FDbkNBLEVBQVFsMkIsRUFBSTZwQixFQUFVNEssRUFBaUJ5QixHQUN2Q0UsRUFBV3JxQixFQUFJOGQsRUFBVThLLEVBQWF5QixHQUN0Q0EsRUFBV3BOLEVBQUlhLEVBQVUrSyxFQUFhd0IsR0FDdENBLEVBQVdwMkIsRUFBSTZwQixFQUFVNEssRUFBaUIyQixJQXNMeEN2MUIsT0FBUSxTQUFTc25CLEdBQ2YsSUFBSTdvQixFQUFJdXFCLEVBQVUxQixHQUFhLEdBQUkrTixHQUVuQyxPQURBNTJCLEVBQUVxaEIsU0FBVyxXQUFhLE9BQU93SCxHQUMxQjdvQixHQUVUbUIsTUFBTyxTQUFTMG5CLEdBQ2QsSUFBSTNWLEVBQUlna0IsRUFBU3JPLEdBQWEsR0FBSTBHLElBRWxDLE9BREFyYyxFQUFFbU8sU0FBVyxXQUFhLE9BQU93SCxHQUMxQjNWLEdBRVQ2YyxVQUFXLFNBQVNsSCxHQUNsQixJQUFJN29CLEVBQUl1cUIsRUFBVTFCLEdBQWEsR0FBSWlPLEdBRW5DLE9BREE5MkIsRUFBRXFoQixTQUFXLFdBQWEsT0FBT3dILEdBQzFCN29CLEdBRVRnd0IsU0FBVSxTQUFTbkgsR0FDakIsSUFBSTNWLEVBQUlna0IsRUFBU3JPLEVBQVcrRyxJQUU1QixPQURBMWMsRUFBRW1PLFNBQVcsV0FBYSxPQUFPd0gsR0FDMUIzVixJQ2xWRnFaLENBQWFsVyxHQUNUdVQsR0FBT3JvQixPQUNScW9CLEdBQU96b0IsTUFDbkI0dUIsR0FBWW5HLEdBQU9tRyxVQUNuQkMsR0FBV3BHLEdBQU9vRyxXQWZsQm9GLFNBQVUsU0FDVnZJLEtBQU0sYUFDTjBJLEtBQU0sZUFDTkUsU0FBVSxLQUFNLE1BQ2hCRSxNQUFPLFNBQVUsU0FBVSxVQUFXLFlBQWEsV0FBWSxTQUFVLFlBQ3pFRSxXQUFZLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3RERSxRQUFTLFVBQVcsV0FBWSxRQUFTLFFBQVMsTUFBTyxPQUFRLE9BQVEsU0FBVSxZQUFhLFVBQVcsV0FBWSxZQUN2SEUsYUFBYyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sU0NSN0UzUSxLQUFLN2YsVUFBVTR4QixhQUV6QnRILEdBUm9CLDBCQ01WLElBQUl6SyxLQUFLLDZCQUVuQjBLLEdEUm9CLHlCQ00xQixJQ1JJc0gsR0FBS3hvQixLQUFLb1QsR0FDVnFWLEdBQU0sRUFBSUQsR0FFVkUsR0FBYUQsR0FESCxLQUdkLFNBQVNFLEtBQ1A5ekIsS0FBSyt6QixJQUFNL3pCLEtBQUtnMEIsSUFDaEJoMEIsS0FBS2kwQixJQUFNajBCLEtBQUtrMEIsSUFBTSxLQUN0QmwwQixLQUFLMlIsRUFBSSxHQUdYLFNBQVN3aUIsS0FDUCxPQUFPLElBQUlMLEdDWkUsWUFBU2hyQixHQUN0QixPQUFPLFdBQ0wsT0FBT0EsR0RhWGdyQixHQUFLaHlCLFVBQVlxeUIsR0FBS3J5QixXQUNwQkMsWUFBYSt4QixHQUNiTSxPQUFRLFNBQVN0ckIsRUFBR0UsR0FDbEJoSixLQUFLMlIsR0FBSyxLQUFPM1IsS0FBSyt6QixJQUFNL3pCLEtBQUtpMEIsS0FBT25yQixHQUFLLEtBQU85SSxLQUFLZzBCLElBQU1oMEIsS0FBS2swQixLQUFPbHJCLElBRTdFcXJCLFVBQVcsV0FDUSxPQUFicjBCLEtBQUtpMEIsTUFDUGowQixLQUFLaTBCLElBQU1qMEIsS0FBSyt6QixJQUFLL3pCLEtBQUtrMEIsSUFBTWwwQixLQUFLZzBCLElBQ3JDaDBCLEtBQUsyUixHQUFLLE1BR2QyaUIsT0FBUSxTQUFTeHJCLEVBQUdFLEdBQ2xCaEosS0FBSzJSLEdBQUssS0FBTzNSLEtBQUtpMEIsS0FBT25yQixHQUFLLEtBQU85SSxLQUFLazBCLEtBQU9sckIsSUFFdkR1ckIsaUJBQWtCLFNBQVNDLEVBQUlDLEVBQUkzckIsRUFBR0UsR0FDcENoSixLQUFLMlIsR0FBSyxNQUFRNmlCLEVBQU0sTUFBUUMsRUFBTSxLQUFPejBCLEtBQUtpMEIsS0FBT25yQixHQUFLLEtBQU85SSxLQUFLazBCLEtBQU9sckIsSUFFbkYwckIsY0FBZSxTQUFTRixFQUFJQyxFQUFJRSxFQUFJQyxFQUFJOXJCLEVBQUdFLEdBQ3pDaEosS0FBSzJSLEdBQUssTUFBUTZpQixFQUFNLE1BQVFDLEVBQU0sTUFBUUUsRUFBTSxNQUFRQyxFQUFNLEtBQU81MEIsS0FBS2kwQixLQUFPbnJCLEdBQUssS0FBTzlJLEtBQUtrMEIsS0FBT2xyQixJQUUvRzZyQixNQUFPLFNBQVNMLEVBQUlDLEVBQUlFLEVBQUlDLEVBQUl4WCxHQUM5Qm9YLEdBQU1BLEVBQUlDLEdBQU1BLEVBQUlFLEdBQU1BLEVBQUlDLEdBQU1BLEVBQUl4WCxHQUFLQSxFQUM3QyxJQUFJMFgsRUFBSzkwQixLQUFLaTBCLElBQ1ZjLEVBQUsvMEIsS0FBS2swQixJQUNWYyxFQUFNTCxFQUFLSCxFQUNYUyxFQUFNTCxFQUFLSCxFQUNYUyxFQUFNSixFQUFLTixFQUNYVyxFQUFNSixFQUFLTixFQUNYVyxFQUFRRixFQUFNQSxFQUFNQyxFQUFNQSxFQUc5QixHQUFJL1gsRUFBSSxFQUFHLE1BQU0sSUFBSXplLE1BQU0sb0JBQXNCeWUsR0FHakQsR0FBaUIsT0FBYnBkLEtBQUtpMEIsSUFDUGowQixLQUFLMlIsR0FBSyxLQUFPM1IsS0FBS2kwQixJQUFNTyxHQUFNLEtBQU94MEIsS0FBS2swQixJQUFNTyxRQUlqRCxHQUFNVyxFQXBERCxLQXlETCxHQUFNanFCLEtBQUsyWixJQUFJcVEsRUFBTUgsRUFBTUMsRUFBTUMsR0F6RDVCLE1BeURnRDlYLEVBS3JELENBQ0gsSUFBSWlZLEVBQU1WLEVBQUtHLEVBQ1hRLEVBQU1WLEVBQUtHLEVBQ1hRLEVBQVFQLEVBQU1BLEVBQU1DLEVBQU1BLEVBQzFCTyxFQUFRSCxFQUFNQSxFQUFNQyxFQUFNQSxFQUMxQkcsRUFBTXRxQixLQUFLa0QsS0FBS2tuQixHQUNoQkcsRUFBTXZxQixLQUFLa0QsS0FBSyttQixHQUNoQnZYLEVBQUlULEVBQUlqUyxLQUFLOFEsS0FBSzBYLEdBQUt4b0IsS0FBS3dxQixNQUFNSixFQUFRSCxFQUFRSSxJQUFVLEVBQUlDLEVBQU1DLEtBQVMsR0FDL0VFLEVBQU0vWCxFQUFJNlgsRUFDVkcsRUFBTWhZLEVBQUk0WCxFQUdWdHFCLEtBQUsyWixJQUFJOFEsRUFBTSxHQTFFWCxPQTJFTjUxQixLQUFLMlIsR0FBSyxLQUFPNmlCLEVBQUtvQixFQUFNVixHQUFPLEtBQU9ULEVBQUttQixFQUFNVCxJQUd2RG4xQixLQUFLMlIsR0FBSyxJQUFNeUwsRUFBSSxJQUFNQSxFQUFJLFdBQWErWCxFQUFNRSxFQUFNSCxFQUFNSSxHQUFRLEtBQU90MUIsS0FBS2kwQixJQUFNTyxFQUFLcUIsRUFBTWIsR0FBTyxLQUFPaDFCLEtBQUtrMEIsSUFBTU8sRUFBS29CLEVBQU1aLFFBcEJ0SWoxQixLQUFLMlIsR0FBSyxLQUFPM1IsS0FBS2kwQixJQUFNTyxHQUFNLEtBQU94MEIsS0FBS2swQixJQUFNTyxVQXVCeERxQixJQUFLLFNBQVNodEIsRUFBR0UsRUFBR29VLEVBQUcyWSxFQUFJQyxFQUFJQyxHQUM3Qm50QixHQUFLQSxFQUFHRSxHQUFLQSxFQUNiLElBQUlrdEIsR0FEWTlZLEdBQUtBLEdBQ1JqUyxLQUFLZ1UsSUFBSTRXLEdBQ2xCSSxFQUFLL1ksRUFBSWpTLEtBQUtpVSxJQUFJMlcsR0FDbEJqQixFQUFLaHNCLEVBQUlvdEIsRUFDVG5CLEVBQUsvckIsRUFBSW10QixFQUNUQyxFQUFLLEVBQUlILEVBQ1RJLEVBQUtKLEVBQU1GLEVBQUtDLEVBQUtBLEVBQUtELEVBRzlCLEdBQUkzWSxFQUFJLEVBQUcsTUFBTSxJQUFJemUsTUFBTSxvQkFBc0J5ZSxHQUdoQyxPQUFicGQsS0FBS2kwQixJQUNQajBCLEtBQUsyUixHQUFLLElBQU1takIsRUFBSyxJQUFNQyxHQUlwQjVwQixLQUFLMlosSUFBSTlrQixLQUFLaTBCLElBQU1hLEdBbkduQixNQW1Hb0MzcEIsS0FBSzJaLElBQUk5a0IsS0FBS2swQixJQUFNYSxHQW5HeEQsUUFvR1IvMEIsS0FBSzJSLEdBQUssSUFBTW1qQixFQUFLLElBQU1DLEdBSXhCM1gsSUFHRGlaLEVBQUssSUFBR0EsRUFBS0EsRUFBS3pDLEdBQU1BLElBR3hCeUMsRUFBS3hDLEdBQ1A3ekIsS0FBSzJSLEdBQUssSUFBTXlMLEVBQUksSUFBTUEsRUFBSSxRQUFVZ1osRUFBSyxLQUFPdHRCLEVBQUlvdEIsR0FBTSxLQUFPbHRCLEVBQUltdEIsR0FBTSxJQUFNL1ksRUFBSSxJQUFNQSxFQUFJLFFBQVVnWixFQUFLLEtBQU9wMkIsS0FBS2kwQixJQUFNYSxHQUFNLEtBQU85MEIsS0FBS2swQixJQUFNYSxHQUlySnNCLEVBbkhDLE9Bb0hScjJCLEtBQUsyUixHQUFLLElBQU15TCxFQUFJLElBQU1BLEVBQUksU0FBV2laLEdBQU0xQyxJQUFPLElBQU15QyxFQUFLLEtBQU9wMkIsS0FBS2kwQixJQUFNbnJCLEVBQUlzVSxFQUFJalMsS0FBS2dVLElBQUk2VyxJQUFPLEtBQU9oMkIsS0FBS2swQixJQUFNbHJCLEVBQUlvVSxFQUFJalMsS0FBS2lVLElBQUk0VyxPQUdsSjNzQixLQUFNLFNBQVNQLEVBQUdFLEVBQUdpa0IsRUFBR3RQLEdBQ3RCM2QsS0FBSzJSLEdBQUssS0FBTzNSLEtBQUsrekIsSUFBTS96QixLQUFLaTBCLEtBQU9uckIsR0FBSyxLQUFPOUksS0FBS2cwQixJQUFNaDBCLEtBQUtrMEIsS0FBT2xyQixHQUFLLE1BQVFpa0IsRUFBSyxNQUFRdFAsRUFBSyxLQUFRc1AsRUFBSyxLQUV6SHZQLFNBQVUsV0FDUixPQUFPMWQsS0FBSzJSLElFcEhBeEcsS0FBS29ULEdDVHJCLFNBQVMrWCxHQUFPQyxHQUNkdjJCLEtBQUt3MkIsU0FBV0QsRUEyQkgsWUFBU0EsR0FDdEIsT0FBTyxJQUFJRCxHQUFPQyxHQzdCYixTQUFTenRCLEdBQUV5RyxHQUNoQixPQUFPQSxFQUFFLEdBR0osU0FBU3ZHLEdBQUV1RyxHQUNoQixPQUFPQSxFQUFFLEdDQ0ksY0FDYixJQUFJdWxCLEVBQUsyQixHQUNMakMsRUFBSyxLQUNMTyxFQUFLdlUsR0FBUyxHQUNkaVUsRUFBS2lDLEdBQ0xDLEVBQVVuVyxJQUFTLEdBQ25CK1YsRUFBVSxLQUNWSyxFQUFRQyxHQUNSMU8sRUFBUyxLQUViLFNBQVMyTyxFQUFLcjBCLEdBQ1osSUFBSS9HLEVBQ0FzQixFQUNBK1QsRUFFQTFKLEVBRUEwdkIsRUFIQXA2QixFQUFJOEYsRUFBS2hHLE9BRVR1NkIsR0FBVyxFQUVYQyxFQUFNLElBQUkxMUIsTUFBTTVFLEdBQ2hCdTZCLEVBQU0sSUFBSTMxQixNQUFNNUUsR0FJcEIsSUFGZSxNQUFYNDVCLElBQWlCcE8sRUFBU3lPLEVBQU1HLEVBQVM1QyxPQUV4Q3o0QixFQUFJLEVBQUdBLEdBQUtpQixJQUFLakIsRUFBRyxDQUN2QixLQUFNQSxFQUFJaUIsR0FBS2c2QixFQUFRdHZCLEVBQUk1RSxFQUFLL0csR0FBSUEsRUFBRytHLE1BQVd1MEIsRUFDaEQsR0FBSUEsR0FBWUEsRUFDZGg2QixFQUFJdEIsRUFDSnlzQixFQUFPZ1AsWUFDUGhQLEVBQU9pUCxnQkFDRixDQUdMLElBRkFqUCxFQUFPa1AsVUFDUGxQLEVBQU9pUCxZQUNGcm1CLEVBQUlyVixFQUFJLEVBQUdxVixHQUFLL1QsSUFBSytULEVBQ3hCb1gsRUFBT3RmLE1BQU1vdUIsRUFBSWxtQixHQUFJbW1CLEVBQUlubUIsSUFFM0JvWCxFQUFPa1AsVUFDUGxQLEVBQU9tUCxVQUdQTixJQUNGQyxFQUFJdjdCLElBQU1vNUIsRUFBR3p0QixFQUFHM0wsRUFBRytHLEdBQU95MEIsRUFBSXg3QixJQUFNcTVCLEVBQUcxdEIsRUFBRzNMLEVBQUcrRyxHQUM3QzBsQixFQUFPdGYsTUFBTTJyQixHQUFNQSxFQUFHbnRCLEVBQUczTCxFQUFHK0csR0FBUXcwQixFQUFJdjdCLEdBQUkrNEIsR0FBTUEsRUFBR3B0QixFQUFHM0wsRUFBRytHLEdBQVF5MEIsRUFBSXg3QixLQUkzRSxHQUFJcTdCLEVBQVEsT0FBTzVPLEVBQVMsS0FBTTRPLEVBQVMsSUFBTSxLQUduRCxTQUFTUSxJQUNQLE9DbERXLFdBQ2IsSUFBSXp1QixFQUFJMnRCLEdBQ0p6dEIsRUFBSTB0QixHQUNKQyxFQUFVblcsSUFBUyxHQUNuQitWLEVBQVUsS0FDVkssRUFBUUMsR0FDUjFPLEVBQVMsS0FFYixTQUFTcVAsRUFBSy8wQixHQUNaLElBQUkvRyxFQUVBMkwsRUFFQTB2QixFQUhBcDZCLEVBQUk4RixFQUFLaEcsT0FFVHU2QixHQUFXLEVBS2YsSUFGZSxNQUFYVCxJQUFpQnBPLEVBQVN5TyxFQUFNRyxFQUFTNUMsT0FFeEN6NEIsRUFBSSxFQUFHQSxHQUFLaUIsSUFBS2pCLElBQ2RBLEVBQUlpQixHQUFLZzZCLEVBQVF0dkIsRUFBSTVFLEVBQUsvRyxHQUFJQSxFQUFHK0csTUFBV3UwQixLQUM1Q0EsR0FBWUEsR0FBVTdPLEVBQU9pUCxZQUM1QmpQLEVBQU9rUCxXQUVWTCxHQUFVN08sRUFBT3RmLE9BQU9DLEVBQUV6QixFQUFHM0wsRUFBRytHLElBQVF1RyxFQUFFM0IsRUFBRzNMLEVBQUcrRyxJQUd0RCxHQUFJczBCLEVBQVEsT0FBTzVPLEVBQVMsS0FBTTRPLEVBQVMsSUFBTSxLQXVCbkQsT0FwQkFTLEVBQUsxdUIsRUFBSSxTQUFTNkksR0FDaEIsT0FBTzVGLFVBQVV0UCxRQUFVcU0sRUFBaUIsbUJBQU42SSxFQUFtQkEsRUFBSTZPLElBQVU3TyxHQUFJNmxCLEdBQVExdUIsR0FHckYwdUIsRUFBS3h1QixFQUFJLFNBQVMySSxHQUNoQixPQUFPNUYsVUFBVXRQLFFBQVV1TSxFQUFpQixtQkFBTjJJLEVBQW1CQSxFQUFJNk8sSUFBVTdPLEdBQUk2bEIsR0FBUXh1QixHQUdyRnd1QixFQUFLYixRQUFVLFNBQVNobEIsR0FDdEIsT0FBTzVGLFVBQVV0UCxRQUFVazZCLEVBQXVCLG1CQUFOaGxCLEVBQW1CQSxFQUFJNk8sS0FBVzdPLEdBQUk2bEIsR0FBUWIsR0FHNUZhLEVBQUtaLE1BQVEsU0FBU2psQixHQUNwQixPQUFPNUYsVUFBVXRQLFFBQVVtNkIsRUFBUWpsQixFQUFjLE1BQVg0a0IsSUFBb0JwTyxFQUFTeU8sRUFBTUwsSUFBV2lCLEdBQVFaLEdBRzlGWSxFQUFLakIsUUFBVSxTQUFTNWtCLEdBQ3RCLE9BQU81RixVQUFVdFAsUUFBZSxNQUFMa1YsRUFBWTRrQixFQUFVcE8sRUFBUyxLQUFPQSxFQUFTeU8sRUFBTUwsRUFBVTVrQixHQUFJNmxCLEdBQVFqQixHQUdqR2lCLEVERUVBLEdBQU9iLFFBQVFBLEdBQVNDLE1BQU1BLEdBQU9MLFFBQVFBLEdBb0R0RCxPQWpEQU8sRUFBS2h1QixFQUFJLFNBQVM2SSxHQUNoQixPQUFPNUYsVUFBVXRQLFFBQVVxNEIsRUFBa0IsbUJBQU5uakIsRUFBbUJBLEVBQUk2TyxJQUFVN08sR0FBSTZpQixFQUFLLEtBQU1zQyxHQUFRaEMsR0FHakdnQyxFQUFLaEMsR0FBSyxTQUFTbmpCLEdBQ2pCLE9BQU81RixVQUFVdFAsUUFBVXE0QixFQUFrQixtQkFBTm5qQixFQUFtQkEsRUFBSTZPLElBQVU3TyxHQUFJbWxCLEdBQVFoQyxHQUd0RmdDLEVBQUt0QyxHQUFLLFNBQVM3aUIsR0FDakIsT0FBTzVGLFVBQVV0UCxRQUFVKzNCLEVBQVUsTUFBTDdpQixFQUFZLEtBQW9CLG1CQUFOQSxFQUFtQkEsRUFBSTZPLElBQVU3TyxHQUFJbWxCLEdBQVF0QyxHQUd6R3NDLEVBQUs5dEIsRUFBSSxTQUFTMkksR0FDaEIsT0FBTzVGLFVBQVV0UCxRQUFVczRCLEVBQWtCLG1CQUFOcGpCLEVBQW1CQSxFQUFJNk8sSUFBVTdPLEdBQUk4aUIsRUFBSyxLQUFNcUMsR0FBUS9CLEdBR2pHK0IsRUFBSy9CLEdBQUssU0FBU3BqQixHQUNqQixPQUFPNUYsVUFBVXRQLFFBQVVzNEIsRUFBa0IsbUJBQU5wakIsRUFBbUJBLEVBQUk2TyxJQUFVN08sR0FBSW1sQixHQUFRL0IsR0FHdEYrQixFQUFLckMsR0FBSyxTQUFTOWlCLEdBQ2pCLE9BQU81RixVQUFVdFAsUUFBVWc0QixFQUFVLE1BQUw5aUIsRUFBWSxLQUFvQixtQkFBTkEsRUFBbUJBLEVBQUk2TyxJQUFVN08sR0FBSW1sQixHQUFRckMsR0FHekdxQyxFQUFLVyxPQUNMWCxFQUFLWSxPQUFTLFdBQ1osT0FBT0gsSUFBV3p1QixFQUFFZ3NCLEdBQUk5ckIsRUFBRStyQixJQUc1QitCLEVBQUthLE9BQVMsV0FDWixPQUFPSixJQUFXenVCLEVBQUVnc0IsR0FBSTlyQixFQUFFeXJCLElBRzVCcUMsRUFBS2MsT0FBUyxXQUNaLE9BQU9MLElBQVd6dUIsRUFBRTByQixHQUFJeHJCLEVBQUUrckIsSUFHNUIrQixFQUFLSCxRQUFVLFNBQVNobEIsR0FDdEIsT0FBTzVGLFVBQVV0UCxRQUFVazZCLEVBQXVCLG1CQUFOaGxCLEVBQW1CQSxFQUFJNk8sS0FBVzdPLEdBQUltbEIsR0FBUUgsR0FHNUZHLEVBQUtGLE1BQVEsU0FBU2psQixHQUNwQixPQUFPNUYsVUFBVXRQLFFBQVVtNkIsRUFBUWpsQixFQUFjLE1BQVg0a0IsSUFBb0JwTyxFQUFTeU8sRUFBTUwsSUFBV08sR0FBUUYsR0FHOUZFLEVBQUtQLFFBQVUsU0FBUzVrQixHQUN0QixPQUFPNUYsVUFBVXRQLFFBQWUsTUFBTGtWLEVBQVk0a0IsRUFBVXBPLEVBQVMsS0FBT0EsRUFBU3lPLEVBQU1MLEVBQVU1a0IsR0FBSW1sQixHQUFRUCxHQUdqR08sRUUzR1QsU0FBU3pSLEdBQUt2YyxHQUNaLE9BQU9BLEVBQUksR0FBSyxFQUFJLEVBT3RCLFNBQVMrdUIsR0FBT0MsRUFBTW5ELEVBQUlDLEdBQ3hCLElBQUltRCxFQUFLRCxFQUFLN0QsSUFBTTZELEVBQUsvRCxJQUNyQmlFLEVBQUtyRCxFQUFLbUQsRUFBSzdELElBQ2ZnRSxHQUFNSCxFQUFLNUQsSUFBTTRELEVBQUs5RCxNQUFRK0QsR0FBTUMsRUFBSyxJQUFNLEdBQy9DRSxHQUFNdEQsRUFBS2tELEVBQUs1RCxNQUFROEQsR0FBTUQsRUFBSyxJQUFNLEdBQ3pDeG9CLEdBQUswb0IsRUFBS0QsRUFBS0UsRUFBS0gsSUFBT0EsRUFBS0MsR0FDcEMsT0FBUTNTLEdBQUs0UyxHQUFNNVMsR0FBSzZTLElBQU8vc0IsS0FBS0MsSUFBSUQsS0FBSzJaLElBQUltVCxHQUFLOXNCLEtBQUsyWixJQUFJb1QsR0FBSyxHQUFNL3NCLEtBQUsyWixJQUFJdlYsS0FBTyxFQUk1RixTQUFTNG9CLEdBQU9MLEVBQU14N0IsR0FDcEIsSUFBSXFoQixFQUFJbWEsRUFBSzdELElBQU02RCxFQUFLL0QsSUFDeEIsT0FBT3BXLEdBQUssR0FBS21hLEVBQUs1RCxJQUFNNEQsRUFBSzlELEtBQU9yVyxFQUFJcmhCLEdBQUssRUFBSUEsRUFNdkQsU0FBU3VNLEdBQU1pdkIsRUFBTWxaLEVBQUlDLEdBQ3ZCLElBQUlpVyxFQUFLZ0QsRUFBSy9ELElBQ1ZnQixFQUFLK0MsRUFBSzlELElBQ1ZRLEVBQUtzRCxFQUFLN0QsSUFDVlEsRUFBS3FELEVBQUs1RCxJQUNWZ0MsR0FBTTFCLEVBQUtNLEdBQU0sRUFDckJnRCxFQUFLdEIsU0FBUzlCLGNBQWNJLEVBQUtvQixFQUFJbkIsRUFBS21CLEVBQUt0WCxFQUFJNFYsRUFBSzBCLEVBQUl6QixFQUFLeUIsRUFBS3JYLEVBQUkyVixFQUFJQyxHQUdoRixTQUFTMkQsR0FBVTdCLEdBQ2pCdjJCLEtBQUt3MkIsU0FBV0QsRUFrRGxCLFNBQVM4QixHQUFlOUIsR0FDdEJ2MkIsS0FBS3cyQixTQUFXRCxFSm5GbEJELEdBQU94MEIsV0FDTHExQixVQUFXLFdBQ1RuM0IsS0FBS3M0QixNQUFRLEdBRWZoQixRQUFTLFdBQ1B0M0IsS0FBS3M0QixNQUFRajFCLEtBRWYrekIsVUFBVyxXQUNUcDNCLEtBQUt1NEIsT0FBUyxHQUVoQmxCLFFBQVMsWUFDSHIzQixLQUFLczRCLE9BQXlCLElBQWZ0NEIsS0FBS3M0QixPQUErQixJQUFoQnQ0QixLQUFLdTRCLFNBQWV2NEIsS0FBS3cyQixTQUFTbkMsWUFDekVyMEIsS0FBS3M0QixNQUFRLEVBQUl0NEIsS0FBS3M0QixPQUV4Qnp2QixNQUFPLFNBQVNDLEVBQUdFLEdBRWpCLE9BREFGLEdBQUtBLEVBQUdFLEdBQUtBLEVBQ0xoSixLQUFLdTRCLFFBQ1gsS0FBSyxFQUFHdjRCLEtBQUt1NEIsT0FBUyxFQUFHdjRCLEtBQUtzNEIsTUFBUXQ0QixLQUFLdzJCLFNBQVNsQyxPQUFPeHJCLEVBQUdFLEdBQUtoSixLQUFLdzJCLFNBQVNwQyxPQUFPdHJCLEVBQUdFLEdBQUksTUFDL0YsS0FBSyxFQUFHaEosS0FBS3U0QixPQUFTLEVBQ3RCLFFBQVN2NEIsS0FBS3cyQixTQUFTbEMsT0FBT3hyQixFQUFHRSxNSWdCdkNvdkIsR0FBVXQyQixXQUNScTFCLFVBQVcsV0FDVG4zQixLQUFLczRCLE1BQVEsR0FFZmhCLFFBQVMsV0FDUHQzQixLQUFLczRCLE1BQVFqMUIsS0FFZit6QixVQUFXLFdBQ1RwM0IsS0FBSyt6QixJQUFNL3pCLEtBQUtpMEIsSUFDaEJqMEIsS0FBS2cwQixJQUFNaDBCLEtBQUtrMEIsSUFDaEJsMEIsS0FBS3c0QixJQUFNbjFCLElBQ1hyRCxLQUFLdTRCLE9BQVMsR0FFaEJsQixRQUFTLFdBQ1AsT0FBUXIzQixLQUFLdTRCLFFBQ1gsS0FBSyxFQUFHdjRCLEtBQUt3MkIsU0FBU2xDLE9BQU90MEIsS0FBS2kwQixJQUFLajBCLEtBQUtrMEIsS0FBTSxNQUNsRCxLQUFLLEVBQUdyckIsR0FBTTdJLEtBQU1BLEtBQUt3NEIsSUFBS0wsR0FBT240QixLQUFNQSxLQUFLdzRCLE9BRTlDeDRCLEtBQUtzNEIsT0FBeUIsSUFBZnQ0QixLQUFLczRCLE9BQStCLElBQWhCdDRCLEtBQUt1NEIsU0FBZXY0QixLQUFLdzJCLFNBQVNuQyxZQUN6RXIwQixLQUFLczRCLE1BQVEsRUFBSXQ0QixLQUFLczRCLE9BRXhCenZCLE1BQU8sU0FBU0MsRUFBR0UsR0FDakIsSUFBSTZWLEVBQUt4YixJQUdULEdBRFEyRixHQUFLQSxHQUFiRixHQUFLQSxLQUNLOUksS0FBS2kwQixLQUFPanJCLElBQU1oSixLQUFLazBCLElBQWpDLENBQ0EsT0FBUWwwQixLQUFLdTRCLFFBQ1gsS0FBSyxFQUFHdjRCLEtBQUt1NEIsT0FBUyxFQUFHdjRCLEtBQUtzNEIsTUFBUXQ0QixLQUFLdzJCLFNBQVNsQyxPQUFPeHJCLEVBQUdFLEdBQUtoSixLQUFLdzJCLFNBQVNwQyxPQUFPdHJCLEVBQUdFLEdBQUksTUFDL0YsS0FBSyxFQUFHaEosS0FBS3U0QixPQUFTLEVBQUcsTUFDekIsS0FBSyxFQUFHdjRCLEtBQUt1NEIsT0FBUyxFQUFHMXZCLEdBQU03SSxLQUFNbTRCLEdBQU9uNEIsS0FBTTZlLEVBQUtnWixHQUFPNzNCLEtBQU04SSxFQUFHRSxJQUFLNlYsR0FBSyxNQUNqRixRQUFTaFcsR0FBTTdJLEtBQU1BLEtBQUt3NEIsSUFBSzNaLEVBQUtnWixHQUFPNzNCLEtBQU04SSxFQUFHRSxJQUd0RGhKLEtBQUsrekIsSUFBTS96QixLQUFLaTBCLElBQUtqMEIsS0FBS2kwQixJQUFNbnJCLEVBQ2hDOUksS0FBS2cwQixJQUFNaDBCLEtBQUtrMEIsSUFBS2wwQixLQUFLazBCLElBQU1sckIsRUFDaENoSixLQUFLdzRCLElBQU0zWixNQUlmLFNBQW1CMFgsR0FDakJ2MkIsS0FBS3cyQixTQUFXLElBQUk2QixHQUFlOUIsSUFHMUJ6MEIsVUFBWWhFLE9BQU9DLE9BQU9xNkIsR0FBVXQyQixZQUFZK0csTUFBUSxTQUFTQyxFQUFHRSxHQUM3RW92QixHQUFVdDJCLFVBQVUrRyxNQUFNeEgsS0FBS3JCLEtBQU1nSixFQUFHRixJQU8xQ3V2QixHQUFldjJCLFdBQ2JzeUIsT0FBUSxTQUFTdHJCLEVBQUdFLEdBQUtoSixLQUFLdzJCLFNBQVNwQyxPQUFPcHJCLEVBQUdGLElBQ2pEdXJCLFVBQVcsV0FBYXIwQixLQUFLdzJCLFNBQVNuQyxhQUN0Q0MsT0FBUSxTQUFTeHJCLEVBQUdFLEdBQUtoSixLQUFLdzJCLFNBQVNsQyxPQUFPdHJCLEVBQUdGLElBQ2pENHJCLGNBQWUsU0FBU0YsRUFBSUMsRUFBSUUsRUFBSUMsRUFBSTlyQixFQUFHRSxHQUFLaEosS0FBS3cyQixTQUFTOUIsY0FBY0QsRUFBSUQsRUFBSUksRUFBSUQsRUFBSTNyQixFQUFHRixLQzlGMUYsSUFBSTdMLEdBQVFzRSxNQUFNTyxVQUFVN0UsTUNBcEIsWUFBUzZMLEdBQ3RCLE9BQU9BLEVDRVQsSUFBSVcsR0FBTSxFQUNOa0UsR0FBUSxFQUNSOHFCLEdBQVMsRUFDVGx2QixHQUFPLEVBQ1BtdkIsR0FBVSxLQUVkLFNBQVNwVyxHQUFXeFosR0FDbEIsTUFBTyxjQUFnQkEsRUFBSSxJQUFPLE1BR3BDLFNBQVN5WixHQUFXdlosR0FDbEIsTUFBTyxnQkFBa0JBLEVBQUksSUFBTyxJQWlCdEMsU0FBUzJ2QixLQUNQLE9BQVEzNEIsS0FBSzQ0QixPQUdmLFNBQVNDLEdBQUtDLEVBQVF2bkIsR0FDcEIsSUFBSXduQixLQUNBQyxFQUFhLEtBQ2JoUixFQUFhLEtBQ2JpUixFQUFnQixFQUNoQkMsRUFBZ0IsRUFDaEJDLEVBQWMsRUFDZHBvQixFQUFJK25CLElBQVdydkIsSUFBT3F2QixJQUFXdnZCLElBQVEsRUFBSSxFQUM3Q1QsRUFBSWd3QixJQUFXdnZCLElBQVF1dkIsSUFBV25yQixHQUFRLElBQU0sSUFDaEQ4VixFQUFZcVYsSUFBV3J2QixJQUFPcXZCLElBQVdMLEdBQVNuVyxHQUFhQyxHQUVuRSxTQUFTc1csRUFBS3RDLEdBQ1osSUFBSTFvQixFQUF1QixNQUFkbXJCLEVBQXNCem5CLEVBQU11VyxNQUFRdlcsRUFBTXVXLE1BQU05YixNQUFNdUYsRUFBT3duQixHQUFpQnhuQixFQUFNRSxTQUFZdW5CLEVBQ3pHcDdCLEVBQXVCLE1BQWRvcUIsRUFBc0J6VyxFQUFNeVcsV0FBYXpXLEVBQU15VyxXQUFXaGMsTUFBTXVGLEVBQU93bkIsR0FBaUIxVyxHQUFZMkYsRUFDN0dvUixFQUFVanVCLEtBQUttRCxJQUFJMnFCLEVBQWUsR0FBS0UsRUFDdkN4cUIsRUFBUTRDLEVBQU01QyxRQUNkMHFCLEdBQVUxcUIsRUFBTSxHQUFLLEdBQ3JCMnFCLEdBQVUzcUIsRUFBTUEsRUFBTWxTLE9BQVMsR0FBSyxHQUNwQzg4QixHQUFZaG9CLEVBQU1ELFVBOUIxQixTQUFnQkMsR0FDZCxJQUFJNFgsRUFBU2hlLEtBQUttRCxJQUFJLEVBQUdpRCxFQUFNRCxZQUFjLEdBQUssRUFFbEQsT0FESUMsRUFBTVEsVUFBU29YLEVBQVNoZSxLQUFLNEcsTUFBTW9YLElBQ2hDLFNBQVM5aEIsR0FDZCxPQUFRa0ssRUFBTWxLLEdBQUs4aEIsSUFWdkIsU0FBZ0I1WCxHQUNkLE9BQU8sU0FBU2xLLEdBQ2QsT0FBUWtLLEVBQU1sSyxNQWtDcUNrSyxFQUFNSyxRQUNyRHRKLEVBQVlpdUIsRUFBUWp1QixVQUFZaXVCLEVBQVFqdUIsWUFBY2l1QixFQUN0RHBDLEVBQU83ckIsRUFBVXlCLFVBQVUsV0FBV3RILE1BQU0sT0FDNUMrMkIsRUFBT2x4QixFQUFVeUIsVUFBVSxTQUFTdEgsS0FBS29MLEVBQVEwRCxHQUFPL0YsUUFDeERpdUIsRUFBV0QsRUFBS2gzQixPQUNoQmszQixFQUFZRixFQUFLajNCLFFBQVF1SyxPQUFPLEtBQUtaLEtBQUssUUFBUyxRQUNuRHNyQixFQUFPZ0MsRUFBSzd2QixPQUFPLFFBQ25Cdk4sRUFBT285QixFQUFLN3ZCLE9BQU8sUUFFdkJ3cUIsRUFBT0EsRUFBS3JwQixNQUFNcXBCLEVBQUs1eEIsUUFBUXlLLE9BQU8sT0FBUSxTQUN6Q2QsS0FBSyxRQUFTLFVBQ2RBLEtBQUssU0FBVSxTQUVwQnN0QixFQUFPQSxFQUFLMXVCLE1BQU00dUIsR0FFbEJsQyxFQUFPQSxFQUFLMXNCLE1BQU00dUIsRUFBVTVzQixPQUFPLFFBQzlCWixLQUFLLFNBQVUsUUFDZkEsS0FBS3BELEVBQUksSUFBS2lJLEVBQUlrb0IsSUFFdkI3OEIsRUFBT0EsRUFBSzBPLE1BQU00dUIsRUFBVTVzQixPQUFPLFFBQzlCWixLQUFLLE9BQVEsUUFDYkEsS0FBS3BELEVBQUdpSSxFQUFJcW9CLEdBQ1psdEIsS0FBSyxLQUFNNHNCLElBQVdydkIsR0FBTSxNQUFRcXZCLElBQVdMLEdBQVMsU0FBVyxXQUVwRWxDLElBQVlqdUIsSUFDZDZyQixFQUFPQSxFQUFLd0YsV0FBV3BELEdBQ3ZCaUQsRUFBT0EsRUFBS0csV0FBV3BELEdBQ3ZCaUIsRUFBT0EsRUFBS21DLFdBQVdwRCxHQUN2Qm42QixFQUFPQSxFQUFLdTlCLFdBQVdwRCxHQUV2QmtELEVBQVdBLEVBQVNFLFdBQVdwRCxHQUMxQnJxQixLQUFLLFVBQVd3c0IsSUFDaEJ4c0IsS0FBSyxZQUFhLFNBQVM3RSxHQUFLLE9BQU8wZ0IsU0FBUzFnQixFQUFJa3lCLEVBQVNseUIsSUFBTW9jLEVBQVVwYyxHQUFLckgsS0FBS21FLGFBQWEsZUFFekd1MUIsRUFDS3h0QixLQUFLLFVBQVd3c0IsSUFDaEJ4c0IsS0FBSyxZQUFhLFNBQVM3RSxHQUFLLElBQUlrSSxFQUFJdlAsS0FBS2dGLFdBQVc0ekIsT0FBUSxPQUFPblYsRUFBVWxVLEdBQUt3WSxTQUFTeFksRUFBSUEsRUFBRWxJLElBQU1rSSxFQUFJZ3FCLEVBQVNseUIsT0FHL0hveUIsRUFBU2gxQixTQUVUMHZCLEVBQ0tqb0IsS0FBSyxJQUFLNHNCLElBQVd2dkIsSUFBUXV2QixHQUFVbnJCLEdBQ2xDLElBQU1vRCxFQUFJbW9CLEVBQWdCLElBQU1HLEVBQVMsUUFBVUMsRUFBUyxJQUFNdm9CLEVBQUltb0IsRUFDdEUsSUFBTUcsRUFBUyxJQUFNdG9CLEVBQUltb0IsRUFBZ0IsUUFBVUksRUFBUyxJQUFNdm9CLEVBQUltb0IsR0FFaEZNLEVBQ0t0dEIsS0FBSyxVQUFXLEdBQ2hCQSxLQUFLLFlBQWEsU0FBUzdFLEdBQUssT0FBT29jLEVBQVU4VixFQUFTbHlCLE1BRS9EbXdCLEVBQ0t0ckIsS0FBS3BELEVBQUksSUFBS2lJLEVBQUlrb0IsR0FFdkI3OEIsRUFDSzhQLEtBQUtwRCxFQUFHaUksRUFBSXFvQixHQUNaaDlCLEtBQUt3QixHQUVWMEssRUFBVTJCLE9BQU8wdUIsSUFDWnpzQixLQUFLLE9BQVEsUUFDYkEsS0FBSyxZQUFhLElBQ2xCQSxLQUFLLGNBQWUsY0FDcEJBLEtBQUssY0FBZTRzQixJQUFXbnJCLEdBQVEsUUFBVW1yQixJQUFXdnZCLEdBQU8sTUFBUSxVQUVoRmpCLEVBQ0s4QixLQUFLLFdBQWFwSyxLQUFLNDRCLE9BQVNXLElBdUN2QyxPQXBDQVYsRUFBS3RuQixNQUFRLFNBQVNJLEdBQ3BCLE9BQU81RixVQUFVdFAsUUFBVThVLEVBQVFJLEVBQUdrbkIsR0FBUXRuQixHQUdoRHNuQixFQUFLL1EsTUFBUSxXQUNYLE9BQU9pUixFQUFnQjk3QixHQUFNb0UsS0FBSzBLLFdBQVk4c0IsR0FHaERBLEVBQUtFLGNBQWdCLFNBQVNwbkIsR0FDNUIsT0FBTzVGLFVBQVV0UCxRQUFVczhCLEVBQXFCLE1BQUxwbkIsS0FBaUIxVSxHQUFNb0UsS0FBS3NRLEdBQUlrbkIsR0FBUUUsRUFBYzk3QixTQUduRzQ3QixFQUFLRyxXQUFhLFNBQVNybkIsR0FDekIsT0FBTzVGLFVBQVV0UCxRQUFVdThCLEVBQWtCLE1BQUxybkIsRUFBWSxLQUFPMVUsR0FBTW9FLEtBQUtzUSxHQUFJa25CLEdBQVFHLEdBQWNBLEVBQVcvN0IsU0FHN0c0N0IsRUFBSzdRLFdBQWEsU0FBU3JXLEdBQ3pCLE9BQU81RixVQUFVdFAsUUFBVXVyQixFQUFhclcsRUFBR2tuQixHQUFRN1EsR0FHckQ2USxFQUFLZSxTQUFXLFNBQVNqb0IsR0FDdkIsT0FBTzVGLFVBQVV0UCxRQUFVdzhCLEVBQWdCQyxHQUFpQnZuQixFQUFHa25CLEdBQVFJLEdBR3pFSixFQUFLSSxjQUFnQixTQUFTdG5CLEdBQzVCLE9BQU81RixVQUFVdFAsUUFBVXc4QixHQUFpQnRuQixFQUFHa25CLEdBQVFJLEdBR3pESixFQUFLSyxjQUFnQixTQUFTdm5CLEdBQzVCLE9BQU81RixVQUFVdFAsUUFBVXk4QixHQUFpQnZuQixFQUFHa25CLEdBQVFLLEdBR3pETCxFQUFLTSxZQUFjLFNBQVN4bkIsR0FDMUIsT0FBTzVGLFVBQVV0UCxRQUFVMDhCLEdBQWV4bkIsRUFBR2tuQixHQUFRTSxHQUdoRE4sRUFXRixTQUFTZ0IsR0FBV3RvQixHQUN6QixPQUFPc25CLEdBQUtKLEdBQVFsbkIsR0N4S3RCLElBQUl1b0IsSUFBUTN5QixNQUFPLGNBRW5CLFNBQVNtRyxLQUNQLElBQUssSUFBeUNoUixFQUFyQ1osRUFBSSxFQUFHaUIsRUFBSW9QLFVBQVV0UCxPQUFRa1YsS0FBV2pXLEVBQUlpQixJQUFLakIsRUFBRyxDQUMzRCxLQUFNWSxFQUFJeVAsVUFBVXJRLEdBQUssS0FBUVksS0FBS3FWLEVBQUksTUFBTSxJQUFJaFQsTUFBTSxpQkFBbUJyQyxHQUM3RXFWLEVBQUVyVixNQUVKLE9BQU8sSUFBSXk5QixHQUFTcG9CLEdBR3RCLFNBQVNvb0IsR0FBU3BvQixHQUNoQjNSLEtBQUsyUixFQUFJQSxFQXFEWCxTQUFTbkIsR0FBSXpKLEVBQU10TCxHQUNqQixJQUFLLElBQTRCc0IsRUFBeEJyQixFQUFJLEVBQUdpQixFQUFJb0ssRUFBS3RLLE9BQVdmLEVBQUlpQixJQUFLakIsRUFDM0MsSUFBS3FCLEVBQUlnSyxFQUFLckwsSUFBSUQsT0FBU0EsRUFDekIsT0FBT3NCLEVBQUVvSyxNQUtmLFNBQVN5SSxHQUFJN0ksRUFBTXRMLEVBQU1xUSxHQUN2QixJQUFLLElBQUlwUSxFQUFJLEVBQUdpQixFQUFJb0ssRUFBS3RLLE9BQVFmLEVBQUlpQixJQUFLakIsRUFDeEMsR0FBSXFMLEVBQUtyTCxHQUFHRCxPQUFTQSxFQUFNLENBQ3pCc0wsRUFBS3JMLEdBQUtvK0IsR0FBTS95QixFQUFPQSxFQUFLOUosTUFBTSxFQUFHdkIsR0FBR3lDLE9BQU80SSxFQUFLOUosTUFBTXZCLEVBQUksSUFDOUQsTUFJSixPQURnQixNQUFab1EsR0FBa0IvRSxFQUFLM0osTUFBTTNCLEtBQU1BLEVBQU0wTCxNQUFPMkUsSUFDN0MvRSxFQzFFTSxjQUNibEIsRUFBTW0wQixpQkFDTm4wQixFQUFNbzBCLDJCRGVSRixHQUFTajRCLFVBQVl3TCxHQUFTeEwsV0FDNUJDLFlBQWFnNEIsR0FDYnB6QixHQUFJLFNBQVNELEVBQVVvRixHQUNyQixJQUVJeFAsRUFkMkI0OUIsRUFZM0J2b0IsRUFBSTNSLEtBQUsyUixFQUNUd29CLEdBYjJCRCxFQWFPdm9CLEdBQWZqTCxFQUFXLElBWm5CN0MsT0FBT0MsTUFBTSxTQUFTdEksSUFBSSxTQUFTYyxHQUNsRCxJQUFJYixFQUFPLEdBQUlDLEVBQUlZLEVBQUVtRCxRQUFRLEtBRTdCLEdBREkvRCxHQUFLLElBQUdELEVBQU9hLEVBQUVXLE1BQU12QixFQUFJLEdBQUlZLEVBQUlBLEVBQUVXLE1BQU0sRUFBR3ZCLElBQzlDWSxJQUFNNDlCLEVBQU12NkIsZUFBZXJELEdBQUksTUFBTSxJQUFJcUMsTUFBTSxpQkFBbUJyQyxHQUN0RSxPQUFReUssS0FBTXpLLEVBQUdiLEtBQU1BLE1BVW5CQyxHQUFLLEVBQ0xpQixFQUFJdzlCLEVBQUUxOUIsT0FHVixLQUFJc1AsVUFBVXRQLE9BQVMsR0FBdkIsQ0FPQSxHQUFnQixNQUFacVAsR0FBd0MsbUJBQWJBLEVBQXlCLE1BQU0sSUFBSW5OLE1BQU0scUJBQXVCbU4sR0FDL0YsT0FBU3BRLEVBQUlpQixHQUNYLEdBQUlMLEdBQUtvSyxFQUFXeXpCLEVBQUV6K0IsSUFBSXFMLEtBQU00SyxFQUFFclYsR0FBS3NULEdBQUkrQixFQUFFclYsR0FBSW9LLEVBQVNqTCxLQUFNcVEsUUFDM0QsR0FBZ0IsTUFBWkEsRUFBa0IsSUFBS3hQLEtBQUtxVixFQUFHQSxFQUFFclYsR0FBS3NULEdBQUkrQixFQUFFclYsR0FBSW9LLEVBQVNqTCxLQUFNLE1BRzFFLE9BQU91RSxLQVpMLE9BQVN0RSxFQUFJaUIsR0FBRyxJQUFLTCxHQUFLb0ssRUFBV3l6QixFQUFFeitCLElBQUlxTCxRQUFVekssRUFBSWtVLEdBQUltQixFQUFFclYsR0FBSW9LLEVBQVNqTCxPQUFRLE9BQU9hLEdBYy9Gc1YsS0FBTSxXQUNKLElBQUlBLEtBQVdELEVBQUkzUixLQUFLMlIsRUFDeEIsSUFBSyxJQUFJclYsS0FBS3FWLEVBQUdDLEVBQUt0VixHQUFLcVYsRUFBRXJWLEdBQUdXLFFBQ2hDLE9BQU8sSUFBSTg4QixHQUFTbm9CLElBRXRCdlEsS0FBTSxTQUFTMEYsRUFBTSt3QixHQUNuQixJQUFLbjdCLEVBQUlvUCxVQUFVdFAsT0FBUyxHQUFLLEVBQUcsSUFBSyxJQUFnQ0UsRUFBR0wsRUFBL0I4OUIsRUFBTyxJQUFJNzRCLE1BQU01RSxHQUFJakIsRUFBSSxFQUFTQSxFQUFJaUIsSUFBS2pCLEVBQUcwK0IsRUFBSzErQixHQUFLcVEsVUFBVXJRLEVBQUksR0FDbkgsSUFBS3NFLEtBQUsyUixFQUFFaFMsZUFBZW9ILEdBQU8sTUFBTSxJQUFJcEksTUFBTSxpQkFBbUJvSSxHQUNyRSxJQUF1QnJMLEVBQUksRUFBR2lCLEdBQXpCTCxFQUFJMEQsS0FBSzJSLEVBQUU1SyxJQUFvQnRLLE9BQVFmLEVBQUlpQixJQUFLakIsRUFBR1ksRUFBRVosR0FBR3lMLE1BQU02RSxNQUFNOHJCLEVBQU1zQyxJQUVqRnB1QixNQUFPLFNBQVNqRixFQUFNK3dCLEVBQU1zQyxHQUMxQixJQUFLcDZCLEtBQUsyUixFQUFFaFMsZUFBZW9ILEdBQU8sTUFBTSxJQUFJcEksTUFBTSxpQkFBbUJvSSxHQUNyRSxJQUFLLElBQUl6SyxFQUFJMEQsS0FBSzJSLEVBQUU1SyxHQUFPckwsRUFBSSxFQUFHaUIsRUFBSUwsRUFBRUcsT0FBUWYsRUFBSWlCLElBQUtqQixFQUFHWSxFQUFFWixHQUFHeUwsTUFBTTZFLE1BQU04ckIsRUFBTXNDLEtFNUR2RixJQUlJQyxHQUNBQyxHQUxBQyxHQUFRLEVBQ1JDLEdBQVUsRUFDVnZSLEdBQVcsRUFDWHdSLEdBQVksSUFHWkMsR0FBWSxFQUNaQyxHQUFXLEVBQ1hDLEdBQVksRUFDWkMsR0FBK0IsaUJBQWhCQyxhQUE0QkEsWUFBWUMsSUFBTUQsWUFBY25aLEtBQzNFcVosR0FBNkIsaUJBQVh2ekIsUUFBdUJBLE9BQU93ekIsc0JBQXdCeHpCLE9BQU93ekIsc0JBQXNCNXdCLEtBQUs1QyxRQUFVLFNBQVNwTCxHQUFLNitCLFdBQVc3K0IsRUFBRyxLQUU3SSxTQUFTMCtCLEtBQ2QsT0FBT0osS0FBYUssR0FBU0csSUFBV1IsR0FBV0UsR0FBTUUsTUFBUUgsSUFHbkUsU0FBU08sS0FDUFIsR0FBVyxFQUdOLFNBQVNTLEtBQ2RwN0IsS0FBS3E3QixNQUNMcjdCLEtBQUtzN0IsTUFDTHQ3QixLQUFLMkIsTUFBUSxLQTBCUixTQUFTNDVCLEdBQU16dkIsRUFBVTB2QixFQUFPNUosR0FDckMsSUFBSXQxQixFQUFJLElBQUk4K0IsR0FFWixPQURBOStCLEVBQUVtL0IsUUFBUTN2QixFQUFVMHZCLEVBQU81SixHQUNwQnQxQixFQWNULFNBQVNvL0IsS0FDUGYsSUFBWUQsR0FBWUcsR0FBTUUsT0FBU0gsR0FDdkNMLEdBQVFDLEdBQVUsRUFDbEIsS0FkSyxXQUNMTyxPQUNFUixHQUVGLElBREEsSUFBa0IzWCxFQUFkdG1CLEVBQUkrOUIsR0FDRC85QixJQUNBc21CLEVBQUkrWCxHQUFXcitCLEVBQUVnL0IsUUFBVSxHQUFHaC9CLEVBQUUrK0IsTUFBTWg2QixLQUFLLEtBQU11aEIsR0FDdER0bUIsRUFBSUEsRUFBRXFGLFFBRU40NEIsR0FPQW9CLFdBRUFwQixHQUFRLEVBV1osV0FDRSxJQUFJM2IsRUFBbUJFLEVBQWZELEVBQUt3YixHQUFjekksRUFBT3RLLEVBQUFBLEVBQ2xDLEtBQU96SSxHQUNEQSxFQUFHd2MsT0FDRHpKLEVBQU8vUyxFQUFHeWMsUUFBTzFKLEVBQU8vUyxFQUFHeWMsT0FDL0IxYyxFQUFLQyxFQUFJQSxFQUFLQSxFQUFHbGQsUUFFakJtZCxFQUFLRCxFQUFHbGQsTUFBT2tkLEVBQUdsZCxNQUFRLEtBQzFCa2QsRUFBS0QsRUFBS0EsRUFBR2pkLE1BQVFtZCxFQUFLdWIsR0FBV3ZiLEdBR3pDd2IsR0FBVzFiLEVBQ1hnZCxHQUFNaEssR0F0QkppSyxHQUNBbEIsR0FBVyxHQUlmLFNBQVNtQixLQUNQLElBQUlmLEVBQU1GLEdBQU1FLE1BQU9TLEVBQVFULEVBQU1MLEdBQ2pDYyxFQUFRZixLQUFXRyxJQUFhWSxFQUFPZCxHQUFZSyxHQWtCekQsU0FBU2EsR0FBTWhLLEdBQ1QySSxLQUNBQyxLQUFTQSxHQUFVdUIsYUFBYXZCLEtBQ3hCNUksRUFBTytJLEdBQ1AsSUFDTi9JLEVBQU90SyxFQUFBQSxJQUFVa1QsR0FBVVUsV0FBV1EsR0FBTTlKLEVBQU9pSixHQUFNRSxNQUFRSCxLQUNqRTNSLEtBQVVBLEdBQVcrUyxjQUFjL1MsT0FFbENBLEtBQVV5UixHQUFZRyxHQUFNRSxNQUFPOVIsR0FBV2dULFlBQVlILEdBQU1yQixLQUNyRUYsR0FBUSxFQUFHUyxHQUFTVSxNQ3pHVCxZQUFTNXZCLEVBQVUwdkIsRUFBTzVKLEdBQ3ZDLElBQUl0MUIsRUFBSSxJQUFJOCtCLEdBTVosT0FMQUksRUFBaUIsTUFBVEEsRUFBZ0IsR0FBS0EsRUFDN0JsL0IsRUFBRW0vQixRQUFRLFNBQVNTLEdBQ2pCNS9CLEVBQUVrUyxPQUNGMUMsRUFBU293QixFQUFVVixJQUNsQkEsRUFBTzVKLEdBQ0h0MUIsRURpQlQ4K0IsR0FBTXQ1QixVQUFZeTVCLEdBQU16NUIsV0FDdEJDLFlBQWFxNUIsR0FDYkssUUFBUyxTQUFTM3ZCLEVBQVUwdkIsRUFBTzVKLEdBQ2pDLEdBQXdCLG1CQUFiOWxCLEVBQXlCLE1BQU0sSUFBSXF3QixVQUFVLDhCQUN4RHZLLEdBQWdCLE1BQVJBLEVBQWVtSixNQUFTbkosSUFBa0IsTUFBVDRKLEVBQWdCLEdBQUtBLEdBQ3pEeDdCLEtBQUsyQixPQUFTMjRCLEtBQWF0NkIsT0FDMUJzNkIsR0FBVUEsR0FBUzM0QixNQUFRM0IsS0FDMUJxNkIsR0FBV3I2QixLQUNoQnM2QixHQUFXdDZCLE1BRWJBLEtBQUtxN0IsTUFBUXZ2QixFQUNiOUwsS0FBS3M3QixNQUFRMUosRUFDYmdLLE1BRUZwdEIsS0FBTSxXQUNBeE8sS0FBS3E3QixRQUNQcjdCLEtBQUtxN0IsTUFBUSxLQUNicjdCLEtBQUtzN0IsTUFBUWhVLEVBQUFBLEVBQ2JzVSxRRXpDTixJQUFJUSxHQUFVOXVCLEdBQVMsUUFBUyxNQUFPLGFBQ25DK3VCLE1BRU9DLEdBQVUsRUFDVkMsR0FBWSxFQUNaQyxHQUFXLEVBQ1hDLEdBQVUsRUFDVkMsR0FBVSxFQUNWQyxHQUFTLEVBQ1RDLEdBQVEsRUFFSixZQUFTbDZCLEVBQU1qSCxFQUFNb2hDLEVBQUkzMkIsRUFBTzVELEVBQU93NkIsR0FDcEQsSUFBSUMsRUFBWXI2QixFQUFLczZCLGFBQ3JCLEdBQUtELEdBQ0EsR0FBSUYsS0FBTUUsRUFBVyxZQURWcjZCLEVBQUtzNkIsaUJBbUN2QixTQUFnQnQ2QixFQUFNbTZCLEVBQUlJLEdBQ3hCLElBQ0lDLEVBREFILEVBQVlyNkIsRUFBS3M2QixhQWdCckIsU0FBU3p1QixFQUFNMnRCLEdBQ2IsSUFBSXhnQyxFQUFHc0IsRUFBR0wsRUFBR2tLLEVBR2IsR0FBSW8yQixFQUFLRSxRQUFVWixHQUFXLE9BQU8vdEIsSUFFckMsSUFBSzlTLEtBQUtxaEMsRUFFUixJQURBbDJCLEVBQUlrMkIsRUFBVXJoQyxJQUNSRCxPQUFTd2hDLEVBQUt4aEMsS0FBcEIsQ0FLQSxHQUFJb0wsRUFBRXMyQixRQUFVVixHQUFTLE9BQU9qQyxHQUFRanNCLEdBSXBDMUgsRUFBRXMyQixRQUFVVCxJQUNkNzFCLEVBQUVzMkIsTUFBUVAsR0FDVi8xQixFQUFFMDBCLE1BQU0vc0IsT0FDUjNILEVBQUVGLEdBQUd0RixLQUFLLFlBQWFxQixFQUFNQSxFQUFLYixTQUFVZ0YsRUFBRVgsTUFBT1csRUFBRXZFLGNBQ2hEeTZCLEVBQVVyaEMsS0FNVEEsRUFBSW1oQyxJQUNaaDJCLEVBQUVzMkIsTUFBUVAsR0FDVi8xQixFQUFFMDBCLE1BQU0vc0IsY0FDRHV1QixFQUFVcmhDLElBb0JyQixHQVpBOCtCLEdBQVEsV0FDRnlDLEVBQUtFLFFBQVVWLEtBQ2pCUSxFQUFLRSxNQUFRVCxHQUNiTyxFQUFLMUIsTUFBTUUsUUFBUWpDLEVBQU15RCxFQUFLekIsTUFBT3lCLEVBQUtyTCxNQUMxQzRILEVBQUswQyxNQU1UZSxFQUFLRSxNQUFRWCxHQUNiUyxFQUFLdDJCLEdBQUd0RixLQUFLLFFBQVNxQixFQUFNQSxFQUFLYixTQUFVbzdCLEVBQUsvMkIsTUFBTysyQixFQUFLMzZCLE9BQ3hEMjZCLEVBQUtFLFFBQVVYLEdBQW5CLENBS0EsSUFKQVMsRUFBS0UsTUFBUVYsR0FHYlMsRUFBUSxJQUFJMzdCLE1BQU01RSxFQUFJc2dDLEVBQUtDLE1BQU16Z0MsUUFDNUJmLEVBQUksRUFBR3NCLEdBQUssRUFBR3RCLEVBQUlpQixJQUFLakIsR0FDdkJtTCxFQUFJbzJCLEVBQUtDLE1BQU14aEMsR0FBR3lMLE1BQU05RixLQUFLcUIsRUFBTUEsRUFBS2IsU0FBVW83QixFQUFLLzJCLE1BQU8rMkIsRUFBSzM2QixVQUNyRTQ2QixJQUFRbGdDLEdBQUs2SixHQUdqQnEyQixFQUFNemdDLE9BQVNPLEVBQUksR0FHckIsU0FBU3c4QixFQUFLMEMsR0FLWixJQUpBLElBQUk1L0IsRUFBSTQvQixFQUFVZSxFQUFLRyxTQUFXSCxFQUFLSSxLQUFLaDhCLEtBQUssS0FBTTY2QixFQUFVZSxFQUFLRyxXQUFhSCxFQUFLMUIsTUFBTUUsUUFBUWp0QixHQUFPeXVCLEVBQUtFLE1BQVFSLEdBQVEsR0FDOUhqaEMsR0FBSyxFQUNMaUIsRUFBSXVnQyxFQUFNemdDLFNBRUxmLEVBQUlpQixHQUNYdWdDLEVBQU14aEMsR0FBRzJGLEtBQUssS0FBTS9FLEdBSWxCMmdDLEVBQUtFLFFBQVVSLEtBQ2pCTSxFQUFLdDJCLEdBQUd0RixLQUFLLE1BQU9xQixFQUFNQSxFQUFLYixTQUFVbzdCLEVBQUsvMkIsTUFBTysyQixFQUFLMzZCLE9BQzFEa00sS0FJSixTQUFTQSxJQUlQLElBQUssSUFBSTlTLEtBSFR1aEMsRUFBS0UsTUFBUVAsR0FDYkssRUFBSzFCLE1BQU0vc0IsY0FDSnV1QixFQUFVRixHQUNIRSxFQUFXLGNBQ2xCcjZCLEVBQUtzNkIsYUEvRmRELEVBQVVGLEdBQU1JLEVBQ2hCQSxFQUFLMUIsTUFBUUEsR0FFYixTQUFrQlcsR0FDaEJlLEVBQUtFLE1BQVFaLEdBQ2JVLEVBQUsxQixNQUFNRSxRQUFRbHRCLEVBQU8wdUIsRUFBS3pCLE1BQU95QixFQUFLckwsTUFHdkNxTCxFQUFLekIsT0FBU1UsR0FBUzN0QixFQUFNMnRCLEVBQVVlLEVBQUt6QixRQVByQixFQUFHeUIsRUFBS3JMLE1BeENyQzd6QixDQUFPMkUsRUFBTW02QixHQUNYcGhDLEtBQU1BLEVBQ055SyxNQUFPQSxFQUNQNUQsTUFBT0EsRUFDUHFFLEdBQUl5MUIsR0FDSmMsTUFBT2IsR0FDUHpLLEtBQU1rTCxFQUFPbEwsS0FDYjRKLE1BQU9zQixFQUFPdEIsTUFDZDRCLFNBQVVOLEVBQU9NLFNBQ2pCQyxLQUFNUCxFQUFPTyxLQUNiOUIsTUFBTyxLQUNQNEIsTUFBT2IsS0FJSixTQUFTdDlCLEdBQUswRCxFQUFNbTZCLEdBQ3pCLElBQUlTLEVBQVc5c0IsR0FBSTlOLEVBQU1tNkIsR0FDekIsR0FBSVMsRUFBU0gsTUFBUWIsR0FBUyxNQUFNLElBQUkzOUIsTUFBTSwrQkFDOUMsT0FBTzIrQixFQUdGLFNBQVMxdEIsR0FBSWxOLEVBQU1tNkIsR0FDeEIsSUFBSVMsRUFBVzlzQixHQUFJOU4sRUFBTW02QixHQUN6QixHQUFJUyxFQUFTSCxNQUFRWCxHQUFVLE1BQU0sSUFBSTc5QixNQUFNLDZCQUMvQyxPQUFPMitCLEVBR0YsU0FBUzlzQixHQUFJOU4sRUFBTW02QixHQUN4QixJQUFJUyxFQUFXNTZCLEVBQUtzNkIsYUFDcEIsSUFBS00sS0FBY0EsRUFBV0EsRUFBU1QsSUFBTSxNQUFNLElBQUlsK0IsTUFBTSx3QkFDN0QsT0FBTzIrQixFQzlDTSxZQUFTNTZCLEVBQU1qSCxHQUM1QixJQUNJNmhDLEVBQ0FDLEVBRUE3aEMsRUFKQXFoQyxFQUFZcjZCLEVBQUtzNkIsYUFHakJyOEIsR0FBUSxFQUdaLEdBQUtvOEIsRUFBTCxDQUlBLElBQUtyaEMsS0FGTEQsRUFBZSxNQUFSQSxFQUFlLEtBQU9BLEVBQU8sR0FFMUJzaEMsR0FDSE8sRUFBV1AsRUFBVXJoQyxJQUFJRCxPQUFTQSxHQUN2QzhoQyxFQUFTRCxFQUFTSCxNQUFRWCxJQUFZYyxFQUFTSCxNQUFRUixHQUN2RFcsRUFBU0gsTUFBUVAsR0FDakJVLEVBQVMvQixNQUFNL3NCLE9BQ1grdUIsR0FBUUQsRUFBUzMyQixHQUFHdEYsS0FBSyxZQUFhcUIsRUFBTUEsRUFBS2IsU0FBVXk3QixFQUFTcDNCLE1BQU9vM0IsRUFBU2g3QixjQUNqRnk2QixFQUFVcmhDLElBTDhCaUYsR0FBUSxFQVFyREEsVUFBYytCLEVBQUtzNkIsY0MrQ2xCLFNBQVNRLEdBQVc3RCxFQUFZbCtCLEVBQU0wTCxHQUMzQyxJQUFJMDFCLEVBQUtsRCxFQUFXOEQsSUFPcEIsT0FMQTlELEVBQVd2dkIsS0FBSyxXQUNkLElBQUlrekIsRUFBVzF0QixHQUFJNVAsS0FBTTY4QixJQUN4QlMsRUFBU24yQixRQUFVbTJCLEVBQVNuMkIsV0FBYTFMLEdBQVEwTCxFQUFNNkUsTUFBTWhNLEtBQU0rTCxhQUcvRCxTQUFTckosR0FDZCxPQUFPOE4sR0FBSTlOLEVBQU1tNkIsR0FBSTExQixNQUFNMUwsSUMzRWhCLFlBQVMwSCxFQUFHQyxHQUN6QixJQUFJckcsRUFDSixPQUFxQixpQkFBTnFHLEVBQWlCczZCLEdBQzFCdDZCLGFBQWF3WixHQUFRK2dCLElBQ3BCNWdDLEVBQUk2ZixHQUFNeFosS0FBT0EsRUFBSXJHLEVBQUc0Z0MsSUFDekJDLElBQW1CejZCLEVBQUdDLEdDTjlCLElBQUk2RSxHQUFZSyxHQUFVeEcsVUFBVUMsWUNpQnBDLElBQUk4NkIsR0FBSyxFQUVGLFNBQVNnQixHQUFXMzFCLEVBQVFDLEVBQVMxTSxFQUFNb2hDLEdBQ2hENzhCLEtBQUtvSSxRQUFVRixFQUNmbEksS0FBS3FJLFNBQVdGLEVBQ2hCbkksS0FBSzg5QixNQUFRcmlDLEVBQ2J1RSxLQUFLeTlCLElBQU1aLEVBT04sU0FBU2tCLEtBQ2QsUUFBU2xCLEdBR1gsSUFBSW1CLEdBQXNCMTFCLEdBQVV4RyxVQUVwQys3QixHQUFXLzdCLFVBVkksU0FBb0JyRyxHQUNqQyxPQUFPNk0sS0FBWXF4QixXQUFXbCtCLElBU0VxRyxXQUNoQ0MsWUFBYTg3QixHQUNibDBCLE9DcENhLFNBQVNBLEdBQ3RCLElBQUlsTyxFQUFPdUUsS0FBSzg5QixNQUNaakIsRUFBSzc4QixLQUFLeTlCLElBRVEsbUJBQVg5ekIsSUFBdUJBLEVBQVNsSixFQUFTa0osSUFFcEQsSUFBSyxJQUFJekIsRUFBU2xJLEtBQUtvSSxRQUFTdEIsRUFBSW9CLEVBQU96TCxPQUFRbU4sRUFBWSxJQUFJckksTUFBTXVGLEdBQUk5SixFQUFJLEVBQUdBLEVBQUk4SixJQUFLOUosRUFDM0YsSUFBSyxJQUFpRjBGLEVBQU1tSCxFQUFuRnZILEVBQVE0RixFQUFPbEwsR0FBSUwsRUFBSTJGLEVBQU03RixPQUFRcU4sRUFBV0YsRUFBVTVNLEdBQUssSUFBSXVFLE1BQU01RSxHQUFtQmpCLEVBQUksRUFBR0EsRUFBSWlCLElBQUtqQixHQUM5R2dILEVBQU9KLEVBQU01RyxNQUFRbU8sRUFBVUYsRUFBT3RJLEtBQUtxQixFQUFNQSxFQUFLYixTQUFVbkcsRUFBRzRHLE1BQ2xFLGFBQWNJLElBQU1tSCxFQUFRaEksU0FBV2EsRUFBS2IsVUFDaERpSSxFQUFTcE8sR0FBS21PLEVBQ2R5ekIsR0FBU3h6QixFQUFTcE8sR0FBSUQsRUFBTW9oQyxFQUFJbmhDLEVBQUdvTyxFQUFVMEcsR0FBSTlOLEVBQU1tNkIsS0FLN0QsT0FBTyxJQUFJZ0IsR0FBV2owQixFQUFXNUosS0FBS3FJLFNBQVU1TSxFQUFNb2hDLElEcUJ0RDl5QixVRXJDYSxTQUFTSixHQUN0QixJQUFJbE8sRUFBT3VFLEtBQUs4OUIsTUFDWmpCLEVBQUs3OEIsS0FBS3k5QixJQUVRLG1CQUFYOXpCLElBQXVCQSxFQUFTSyxFQUFZTCxJQUV2RCxJQUFLLElBQUl6QixFQUFTbEksS0FBS29JLFFBQVN0QixFQUFJb0IsRUFBT3pMLE9BQVFtTixLQUFnQnpCLEtBQWNuTCxFQUFJLEVBQUdBLEVBQUk4SixJQUFLOUosRUFDL0YsSUFBSyxJQUF5QzBGLEVBQXJDSixFQUFRNEYsRUFBT2xMLEdBQUlMLEVBQUkyRixFQUFNN0YsT0FBY2YsRUFBSSxFQUFHQSxFQUFJaUIsSUFBS2pCLEVBQ2xFLEdBQUlnSCxFQUFPSixFQUFNNUcsR0FBSSxDQUNuQixJQUFLLElBQTJEdUcsRUFBdkRnOEIsRUFBV3QwQixFQUFPdEksS0FBS3FCLEVBQU1BLEVBQUtiLFNBQVVuRyxFQUFHNEcsR0FBZTQ3QixFQUFVMXRCLEdBQUk5TixFQUFNbTZCLEdBQUs5ckIsRUFBSSxFQUFHOE0sRUFBSW9nQixFQUFTeGhDLE9BQVFzVSxFQUFJOE0sSUFBSzlNLEdBQy9IOU8sRUFBUWc4QixFQUFTbHRCLEtBQ25CdXNCLEdBQVNyN0IsRUFBT3hHLEVBQU1vaEMsRUFBSTlyQixFQUFHa3RCLEVBQVVDLEdBRzNDdDBCLEVBQVV4TSxLQUFLNmdDLEdBQ2Y5MUIsRUFBUS9LLEtBQUtzRixHQUtuQixPQUFPLElBQUltN0IsR0FBV2owQixFQUFXekIsRUFBUzFNLEVBQU1vaEMsSUZrQmhENXlCLE9HdkNhLFNBQVNDLEdBQ0QsbUJBQVZBLElBQXNCQSxFQUFRckosRUFBUXFKLElBRWpELElBQUssSUFBSWhDLEVBQVNsSSxLQUFLb0ksUUFBU3RCLEVBQUlvQixFQUFPekwsT0FBUW1OLEVBQVksSUFBSXJJLE1BQU11RixHQUFJOUosRUFBSSxFQUFHQSxFQUFJOEosSUFBSzlKLEVBQzNGLElBQUssSUFBdUUwRixFQUFuRUosRUFBUTRGLEVBQU9sTCxHQUFJTCxFQUFJMkYsRUFBTTdGLE9BQVFxTixFQUFXRixFQUFVNU0sTUFBZXRCLEVBQUksRUFBR0EsRUFBSWlCLElBQUtqQixHQUMzRmdILEVBQU9KLEVBQU01RyxLQUFPd08sRUFBTTdJLEtBQUtxQixFQUFNQSxFQUFLYixTQUFVbkcsRUFBRzRHLElBQzFEd0gsRUFBUzFNLEtBQUtzRixHQUtwQixPQUFPLElBQUltN0IsR0FBV2owQixFQUFXNUosS0FBS3FJLFNBQVVySSxLQUFLODlCLE1BQU85OUIsS0FBS3k5QixNSDZCakUzeUIsTUl6Q2EsU0FBUzZ1QixHQUN0QixHQUFJQSxFQUFXOEQsTUFBUXo5QixLQUFLeTlCLElBQUssTUFBTSxJQUFJOStCLE1BRTNDLElBQUssSUFBSW9NLEVBQVUvSyxLQUFLb0ksUUFBUzRDLEVBQVUydUIsRUFBV3Z4QixRQUFTNkMsRUFBS0YsRUFBUXRPLE9BQVF5TyxFQUFLRixFQUFRdk8sT0FBUXFLLEVBQUlxRSxLQUFLQyxJQUFJSCxFQUFJQyxHQUFLRyxFQUFTLElBQUk5SixNQUFNMEosR0FBS2pPLEVBQUksRUFBR0EsRUFBSThKLElBQUs5SixFQUNySyxJQUFLLElBQW1HMEYsRUFBL0Y0SSxFQUFTUCxFQUFRL04sR0FBSXVPLEVBQVNQLEVBQVFoTyxHQUFJTCxFQUFJMk8sRUFBTzdPLE9BQVFxTyxFQUFRTyxFQUFPck8sR0FBSyxJQUFJdUUsTUFBTTVFLEdBQVVqQixFQUFJLEVBQUdBLEVBQUlpQixJQUFLakIsR0FDeEhnSCxFQUFPNEksRUFBTzVQLElBQU02UCxFQUFPN1AsTUFDN0JvUCxFQUFNcFAsR0FBS2dILEdBS2pCLEtBQU8xRixFQUFJaU8sSUFBTWpPLEVBQ2ZxTyxFQUFPck8sR0FBSytOLEVBQVEvTixHQUd0QixPQUFPLElBQUk2Z0MsR0FBV3h5QixFQUFRckwsS0FBS3FJLFNBQVVySSxLQUFLODlCLE1BQU85OUIsS0FBS3k5QixNSjJCOURuMUIsVUR4Q2EsV0FDYixPQUFPLElBQUlMLEdBQVVqSSxLQUFLb0ksUUFBU3BJLEtBQUtxSSxXQ3dDeENzeEIsV0sxQ2EsV0FLYixJQUpBLElBQUlsK0IsRUFBT3VFLEtBQUs4OUIsTUFDWkssRUFBTW4rQixLQUFLeTlCLElBQ1hXLEVBQU1MLEtBRUQ3MUIsRUFBU2xJLEtBQUtvSSxRQUFTdEIsRUFBSW9CLEVBQU96TCxPQUFRTyxFQUFJLEVBQUdBLEVBQUk4SixJQUFLOUosRUFDakUsSUFBSyxJQUF5QzBGLEVBQXJDSixFQUFRNEYsRUFBT2xMLEdBQUlMLEVBQUkyRixFQUFNN0YsT0FBY2YsRUFBSSxFQUFHQSxFQUFJaUIsSUFBS2pCLEVBQ2xFLEdBQUlnSCxFQUFPSixFQUFNNUcsR0FBSSxDQUNuQixJQUFJd2lDLEVBQVUxdEIsR0FBSTlOLEVBQU15N0IsR0FDeEJiLEdBQVM1NkIsRUFBTWpILEVBQU0yaUMsRUFBSzFpQyxFQUFHNEcsR0FDM0JzdkIsS0FBTXNNLEVBQVF0TSxLQUFPc00sRUFBUTFDLE1BQVEwQyxFQUFRZCxTQUM3QzVCLE1BQU8sRUFDUDRCLFNBQVVjLEVBQVFkLFNBQ2xCQyxLQUFNYSxFQUFRYixPQU10QixPQUFPLElBQUlRLEdBQVczMUIsRUFBUWxJLEtBQUtxSSxTQUFVNU0sRUFBTTJpQyxJTHdCbkQvOEIsS0FBTTI4QixHQUFvQjM4QixLQUMxQjRLLE1BQU8reEIsR0FBb0IveEIsTUFDM0J2SixLQUFNczdCLEdBQW9CdDdCLEtBQzFCeUgsS0FBTTZ6QixHQUFvQjd6QixLQUMxQnhKLE1BQU9xOUIsR0FBb0JyOUIsTUFDM0J5SixLQUFNNHpCLEdBQW9CNXpCLEtBQzFCekQsR00zQmEsU0FBU2xMLEVBQU13SyxHQUM1QixJQUFJNDJCLEVBQUs3OEIsS0FBS3k5QixJQUVkLE9BQU8xeEIsVUFBVXRQLE9BQVMsRUFDcEIrVCxHQUFJeFEsS0FBSzBDLE9BQVFtNkIsR0FBSWwyQixHQUFHQSxHQUFHbEwsR0FDM0J1RSxLQUFLb0ssS0FwQmIsU0FBb0J5eUIsRUFBSXBoQyxFQUFNd0ssR0FDNUIsSUFBSW80QixFQUFLQyxFQUFLQyxFQVRoQixTQUFlOWlDLEdBQ2IsT0FBUUEsRUFBTyxJQUFJb0ksT0FBT0MsTUFBTSxTQUFTc2xCLE1BQU0sU0FBUzlzQixHQUN0RCxJQUFJWixFQUFJWSxFQUFFbUQsUUFBUSxLQUVsQixPQURJL0QsR0FBSyxJQUFHWSxFQUFJQSxFQUFFVyxNQUFNLEVBQUd2QixLQUNuQlksR0FBVyxVQUFOQSxJQUtLaVMsQ0FBTTlTLEdBQVF1RCxHQUFPNFEsR0FDekMsT0FBTyxXQUNMLElBQUkwdEIsRUFBV2lCLEVBQUl2K0IsS0FBTTY4QixHQUNyQmwyQixFQUFLMjJCLEVBQVMzMkIsR0FLZEEsSUFBTzAzQixJQUFNQyxHQUFPRCxFQUFNMTNCLEdBQUlpTCxRQUFRakwsR0FBR2xMLEVBQU13SyxHQUVuRHEzQixFQUFTMzJCLEdBQUsyM0IsR0FTQUUsQ0FBVzNCLEVBQUlwaEMsRUFBTXdLLEtOdUJyQ2lHLEtPY2EsU0FBU3pRLEVBQU0wTCxHQUM1QixJQUFJckgsRUFBV0MsRUFBVXRFLEdBQU9DLEVBQWlCLGNBQWJvRSxFQUEyQmdqQixHQUF1QnNGLEdBQ3RGLE9BQU9wb0IsS0FBS3krQixVQUFVaGpDLEVBQXVCLG1CQUFWMEwsR0FDNUJySCxFQUFTRCxNQWpCbEIsU0FBd0JDLEVBQVVzb0IsRUFBYWpoQixHQUM3QyxJQUFJdTNCLEVBQ0FDLEVBQ0FDLEVBQ0osT0FBTyxXQUNMLElBQUlwdkIsRUFBUXF2QixFQUFTMTNCLEVBQU1uSCxNQUMzQixHQUFjLE1BQVY2K0IsRUFFSixPQURBcnZCLEVBQVN4UCxLQUFLbU0sZUFBZXJNLEVBQVNGLE1BQU9FLEVBQVNELFVBQ3BDZy9CLEVBQVMsS0FDckJydkIsSUFBV2t2QixHQUFXRyxJQUFXRixFQUFVQyxFQUMzQ0EsRUFBZXhXLEVBQVlzVyxFQUFVbHZCLEVBQVFtdkIsRUFBVUUsR0FKN0I3K0IsS0FBS29NLGtCQUFrQnRNLEVBQVNGLE1BQU9FLEVBQVNELFNBcEJwRixTQUFzQnBFLEVBQU0yc0IsRUFBYWpoQixHQUN2QyxJQUFJdTNCLEVBQ0FDLEVBQ0FDLEVBQ0osT0FBTyxXQUNMLElBQUlwdkIsRUFBUXF2QixFQUFTMTNCLEVBQU1uSCxNQUMzQixHQUFjLE1BQVY2K0IsRUFFSixPQURBcnZCLEVBQVN4UCxLQUFLbUUsYUFBYTFJLE1BQ1RvakMsRUFBUyxLQUNyQnJ2QixJQUFXa3ZCLEdBQVdHLElBQVdGLEVBQVVDLEVBQzNDQSxFQUFleFcsRUFBWXNXLEVBQVVsdkIsRUFBUW12QixFQUFVRSxHQUo3QjcrQixLQUFLcU0sZ0JBQWdCNVEsTUF5QkFxRSxFQUFVcEUsRUFBRzhoQyxHQUFXeDlCLEtBQU0sUUFBVXZFLEVBQU0wTCxJQUN0RixNQUFUQSxHQUFpQnJILEVBQVNELE1BNURsQyxTQUFzQkMsR0FDcEIsT0FBTyxXQUNMRSxLQUFLb00sa0JBQWtCdE0sRUFBU0YsTUFBT0UsRUFBU0QsU0FScEQsU0FBb0JwRSxHQUNsQixPQUFPLFdBQ0x1RSxLQUFLcU0sZ0JBQWdCNVEsTUFnRTRDcUUsSUFDNURBLEVBQVNELE1BNUNsQixTQUF3QkMsRUFBVXNvQixFQUFheVcsR0FDN0MsSUFBSUgsRUFDQUUsRUFDSixPQUFPLFdBQ0wsSUFBSXB2QixFQUFTeFAsS0FBS21NLGVBQWVyTSxFQUFTRixNQUFPRSxFQUFTRCxPQUMxRCxPQUFPMlAsSUFBV3F2QixFQUFTLEtBQ3JCcnZCLElBQVdrdkIsRUFBVUUsRUFDckJBLEVBQWV4VyxFQUFZc1csRUFBVWx2QixFQUFRcXZCLEtBbEJ2RCxTQUFzQnBqQyxFQUFNMnNCLEVBQWF5VyxHQUN2QyxJQUFJSCxFQUNBRSxFQUNKLE9BQU8sV0FDTCxJQUFJcHZCLEVBQVN4UCxLQUFLbUUsYUFBYTFJLEdBQy9CLE9BQU8rVCxJQUFXcXZCLEVBQVMsS0FDckJydkIsSUFBV2t2QixFQUFVRSxFQUNyQkEsRUFBZXhXLEVBQVlzVyxFQUFVbHZCLEVBQVFxdkIsTUFnREUvK0IsRUFBVXBFLEVBQUd5TCxFQUFRLE1QbEI1RXMzQixVUTlCYSxTQUFTaGpDLEVBQU0wTCxHQUM1QixJQUFJckUsRUFBTSxRQUFVckgsRUFDcEIsR0FBSXNRLFVBQVV0UCxPQUFTLEVBQUcsT0FBUXFHLEVBQU05QyxLQUFLazlCLE1BQU1wNkIsS0FBU0EsRUFBSWc4QixPQUNoRSxHQUFhLE1BQVQzM0IsRUFBZSxPQUFPbkgsS0FBS2s5QixNQUFNcDZCLEVBQUssTUFDMUMsR0FBcUIsbUJBQVZxRSxFQUFzQixNQUFNLElBQUl4SSxNQUMzQyxJQUFJbUIsRUFBV0MsRUFBVXRFLEdBQ3pCLE9BQU91RSxLQUFLazlCLE1BQU1wNkIsR0FBTWhELEVBQVNELE1BNUJuQyxTQUFxQkMsRUFBVXFILEdBQzdCLFNBQVMrMUIsSUFDUCxJQUFJeDZCLEVBQU8xQyxLQUFNdEUsRUFBSXlMLEVBQU02RSxNQUFNdEosRUFBTXFKLFdBQ3ZDLE9BQU9yUSxHQUFLLFNBQVNZLEdBQ25Cb0csRUFBSzZKLGVBQWV6TSxFQUFTRixNQUFPRSxFQUFTRCxNQUFPbkUsRUFBRVksS0FJMUQsT0FEQTRnQyxFQUFNNEIsT0FBUzMzQixFQUNSKzFCLEdBR1QsU0FBbUJ6aEMsRUFBTTBMLEdBQ3ZCLFNBQVMrMUIsSUFDUCxJQUFJeDZCLEVBQU8xQyxLQUFNdEUsRUFBSXlMLEVBQU02RSxNQUFNdEosRUFBTXFKLFdBQ3ZDLE9BQU9yUSxHQUFLLFNBQVNZLEdBQ25Cb0csRUFBSytDLGFBQWFoSyxFQUFNQyxFQUFFWSxLQUk5QixPQURBNGdDLEVBQU00QixPQUFTMzNCLEVBQ1IrMUIsSUFTMkRwOUIsRUFBVXFILEtSeUI1RTNELE1TTmEsU0FBUy9ILEVBQU0wTCxFQUFPcUYsR0FDbkMsSUFBSTlRLEVBQXFCLGNBQWhCRCxHQUFRLElBQXNCcW5CLEdBQXVCc0YsR0FDOUQsT0FBZ0IsTUFBVGpoQixFQUFnQm5ILEtBQ2QrK0IsV0FBV3RqQyxFQS9DdEIsU0FBcUJBLEVBQU0yc0IsR0FDekIsSUFBSXNXLEVBQ0FDLEVBQ0FDLEVBQ0osT0FBTyxXQUNMLElBQUlwdkIsRUFBU2hNLEVBQU14RCxLQUFNdkUsR0FDckJvakMsR0FBVTcrQixLQUFLd0QsTUFBTWlKLGVBQWVoUixHQUFPK0gsRUFBTXhELEtBQU12RSxJQUMzRCxPQUFPK1QsSUFBV3F2QixFQUFTLEtBQ3JCcnZCLElBQVdrdkIsR0FBV0csSUFBV0YsRUFBVUMsRUFDM0NBLEVBQWV4VyxFQUFZc1csRUFBVWx2QixFQUFRbXZCLEVBQVVFLElBc0NyQ0csQ0FBWXZqQyxFQUFNQyxJQUNuQ2lMLEdBQUcsYUFBZWxMLEVBbkM3QixTQUF3QkEsR0FDdEIsT0FBTyxXQUNMdUUsS0FBS3dELE1BQU1pSixlQUFlaFIsSUFpQ0t3akMsQ0FBZXhqQyxJQUMxQ3VFLEtBQUsrK0IsV0FBV3RqQyxFQUF1QixtQkFBVjBMLEVBbkJyQyxTQUF1QjFMLEVBQU0yc0IsRUFBYWpoQixHQUN4QyxJQUFJdTNCLEVBQ0FDLEVBQ0FDLEVBQ0osT0FBTyxXQUNMLElBQUlwdkIsRUFBU2hNLEVBQU14RCxLQUFNdkUsR0FDckJvakMsRUFBUzEzQixFQUFNbkgsTUFFbkIsT0FEYyxNQUFWNitCLElBQTBCNytCLEtBQUt3RCxNQUFNaUosZUFBZWhSLEdBQXBDb2pDLEVBQTJDcjdCLEVBQU14RCxLQUFNdkUsSUFDcEUrVCxJQUFXcXZCLEVBQVMsS0FDckJydkIsSUFBV2t2QixHQUFXRyxJQUFXRixFQUFVQyxFQUMzQ0EsRUFBZXhXLEVBQVlzVyxFQUFVbHZCLEVBQVFtdkIsRUFBVUUsSUFVckRLLENBQWN6akMsRUFBTUMsRUFBRzhoQyxHQUFXeDlCLEtBQU0sU0FBV3ZFLEVBQU0wTCxJQS9CckUsU0FBdUIxTCxFQUFNMnNCLEVBQWF5VyxHQUN4QyxJQUFJSCxFQUNBRSxFQUNKLE9BQU8sV0FDTCxJQUFJcHZCLEVBQVNoTSxFQUFNeEQsS0FBTXZFLEdBQ3pCLE9BQU8rVCxJQUFXcXZCLEVBQVMsS0FDckJydkIsSUFBV2t2QixFQUFVRSxFQUNyQkEsRUFBZXhXLEVBQVlzVyxFQUFVbHZCLEVBQVFxdkIsSUF5QjNDTSxDQUFjMWpDLEVBQU1DLEVBQUd5TCxFQUFRLElBQUtxRixJVEE5Q3V5QixXVTdDYSxTQUFTdGpDLEVBQU0wTCxFQUFPcUYsR0FDbkMsSUFBSTFKLEVBQU0sVUFBWXJILEdBQVEsSUFDOUIsR0FBSXNRLFVBQVV0UCxPQUFTLEVBQUcsT0FBUXFHLEVBQU05QyxLQUFLazlCLE1BQU1wNkIsS0FBU0EsRUFBSWc4QixPQUNoRSxHQUFhLE1BQVQzM0IsRUFBZSxPQUFPbkgsS0FBS2s5QixNQUFNcDZCLEVBQUssTUFDMUMsR0FBcUIsbUJBQVZxRSxFQUFzQixNQUFNLElBQUl4SSxNQUMzQyxPQUFPcUIsS0FBS2s5QixNQUFNcDZCLEVBaEJwQixTQUFvQnJILEVBQU0wTCxFQUFPcUYsR0FDL0IsU0FBUzB3QixJQUNQLElBQUl4NkIsRUFBTzFDLEtBQU10RSxFQUFJeUwsRUFBTTZFLE1BQU10SixFQUFNcUosV0FDdkMsT0FBT3JRLEdBQUssU0FBU1ksR0FDbkJvRyxFQUFLYyxNQUFNa0osWUFBWWpSLEVBQU1DLEVBQUVZLEdBQUlrUSxJQUl2QyxPQURBMHdCLEVBQU00QixPQUFTMzNCLEVBQ1IrMUIsRUFRZ0I2QixDQUFXdGpDLEVBQU0wTCxFQUFtQixNQUFacUYsRUFBbUIsR0FBS0EsS1Z5Q3ZFcFEsS1cxQ2EsU0FBUytLLEdBQ3RCLE9BQU9uSCxLQUFLazlCLE1BQU0sT0FBeUIsbUJBQVYvMUIsRUFSbkMsU0FBc0JBLEdBQ3BCLE9BQU8sV0FDTCxJQUFJMDNCLEVBQVMxM0IsRUFBTW5ILE1BQ25CQSxLQUFLMkUsWUFBd0IsTUFBVms2QixFQUFpQixHQUFLQSxHQU1yQ08sQ0FBYTVCLEdBQVd4OUIsS0FBTSxPQUFRbUgsSUFmOUMsU0FBc0JBLEdBQ3BCLE9BQU8sV0FDTG5ILEtBQUsyRSxZQUFjd0MsR0FjZms0QixDQUFzQixNQUFUbDRCLEVBQWdCLEdBQUtBLEVBQVEsTVh3Q2hEMUMsT1lsRGEsV0FDYixPQUFPekUsS0FBSzJHLEdBQUcsY0FUT2syQixFQVNzQjc4QixLQUFLeTlCLElBUjFDLFdBQ0wsSUFBSWg4QixFQUFTekIsS0FBS2dGLFdBQ2xCLElBQUssSUFBSXRKLEtBQUtzRSxLQUFLZzlCLGFBQWMsSUFBS3RoQyxJQUFNbWhDLEVBQUksT0FDNUNwN0IsR0FBUUEsRUFBTzRELFlBQVlyRixTQUpuQyxJQUF3QjY4QixHWjJEdEJLLE1IUmEsU0FBU3poQyxFQUFNMEwsR0FDNUIsSUFBSTAxQixFQUFLNzhCLEtBQUt5OUIsSUFJZCxHQUZBaGlDLEdBQVEsR0FFSnNRLFVBQVV0UCxPQUFTLEVBQUcsQ0FFeEIsSUFEQSxJQUNrQ0gsRUFEOUI0Z0MsRUFBUTFzQixHQUFJeFEsS0FBSzBDLE9BQVFtNkIsR0FBSUssTUFDeEJ4aEMsRUFBSSxFQUFHaUIsRUFBSXVnQyxFQUFNemdDLE9BQVdmLEVBQUlpQixJQUFLakIsRUFDNUMsSUFBS1ksRUFBSTRnQyxFQUFNeGhDLElBQUlELE9BQVNBLEVBQzFCLE9BQU9hLEVBQUU2SyxNQUdiLE9BQU8sS0FHVCxPQUFPbkgsS0FBS29LLE1BQWUsTUFBVGpELEVBaEVwQixTQUFxQjAxQixFQUFJcGhDLEdBQ3ZCLElBQUk2akMsRUFBUUMsRUFDWixPQUFPLFdBQ0wsSUFBSWpDLEVBQVcxdEIsR0FBSTVQLEtBQU02OEIsR0FDckJLLEVBQVFJLEVBQVNKLE1BS3JCLEdBQUlBLElBQVVvQyxFQUVaLElBQUssSUFBSTVqQyxFQUFJLEVBQUdpQixHQURoQjRpQyxFQUFTRCxFQUFTcEMsR0FDU3pnQyxPQUFRZixFQUFJaUIsSUFBS2pCLEVBQzFDLEdBQUk2akMsRUFBTzdqQyxHQUFHRCxPQUFTQSxFQUFNLEVBQzNCOGpDLEVBQVNBLEVBQU90aUMsU0FDVHlJLE9BQU9oSyxFQUFHLEdBQ2pCLE1BS040aEMsRUFBU0osTUFBUXFDLElBSXJCLFNBQXVCMUMsRUFBSXBoQyxFQUFNMEwsR0FDL0IsSUFBSW00QixFQUFRQyxFQUNaLEdBQXFCLG1CQUFWcDRCLEVBQXNCLE1BQU0sSUFBSXhJLE1BQzNDLE9BQU8sV0FDTCxJQUFJMitCLEVBQVcxdEIsR0FBSTVQLEtBQU02OEIsR0FDckJLLEVBQVFJLEVBQVNKLE1BS3JCLEdBQUlBLElBQVVvQyxFQUFRLENBQ3BCQyxHQUFVRCxFQUFTcEMsR0FBT2pnQyxRQUMxQixJQUFLLElBQUlYLEdBQUtiLEtBQU1BLEVBQU0wTCxNQUFPQSxHQUFRekwsRUFBSSxFQUFHaUIsRUFBSTRpQyxFQUFPOWlDLE9BQVFmLEVBQUlpQixJQUFLakIsRUFDMUUsR0FBSTZqQyxFQUFPN2pDLEdBQUdELE9BQVNBLEVBQU0sQ0FDM0I4akMsRUFBTzdqQyxHQUFLWSxFQUNaLE1BR0FaLElBQU1pQixHQUFHNGlDLEVBQU9uaUMsS0FBS2QsR0FHM0JnaEMsRUFBU0osTUFBUXFDLEtBbUI0QzFDLEVBQUlwaEMsRUFBTTBMLEtHTnpFcTBCLE1hOUNhLFNBQVNyMEIsR0FDdEIsSUFBSTAxQixFQUFLNzhCLEtBQUt5OUIsSUFFZCxPQUFPMXhCLFVBQVV0UCxPQUNYdUQsS0FBS29LLE1BQXVCLG1CQUFWakQsRUFoQjFCLFNBQXVCMDFCLEVBQUkxMUIsR0FDekIsT0FBTyxXQUNMbkksR0FBS2dCLEtBQU02OEIsR0FBSXJCLE9BQVNyMEIsRUFBTTZFLE1BQU1oTSxLQUFNK0wsYUFJOUMsU0FBdUI4d0IsRUFBSTExQixHQUN6QixPQUFPQSxHQUFTQSxFQUFPLFdBQ3JCbkksR0FBS2dCLEtBQU02OEIsR0FBSXJCLE1BQVFyMEIsS0FVQTAxQixFQUFJMTFCLElBQ3ZCcUosR0FBSXhRLEtBQUswQyxPQUFRbTZCLEdBQUlyQixPYndDM0I0QixTYy9DYSxTQUFTajJCLEdBQ3RCLElBQUkwMUIsRUFBSzc4QixLQUFLeTlCLElBRWQsT0FBTzF4QixVQUFVdFAsT0FDWHVELEtBQUtvSyxNQUF1QixtQkFBVmpELEVBaEIxQixTQUEwQjAxQixFQUFJMTFCLEdBQzVCLE9BQU8sV0FDTHlJLEdBQUk1UCxLQUFNNjhCLEdBQUlPLFVBQVlqMkIsRUFBTTZFLE1BQU1oTSxLQUFNK0wsYUFJaEQsU0FBMEI4d0IsRUFBSTExQixHQUM1QixPQUFPQSxHQUFTQSxFQUFPLFdBQ3JCeUksR0FBSTVQLEtBQU02OEIsR0FBSU8sU0FBV2oyQixLQVVDMDFCLEVBQUkxMUIsSUFDMUJxSixHQUFJeFEsS0FBSzBDLE9BQVFtNkIsR0FBSU8sVWR5QzNCQyxLZXJEYSxTQUFTbDJCLEdBQ3RCLElBQUkwMUIsRUFBSzc4QixLQUFLeTlCLElBRWQsT0FBTzF4QixVQUFVdFAsT0FDWHVELEtBQUtvSyxLQVhiLFNBQXNCeXlCLEVBQUkxMUIsR0FDeEIsR0FBcUIsbUJBQVZBLEVBQXNCLE1BQU0sSUFBSXhJLE1BQzNDLE9BQU8sV0FDTGlSLEdBQUk1UCxLQUFNNjhCLEdBQUlRLEtBQU9sMkIsR0FRUHE0QixDQUFhM0MsRUFBSTExQixJQUMzQnFKLEdBQUl4USxLQUFLMEMsT0FBUW02QixHQUFJUSxPQ2RwQmx5QixLQUFLb1QsR0NBQXBULEtBQUtvVCxPQ0tma2hCLElBQ0Y3TixLQUFNLEtBQ040SixNQUFPLEVBQ1A0QixTQUFVLElBQ1ZDLEtDREssU0FBb0IvZ0MsR0FDekIsUUFBU0EsR0FBSyxJQUFNLEVBQUlBLEVBQUlBLEVBQUlBLEdBQUtBLEdBQUssR0FBS0EsRUFBSUEsRUFBSSxHQUFLLElERzlELFNBQVM0aEMsR0FBUXg3QixFQUFNbTZCLEdBRXJCLElBREEsSUFBSUMsSUFDS0EsRUFBU3A2QixFQUFLczZCLGlCQUFtQkYsRUFBU0EsRUFBT0QsS0FDeEQsS0FBTW42QixFQUFPQSxFQUFLc0MsWUFDaEIsT0FBT3k2QixHQUFjN04sS0FBT21KLEtBQU8wRSxHQUd2QyxPQUFPM0MsRUVuQk0sWUFBU2gwQixHQUN0QixPQUFPLFdBQ0wsT0FBT0EsR0NBSixTQUFTNDJCLEtBQ2Q3NUIsRUFBTW8wQiwyQkFHTyxjQUNicDBCLEVBQU1tMEIsaUJBQ05uMEIsRUFBTW8wQiwyQkNKUjN4QixHQUFVeEcsVUFBVTY5QixVQ0ZMLFNBQVNsa0MsR0FDdEIsT0FBT3VFLEtBQUtvSyxLQUFLLFdBQ2Z1MUIsR0FBVTMvQixLQUFNdkUsTURDcEI2TSxHQUFVeEcsVUFBVTYzQixXSmlCTCxTQUFTbCtCLEdBQ3RCLElBQUlvaEMsRUFDQUMsRUFFQXJoQyxhQUFnQm9pQyxJQUNsQmhCLEVBQUtwaEMsRUFBS2dpQyxJQUFLaGlDLEVBQU9BLEVBQUtxaUMsUUFFM0JqQixFQUFLa0IsTUFBVWpCLEVBQVMyQyxJQUFlN04sS0FBT21KLEtBQU90L0IsRUFBZSxNQUFSQSxFQUFlLEtBQU9BLEVBQU8sSUFHM0YsSUFBSyxJQUFJeU0sRUFBU2xJLEtBQUtvSSxRQUFTdEIsRUFBSW9CLEVBQU96TCxPQUFRTyxFQUFJLEVBQUdBLEVBQUk4SixJQUFLOUosRUFDakUsSUFBSyxJQUF5QzBGLEVBQXJDSixFQUFRNEYsRUFBT2xMLEdBQUlMLEVBQUkyRixFQUFNN0YsT0FBY2YsRUFBSSxFQUFHQSxFQUFJaUIsSUFBS2pCLEdBQzlEZ0gsRUFBT0osRUFBTTVHLEtBQ2Y0aEMsR0FBUzU2QixFQUFNakgsRUFBTW9oQyxFQUFJbmhDLEVBQUc0RyxFQUFPdzZCLEdBQVVvQixHQUFReDdCLEVBQU1tNkIsSUFLakUsT0FBTyxJQUFJZ0IsR0FBVzMxQixFQUFRbEksS0FBS3FJLFNBQVU1TSxFQUFNb2hDLElNL0JyRCxJQUFJK0MsSUFBYW5rQyxLQUFNLFFBQ25Cb2tDLElBQWNwa0MsS0FBTSxTQUNwQnFrQyxJQUFlcmtDLEtBQU0sVUFDckJza0MsSUFBZXRrQyxLQUFNLFVBRXJCc3FCLElBQ0Z0cUIsS0FBTSxJQUNOdWtDLFNBQVUsSUFBSyxLQUFLeGtDLElBQUl1TCxJQUN4QmhJLE1BQU8sU0FBUytKLEVBQUc4WixHQUFLLE9BQU85WixLQUFPQSxFQUFFLEdBQUk4WixFQUFFLEdBQUcsS0FBTTlaLEVBQUUsR0FBSThaLEVBQUUsR0FBRyxNQUNsRXVGLE9BQVEsU0FBUzhYLEdBQU0sT0FBT0EsSUFBT0EsRUFBRyxHQUFHLEdBQUlBLEVBQUcsR0FBRyxNQUduRC9NLElBQ0Z6M0IsS0FBTSxJQUNOdWtDLFNBQVUsSUFBSyxLQUFLeGtDLElBQUl1TCxJQUN4QmhJLE1BQU8sU0FBU2lLLEVBQUc0WixHQUFLLE9BQU81WixLQUFPNFosRUFBRSxHQUFHLEdBQUk1WixFQUFFLEtBQU00WixFQUFFLEdBQUcsR0FBSTVaLEVBQUUsTUFDbEVtZixPQUFRLFNBQVM4WCxHQUFNLE9BQU9BLElBQU9BLEVBQUcsR0FBRyxHQUFJQSxFQUFHLEdBQUcsTUFHbkRDLElBQ0Z6a0MsS0FBTSxLQUNOdWtDLFNBQVUsSUFBSyxJQUFLLElBQUssSUFBSyxLQUFNLEtBQU0sS0FBTSxNQUFNeGtDLElBQUl1TCxJQUMxRGhJLE1BQU8sU0FBU2toQyxHQUFNLE9BQU9BLEdBQzdCOVgsT0FBUSxTQUFTOFgsR0FBTSxPQUFPQSxJQUc1QkUsSUFDRkMsUUFBUyxZQUNUOTNCLFVBQVcsT0FDWDNMLEVBQUcsWUFDSGltQixFQUFHLFlBQ0hoRixFQUFHLFlBQ0hxUCxFQUFHLFlBQ0hvVCxHQUFJLGNBQ0pDLEdBQUksY0FDSkMsR0FBSSxjQUNKQyxHQUFJLGVBR0ZDLElBQ0Y3ZCxFQUFHLElBQ0hxSyxFQUFHLElBQ0hvVCxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLE1BR0ZFLElBQ0YvakMsRUFBRyxJQUNIaWhCLEVBQUcsSUFDSHlpQixHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLE1BR0ZHLElBQ0ZQLFFBQVMsRUFDVDkzQixVQUFXLEVBQ1gzTCxFQUFHLEtBQ0hpbUIsRUFBRyxFQUNIaEYsRUFBRyxLQUNIcVAsR0FBSSxFQUNKb1QsSUFBSyxFQUNMQyxHQUFJLEVBQ0pDLEdBQUksRUFDSkMsSUFBSyxHQUdISSxJQUNGUixRQUFTLEVBQ1Q5M0IsVUFBVyxFQUNYM0wsR0FBSSxFQUNKaW1CLEVBQUcsS0FDSGhGLEVBQUcsRUFDSHFQLEVBQUcsS0FDSG9ULElBQUssRUFDTEMsSUFBSyxFQUNMQyxHQUFJLEVBQ0pDLEdBQUksR0FHTixTQUFTejVCLEdBQUt6SyxHQUNaLE9BQVF5SyxLQUFNekssR0FJaEIsU0FBU3VrQyxLQUNQLE9BQVFoN0IsRUFBTWk3QixPQUdoQixTQUFTQyxLQUNQLElBQUkzaEMsRUFBTVksS0FBSzJJLGlCQUFtQjNJLEtBQ2xDLFFBQVMsRUFBRyxJQUFLWixFQUFJbW1CLE1BQU0zQixRQUFRemMsTUFBTy9ILEVBQUk0aEMsT0FBT3BkLFFBQVF6YyxRQUkvRCxTQUFTdEgsR0FBTTZDLEdBQ2IsTUFBUUEsRUFBS3UrQixTQUFTLEtBQU12K0IsRUFBT0EsRUFBS3NDLFlBQWEsT0FDckQsT0FBT3RDLEVBQUt1K0IsUUFHZCxTQUFTdGdDLEdBQU11Z0MsR0FDYixPQUFPQSxFQUFPLEdBQUcsS0FBT0EsRUFBTyxHQUFHLElBQzNCQSxFQUFPLEdBQUcsS0FBT0EsRUFBTyxHQUFHLEdBZ0JyQixjQUNiLE9BR0YsU0FBZUMsR0FDYixJQUlJQyxFQUpBRixFQUFTSCxHQUNUOTJCLEVBQVM0MkIsR0FDVFEsRUFBWS96QixHQUFTZzBCLEVBQU8sUUFBUyxRQUFTLE9BQzlDQyxFQUFhLEVBR2pCLFNBQVNELEVBQU1oL0IsR0FDYixJQUFJODlCLEVBQVU5OUIsRUFDVHFLLFNBQVMsVUFBVzYwQixHQUN0QnozQixVQUFVLFlBQ1Z0SCxNQUFNc0UsR0FBSyxhQUVkcTVCLEVBQVE3OUIsUUFBUXVLLE9BQU8sUUFDbEJaLEtBQUssUUFBUyxXQUNkQSxLQUFLLGlCQUFrQixPQUN2QkEsS0FBSyxTQUFVaTBCLEdBQVFDLFNBQ3pCdDFCLE1BQU1zMUIsR0FDSmgyQixLQUFLLFdBQ0osSUFBSTgyQixFQUFTcmhDLEdBQU1HLE1BQU1raEMsT0FDekJ2M0IsR0FBTzNKLE1BQ0ZrTSxLQUFLLElBQUtnMUIsRUFBTyxHQUFHLElBQ3BCaDFCLEtBQUssSUFBS2cxQixFQUFPLEdBQUcsSUFDcEJoMUIsS0FBSyxRQUFTZzFCLEVBQU8sR0FBRyxHQUFLQSxFQUFPLEdBQUcsSUFDdkNoMUIsS0FBSyxTQUFVZzFCLEVBQU8sR0FBRyxHQUFLQSxFQUFPLEdBQUcsTUFHbkQ1K0IsRUFBTXlILFVBQVUsY0FDYnRILE1BQU1zRSxHQUFLLGVBQ1h4RSxRQUFRdUssT0FBTyxRQUNiWixLQUFLLFFBQVMsYUFDZEEsS0FBSyxTQUFVaTBCLEdBQVE3M0IsV0FDdkI0RCxLQUFLLE9BQVEsUUFDYkEsS0FBSyxlQUFnQixJQUNyQkEsS0FBSyxTQUFVLFFBQ2ZBLEtBQUssa0JBQW1CLGNBRTdCLElBQUl1MUIsRUFBU24vQixFQUFNeUgsVUFBVSxXQUMxQnRILEtBQUswK0IsRUFBSW5CLFFBQVMsU0FBUzM0QixHQUFLLE9BQU9BLEVBQUVOLE9BRTVDMDZCLEVBQU9qL0IsT0FBT2lDLFNBRWRnOUIsRUFBT2wvQixRQUFRdUssT0FBTyxRQUNqQlosS0FBSyxRQUFTLFNBQVM3RSxHQUFLLE1BQU8sa0JBQW9CQSxFQUFFTixPQUN6RG1GLEtBQUssU0FBVSxTQUFTN0UsR0FBSyxPQUFPODRCLEdBQVE5NEIsRUFBRU4sUUFFbkR6RSxFQUNLOEgsS0FBS3MzQixHQUNMeDFCLEtBQUssT0FBUSxRQUNiQSxLQUFLLGlCQUFrQixPQUN2QjFJLE1BQU0sOEJBQStCLGlCQUNyQ21ELEdBQUcsbUNBQW9DZzdCLEdBeUM5QyxTQUFTRCxJQUNQLElBQUlwL0IsRUFBUXFILEdBQU8zSixNQUNmc0ksRUFBWXpJLEdBQU1HLE1BQU1zSSxVQUV4QkEsR0FDRmhHLEVBQU15SCxVQUFVLGNBQ1h2RyxNQUFNLFVBQVcsTUFDakIwSSxLQUFLLElBQUs1RCxFQUFVLEdBQUcsSUFDdkI0RCxLQUFLLElBQUs1RCxFQUFVLEdBQUcsSUFDdkI0RCxLQUFLLFFBQVM1RCxFQUFVLEdBQUcsR0FBS0EsRUFBVSxHQUFHLElBQzdDNEQsS0FBSyxTQUFVNUQsRUFBVSxHQUFHLEdBQUtBLEVBQVUsR0FBRyxJQUVuRGhHLEVBQU15SCxVQUFVLFdBQ1h2RyxNQUFNLFVBQVcsTUFDakIwSSxLQUFLLElBQUssU0FBUzdFLEdBQUssTUFBcUMsTUFBOUJBLEVBQUVOLEtBQUtNLEVBQUVOLEtBQUt0SyxPQUFTLEdBQWE2TCxFQUFVLEdBQUcsR0FBS2k1QixFQUFhLEVBQUlqNUIsRUFBVSxHQUFHLEdBQUtpNUIsRUFBYSxJQUNySXIxQixLQUFLLElBQUssU0FBUzdFLEdBQUssTUFBcUIsTUFBZEEsRUFBRU4sS0FBSyxHQUFhdUIsRUFBVSxHQUFHLEdBQUtpNUIsRUFBYSxFQUFJajVCLEVBQVUsR0FBRyxHQUFLaTVCLEVBQWEsSUFDckhyMUIsS0FBSyxRQUFTLFNBQVM3RSxHQUFLLE1BQWtCLE1BQVhBLEVBQUVOLE1BQTJCLE1BQVhNLEVBQUVOLEtBQWV1QixFQUFVLEdBQUcsR0FBS0EsRUFBVSxHQUFHLEdBQUtpNUIsRUFBYUEsSUFDdkhyMUIsS0FBSyxTQUFVLFNBQVM3RSxHQUFLLE1BQWtCLE1BQVhBLEVBQUVOLE1BQTJCLE1BQVhNLEVBQUVOLEtBQWV1QixFQUFVLEdBQUcsR0FBS0EsRUFBVSxHQUFHLEdBQUtpNUIsRUFBYUEsS0FJN0hqL0IsRUFBTXlILFVBQVUsc0JBQ1h2RyxNQUFNLFVBQVcsUUFDakIwSSxLQUFLLElBQUssTUFDVkEsS0FBSyxJQUFLLE1BQ1ZBLEtBQUssUUFBUyxNQUNkQSxLQUFLLFNBQVUsTUFJeEIsU0FBUzAxQixFQUFROUosRUFBTXNDLEdBQ3JCLE9BQU90QyxFQUFLbUosUUFBUVcsU0FBVyxJQUFJQyxFQUFRL0osRUFBTXNDLEdBR25ELFNBQVN5SCxFQUFRL0osRUFBTXNDLEdBQ3JCcDZCLEtBQUs4M0IsS0FBT0EsRUFDWjkzQixLQUFLbzZCLEtBQU9BLEVBQ1pwNkIsS0FBS205QixNQUFRckYsRUFBS21KLFFBQ2xCamhDLEtBQUt1OUIsT0FBUyxFQXlCaEIsU0FBU29FLElBQ1AsR0FBSTk3QixFQUFNaThCLFNBQVcsR0FBSWo4QixFQUFNNkMsZUFBZWpNLE9BQVNvSixFQUFNaThCLFFBQVFybEMsT0FBUSxPQUFPc2xDLFVBQy9FLEdBQUlYLEVBQWEsT0FDdEIsR0FBS24zQixFQUFPK0IsTUFBTWhNLEtBQU0rTCxXQUF4QixDQUVBLElBUXNCaTJCLEVBQUlDLEVBQ0pDLEVBQUlDLEVBQ0pDLEVBQUlDLEVBQ0pwSyxFQUFJQyxFQUN0QmhDLEVBQ0FDLEVBQ0FtTSxFQUVBQyxFQUNBQyxFQWpCQTFLLEVBQU85M0IsS0FDUCtHLEVBQU9sQixFQUFNNDhCLE9BQU81Z0MsU0FBU2tGLEtBQzdCMjdCLEVBQXFELGVBQTdDNzhCLEVBQU04OEIsUUFBVTU3QixFQUFPLFVBQVlBLEdBQXdCNjRCLEdBQWEvNUIsRUFBTSs4QixPQUFTN0MsR0FBY0QsR0FDN0crQyxFQUFRMUIsSUFBUWpPLEdBQUksS0FBT3lOLEdBQU81NUIsR0FDbEMrN0IsRUFBUTNCLElBQVFwYixHQUFJLEtBQU82YSxHQUFPNzVCLEdBQ2xDbzJCLEVBQVF0OUIsR0FBTWk0QixHQUNkb0osRUFBUy9ELEVBQU0rRCxPQUNmNTRCLEVBQVk2MEIsRUFBTTcwQixVQUNsQm1sQixFQUFJeVQsRUFBTyxHQUFHLEdBQ2Qxa0MsRUFBSTBrQyxFQUFPLEdBQUcsR0FDZGxoQixFQUFJa2hCLEVBQU8sR0FBRyxHQUNkblYsRUFBSW1WLEVBQU8sR0FBRyxHQUlkNkIsRUFBV0YsR0FBU0MsR0FBU2o5QixFQUFNbTlCLFNBR25DQyxFQUFTQyxHQUFNcEwsR0FDZmp2QixFQUFRbzZCLEVBQ1JFLEVBQU92QixFQUFROUosRUFBTS9yQixXQUFXcTNCLGNBRXZCLFlBQVRyOEIsRUFDRm8yQixFQUFNNzBCLFVBQVlBLElBQ2YwNUIsRUFBS2IsSUFBUWpPLEdBQUl6RixFQUFJd1YsRUFBTyxHQUFJZixFQUFLZixJQUFRcGIsR0FBSXZwQixFQUFJeW1DLEVBQU8sS0FDNURiLEVBQUtqQixJQUFRak8sR0FBSWxULEVBQUlnaUIsRUFBSS9KLEVBQUtrSixJQUFRcGIsR0FBSWdHLEVBQUltVyxLQUdqREYsRUFBSzE1QixFQUFVLEdBQUcsR0FDbEI0NUIsRUFBSzU1QixFQUFVLEdBQUcsR0FDbEI4NUIsRUFBSzk1QixFQUFVLEdBQUcsR0FDbEIydkIsRUFBSzN2QixFQUFVLEdBQUcsSUFHcEIyNUIsRUFBS0QsRUFDTEcsRUFBS0QsRUFDTEcsRUFBS0QsRUFDTGxLLEVBQUtELEVBRUwsSUFBSTMxQixFQUFRcUgsR0FBT211QixHQUNkNXJCLEtBQUssaUJBQWtCLFFBRXhCazBCLEVBQVU5OUIsRUFBTXlILFVBQVUsWUFDekJtQyxLQUFLLFNBQVVpMEIsR0FBUXA1QixJQUU1QixHQUFJbEIsRUFBTWk4QixRQUNSeC9CLEVBQ0txRSxHQUFHLGtCQUFtQjA4QixHQUFPLEdBQzdCMThCLEdBQUcsbUNBQW9DMjhCLEdBQU8sT0FDOUMsQ0FDTCxJQUFJQyxFQUFPNTVCLEdBQU85RCxFQUFNMDlCLE1BQ25CNThCLEdBQUcsZ0JBa0dWLFdBQ0UsT0FBUWQsRUFBTTI5QixTQUNaLEtBQUssR0FDSFQsRUFBV0YsR0FBU0MsRUFDcEIsTUFFRixLQUFLLEdBQ0NKLElBQVM1QyxLQUNQK0MsSUFBT1QsRUFBS0MsRUFBS25NLEVBQUsyTSxFQUFPYixFQUFLQyxFQUFLL0wsRUFBSzJNLEdBQzVDQyxJQUFPN0ssRUFBS0MsRUFBSy9CLEVBQUsyTSxFQUFPWixFQUFLQyxFQUFLaE0sRUFBSzJNLEdBQ2hESixFQUFPM0MsR0FDUDBELEtBRUYsTUFFRixLQUFLLEdBQ0NmLElBQVM1QyxJQUFlNEMsSUFBUzNDLEtBQy9COEMsRUFBUSxFQUFHVCxFQUFLQyxFQUFLbk0sRUFBYTJNLEVBQVEsSUFBR2IsRUFBS0MsRUFBSy9MLEdBQ3ZENE0sRUFBUSxFQUFHN0ssRUFBS0MsRUFBSy9CLEVBQWEyTSxFQUFRLElBQUdaLEVBQUtDLEVBQUtoTSxHQUMzRHVNLEVBQU83QyxHQUNQTyxFQUFRbDBCLEtBQUssU0FBVWkwQixHQUFRNzNCLFdBQy9CbTdCLEtBRUYsTUFFRixRQUFTLE9BRVgxQixPQTdIb0MsR0FDL0JwN0IsR0FBRyxjQStIVixXQUNFLE9BQVFkLEVBQU0yOUIsU0FDWixLQUFLLEdBQ0NULElBQ0ZSLEVBQVFDLEVBQVFPLEdBQVcsRUFDM0JVLEtBRUYsTUFFRixLQUFLLEdBQ0NmLElBQVMzQyxLQUNQOEMsRUFBUSxFQUFHVCxFQUFLQyxFQUFhUSxFQUFRLElBQUdiLEVBQUtDLEdBQzdDYSxFQUFRLEVBQUc3SyxFQUFLQyxFQUFhNEssRUFBUSxJQUFHWixFQUFLQyxHQUNqRE8sRUFBTzVDLEdBQ1AyRCxLQUVGLE1BRUYsS0FBSyxHQUNDZixJQUFTN0MsS0FDUGg2QixFQUFNKzhCLFFBQ0pDLElBQU9ULEVBQUtDLEVBQUtuTSxFQUFLMk0sRUFBT2IsRUFBS0MsRUFBSy9MLEVBQUsyTSxHQUM1Q0MsSUFBTzdLLEVBQUtDLEVBQUsvQixFQUFLMk0sRUFBT1osRUFBS0MsRUFBS2hNLEVBQUsyTSxHQUNoREosRUFBTzNDLEtBRUg4QyxFQUFRLEVBQUdULEVBQUtDLEVBQWFRLEVBQVEsSUFBR2IsRUFBS0MsR0FDN0NhLEVBQVEsRUFBRzdLLEVBQUtDLEVBQWE0SyxFQUFRLElBQUdaLEVBQUtDLEdBQ2pETyxFQUFPNUMsSUFFVE0sRUFBUWwwQixLQUFLLFNBQVVpMEIsR0FBUXA1QixJQUMvQjA4QixLQUVGLE1BRUYsUUFBUyxPQUVYMUIsT0FuS2lDLEdBQzVCcDdCLEdBQUcsa0JBQW1CMDhCLEdBQU8sR0FDN0IxOEIsR0FBRyxnQkFBaUIyOEIsR0FBTyxJQ3pWdkIsU0FBU0MsR0FDdEIsSUFBSXY3QixFQUFPdTdCLEVBQUtwakMsU0FBU0csZ0JBQ3JCZ0ksRUFBWXFCLEdBQU80NUIsR0FBTTU4QixHQUFHLGlCQUFrQm83QixJQUFTLEdBQ3ZELGtCQUFtQi81QixFQUNyQk0sRUFBVTNCLEdBQUcsbUJBQW9CbzdCLElBQVMsSUFFMUMvNUIsRUFBSzA3QixXQUFhMTdCLEVBQUt4RSxNQUFNbWdDLGNBQzdCMzdCLEVBQUt4RSxNQUFNbWdDLGNBQWdCLFFEb1Z6QkMsQ0FBWS85QixFQUFNMDlCLE1BR3BCN0QsS0FDQUMsR0FBVTdILEdBQ1Y0SixFQUFPcmdDLEtBQUt5MkIsR0FDWnFMLEVBQUs1MEIsUUFFTCxTQUFTODBCLElBQ1AsSUFBSVEsRUFBU1gsR0FBTXBMLElBQ2ZpTCxHQUFhUixHQUFVQyxJQUNyQnIzQixLQUFLMlosSUFBSStlLEVBQU8sR0FBS2g3QixFQUFNLElBQU1zQyxLQUFLMlosSUFBSStlLEVBQU8sR0FBS2g3QixFQUFNLElBQUsyNUIsR0FBUSxFQUN4RUQsR0FBUSxHQUVmMTVCLEVBQVFnN0IsRUFDUnZCLEdBQVMsRUFDVFAsS0FDQTBCLElBR0YsU0FBU0EsSUFDUCxJQUFJbm5DLEVBS0osT0FIQTQ1QixFQUFLcnRCLEVBQU0sR0FBS282QixFQUFPLEdBQ3ZCOU0sRUFBS3R0QixFQUFNLEdBQUtvNkIsRUFBTyxHQUVmUCxHQUNOLEtBQUs3QyxHQUNMLEtBQUtELEdBQ0NpRCxJQUFPM00sRUFBSy9xQixLQUFLbUQsSUFBSW1mLEVBQUl1VSxFQUFJNzJCLEtBQUtDLElBQUk0VSxFQUFJb2lCLEVBQUlsTSxJQUFNK0wsRUFBS0QsRUFBSzlMLEVBQUltTSxFQUFLRCxFQUFLbE0sR0FDNUU0TSxJQUFPM00sRUFBS2hyQixLQUFLbUQsSUFBSTlSLEVBQUkwbEMsRUFBSS8yQixLQUFLQyxJQUFJMmdCLEVBQUlrTSxFQUFJOUIsSUFBTWdNLEVBQUtELEVBQUsvTCxFQUFJK0IsRUFBS0QsRUFBSzlCLEdBQ2hGLE1BRUYsS0FBSzJKLEdBQ0MrQyxFQUFRLEdBQUczTSxFQUFLL3FCLEtBQUttRCxJQUFJbWYsRUFBSXVVLEVBQUk3MkIsS0FBS0MsSUFBSTRVLEVBQUlnaUIsRUFBSTlMLElBQU0rTCxFQUFLRCxFQUFLOUwsRUFBSW1NLEVBQUtELEdBQ3RFUyxFQUFRLElBQUczTSxFQUFLL3FCLEtBQUttRCxJQUFJbWYsRUFBSTJVLEVBQUlqM0IsS0FBS0MsSUFBSTRVLEVBQUlvaUIsRUFBSWxNLElBQU0rTCxFQUFLRCxFQUFJSyxFQUFLRCxFQUFLbE0sR0FDaEY0TSxFQUFRLEdBQUczTSxFQUFLaHJCLEtBQUttRCxJQUFJOVIsRUFBSTBsQyxFQUFJLzJCLEtBQUtDLElBQUkyZ0IsRUFBSW1XLEVBQUkvTCxJQUFNZ00sRUFBS0QsRUFBSy9MLEVBQUkrQixFQUFLRCxHQUN0RTZLLEVBQVEsSUFBRzNNLEVBQUtockIsS0FBS21ELElBQUk5UixFQUFJeTdCLEVBQUk5c0IsS0FBS0MsSUFBSTJnQixFQUFJa00sRUFBSTlCLElBQU1nTSxFQUFLRCxFQUFJaEssRUFBS0QsRUFBSzlCLEdBQ3BGLE1BRUYsS0FBSzRKLEdBQ0M4QyxJQUFPWixFQUFLOTJCLEtBQUttRCxJQUFJbWYsRUFBR3RpQixLQUFLQyxJQUFJNFUsRUFBR2dpQixFQUFLOUwsRUFBSzJNLElBQVNSLEVBQUtsM0IsS0FBS21ELElBQUltZixFQUFHdGlCLEtBQUtDLElBQUk0VSxFQUFHb2lCLEVBQUtsTSxFQUFLMk0sS0FDOUZDLElBQU9YLEVBQUtoM0IsS0FBS21ELElBQUk5UixFQUFHMk8sS0FBS0MsSUFBSTJnQixFQUFHbVcsRUFBSy9MLEVBQUsyTSxJQUFTNUssRUFBSy9zQixLQUFLbUQsSUFBSTlSLEVBQUcyTyxLQUFLQyxJQUFJMmdCLEVBQUdrTSxFQUFLOUIsRUFBSzJNLEtBS2xHVCxFQUFLSixJQUNQWSxJQUFVLEVBQ1Z2bUMsRUFBSTBsQyxFQUFJQSxFQUFLSSxFQUFJQSxFQUFLOWxDLEVBQ3RCQSxFQUFJMmxDLEVBQUlBLEVBQUtJLEVBQUlBLEVBQUsvbEMsRUFDbEJ5SyxLQUFRMDVCLElBQU9MLEVBQVFsMEIsS0FBSyxTQUFVaTBCLEdBQVFwNUIsRUFBTzA1QixHQUFNMTVCLE1BRzdEbXhCLEVBQUtpSyxJQUNQVyxJQUFVLEVBQ1Z4bUMsRUFBSTRsQyxFQUFJQSxFQUFLakssRUFBSUEsRUFBSzM3QixFQUN0QkEsRUFBSTZsQyxFQUFJQSxFQUFLakssRUFBSUEsRUFBSzU3QixFQUNsQnlLLEtBQVEyNUIsSUFBT04sRUFBUWwwQixLQUFLLFNBQVVpMEIsR0FBUXA1QixFQUFPMjVCLEdBQU0zNUIsTUFHN0RvMkIsRUFBTTcwQixZQUFXQSxFQUFZNjBCLEVBQU03MEIsV0FDbkNpNkIsSUFBT04sRUFBSzM1QixFQUFVLEdBQUcsR0FBSSs1QixFQUFLLzVCLEVBQVUsR0FBRyxJQUMvQ2s2QixJQUFPTCxFQUFLNzVCLEVBQVUsR0FBRyxHQUFJNHZCLEVBQUs1dkIsRUFBVSxHQUFHLElBRS9DQSxFQUFVLEdBQUcsS0FBTzI1QixHQUNqQjM1QixFQUFVLEdBQUcsS0FBTzY1QixHQUNwQjc1QixFQUFVLEdBQUcsS0FBTys1QixHQUNwQi81QixFQUFVLEdBQUcsS0FBTzR2QixJQUN6QmlGLEVBQU03MEIsWUFBYzI1QixFQUFJRSxJQUFNRSxFQUFJbkssSUFDbEN3SixFQUFPcmdDLEtBQUt5MkIsR0FDWnFMLEVBQUs3QixTQUlULFNBQVNnQyxJQUVQLEdBREE1RCxLQUNJNzVCLEVBQU1pOEIsUUFBUyxDQUNqQixHQUFJajhCLEVBQU1pOEIsUUFBUXJsQyxPQUFRLE9BQ3RCMmtDLEdBQWFyRixhQUFhcUYsR0FDOUJBLEVBQWNsRyxXQUFXLFdBQWFrRyxFQUFjLE1BQVMsS0FDN0Q5K0IsRUFBTXFFLEdBQUcsbURBQW9ELFdDamE5RCxTQUFpQjQ4QixFQUFNTyxHQUM1QixJQUFJOTdCLEVBQU91N0IsRUFBS3BqQyxTQUFTRyxnQkFDckJnSSxFQUFZcUIsR0FBTzQ1QixHQUFNNThCLEdBQUcsaUJBQWtCLE1BQzlDbTlCLElBQ0Z4N0IsRUFBVTNCLEdBQUcsYUFBY283QixJQUFTLEdBQ3BDN0csV0FBVyxXQUFhNXlCLEVBQVUzQixHQUFHLGFBQWMsT0FBVSxJQUUzRCxrQkFBbUJxQixFQUNyQk0sRUFBVTNCLEdBQUcsbUJBQW9CLE9BRWpDcUIsRUFBS3hFLE1BQU1tZ0MsY0FBZ0IzN0IsRUFBSzA3QixrQkFDekIxN0IsRUFBSzA3QixZRHdaUkssQ0FBV2wrQixFQUFNMDlCLEtBQU1qQixHQUN2QmlCLEVBQUs1OEIsR0FBRywwREFBMkQsTUFFckVyRSxFQUFNNEosS0FBSyxpQkFBa0IsT0FDN0JrMEIsRUFBUWwwQixLQUFLLFNBQVVpMEIsR0FBUUMsU0FDM0JqRCxFQUFNNzBCLFlBQVdBLEVBQVk2MEIsRUFBTTcwQixXQUNuQzNILEdBQU0ySCxLQUFZNjBCLEVBQU03MEIsVUFBWSxLQUFNbzVCLEVBQU9yZ0MsS0FBS3kyQixJQUMxRHFMLEVBQUtwaUIsT0F5RVQsU0FBU3lnQixJQUNQLElBQUlyRSxFQUFRbjlCLEtBQUtpaEMsVUFBWTM0QixVQUFXLE1BR3hDLE9BRkE2MEIsRUFBTStELE9BQVNBLEVBQU9sMUIsTUFBTWhNLEtBQU0rTCxXQUNsQ294QixFQUFNZ0UsSUFBTUEsRUFDTGhFLEVBb0JULE9BN1ZBbUUsRUFBTW1DLEtBQU8sU0FBU25oQyxFQUFPZ0csR0FDdkJoRyxFQUFNZ0csVUFDUmhHLEVBQ0txRSxHQUFHLGNBQWUsV0FBYWk3QixFQUFRNWhDLEtBQU0rTCxXQUFXcTNCLGNBQWM3MEIsVUFDdEU1SCxHQUFHLDRCQUE2QixXQUFhaTdCLEVBQVE1aEMsS0FBTStMLFdBQVdnVixRQUN0RW1jLE1BQU0sUUFBUyxXQUNkLElBQUlwRixFQUFPOTNCLEtBQ1BtOUIsRUFBUXJGLEVBQUttSixRQUNia0MsRUFBT3ZCLEVBQVE5SixFQUFNL3JCLFdBQ3JCaTRCLEVBQWE3RyxFQUFNNzBCLFVBQ25CMjdCLEVBQWE5QyxFQUFJcGlDLE1BQTJCLG1CQUFkdUosRUFBMkJBLEVBQVUwRCxNQUFNaE0sS0FBTStMLFdBQWF6RCxFQUFXNjBCLEVBQU0rRCxRQUM3R3hsQyxFQUFJMHNCLEdBQVk0YixFQUFZQyxHQUVoQyxTQUFTL0csRUFBTTVnQyxHQUNiNmdDLEVBQU03MEIsVUFBa0IsSUFBTmhNLEdBQVdxRSxHQUFNc2pDLEdBQWMsS0FBT3ZvQyxFQUFFWSxHQUMxRG9sQyxFQUFPcmdDLEtBQUt5MkIsR0FDWnFMLEVBQUs3QixRQUdQLE9BQU8wQyxHQUFjQyxFQUFhL0csRUFBUUEsRUFBTSxLQUd0RDU2QixFQUNLOEgsS0FBSyxXQUNKLElBQ0lnd0IsRUFBT3J1QixVQUNQb3hCLEVBRk9uOUIsS0FFTWloQyxRQUNiZ0QsRUFBYTlDLEVBQUlwaUMsTUFBMkIsbUJBQWR1SixFQUEyQkEsRUFBVTBELE1BSDVEaE0sS0FHd0VvNkIsR0FBUTl4QixFQUFXNjBCLEVBQU0rRCxRQUN4R2lDLEVBQU92QixFQUpBNWhDLEtBSWNvNkIsR0FBTWdKLGNBRS9CekQsR0FOVzMvQixNQU9YbTlCLEVBQU03MEIsVUFBMEIsTUFBZDI3QixHQUFzQnRqQyxHQUFNc2pDLEdBQWMsS0FBT0EsRUFDbkV2QyxFQUFPcmdDLEtBUklyQixNQVNYbWpDLEVBQUs1MEIsUUFBUSt5QixRQUFRdmdCLFNBOEMvQjhnQixFQUFRLy9CLFdBQ05zaEMsWUFBYSxXQUVYLE9BRHNCLEtBQWhCcGpDLEtBQUt1OUIsU0FBY3Y5QixLQUFLbTlCLE1BQU15RSxRQUFVNWhDLEtBQU1BLEtBQUtra0MsVUFBVyxHQUM3RGxrQyxNQUVUdU8sTUFBTyxXQUVMLE9BREl2TyxLQUFLa2tDLFdBQVVsa0MsS0FBS2trQyxVQUFXLEVBQU9sa0MsS0FBS21qQyxLQUFLLFVBQzdDbmpDLE1BRVRzaEMsTUFBTyxXQUVMLE9BREF0aEMsS0FBS21qQyxLQUFLLFNBQ0huakMsTUFFVCtnQixJQUFLLFdBRUgsT0FEc0IsS0FBaEIvZ0IsS0FBS3U5QixnQkFBcUJ2OUIsS0FBS205QixNQUFNeUUsUUFBUzVoQyxLQUFLbWpDLEtBQUssUUFDdkRuakMsTUFFVG1qQyxLQUFNLFNBQVNwOEIsSWpKM0xaLFNBQXFCUixFQUFRTixFQUFVNnhCLEVBQU1zQyxHQUNsRCxJQUFJNXpCLEVBQVNYLEVBQ2JVLEVBQU9rQyxZQUFjNUMsRUFDckJBLEVBQVFVLEVBQ1IsSUFDU04sRUFBUytGLE1BQU04ckIsRUFBTXNDLFdBRTVCdjBCLEVBQVFXLEdpSnFMTjI5QixDQUFZLElFN1JILFNBQVMxQixFQUFRMTdCLEVBQU11QixHQUNwQ3RJLEtBQUt5aUMsT0FBU0EsRUFDZHppQyxLQUFLK0csS0FBT0EsRUFDWi9HLEtBQUtzSSxVQUFZQSxFRjBSRCxDQUFlZzVCLEVBQU92NkIsRUFBTW82QixFQUFJaFosT0FBT25vQixLQUFLbTlCLE1BQU03MEIsWUFBYSs0QixFQUFVcjFCLE1BQU9xMUIsR0FBWXQ2QixFQUFNL0csS0FBSzgzQixLQUFNOTNCLEtBQUtvNkIsU0EyT2xJa0gsRUFBTUosT0FBUyxTQUFTdnZCLEdBQ3RCLE9BQU81RixVQUFVdFAsUUFBVXlrQyxFQUFzQixtQkFBTnZ2QixFQUFtQkEsRUFBSTZPLE1BQVk3TyxFQUFFLEdBQUcsSUFBS0EsRUFBRSxHQUFHLE1BQU9BLEVBQUUsR0FBRyxJQUFLQSxFQUFFLEdBQUcsTUFBTzJ2QixHQUFTSixHQUdySUksRUFBTXIzQixPQUFTLFNBQVMwSCxHQUN0QixPQUFPNUYsVUFBVXRQLFFBQVV3TixFQUFzQixtQkFBTjBILEVBQW1CQSxFQUFJNk8sS0FBVzdPLEdBQUkydkIsR0FBU3IzQixHQUc1RnEzQixFQUFNQyxXQUFhLFNBQVM1dkIsR0FDMUIsT0FBTzVGLFVBQVV0UCxRQUFVOGtDLEdBQWM1dkIsRUFBRzJ2QixHQUFTQyxHQUd2REQsRUFBTTM2QixHQUFLLFdBQ1QsSUFBSVEsRUFBUWs2QixFQUFVMTZCLEdBQUdxRixNQUFNcTFCLEVBQVd0MUIsV0FDMUMsT0FBTzVFLElBQVVrNkIsRUFBWUMsRUFBUW42QixHQUdoQ202QixFQXRaQUEsQ0FBTXBCLElHOUhSLE1BQU1rRSxJQUNUQyxhQUFjLFNBQVNsWCxHQUFHLE9BQU9oaUIsS0FBSzJaLElBQUlxSSxJQUFNLEVBQUcsS0FBTyxFQUFFQSxFQUFFQSxHQUFHLEdBQ2pFbVgsU0FBVSxTQUFTblgsR0FBRyxPQUFPLEVBQUVoaUIsS0FBS2tELEtBQUssRUFBRWxELEtBQUtvVCxJQUFJcFQsS0FBS281QixLQUFLLEdBQUdwWCxFQUFFQSxLQUkxRHFYLElBRVRDLElBQUssU0FBUzM3QixHQUNWLElBQ0k2VSxHQURNak8sR0FBUzVHLEVBQUcsS0FBUTRHLEdBQVM1RyxFQUFHLE1BQzVCLEtBQ2QsT0FBTyxLQUFPcUMsS0FBS0MsSUFBSXM1QixHQUFVNTdCLEdBQUk2VSxHQUFLeFMsS0FBS21FLElBQUl4RyxFQUFFck0sUUFBUSxNQVc5RCxTQUFTa29DLEdBQXVCUCxFQUFRcmUsRUFBR3BJLEdBQzlDLE9BQU8sU0FBUzRQLEdBRVosT0FBT3hILEVBQUV2cUIsSUFBS3NOLElBQU9BLEVDNUJkLFNBQVMrRSxFQUFRQyxHQUM5QixJQUdJM0csRUFIQXhLLEVBQUlrUixFQUFPcFIsT0FDWHFLLEVBQUluSyxFQUNKakIsR0FBSyxFQUVMdVMsRUFBTSxFQUVWLEdBQWUsTUFBWEgsRUFDRixPQUFTcFMsRUFBSWlCLEdBQ051UixNQUFNL0csRUFBUWdILEdBQU9OLEVBQU9uUyxPQUMxQm9MLEVBRGdDbUgsR0FBTzlHLE9BTWhELE9BQVN6TCxFQUFJaUIsR0FDTnVSLE1BQU0vRyxFQUFRZ0gsR0FBT0wsRUFBUUQsRUFBT25TLEdBQUlBLEVBQUdtUyxPQUN6Qy9HLEVBRG9EbUgsR0FBTzlHLEVBS3RFLEdBQUlMLEVBQUcsT0FBT21ILEVBQU1uSCxFRE9Va0gsQ0FBS3VmLEVBQUlqaEIsR0FBTTgzQixHQUFRdDdCLEVBQUV3RCxHQUFHcVIsSUFBSUEsV0U1QjNDaW5CLEdBQ2pCQyxZQUFZaEksRUFBSWlJLEdBQVEsRUFBT0MsRUFBUSxHQUFJQyxHQUFRLEdBQUs1SCxFQUFTLEtBQzdEcDlCLEtBQUs2OEIsR0FBS0EsRUFDVjc4QixLQUFLOGtDLFFBQVVBLEVBQ2Y5a0MsS0FBSytrQyxRQUFVQSxFQUNmL2tDLEtBQUtnbEMsUUFBVUEsRUFDZmhsQyxLQUFLbzlCLFNBQVdBLEVBR3BCeUgsS0FBS0ksR0FDRWpsQyxLQUFLOGtDLFNBQVNJLFFBQVEvMUIsSUFBSTgxQixHQUM3QmpsQyxLQUFLbWxDLEtBQUtGLEdBQ1ZqbEMsS0FBS3lqQyxPQUNMOTVCLEdBQU8sSUFBTTNKLEtBQUs2OEIsSUFDYnI1QixNQUFNLFVBQVcsVUFDakJtMkIsYUFDQXlELFNBQVNwOUIsS0FBS285QixVQUNkNTVCLE1BQU0sVUFBVyxHQUkxQnFoQyxPQUNJbDdCLEdBQU8sSUFBTTNKLEtBQUs2OEIsSUFDYmxELGFBQ0F5RCxTQUFTcDlCLEtBQUtvOUIsVUFDZDU1QixNQUFNLFVBQVcsR0FDdEJ4RCxLQUFLbWxDLEtBQUssSUFHZE4sS0FBSy83QixFQUFJakQsRUFBTXUvQixNQUFPcDhCLEVBQUluRCxFQUFNdy9CLE9BQ3hCcmxDLEtBQUs4a0MsVUFDTEksUUFBUS8xQixJQUFJckcsR0FDWm84QixRQUFRLzFCLElBQUluRyxJQUVoQkYsR0FBUTlJLEtBQUsra0MsUUFDYi83QixFQUFLQSxFQUFJaEosS0FBS2dsQyxRQUFTLEVBQUUsR0FBR2g4QixFQUFFaEosS0FBS2dsQyxRQUN6QnI3QixHQUFPLElBQUkzSixLQUFLNjhCLElBQ3JCcjVCLE1BQU0sVUFBV3NGLE9BQ2pCdEYsTUFBTSxTQUFVd0YsT0FHekI2N0IsS0FBS0ksR0FDRHQ3QixHQUFPLElBQU0zSixLQUFLNjhCLElBQ2Jod0IsS0FBS280QixVQ3JDR0ssR0FDakJULFlBQVlVLEVBQU9DLEVBQW1CQyxHQUFTLEdBQzNDQyxNQUFNSCxLQUFTSSxPQUdmLE1BQU1DLEVBQWFILEVBQVMsa0NBQW1DLHlCQUMvRHpsQyxLQUFLNmxDLElBQU1ILEVBQUUsVUFBVUksU0FBU0YsR0FBWUcsYUFBYVIsS0FDekR2bEMsS0FBS2dtQyxXQUNMaG1DLEtBQUt3bEMsUUFBVUEsRUFXbkJYLHdCQUF3QmhJLEVBQUlvSixFQUFPQyxFQUFhQyxFQUFTQyxFQUFLLGVBQzFDcG1DLEtBQUtxbUMsYUFBYXhKLEVBQUl1SixHQUN0Q3o4QixPQUFXa3pCLEtBQ05sMkIsR0FBRyxRQUFTLEtBQ1QzRyxLQUFLc21DLFlBQVlMLEVBQU9DLEVBQWFDLEtBRXhDeC9CLEdBQUcsWUFBYSxLQUNiM0csS0FBS3dsQyxRQUFRRyxLQUFLLGNBRXJCaC9CLEdBQUcsV0FBWSxLQUNaM0csS0FBS3dsQyxRQUFRZSxTQUl6QjFCLGtCQUFrQmhJLEVBQUkvd0IsRUFBVXM2QixFQUFLLHdCQUNqQnBtQyxLQUFLcW1DLGFBQWF4SixFQUFJdUosR0FDdEN6OEIsT0FBV2t6QixLQUNObDJCLEdBQUcsUUFBU21GLEdBQ1puRixHQUFHLFlBQWEsS0FDYjNHLEtBQUt3bEMsUUFBUUcsS0FBSyxzQkFFckJoL0IsR0FBRyxXQUFZLEtBQ1ozRyxLQUFLd2xDLFFBQVFlLFNBVXpCMUIsYUFBYWhJLEVBQUl1SixFQUFLLGVBQ2xCLE1BQU1JLEVBQVVkLEVBQUUsUUFBUXg1QixLQUFLLEtBQU0yd0IsR0FDaENpSixTQUFTLG1CQUFtQkMsU0FBUy9sQyxLQUFLNmxDLEtBRy9DLE9BRkFILEVBQUUsUUFBUUksZUFBZU0sS0FBUUwsU0FBU1MsR0FDMUN4bUMsS0FBS2dtQyxRQUFRbkosR0FBTTJKLEVBQ1pBLEVBT1gzQixjQUFjVyxHQUNWeGxDLEtBQUt3bEMsUUFBVUEsRUFVbkJYLFlBQVlvQixFQUFPUSxFQUFVTixHQUV6QixJQUFJTyxFQUFTaEIsRUFBRUEsRUFBRUEsS0FBSyxJQUFLTyxNQUFVLElBQ2pDVSxFQUFXRCxFQUFPeDVCLFFBQ3JCaEIsS0FBSyxVQUFXLE9BQ2hCQSxLQUFLLFFBQVMsOEJBR1gwNkIsRUM5QkwsU0FBeUJDLEdBSTVCLElBSEEsSUFBSUMsRUFBTyxHQUNQQyxFQUFTNW1DLFNBQVM2bUMsWUFFYnRyQyxFQUFJLEVBQUdBLEVBQUlxckMsRUFBT3RxQyxPQUFRZixJQUUvQixJQUNJLEdBQTBCLE1BQXRCcXJDLEVBQU9yckMsR0FBR3VyQyxTQUFrQixTQUdoQyxJQUZBLElBQUlDLEVBQVFILEVBQU9yckMsR0FBR3VyQyxTQUVianFDLEVBQUksRUFBR0EsRUFBSWtxQyxFQUFNenFDLE9BQVFPLElBQUssQ0FDbkMsSUFBSW1xQyxFQUFPRCxFQUFNbHFDLEdBQ2pCLFFBQTBCLElBQWZtcUMsRUFBVSxNQUFrQixDQUNuQyxJQUFJQyxFQUVKLElBQ0lBLEVBQVExQixFQUFFbUIsR0FBS1EsS0FBS0YsRUFBS0csY0FDM0IsTUFBTzFrQixHQUNMd2tCLEtBR0FBLEVBQU0zcUMsT0FBUyxJQUNmcXFDLEdBQVFLLEVBQUtHLGFBQWUsTUFBUUgsRUFBSzNqQyxNQUFNK2pDLFFBQVUsVUFJdkUsTUFBTzNrQixHQUlMLEdBQWUsa0JBQVhBLEVBQUVubkIsS0FBMEIsTUFBTW1uQixFQUN0QyxTQUlSLElBQUloRixFQUFJemQsU0FBU0ksY0FBYyxTQUkvQixPQUhBcWQsRUFBRW5ZLGFBQWEsT0FBUSxZQUN2Qm1ZLEVBQUUvWSxVQUFZLGNBQWdCaWlDLEVBQU8sUUFFOUJscEIsRURUVTRwQixDQUFlZCxFQUFPbDJCLE9BQ25DbTJCLEVBQVNjLFFBQVFiLEdBRWpCbEIsRUFBRSxJQUFNUyxHQUFTdDVCLEtBQUssSUFBSTA1QixPQUMxQixJQUFJbUIsRUFBVWhDLE1BQU1TLEtBQVdyNUIsT0FBTzY1QixHQUFVOTVCLE9BRTVDODZCLEVBQVUsSUFBSUMsTUFBTUYsSUFBVzNnQyxLQUFNLGtCQUN6QzhnQyxPQUFPRixFQUFTbEIsR0FHaEJmLE1BQU1TLEtBQVd0NUIsS0FBSyxJQUFJMDVCLGNFbkVidUIsR0FNakJqRCxZQUFZcGlDLEVBQU1zbEMsTUFDZC9uQyxLQUFLZ29DLGFBQWF2bEMsR0FDbEJ6QyxLQUFLeUMsS0FBT0EsRUFDWnpDLEtBQUsrbkMsVUFBWUEsRUFDakIvbkMsS0FBS2lvQyxhQUFVcDJCLEVBQ2Y3UixLQUFLd2xDLGFBQVUzekIsRUFxQm5CZ3pCLE9BQU9nQyxFQUFLdGhCLEVBQU0sSUFBS3liLEVBQU8sSUFBS2tILEVBQVMsSUFBTUMsRUFBbUJDLElBQVUsRUFBRSxHQUFJQyxFQUFPLFNBQ3JGQyxHQUFNLEVBQU1DLEdBQVMsRUFBTUMsRUFBVSxFQUNyQ0MsR0FBWSxFQUFPQyxHQUFZLEVBQU9DLEdBQVcsRUFBT0MsR0FBUyxHQVVwRSxHQVBBNW9DLEtBQUs2b0MsTUFBUSxNQUNUaEMsRUFBSTk4QixVQUFVLEtBQUt0RixTQUNuQnpFLEtBQUs4b0MsT0FBT2pDLEVBQUt0aEIsRUFBT3liLEVBQVFrSCxFQUFVQyxFQUFTQyxFQUFTQyxFQUFRQyxFQUFPQyxFQUFVQyxFQUFXQyxFQUFhQyxFQUFhQyxVQUtoSDkyQixJQUFWdTJCLEdBQXVCLEdBQUtBLEVBQVEzckMsT0FBTyxDQUMzQyxJQUFJc3NDLEtBQ0ovb0MsS0FBS3lDLEtBQUt6RSxRQUFTcUosR0FBTTBoQyxFQUFPQSxFQUFLNXFDLE9BQU9rSixFQUFFd0csU0FDOUN1NkIsRUFBVWxILEdBQU82SCxHQUlyQi9vQyxLQUFLa0ksT0FBUzhILEtBQ1RsTixJQUFLdUUsR0FBTUEsRUFBRS9FLE9BQ2J1TyxRQUFRN1EsS0FBS3lDLE1BRWxCekMsS0FBS3VSLE9BQ0R6SSxFQUFHa2dDLEtBQ0UxMkIsWUFBWSxFQUFHaVQsSUFDZjlULE9BQU8wMkIsR0FBU25vQyxLQUFLa0ksT0FBTzFNLElBQUs2TCxHQUFNQSxFQUFFdkUsTUFDekNrUCxhQUFhazJCLEdBQ2xCZSxLQUFNRCxLQUNOaGdDLEVBQUdrZ0MsS0FDRTUyQixZQUFZMHVCLEVBQVEsSUFDcEJ2dkIsT0FBTzIyQixHQUNaL29CLEVBQUc2cEIsTUFJUGxwQyxLQUFLa0ksT0FBT2xLLFFBQVNxZixJQUNqQixJQUFJL2EsRUFBUSthLEVBQUV2YSxJQUNWK04sRUFBVXdNLEVBQUV4UCxPQUNabzNCLEVBQU9qbEMsS0FBSytuQyxVQUFVemxDLEdBRzFCLEdBRkErYSxFQUFFblgsTUFBUWxHLEtBQUt1UixNQUFNekksRUFBRTJJLFNBQVNoUyxRQUFRNkMsUUFFM0J1UCxJQUFUb3pCLEVBQW1CLENBRUU0QixFQUFJLzVCLE9BQU8sS0FDQy9DLFVBQVUsdUJBQ3RDdEgsTUFBTSxXQUNDRixRQUFRdUssT0FBTyxRQUN0QlosS0FBSyxJQUFLLEdBQ1ZBLEtBQUssSUFBSyxHQUNWQSxLQUFLLFFBQVMsc0JBQ2RBLEtBQUssT0FBUzdFLEdBRUQsVUFBSEEsR0FBYThoQyxXQUFXbEUsRUFBSzU5QixLQUFLOGhDLFdBQVdsRSxFQUFzQixpQkFBRyxZQUFZLGFBRTVGLzRCLEtBQUssWUFBYSxDQUFDN0UsRUFBRzNMLEtBR25CLG1CQUZRc0UsS0FBS3VSLE1BQU16SSxFQUFFeEcsR0FBU3RDLEtBQUt1UixNQUFNekksRUFBRXdJLFlBQVksTUFDL0N0UixLQUFLdVIsTUFBTXZJLEVBQUVvL0IsRUFBUSxJQUFNLFFBR3RDaHNDLEtBQU1pTCxNQUFTQSxNQUFNOGhDLFdBQVdBLFdBQVdsRSxFQUFLNTlCLElBQUl3ZSxZQUFZLElBQUlsQixtQkFJN0Uza0IsS0FBS3VSLE1BQU0wM0IsS0FDTngzQixPQUFPWixFQUFRclYsSUFBSzZMLEdBQU1BLEVBQUUraEMsUUFDNUI5MkIsWUFBWXRTLEtBQUt1UixNQUFNekksRUFBRXhHLEdBQVF0QyxLQUFLdVIsTUFBTXpJLEVBQUV4RyxHQUFTdEMsS0FBS3VSLE1BQU16SSxFQUFFd0ksY0FFekVULEVBQVE3UyxRQUFTcXJDLElBRVQsR0FBS0EsRUFBTXg3QixPQUFPcFIsU0FDdEI0c0MsRUFBTXg3QixPQUFTdzdCLEVBQU14N0IsT0FBT3BDLEtBQUt2SSxJQUNqQ2xELEtBQUtzcEMsWUFBWXpDLEVBQUt3QyxFQUFPWixFQUFhcHJCLEVBQUVuWCxVQUloRCxJQUFJNndCLEVBQVMsR0FDYixHQUFJNlIsRUFBUyxDQUNSLE1BQU1XLEVBQVlQLEtBQ2R2M0IsT0FBT1osRUFBUXJWLElBQUs2TCxRQUFzQndLLEdBQVJ4SyxFQUFFOEMsS0FBZ0IsVUFBVTlDLEVBQUU4QyxNQUFNLE9BQ3RFbUksWUFBWXRTLEtBQUt1UixNQUFNekksRUFBRXhHLEdBQVF0QyxLQUFLdVIsTUFBTXpJLEVBQUV4RyxHQUFTdEMsS0FBS3VSLE1BQU16SSxFQUFFd0ksY0FDekR1MUIsRUFBSS81QixPQUFPLEtBQ3JCWixLQUFLLFFBQVMsb0JBQ2RBLEtBQUssNEJBQTZCODBCLEVBQVNqSyxNQUMzQzExQixLQUFLdzRCLEdBQVcwUCxJQUcxQixHQUFJaEIsRUFBVSxDQUNOeFIsRUFBUyxFQUNiLE1BQU15UyxFQUFRM0MsRUFBSS81QixPQUFPLEtBQ3BCWixLQUFLLFFBQVMsbUJBQ2RBLEtBQUssNEJBQTZCODBCLEVBQVNqSyxNQUMzQzExQixLQUFLdzRCLEdBQVc3NUIsS0FBS3VSLE1BQU0wM0IsT0FFNUJULEVBQVksR0FDWmdCLEVBQU16L0IsVUFBVSxRQUNYdkcsTUFBTSxjQUFlLFNBQ3JCMEksS0FBSyxzQkFBdUJzOEIsZ0JBUTdDLElBQUl6UixFQUFTd1IsRUFBUyxHQUFHLEUxQ0MxQixJQUFrQmgzQixFMENzQ2pCLEdBdENBdlIsS0FBS3lwQyxNQUFRbkIsRUFBTXpPLEdBQVc3NUIsS0FBS3VSLE1BQU16SSxHQUFHK3dCLEdBQVc3NUIsS0FBS3VSLE1BQU16SSxHQUFHa2YsV0FBVyxJQUNoRjZlLEVBQUkvNUIsT0FBTyxLQUNOWixLQUFLLFFBQVMseUJBQ2RBLEtBQUssNEJBQTZCODBCLEVBQVNqSyxNQUMzQzExQixLQUFLckIsS0FBS3lwQyxPQUNWMS9CLFVBQVUsUUFDVnZHLE1BQU0sY0FBZSxTQUNyQjBJLEtBQUssWUFBYSx1QkFHdkI2cUIsRUFBUyxFQUNULzJCLEtBQUswcEMsTzFDWFluNEIsRTBDV0t2UixLQUFLdVIsTUFBTXZJLEUxQ1ZoQzZ2QixHQUFLdHZCLEdBQU1nSSxJMENXQ3luQixXQUFXaDVCLEtBQUt1UixNQUFNdkksRUFBRThlLE1BQU0sSUFDM0MrZSxFQUFJLzVCLE9BQU8sS0FDTlosS0FBSyxRQUFTLHlCQUNkQSxLQUFLLDBCQUEyQjZxQixTQUNoQzExQixLQUFLckIsS0FBSzBwQyxPQUdmN0MsRUFBSS81QixPQUFPLFFBQ05aLEtBQUssS0FBTSxJQUNYQSxLQUFLLEtBQU0sSUFDWEEsS0FBSyxRQUFTLHFCQUNkQSxLQUFLLGNBQWUsU0FDcEJBLEtBQUssWUFBYSxlQUNsQjlQLEtBQUtpc0MsR0FHVnhCLEVBQUlsZ0MsR0FBRyxXQUFZLFVBQ0trTCxJQUFqQjdSLEtBQUt3bEMsU0FBdUJ4bEMsS0FBS3dsQyxRQUFRZSxTQUk3Q21DLEdBQ0Mxb0MsS0FBSzJwQyxpQkFBaUI5QyxHQUl0QjhCLEVBQVksQ0FDWixNQUFNaUIsRUFBVS9DLEVBQUkvNUIsT0FBTyxLQUN0QlosS0FBSyxLQUFNLGdCQUNYQSxLQUFLLFlBQWEsbUJBRXZCMDlCLEVBQVE5OEIsT0FBTyxRQUNWWixLQUFLLElBQUtsTSxLQUFLdVIsTUFBTXpJLEVBQUU2RixRQUFRLElBQy9CekMsS0FBSyxLQUFNLElBQ1hBLEtBQUssUUFBUyxHQUFJbE0sS0FBS2tJLE9BQU8sR0FBRzJGLE9BQWEsT0FBSSxJQUNsRDNCLEtBQUssU0FBVSxJQUNmMUksTUFBTSxPQUFRLFFBQ2RBLE1BQU0sU0FBVSxVQUVyQixNQUdNNlosRUFIVXVzQixFQUFRNy9CLFVBQVUsa0JBQWtCdEgsS0FBS3pDLEtBQUtrSSxPQUFPLEdBQUcyRixRQUd0RHRMLFFBQVF1SyxPQUFPLEtBQUtGLFFBQVEsaUJBQWlCLEdBQ3pEcWdCLEVBQUksR0FDVjVQLEVBQUV2USxPQUFPLFFBQ0paLEtBQUssSUFBSyxDQUFDN0UsRUFBRzNMLElBQU0sRUFBSSxLQUFVc0UsS0FBS3VSLE1BQU16SSxFQUFFNkYsUUFBUSxJQUN2RHpDLEtBQUssS0FBTSxJQUNYQSxLQUFLLFFBQVMrZ0IsR0FDZC9nQixLQUFLLFNBQVUrZ0IsR0FDZnpwQixNQUFNLE9BQVM2RCxHQUFNQSxFQUFFdVYsT0FFNUJTLEVBQUV2USxPQUFPLFFBQ0paLEtBQUssUUFBUyxzQkFDZDlQLEtBQU1pTCxHQUFNQSxFQUFFK2hDLE9BQ2RsOUIsS0FBSyxJQUFLLENBQUM3RSxFQUFHM0wsSUFBTSxHQUFLLEtBQVNzRSxLQUFLdVIsTUFBTXpJLEVBQUU2RixRQUFRLElBQ3ZEekMsS0FBSyxLQUFNLEtBV3hCMjRCLGNBQWNVLEdBR1YsT0FGQXZsQyxLQUFLd2xDLFFBQVUsSUFBSVosR0FBUVcsR0FDM0I1N0IsT0FBVzQ3QixLQUFTMzRCLFFBQVEsa0JBQWtCLEdBQ3ZDNU0sS0FBS3dsQyxRQVVoQlgsY0FBY1UsRUFBT0MsR0FHakIsT0FEQXhsQyxLQUFLaW9DLFFBQVUsSUFBSTNDLEdBQVFDLEVBQU9DLEdBQzNCeGxDLEtBQUtpb0MsUUFPaEJwRCxTQUFTZ0MsR0FDTCxNQUFNZ0QsRUFBV3ZJLEtBQ2pCdUksRUFBU2xqQyxHQUFHLE1BQU8sS0FBSzNHLEtBQUs4cEMsS0FBS2pELEVBQUtnRCxLQUN2Q2hELEVBQUkvNUIsT0FBTyxLQUNOWixLQUFLLFFBQVMsU0FDZDdLLEtBQUt3b0MsR0FHZGhGLEtBQUtnQyxFQUFLZ0QsR0FDTixJQUNJRSxFQURBbnNCLEVBQUkvWCxFQUFNeUMsVUFHZCxRQUFpQnVKLElBQWJnNEIsRUFDQTdwQyxLQUFLNm9DLGFBRUosR0FBS2pyQixFQU9MLENBRUQ1ZCxLQUFLdVIsTUFBTXpJLEVBQUUySSxPQUFPelIsS0FBS3VSLE1BQU16SSxFQUFFMkksU0FBU3hILE9BQU8sQ0FBQzVDLEVBQUczTCxLQUMvQyxNQUFNc3VDLEVBQVc3K0IsS0FBSytELE1BQU0wTyxFQUFFLEdBQUcsR0FBRzVkLEtBQUt1UixNQUFNekksRUFBRXdJLGFBQzNDMjRCLEVBQWE5K0IsS0FBSytELE1BQU0wTyxFQUFFLEdBQUcsR0FBRzVkLEtBQUt1UixNQUFNekksRUFBRXdJLGFBQ25ELE9BQU81VixHQUFLc3VDLEdBQVl0dUMsR0FBSXV1QyxLQUdsQyxNQUFNNytCLEVBQU1ELEtBQUsrRCxNQUFNbFAsS0FBS3VSLE1BQU12SSxFQUFFd2YsT0FBTzVLLEVBQUUsR0FBRyxLQUMxQ3RQLEVBQU1uRCxLQUFLK0QsTUFBTWxQLEtBQUt1UixNQUFNdkksRUFBRXdmLE9BQU81SyxFQUFFLEdBQUcsS0FDaEQ1ZCxLQUFLdVIsTUFBTXZJLEVBQUV5SSxRQUFRckcsRUFBS2tELElBRTFCdTRCLEVBQUlsOUIsT0FBTyxVQUFVdEksS0FBS3dvQyxFQUFTcEcsS0FBTSxVQW5CaEMsQ0FDVCxJQUFLc0csRUFBYSxPQUFPQSxFQUFjN08sV0FBVyxXQUM5QzZPLEVBQWMsTUFOTixLQVFaL3BDLEtBQUs2b0MsUUFvQlQsSUFBSXZzQyxFQUFJdXFDLEVBQUlsTixhQUFheUQsU0FBUyxLQUNsQ3lKLEVBQUlsOUIsT0FBTyxZQUFZZ3dCLFdBQVdyOUIsR0FBRytFLEtBQUtyQixLQUFLeXBDLE9BQy9DNUMsRUFBSWw5QixPQUFPLFlBQVlnd0IsV0FBV3I5QixHQUFHK0UsS0FBS3JCLEtBQUswcEMsT0FFL0MxcEMsS0FBS2tJLE9BQU9sSyxRQUFRLENBQUNrc0MsRUFBSXh1QyxLQUNyQixJQUFJNEcsRUFBUTRuQyxFQUFHcG5DLElBQ1grTixFQUFVcTVCLEVBQUdyOEIsT0FHakI3TixLQUFLdVIsTUFBTTAzQixLQUNOMzJCLFlBQVl0UyxLQUFLdVIsTUFBTXpJLEVBQUV4RyxHQUFRdEMsS0FBS3VSLE1BQU16SSxFQUFFeEcsR0FBU3RDLEtBQUt1UixNQUFNekksRUFBRXdJLGNBRXpFVCxFQUFRN1MsUUFBU3FyQyxJQUNiLEdBQUksR0FBS0EsRUFBTXg3QixPQUFPcFIsT0FBUSxPQUNmdUQsS0FBS3VSLE1BQU16SSxFQUFFMkksU0FBU2hTLFFBQVE2QyxHQUk3Q3RDLEtBQUt1UixNQUFNOE4sRUFDTjFRLE9BQU8zTyxLQUFLdVIsTUFBTTAzQixLQUFLSSxFQUFNRCxPQUFRcHBDLEtBQUt1UixNQUFNMDNCLEtBQUtJLEVBQU1ELE9BQVNwcEMsS0FBS3VSLE1BQU0wM0IsS0FBSzMzQixjQUd6RixNQUFNK0wsRUFBSXdwQixFQUFJbDlCLGlCQUFpQnVnQyxFQUFHaGtDLFNBQVNtakMsRUFBTUQsU0FDakQvckIsRUFBRTFULE9BQU8sV0FDSmd3QixXQUFXcjlCLEdBQ1g0UCxLQUFLLElBQUs0cUIsS0FDTmhDLEdBQUl6dEIsR0FBTXJILEtBQUt1UixNQUFNOE4sRUFBRWhZLEVBQUUsS0FDekJtdEIsR0FBSW50QixHQUFNckgsS0FBS3VSLE1BQU04TixHQUFHaFksRUFBRSxLQUMxQjJCLEVBQUczQixHQUFNckgsS0FBS3VSLE1BQU12SSxFQUFFM0IsRUFBRSxNQU1qQyxNQUFNOGlDLEVBQUt6NkIsR0FBUzI1QixFQUFNeDdCLE9BQVEsS0FDNUJ1OEIsRUFBSzE2QixHQUFTMjVCLEVBQU14N0IsT0FBUSxLQUVsQ3dQLEVBQUUxVCxPQUFPLGNBQ0pnd0IsV0FBV3I5QixHQUNYNFAsS0FBSyxJQUFLbE0sS0FBS3VSLE1BQU04TixHQUhoQixLQUlMblQsS0FBSyxJQUFLbE0sS0FBS3VSLE1BQU12SSxFQUFFb2hDLElBQ3ZCbCtCLEtBQUssUUFBU2YsS0FBSzJaLElBQUk5a0IsS0FBS3VSLE1BQU04TixHQUw3QixJQUtxQ3JmLEtBQUt1UixNQUFNOE4sRUFMaEQsTUFNTG5ULEtBQUssU0FBVWYsS0FBSzJaLElBQUk5a0IsS0FBS3VSLE1BQU12SSxFQUFFb2hDLEdBQU1wcUMsS0FBS3VSLE1BQU12SSxFQUFFbWhDLEtBRzdELE1BQU1FLEVBQU1DLEdBQU9qQixFQUFNeDdCLFFBQ3pCd1AsRUFBRTFULE9BQU8sa0JBQ0pnd0IsV0FBV3I5QixHQUNYNFAsS0FBSyxLQUFNbE0sS0FBS3VSLE1BQU04TixHQVpqQixLQWFMblQsS0FBSyxLQUFNbE0sS0FBS3VSLE1BQU04TixFQWJqQixLQWNMblQsS0FBSyxLQUFNbE0sS0FBS3VSLE1BQU12SSxFQUFFcWhDLElBQ3hCbitCLEtBQUssS0FBTWxNLEtBQUt1UixNQUFNdkksRUFBRXFoQyxRQWF6Q3hGLFlBQVlnQyxFQUFLd0MsRUFBT1osRUFBYThCLEdBR2pDLElBQUlDLEVBQU03RixHQUNOUCxHQUFPRSxTQUNQdGtDLEtBQUt1UixNQUFNdkksRUFBRThlLE1BQU0sS0FDbkIwYyxHQUFnQkMsSUFBSTRFLEVBQU14N0IsU0FFOUIsTUFBTTQ4QixFQUFVdkosR0FBT21JLEVBQU14N0IsUUFDdkI2OEIsRUFBV0YsRUFBSW5CLEVBQU14N0IsUUFBUTVELE9BQVE1QyxHQUFJQSxFQUFFLEdBQUdvakMsRUFBUSxJQUFJcGpDLEVBQUUsR0FBR29qQyxFQUFRLElBRzdFLElBQUlFLEVBQU9yOEIsR0FBSW84QixFQUFXcmpDLEdBQUk4RCxLQUFLMlosSUFBSXpkLEVBQUUsS0FDekNySCxLQUFLdVIsTUFBTThOLEVBQ041TixTQUFTazVCLEVBQU1BLElBQ2ZoOEIsT0FBTzNPLEtBQUt1UixNQUFNMDNCLEtBQUtJLEVBQU1ELE9BQVFwcEMsS0FBS3VSLE1BQU0wM0IsS0FBS0ksRUFBTUQsT0FBU3BwQyxLQUFLdVIsTUFBTTAzQixLQUFLMzNCLGNBR3pGLE1BQU1zNUIsRUFBVS9ELEVBQUkvNUIsT0FBTyxLQUN0QlosS0FBSyxjQUFlcStCLEtBQVVsQixFQUFNRCxTQUV6QyxJQUFJeUIsRUFBUy9ULEtBQ1JoQyxHQUFJenRCLEdBQU1ySCxLQUFLdVIsTUFBTThOLEVBQUVoWSxFQUFFLEtBQ3pCbXRCLEdBQUludEIsR0FBTXJILEtBQUt1UixNQUFNOE4sR0FBR2hZLEVBQUUsS0FDMUIyQixFQUFHM0IsR0FBTXJILEtBQUt1UixNQUFNdkksRUFBRTNCLEVBQUUsS0FFN0IsTUFBTXlqQyxFQUFRRixFQUFROTlCLE9BQU8sUUFDeEJwTCxNQUFNZ3BDLEdBQ054K0IsS0FBSyxJQUFLMitCLEdBQ1ZqK0IsUUFBUSxVQUFVLEdBQ2xCcEosTUFBTSxPQUFRLFNBQ1NxTyxJQUFoQnczQixFQUFNenNCLE1BQTRCeXNCLEVBQU16c0IsTUFFekMydEIsRUFBTyxHQUFLLEVBQVUsVUFDbEIsV0FJVEosRUFBS3o2QixHQUFTMjVCLEVBQU14N0IsT0FBUSxLQUM1QnU4QixFQUFLMTZCLEdBQVMyNUIsRUFBTXg3QixPQUFRLEtBQzVCd1IsRUFBSXJmLEtBQUt1UixNQUFNOE4sRUFBRTVOLFNBQVMsR0FBRyxFQUVuQyxHQUFHZzNCLEVBQVksQ0FFWCxNQUFNc0MsRUFBTTUvQixLQUFLMlosSUFBSXNsQixFQUFHRCxHQUNsQmEsRUFBUTE4QixHQUFJKzZCLEVBQU14N0IsT0FBTzVELE9BQVE1QyxHQUFJQSxFQUFFK2lDLEVBQVEsSUFBSlcsSUFDM0M5bEMsRUNyYUgsU0FBUzRJLEVBQVFDLEdBQzlCLElBRUkzRyxFQUNBaUUsRUFIQXpPLEVBQUlrUixFQUFPcFIsT0FDWGYsR0FBSyxFQUlULEdBQWUsTUFBWG9TLEdBQ0YsT0FBU3BTLEVBQUlpQixHQUNYLEdBQTJCLE9BQXRCd0ssRUFBUTBHLEVBQU9uUyxLQUFleUwsR0FBU0EsRUFFMUMsSUFEQWlFLEVBQU1qRSxJQUNHekwsRUFBSWlCLEdBQ2dCLE9BQXRCd0ssRUFBUTBHLEVBQU9uUyxLQUFlMFAsRUFBTWpFLElBQ3ZDaUUsRUFBTWpFLFFBUWQsT0FBU3pMLEVBQUlpQixHQUNYLEdBQStDLE9BQTFDd0ssRUFBUTJHLEVBQVFELEVBQU9uUyxHQUFJQSxFQUFHbVMsS0FBb0IxRyxHQUFTQSxFQUU5RCxJQURBaUUsRUFBTWpFLElBQ0d6TCxFQUFJaUIsR0FDb0MsT0FBMUN3SyxFQUFRMkcsRUFBUUQsRUFBT25TLEdBQUlBLEVBQUdtUyxLQUFvQnpDLEVBQU1qRSxJQUMzRGlFLEVBQU1qRSxHQU9oQixPQUFPaUUsRURxWWlCQSxDQUFJaStCLEVBQU14N0IsT0FBTzVELE9BQVE1QyxHQUFJQSxFQUFFOGlDLEVBQVEsSUFBSlksSUFDakRsRSxFQUFJLzVCLE9BQU8sUUFDTkYsUUFBUSxXQUFXLEdBQ25CVixLQUFLLEtBQU1sTSxLQUFLdVIsTUFBTThOLEVBQUUsSUFDeEJuVCxLQUFLLEtBQU1sTSxLQUFLdVIsTUFBTThOLEVBQUUsSUFDeEJuVCxLQUFLLEtBQU1sTSxLQUFLdVIsTUFBTXZJLEVBQUVnaUMsSUFDeEI5K0IsS0FBSyxLQUFNbE0sS0FBS3VSLE1BQU12SSxFQUFFL0QsSUFDeEJ6QixNQUFNLFNBQVUsUUFJekJvbkMsRUFBUTk5QixPQUFPLFFBQ1ZaLEtBQUssSUFBS2xNLEtBQUt1UixNQUFNOE4sR0FBR0EsSUFDeEJuVCxLQUFLLElBQUtsTSxLQUFLdVIsTUFBTXZJLEVBQUVvaEMsSUFDdkJsK0IsS0FBSyxRQUFTZixLQUFLMlosSUFBSTlrQixLQUFLdVIsTUFBTThOLEdBQUdBLEdBQUdyZixLQUFLdVIsTUFBTThOLEVBQUVBLEtBQ3JEblQsS0FBSyxTQUFVZixLQUFLMlosSUFBSTlrQixLQUFLdVIsTUFBTXZJLEVBQUVvaEMsR0FBTXBxQyxLQUFLdVIsTUFBTXZJLEVBQUVtaEMsS0FDeERqK0IsS0FBSyxRQUFTLGFBR25CLE1BQU1tK0IsRUFBTUMsR0FBT2pCLEVBQU14N0IsUUFDekIrOEIsRUFBUTk5QixPQUFPLFFBQ1ZaLEtBQUssS0FBTWxNLEtBQUt1UixNQUFNOE4sR0FBR0EsSUFDekJuVCxLQUFLLEtBQU1sTSxLQUFLdVIsTUFBTThOLEVBQUVBLElBQ3hCblQsS0FBSyxLQUFNbE0sS0FBS3VSLE1BQU12SSxFQUFFcWhDLElBQ3hCbitCLEtBQUssS0FBTWxNLEtBQUt1UixNQUFNdkksRUFBRXFoQyxJQUN4Qm4rQixLQUFLLFFBQVMsaUJBR25CMCtCLEVBQVFqa0MsR0FBRyxZQUFhLEtBQ3BCbWtDLEVBQU1sK0IsUUFBUSxlQUFlLFFBRVRpRixJQUFqQjdSLEtBQUt3bEMsUUFBdUJOLFFBQVErRixLQUFLLDRDQUV4Q2pyQyxLQUFLd2xDLFFBQVFHLEtBQ1QwRCxFQUFNL21DLE1BQVEsUUFDZCttQyxFQUFNRCxNQUFRLGdCQUNEaUIsRUFBSXhrQixZQUFZLEdBQUssV0FHOUMra0IsRUFBUWprQyxHQUFHLFdBQVksS0FDbkJta0MsRUFBTWwrQixRQUFRLGVBQWUsS0FJckNpNEIsYUFBYXBpQyxHQUNULE1BQU15SixHQUFRLFFBQVMsUUFBUyxVQUVoQ3pKLEVBQUt6RSxRQUFTcUosSUFDVjZFLEVBQUtsTyxRQUFTbUYsSUFDVixRQUFhME8sSUFBVHhLLEVBQUVsRSxHQUFrQixLQUFNLHVDQU0xQzBoQyxpQkFBaUJnQyxHQUNiLE1BQU0zK0IsRUFBU2xJLEtBQUt1UixNQUFNekksRUFBRTJJLFNBQ3RCYyxFQUFVcEgsS0FBSzJaLElBQUk5a0IsS0FBS3VSLE1BQU16SSxFQUFFOUksS0FBS3VSLE1BQU16SSxFQUFFMkksU0FBUyxJQUFNelIsS0FBS3VSLE1BQU16SSxFQUFFOUksS0FBS3VSLE1BQU16SSxFQUFFMkksU0FBUyxJQUFNelIsS0FBS3VSLE1BQU16SSxFQUFFd0ksYUFFbEg0NUIsRUFBTyxDQUFDN3RCLEVBQUczaEIsSUFDVEEsSUFBTXdNLEVBQU96TCxPQUFTLEVBQ2Z1RCxLQUFLdVIsTUFBTXpJLEVBQUV1VSxLQUFNcmQsS0FBS3VSLE1BQU16SSxFQUFFd0ksWUFBZWlCLEVBQVEsRUFHdkQsRUFJZnMwQixFQUFJOThCLFVBQVUsVUFBVXRILEtBQUt5RixHQUN4QjNGLFFBQ0F1SyxPQUFPLFFBQ1BGLFFBQVEsU0FBUyxHQUNqQlYsS0FBSyxLQUFNZy9CLEdBQ1hoL0IsS0FBSyxLQUFNZy9CLEdBQ1hoL0IsS0FBSyxLQUFNbE0sS0FBS3VSLE1BQU12SSxFQUFFMkYsUUFBUSxJQUNoQ3pDLEtBQUssS0FBTWxNLEtBQUt1UixNQUFNdkksRUFBRTJGLFFBQVEsSUFDaENuTCxNQUFNLGVBQWdCLENBQUM2WixFQUFHM2hCLElBQUlBLEdBQUd3TSxFQUFPekwsT0FBTyxFQUFFLEVBQUUsR0FDbkQrRyxNQUFNLFNBQVUsa0JBQ2hCQSxNQUFNLFVBQVcsY0VsZmQybkMsS0FDWixNQUFNQyxFQUFPLHNDQUNiLE9BRUlDLFFBQVNELEVBQU8sc0JBQ2hCRSxJQUFLRixFQUFPLHVDQUNaRyxVQUFXSCxFQUFPLDJDQUdsQkksUUFBU0osRUFBTyw2RUFDaEJLLGNBQWVMLEVBQU8sbUZBQ3RCTSxZQUFhTixFQUFPLGlGQUNwQk8sV0FBWVAsRUFBTyxvREFDbkJRLEtBQU1SLEVBQU8sOENBQ2JTLFVBQVdULEVBQU8saUZBQ2xCVSxvQkFBcUJWLEVBQU8sZ0ZBRzVCVyxRQUFTWCxFQUFPLHlEQUdoQlksV0FBWVosRUFBTyxrRkFHbkJhLG9CQUFxQmIsRUFBTyxxSUFDNUJjLFlBQWFkLEVBQU8sbUhBRXBCZSxPQUFRZixFQUFPLGtEQUdmZ0IsT0FBU2hCLEVBQU8sd0NBRWhCaUIsWUFBYWpCLEVBQU8sd0NBR3BCa0IsT0FBUSxpQ0FDUkMsV0FBWSx1REFDWkMsUUFBUyx5REFHVEMsVUFBVyxnREFDWEMsWUFBYSwyQ0FDYkMsa0JBQW1CLDJEQ2RwQixTQUFlQyxFQUFhQyxFQUFRQyxFQUFRQyxFQUFVQyxFQUFRQyxFQUFjQyxFQUFLL0IsTUFHcEZyc0MsRUFBS291QyxFQUFLYixhQUNMbnRDLEtBQUssU0FBU3VELEdBRVgsSUFBSTBxQyxFRCtDVCxTQUEwQjFxQyxFQUFNMnFDLEdBQVEsR0FHM0MsTUFBTUMsR0FBa0IsVUFBVyxvQkFBcUIsb0JBQXFCLGlCQUFrQixpQkFFekZuaEMsRUFBTyxtQkFDYixJQUFJekosRUFBSzlDLGVBQWV1TSxHQUFPLEtBQU0sNkNBQ3JDLE1BQU1vaEMsRUFBbUIsR0FBVEYsRUFBZTNxQyxFQUFLeUosR0FBTXpKLEVBQUt5SixHQUFNakMsT0FBUTVDLElBQWFnbUMsRUFBZUUsU0FBU2xtQyxFQUFFbW1DLHNCQUduRyxhQUFjLHFCQUFzQixvQkFBb0J4dkMsUUFBU3FKLElBQzlELElBQUtpbUMsRUFBUSxHQUFHM3RDLGVBQWUwSCxHQUFJLHFDQUFzQ0EsbUJBRTdFLElBQUk4bEMsRUFBZUcsRUFBUUcsT0FBTyxDQUFDQyxFQUFLcm1DLEtBQ3BDLElBQUlzbUMsRUFBWXRtQyxFQUFFdW1DLFdBQ2RDLEdBQ0FoUixHQUFJeDFCLEVBQUVtbUMsbUJBQ04veEMsS0FBTTRMLEVBQUV5bUMsa0JBSVosT0FGS0osRUFBSS90QyxlQUFlZ3VDLEtBQVlELEVBQUlDLE9BQ3hDRCxFQUFJQyxHQUFXdndDLEtBQUt5d0MsR0FDYkgsT0FjWCxPQVJBNXZDLE9BQU9tUyxLQUFLazlCLEdBQWNudkMsUUFBU3FKLElBQy9CLEdBQThCLEdBQTFCOGxDLEVBQWE5bEMsR0FBRzVLLE9BQVksQ0FDNUIsSUFBSW94QyxFQUFPVixFQUFhOWxDLEdBQUcsVUFDcEI4bEMsRUFBYTlsQyxHQUNwQjhsQyxFQUFhVSxFQUFLcHlDLE9BQVNveUMsTUFJNUJWLEVDbEZvQlksQ0FBaUJ0ckMsR0FEcEIsSUNXckIsU0FBK0J5RixFQUFRcTlCLEVBQU82SCxHQUFRLEdBQ3pELE1BQU1ZLEVBQVUsMEJBS2hCcmtDLE9BQVc0N0IsS0FBU3g3QixVQUFVLEtBQUt0RixTQUduQyxNQUFNd3BDLEVBQWdCdkksRUFBRSxVQUFVeDVCLEtBQUssUUFBUyx1QkFBdUI2NUIsU0FBU0wsTUFBTUgsTUFDbEY2SCxFQUNBMUgsa0JBQWtCc0ksS0FDbEIsNEVBQ2lCakksU0FBU2tJLEdBRTFCdkksa0JBQWtCc0ksS0FDbEIsbUZBQ2dCQSxLQUNoQiw0RUFDaUJqSSxTQUFTa0ksR0FLOUJ2SSxFQUFFLDRCQUE0QndJLE9BQU8sV0FFakMsT0FEVXhJLEVBQUUxbEMsTUFBTW11QyxPQUVkLElBQUssTUFDRHpJLEVBQUUsZ0JBQWdCMEksS0FBSyxXQUFXLEdBQ2xDMUksRUFBRSxtQkFBbUIwSSxLQUFLLFdBQVcsR0FDckMsTUFFSixJQUFLLFFBQ0QxSSxFQUFFLGdCQUFnQjBJLEtBQUssV0FBVyxHQUNsQzFJLEVBQUUsbUJBQW1CMEksS0FBSyxXQUFXLE1BVWpELElBQUlDLEVBQWF2d0MsT0FBT21TLEtBQUsvSCxHQUFRdUQsT0FJckMsTUFBTTZpQyxFQUFZMy9CLEdBQU0sRUFBRSxHQUFHblQsSUFBSzZMLEdBQ3ZCcStCLHFCQUFxQnIrQixrQ0FBa0MwK0IsU0FBU0wsTUFBTUgsT0FHakY4SSxFQUFXcndDLFFBQVEsU0FBU3V3QyxHQUN4QixJQUFJQyxFQUFRdG1DLEVBQU9xbUMsR0FDbkIsTUFBTUUsRUFBTUYsRUFBTXJ4QyxRQUFRLEtBQU0sS0FFaEMsSUFBSXd4QyxFQUFjSixFQUFVLEdBQ3pCLFNBQVdDLEVBQU9HLEVBQWNKLEVBQVUsR0FDcENDLEVBQU1ya0MsTUFBTSxVQUFXd2tDLEVBQWNKLEVBQVUsR0FDL0NDLEVBQU1ya0MsTUFBTSxZQUFXd2tDLEVBQWNKLEVBQVUsSUFHeEQ1SSxrQkFBa0JzSSxtQ0FDZ0JTLDJCQUM5QiwyQ0FDU0YsV0FDVCxpQkFBaUJ4SSxTQUFTMkksR0FHMUJGLEVBQU0veEMsT0FBUyxHQUVmK3hDLEVBQU0vaUMsS0FBSyxDQUFDdEksRUFBR0MsSUFDUEQsRUFBRTA1QixHQUFLejVCLEVBQUV5NUIsR0FBVyxFQUNwQjE1QixFQUFFMDVCLEdBQUt6NUIsRUFBRXk1QixJQUFZLEVBQ2xCLEdBRVY3K0IsUUFBUSxTQUFTNnZDLEVBQU1ueUMsR0FDcEIsSUFBSWl6QyxFQUFXakosRUFBRSxxRUFDNkJtSSxFQUFLaFIsK0JBQ25DLDJDQUNTZ1IsRUFBS3B5QyxjQUNkLGlCQUFpQnNxQyxTQUFTMkksR0FDdENoekMsR0FBSzh5QyxFQUFNL3hDLE9BQVEsR0FBR2t5QyxFQUFTN0ksU0EvRXpCLGFBZ0ZWNkksRUFBU0MsTUFBTSxXQUNYbEosRUFBRSw0QkFBNEIwSSxLQUFLLFdBQVcsT0FNMUQxSSxFQUFFLElBQU0rSSxHQUFLRyxNQUFNLFdBQ2ZsSixFQUFFLDRCQUE0QjBJLEtBQUssV0FBVyxHQUMxQzFJLEVBQUUsSUFBTStJLEdBQUtJLEdBQUcsWUFFaEJMLEVBQU14d0MsUUFBUSxTQUFVNnZDLEdBQ2hCLE1BQVFBLEVBQUtoUixJQUNqQjZJLEVBQUUsSUFBTW1JLEVBQUtoUixJQUFJdVIsS0FBSyxXQUFXLEtBS3JDSSxFQUFNeHdDLFFBQVEsU0FBVTZ2QyxHQUNoQixNQUFRQSxFQUFLaFIsSUFDakI2SSxFQUFFLElBQU1tSSxFQUFLaFIsSUFBSXVSLEtBQUssV0FBVyxTRGhIekNVLENBQXNCM0IsRUFBY04sR0FGcEIsR0FHaEJuSCxNQUFNcUgsS0FBWTZCLE1BMkg5QixTQUFpQnpCLEVBQWNQLEVBQWFDLEVBQVFDLEVBQVFDLEVBQVVDLEVBQVFDLEVBQWNDLEVBQUs2QixlQUFnQnpnQyxFQUFJLElBQ2pILE9BQU8sV0FHSG8zQixNQUFNa0gsS0FBZS8vQixLQUFLLElBRzFCLElBQUltaUMsRUNMTCxTQUE4QjltQyxFQUFRcTlCLEdBQ3pDLElBQUl5SixLQWtCSixPQWpCQXRKLE1BQU1ILEtBQVM4QixLQUFLLFVBQVVqOUIsS0FBSyxXQUMvQixHQUFLczdCLEVBQUUxbEMsTUFBTTZ1QyxHQUFHLFlBQWEsQ0FDekIsTUFBTWhTLEVBQUs2SSxFQUFFMWxDLE1BQU1rTSxLQUFLLE1BQ3hCLEdBQUl3NUIsRUFBRTFsQyxNQUFNaXZDLFNBQVMsZUFBZSxDQUloQyxJQUFJdEIsRUFBWTlRLEVBQUczL0IsUUFBUSxLQUFNLEtBQ0QsR0FBNUJnTCxFQUFPeWxDLEdBQVdseEMsUUFDbEJ1eUMsRUFBZTV4QyxLQUFLOEssRUFBT3lsQyxHQUFXLEdBQUc5USxTQUk3Q21TLEVBQWU1eEMsS0FBS3kvQixNQUl6Qm1TLEVBQWUva0MsT0FBUTVDLFFBQVF3SyxJQUFKeEssR0RkVDZuQyxDQUFxQi9CLEVBQWNOLEdBR3hELEdBQTZCLEdBQXpCbUMsRUFBZXZ5QyxPQUVmLE1BREEweUMsTUFBTSxvQ0FDQSxjQUlWLElBQUlDLEVBQVExSixNQUFNb0gsS0FBVXFCLE1BQU1ycUMsTUFBTSxNQUFNbUcsT0FBTyxTQUFTNUMsR0FBRyxNQUFZLElBQUxBLElBQ3hFLEdBQW9CLEdBQWhCK25DLEVBQU0zeUMsT0FFTixNQURBMHlDLE1BQU0sOENBQ0EsY0FFREMsRUFBTTN5QyxPQUFTNlIsSUFDcEJvM0IsTUFBTXVILEtBQWdCbmdDLHdGQUF3RndCLDRCQUM5RzQyQixRQUFRK0YsS0FBSyxrRUFDYm1FLEVBQVFBLEVBQU1ueUMsTUFBTSxFQUFHcVIsSUFNM0IsTUFBTStnQyxLQUNOdnhDLE9BQU9tUyxLQUFLazlCLEdBQWNudkMsUUFBU3V3QyxJQUMvQnBCLEVBQWFvQixHQUFPdndDLFFBQVM2dkMsSUFDekJ3QixFQUFXeEIsRUFBS2hSLElBQU1nUixFQUFLcHlDLFNBS25DMnpDLEVBQU1weEMsUUFBUSxTQUFTc3hDLEVBQU01ekMsR0FDekI0ekMsRUFBS3B5QyxRQUFRLEtBQU0sSUFDbkIsSUFBSXF5QyxFQUFNRCxFQUFLeHJDLE1BQU0sS0FBSyxHQUN0QjByQyxFQUFNRixFQUFLeHJDLE1BQU0sS0FBSyxHQUcxQixNQUFNMnJDLEVBQVV2QyxFQUFLZixPQUFTcUQsRUFDeEJFLEVBQWFILEVBQUkxeUIsY0FBYzh5QixXQUFXLE1BQU16QyxFQUFLNUIsSUFBSWlFLEVBQUlyQyxFQUFLM0IsVUFBVWdFLEVBRWxGSyxRQUFRQyxLQUFLL3dDLEVBQUsyd0MsR0FBVTN3QyxFQUFLNHdDLEtBQzVCeHdDLEtBQUssU0FBU2s3QixHQUNYLE1BQU0wVixFQW1DMUIsU0FBb0JDLEVBQU9sVCxHQUV2QixJQUFJa1QsRUFBTXB3QyxlQURHLFVBQ21CLEtBQU0sZ0NBQ3RDLElBQUlxd0MsRUFBUUQsRUFBVSxPQUFFOWxDLE9BQVE1QyxHQUFjQSxFQUFFNG9DLGlCQUFtQnBULEVBQUc3VyxlQUFpQjNlLEVBQUU2b0MsV0FBYXJULEVBQUc3VyxlQUN6RyxPQUFtQixHQUFmZ3FCLEVBQU12ekMsT0FBbUIsS0FDdEJ1ekMsRUFBTSxHQXhDZ0JHLENBQVcvVixFQUFLLEdBQUlvVixHQUMzQlksRUFnRDFCLFNBQXVCQyxHQUVuQixJQUFJQSxFQUFNMXdDLGVBREcsV0FDbUIsS0FBTSxtQ0FDdEMsTUFBTTJ3QyxFQUFXRCxFQUFVLFFBQzNCLE9BQXVCLEdBQW5CQyxFQUFTN3pDLE9BQW9CLEtBQzFCNnpDLEVBQVMsR0FyRGdCQyxDQUFjblcsRUFBSyxJQUNuQyxHQUFhLE9BQVQwVixFQUFjLENBQ2QsTUFBTVUsb0NBQWlEaEIsV0FFdkQsTUFEQTlKLE1BQU11SCxLQUFnQm5nQyxPQUFPMGpDLEdBQ3ZCQSxFQUVWLEdBQWdCLE9BQVpKLEVBQWlCLENBQ2pCLE1BQU1JLHVDQUFvRGpCLFVBRTFELE1BREE3SixNQUFNdUgsS0FBZ0JuZ0MsT0FBTzBqQyxHQUN2QkEsR0F5RDlCLFNBQXlCbkIsRUFBWXpDLEVBQWFrRCxFQUFNTSxFQUFTOUMsRUFBUzV4QyxFQUFHd3hDLEVBQUsvQixNQUU5RSxNQUFNdE8sZUFBa0JuaEMsSUFDeEJncUMsTUFBTWtILEtBQWU5L0IsbUJBQW1CK3ZCLCtCQUd4QyxJQUFJNFQsRUFBTUwsRUFBUTdFLFVBQVV6bkMsTUFBTSxLQUFLLEdBQ25DNHNDLEVBQU1OLEVBQVE3RSxVQUFVem5DLE1BQU0sS0FBSyxHQUN2QyxNQUFNNnNDLEVBQU1GLEVBQU1DLEVBQ2xCRCxHQUFZQSxFQUNaQyxHQUFZQSxFQUVaLElBQUlFLEtBd0dSLElBQWtCQyxFQUFLekUsRUFyR25Ca0IsRUFBUXR2QyxRQUFTOHlDLElBQ2IsSUFBSUMsRUFBVTdELEVBQWMsUUFFeEIyRCxLQUFTRSxlQUFxQlgsRUFBUTdFLHVCQUF1QnVFLEVBQUtJLGdDQUFnQ1ksSUFDdEdGLEVBQVN4ekMsTUFpR0N5ekMsRUFqR2FBLEVBaUdSekUsRUFqR2EwRSxFQW1HekIsSUFBSWxCLFFBQVEsU0FBU29CLEVBQVNDLEdBQ2pDbnlDLEVBQUsreEMsR0FDQTN4QyxLQUFLLFNBQVNneUMsR0FDWEYsRUFBUUUsS0FFWEMsTUFBTSxTQUFTQyxHQUVaLE1BQU1DLEdBQ0ZqRixPQUFRQSxFQUNSeHRDLE9BQVEsVUFFWm95QyxFQUFRSyxXQTNHcEJ6QixRQUFRQyxJQUFJZSxHQUNQMXhDLEtBQUssU0FBU295QyxHQUNYLElBQUl2eUMsS0FDQWttQyxLQW1FaEIsSUFBb0JubUMsRUFsRVJ3eUMsRUFBUXR6QyxRQUFTcUosSUFDYixHQUFnQixVQUFaQSxFQUFFekksT0FBbUIsQ0FFckIsSUFBSTBELEVBQVErc0MsRUFBV2hvQyxFQUFFK2tDLFFBRXpCcnRDLEVBQVFBLEVBQU1aLFNBRU5tRSxNQUFPQSxFQUNQOG1DLE1BQU9xSCxFQUFJaDBDLE9BQU8sRUFBRSxNQUFNZzBDLEVBQzFCNWlDLFFBQVMsS0FHVHZMLE1BQU9BLEVBQ1A4bUMsTUFBT3VILEVBQUlsMEMsT0FBTyxFQUFFLE1BQU1rMEMsRUFDMUI5aUMsUUFBUyxLQUdUdkwsTUFBT0EsRUFDUDhtQyxNQUFPc0gsRUFBSWowQyxPQUFPLEVBQUUsTUFBTWkwQyxFQUMxQjdpQyxRQUFTLFVBSWhCLENBMkNEL08sRUExQ2V1SSxHQTRDOUIsT0FBUSxZQUFhLFNBQVUsa0JBQW1CLHNCQUFzQnJKLFFBQVNxSixJQUM5RSxJQUFJdkksRUFBS2EsZUFBZTBILEdBRXBCLE1BREE2OUIsUUFBUTcxQixNQUFNdlEsR0FDUixvREFBc0R1SSxJQUlwRXZJLEVBQUt5eUMsa0JBQW9CenlDLEVBQUsyRCxLQUFLakgsSUFBSzZMLEdBQUk4aEMsV0FBVzloQyxJQUN2RHZJLEVBQUsweUMsVUFBWTF5QyxFQUFLMHlDLFVBQVVoMkMsSUFBSzZMLEdBQUk4aEMsV0FBVzloQyxJQUVwRHZJLEVBQUsyeUMsV0FBYTN5QyxFQUFLeXlDLGtCQUFrQnRuQyxPQUFPLENBQUM1QyxFQUFFM0wsSUFDbkIsR0FBckJvRCxFQUFLMHlDLFVBQVU5MUMsSUFFMUJvRCxFQUFLNHlDLFdBQWE1eUMsRUFBS3l5QyxrQkFBa0J0bkMsT0FBTyxDQUFDNUMsRUFBRTNMLElBQ25CLEdBQXJCb0QsRUFBSzB5QyxVQUFVOTFDLElBRTFCb0QsRUFBSzZ5QyxVQUFZN3lDLEVBQUt5eUMsa0JBQWtCdG5DLE9BQU8sQ0FBQzVDLEVBQUUzTCxJQUNsQixHQUFyQm9ELEVBQUsweUMsVUFBVTkxQyxJQTVEVixJQUFJNEcsRUFBUStzQyxHQURaaG9DLEVBK0RUdkksR0E5RGtDMHVDLG9CQUV6Qnp1QyxFQUFRQSxFQUFNWixTQUVObUUsTUFBT0EsRUFDUDhtQyxNQUFPcUgsRUFBSWgwQyxPQUFPLEVBQUUsTUFBTWcwQyxFQUMxQnRtQyxLQUFNOUMsRUFBRW9xQyxXQUFXaDFDLE9BQ25Cb1IsT0FBUXhHLEVBQUVvcUMsYUFHVm52QyxNQUFPQSxFQUNQOG1DLE1BQU91SCxFQUFJbDBDLE9BQU8sRUFBRSxNQUFNazBDLEVBQzFCeG1DLEtBQU05QyxFQUFFc3FDLFVBQVVsMUMsT0FDbEJvUixPQUFReEcsRUFBRXNxQyxZQUdWcnZDLE1BQU9BLEVBQ1A4bUMsTUFBT3NILEVBQUlqMEMsT0FBTyxFQUFFLE1BQU1pMEMsRUFDMUJ2bUMsS0FBTTlDLEVBQUVxcUMsV0FBV2oxQyxPQUNuQm9SLE9BQVF4RyxFQUFFcXFDLGNBSWxCek0sRUFBSzNpQyxJQUNEc3ZDLE9BQXdCLE9BQWR2cUMsRUFBVSxPQUFTLEVBQUU4aEMsV0FBVzloQyxFQUFVLFFBQUd3ZSxZQUFZLEdBQ25FZ3NCLGdCQUEwQyxPQUF2QnhxQyxFQUFtQixnQkFBUyxFQUFFOGhDLFdBQVc5aEMsRUFBbUIsaUJBQUd3ZSxZQUFZLE9BMVN0SCxTQUFvQmlxQixFQUFNTSxFQUFTMEIsRUFBUS95QyxFQUFPa21DLEdBRTlDLE1BQU1wSSxHQUNGa1YsS0FBTUQsRUFDTnRNLFFBQVMsY0FDVHlDLFdBQVk2SixXQUNaNWtDLFNBQVU0a0MsU0FDVkUsU0FBVUYsU0FDVjF5QyxPQUFRMHlDLE9BQ1I5TCxTQUNJaU0sUUFBU0gsVUFLakIsR0FBK0IsR0FBM0JwTSxNQUFNN0ksRUFBR2tWLFFBQVF0MUMsT0FBYSxLQUFNLGlEQUNOLEdBQTlCaXBDLE1BQU03SSxFQUFHMkksV0FBVy9vQyxRQUFhaXBDLEVBQUUsVUFBVXg1QixLQUFLLEtBQU0yd0IsRUFBRzJJLFNBQVNPLFNBQVNMLEVBQUUsU0FHbkYvN0IsT0FBV2t6QixFQUFHa1YsUUFBUWhvQyxVQUFVLEtBQUt0RixVQUdwQyxVQUFXLFFBQVMsU0FBU3pHLFFBQVNxSixJQUNuQ3ErQixFQUFFLFVBQVV4NUIsS0FBSyxLQUFNMndCLEVBQUd4MUIsSUFBSTArQixTQUFTTCxNQUFNN0ksRUFBR2tWLFdBS3BELElBQUlHLEdBQ0Ezb0MsS0FBTSxHQUNORSxJQUFLLEdBQ0xrRSxNQUFPLEdBQ1A4cUIsT0FBUSxLQUdSMFosRUFBNEIsR0FBZnB6QyxFQUFNdEMsT0FDbkI4b0IsRUFBUTRzQixHQUFjRCxFQUFPM29DLEtBQU8yb0MsRUFBT3ZrQyxPQUUzQ3F6QixFQURjLElBQ1VrUixFQUFPem9DLElBQU15b0MsRUFBT3paLFFBRTVDb08sRUFBTWw5QixPQUFXa3pCLEVBQUdtVixTQUNuQmxsQyxPQUFPLE9BQ1BaLEtBQUssUUFBU3FaLEdBQ2RyWixLQUFLLFNBQVU4MEIsR0FDZjkwQixLQUFLLEtBQU0yd0IsRUFBR3o5QixLQUNkME4sT0FBTyxLQUNQWixLQUFLLHlCQUEwQmdtQyxFQUFPM29DLFNBQVMyb0MsRUFBT3pvQyxRQUkzRG85QixFQUFJLzVCLE9BQU8sUUFDTkYsUUFBUSxvQkFBb0IsR0FDNUJ4USxRQUFRMHpDLEVBQUtzQyxlQUFldEMsRUFBS0ksa0JBQWtCRSxFQUFRaUMsT0FBTyxPQUFPakMsRUFBUTdFLGNBQ2pGci9CLEtBQUssSUFBSyxHQUNWQSxLQUFLLElBQW1CLEdBQWJnbUMsRUFBT3pvQyxLQUd2QixJQUFJb2hDLEVBQVMsSUFBSS9DLEdBQWMvb0MsRUFBT2ttQyxHQUN0QyxNQUFNTyxFQUFVcUYsRUFBT3lILGNBQWN6VixFQUFHMkksU0FDeEJxRixFQUFPMEgsY0FBYzFWLEVBQUdvTCxRQUFTekMsR0FDekNnTix3QkFBd0IzVixFQUFHbUosUUFBUWlNLEtBQU1wVixFQUFHejlCLE9BQVF5OUIsRUFBR2tWLGdCQUFpQmxWLEVBQUczdkIsT0FDbkYyOUIsRUFBTy9CLE9BQU9qQyxFQUFLc0wsRUF4QkQsR0F3QjBCLFFBQUt0Z0MsS0FBZSx5QkFBeUIsR0FBTyxFQUFNLEdBQUcsR0FBTyxHQUFNLEdBQU8sR0FRakksU0FBOEI0Z0MsRUFBTTVMLEdBQ2hDNEwsRUFBS3ZxQyxPQUFPbEssUUFBU3FmLElBRWpCLE1BQU1reEIsRUFBUWx4QixFQUFFdmEsSUFDVnVCLEVBQVFrcUMsRUFBTXJ4QyxRQUFRLEtBQU0sUUFBUTRHLE1BQU0sV0FDMUM0dUMsRUFBZTdMLEVBQUkvNUIsT0FBTyxLQUMxQjZsQyxFQUFlRCxFQUFhM29DLFVBQVUsdUJBQ3ZDdEgsS0FBSzRCLEdBQ1ZzdUMsRUFBYXB3QyxRQUFRdUssT0FBTyxRQUN2QlosS0FBSyxJQUFLLEdBQ1ZBLEtBQUssSUFBSyxHQUNWQSxLQUFLLFFBQVMsc0JBQ2RBLEtBQUssWUFBYSxDQUFDN0UsRUFBRzNMLEtBQ25CLElBQUlvTixFQUFJMnBDLEVBQUtsaEMsTUFBTXpJLEVBQUV5bEMsR0FBU2tFLEVBQUtsaEMsTUFBTXpJLEVBQUV3SSxZQUFZLEVBQ25EdEksRUFBSXlwQyxFQUFLbGhDLE1BQU12SSxFQUFFeXBDLEVBQUtsaEMsTUFBTXZJLEVBQUV5SSxTQUFTLElBQU0sR0FBTSxHQUFHL1YsRUFDMUQsbUJBQW9Cb04sTUFBTUUsT0FFN0I1TSxLQUFNaUwsR0FBTUEsS0FHckJ3L0IsRUFBSTk4QixVQUFVLHFCQUFxQjZDLFFBQVEseUJBQXlCLEdBQU1BLFFBQVEsb0JBQW9CLEdBM0J0R2dtQyxDQUFxQi9ILEVBQVFoRSxHQWlQckJnTSxDQUFXL0MsRUFBTU0sRUFBU3ZULEVBQUk5OUIsRUFBT2ttQyxLQUV4Q2tNLE1BQU0sU0FBU0MsR0FBS2xNLFFBQVE3MUIsTUFBTStoQyxLQXhJdkIwQixDQUFnQnpELEVBQVl6QyxFQUFha0QsRUFBTU0sRUFBU3BCLEVBQWdCdHpDLEVBQUd3eEMsR0FHM0V4SCxNQUFNc0gsS0FBVStGLFlBQVksUUFDNUJyTixNQUFNc0gsS0FBVStGLFlBQVksUUFHL0I1QixNQUFNLFNBQVNDLEdBQ1psTSxRQUFRNzFCLE1BQU0raEMsUUFsTUU0QixDQUFRN0YsRUFBY1AsRUFBYUMsRUFBUUMsRUFBUUMsRUFBVUMsRUFBUUMsRUFBY0MsTUFHOUdpRSxNQUFNLFNBQVNDLEdBQ1psTSxRQUFRNzFCLE1BQU0raEMifQ==
