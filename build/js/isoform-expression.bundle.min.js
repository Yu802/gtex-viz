var IsoformExpression=function(t){"use strict";var e="http://www.w3.org/1999/xhtml",n={svg:"http://www.w3.org/2000/svg",xhtml:e,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},r=function(t){var e=t+="",r=e.indexOf(":");return r>=0&&"xmlns"!==(e=t.slice(0,r))&&(t=t.slice(r+1)),n.hasOwnProperty(e)?{space:n[e],local:t}:t};var a=function(t){var n=r(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,r=this.namespaceURI;return r===e&&n.documentElement.namespaceURI===e?n.createElement(t):n.createElementNS(r,t)}})(n)};function i(){}var o=function(t){return null==t?i:function(){return this.querySelector(t)}};function c(){return[]}var s=function(t){return null==t?c:function(){return this.querySelectorAll(t)}},f=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var l=document.documentElement;if(!l.matches){var u=l.webkitMatchesSelector||l.msMatchesSelector||l.mozMatchesSelector||l.oMatchesSelector;f=function(t){return function(){return u.call(this,t)}}}}var h=f,b=function(t){return new Array(t.length)};function p(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}p.prototype={constructor:p,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="$";function m(t,e,n,r,a,i){for(var o,c=0,s=e.length,f=i.length;c<f;++c)(o=e[c])?(o.__data__=i[c],r[c]=o):n[c]=new p(t,i[c]);for(;c<s;++c)(o=e[c])&&(a[c]=o)}function y(t,e,n,r,a,i,o){var c,s,f,l={},u=e.length,d=i.length,h=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(h[c]=f=g+o.call(s,s.__data__,c,e),f in l?a[c]=s:l[f]=s);for(c=0;c<d;++c)(s=l[f=g+o.call(t,i[c],c,i)])?(r[c]=s,s.__data__=i[c],l[f]=null):n[c]=new p(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&l[h[c]]===s&&(a[c]=s)}function v(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var x=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function w(t,e){return t.style.getPropertyValue(e)||x(t).getComputedStyle(t,null).getPropertyValue(e)}function _(t){return t.trim().split(/^|\s+/)}function M(t){return t.classList||new S(t)}function S(t){this._node=t,this._names=_(t.getAttribute("class")||"")}function E(t,e){for(var n=M(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function A(t,e){for(var n=M(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}S.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function T(){this.textContent=""}function N(){this.innerHTML=""}function I(){this.nextSibling&&this.parentNode.appendChild(this)}function k(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function C(){return null}function D(){var t=this.parentNode;t&&t.removeChild(this)}function j(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function P(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var L={},U=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(L={mouseenter:"mouseover",mouseleave:"mouseout"}));function O(t,e,n){return t=F(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function F(t,e,n){return function(r){var a=U;U=r;try{t.call(this,this.__data__,e,n)}finally{U=a}}}function Y(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function H(t,e,n){var r=L.hasOwnProperty(t.type)?O:F;return function(a,i,o){var c,s=this.__on,f=r(e,i,o);if(s)for(var l=0,u=s.length;l<u;++l)if((c=s[l]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=f,c.capture=n),void(c.value=e);this.addEventListener(t.type,f,n),c={type:t.type,name:t.name,value:e,listener:f,capture:n},s?s.push(c):this.__on=[c]}}function q(t,e,n){var r=x(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}var B=[null];function X(t,e){this._groups=t,this._parents=e}function z(){return new X([[document.documentElement]],B)}X.prototype=z.prototype={constructor:X,select:function(t){"function"!=typeof t&&(t=o(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,c,s=e[a],f=s.length,l=r[a]=new Array(f),u=0;u<f;++u)(i=s[u])&&(c=t.call(i,i.__data__,u,s))&&("__data__"in i&&(c.__data__=i.__data__),l[u]=c);return new X(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=s(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,c=e[i],f=c.length,l=0;l<f;++l)(o=c[l])&&(r.push(t.call(o,o.__data__,l,c)),a.push(o));return new X(r,a)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new X(r,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),l=-1,this.each(function(t){b[++l]=t}),b;var n,r=e?y:m,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),s=new Array(o),f=new Array(o),l=0;l<o;++l){var u=a[l],d=i[l],h=d.length,b=t.call(u,u&&u.__data__,l,a),p=b.length,g=s[l]=new Array(p),v=c[l]=new Array(p);r(u,d,g,v,f[l]=new Array(h),b,e);for(var x,w,_=0,M=0;_<p;++_)if(x=g[_]){for(_>=M&&(M=_+1);!(w=v[M])&&++M<p;);x._next=w||null}}return(c=new X(c,a))._enter=s,c._exit=f,c},enter:function(){return new X(this._enter||this._groups.map(b),this._parents)},exit:function(){return new X(this._exit||this._groups.map(b),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new X(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=v);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,c=n[i],s=c.length,f=a[i]=new Array(s),l=0;l<s;++l)(o=c[l])&&(f[l]=o);f.sort(e)}return new X(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,c=i.length;o<c;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=r(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):w(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=_(t+"");if(arguments.length<2){for(var r=M(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?E:A)(this,t)}}:e?function(t){return function(){E(this,t)}}:function(t){return function(){A(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?T:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?N:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(I)},lower:function(){return this.each(k)},append:function(t){var e="function"==typeof t?t:a(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?C:"function"==typeof e?e:o(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(D)},clone:function(t){return this.select(t?P:j)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?H:Y,null==n&&(n=!1),r=0;r<o;++r)this.each(c(i[r],e,n));return this}var c=this.node().__on;if(c)for(var s,f=0,l=c.length;f<l;++f)for(r=0,s=c[f];r<o;++r)if((a=i[r]).type===s.type&&a.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return q(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return q(this,t,e)}})(t,e))}};var V=function(t){return"string"==typeof t?new X([[document.querySelector(t)]],[document.documentElement]):new X([[t]],B)},R=function(t){return"string"==typeof t?new X([document.querySelectorAll(t)],[document.documentElement]):new X([null==t?[]:t],B)},W={},G={},J=34,Z=10,Q=13;function K(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var tt=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,a=[],i=t.length,o=0,c=0,s=i<=0,f=!1;function l(){if(s)return G;if(f)return f=!1,W;var e,r,a=o;if(t.charCodeAt(a)===J){for(;o++<i&&t.charCodeAt(o)!==J||t.charCodeAt(++o)===J;);return(e=o)>=i?s=!0:(r=t.charCodeAt(o++))===Z?f=!0:r===Q&&(f=!0,t.charCodeAt(o)===Z&&++o),t.slice(a+1,e-1).replace(/""/g,'"')}for(;o<i;){if((r=t.charCodeAt(e=o++))===Z)f=!0;else if(r===Q)f=!0,t.charCodeAt(o)===Z&&++o;else if(r!==n)continue;return t.slice(a,e)}return s=!0,t.slice(a,i)}for(t.charCodeAt(i-1)===Z&&--i,t.charCodeAt(i-1)===Q&&--i;(r=l())!==G;){for(var u=[];r!==W&&r!==G;)u.push(r),r=l();e&&null==(u=e(u,c++))||a.push(u)}return a}function a(e){return e.map(i).join(t)}function i(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,i=r(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=K(t);return function(r,a){return e(n(r),a,t)}}(t,e):K(t)});return i.columns=a||[],i},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(i).join(t)].concat(e.map(function(e){return n.map(function(t){return i(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}};tt(","),tt("\t");function et(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var nt=function(t,e){return fetch(t,e).then(et)},rt=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var at,it,ot=(1===(at=rt).length&&(it=at,at=function(t,e){return rt(it(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;at(t[a],e)<0?n=a+1:r=a}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;at(t[a],e)>0?r=a:n=a+1}return n}}).right,ct=function(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i},st=Math.sqrt(50),ft=Math.sqrt(10),lt=Math.sqrt(2),ut=function(t,e,n){var r,a,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=dt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(t-c)/o;return r&&i.reverse(),i};function dt(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=st?10:i>=ft?5:i>=lt?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=st?10:i>=ft?5:i>=lt?2:1)}var ht=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},bt=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},pt=function(t,e){var n,r=t.length,a=-1,i=0;if(null==e)for(;++a<r;)(n=+t[a])&&(i+=n);else for(;++a<r;)(n=+e(t[a],a,t))&&(i+=n);return i};function gt(){}function mt(t,e){var n=new gt;if(t instanceof gt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}gt.prototype=mt.prototype={constructor:gt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var yt=function(){var t,e,n,r=[],a=[];function i(n,a,o,c){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,f,l,u=-1,d=n.length,h=r[a++],b=mt(),p=o();++u<d;)(l=b.get(s=h(f=n[u])+""))?l.push(f):b.set(s,[f]);return b.each(function(t,e){c(p,e,i(t,a,o,c))}),p}return n={object:function(t){return i(t,0,vt,xt)},map:function(t){return i(t,0,wt,_t)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var o,c=a[i-1];return null!=e&&i>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,wt,_t),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function vt(){return{}}function xt(t,e,n){t[e]=n}function wt(){return mt()}function _t(t,e,n){t.set(e,n)}var Mt=Array.prototype,St=Mt.map,Et=Mt.slice,At={name:"implicit"};function Tt(){var t,e,n=function t(e){var n=mt(),r=[],a=At;function i(t){var i=t+"",o=n.get(i);if(!o){if(a!==At)return a;n.set(i,o=r.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:Et.call(e),i.domain=function(t){if(!arguments.length)return r.slice();r=[],n=mt();for(var e,a,o=-1,c=t.length;++o<c;)n.has(a=(e=t[o])+"")||n.set(a,r.push(e));return i},i.range=function(t){return arguments.length?(e=Et.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(a=t,i):a},i.copy=function(){return t().domain(r).range(e).unknown(a)},i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,c=0,s=0,f=.5;function l(){var n=r().length,l=i[1]<i[0],u=i[l-0],d=i[1-l];t=(d-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(d-u-t*(n-c))*f,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var h=ct(n).map(function(e){return u+t*e});return a(l?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],l()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,l()):o},n.padding=function(t){return arguments.length?(c=s=Math.max(0,Math.min(1,t)),l()):c},n.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},n.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),l()):f},n.copy=function(){return Tt().domain(r()).range(i).round(o).paddingInner(c).paddingOuter(s).align(f)},l()}var Nt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function It(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function $t(){}var kt="\\s*([+-]?\\d+)\\s*",Ct="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Dt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jt=/^#([0-9a-f]{3})$/,Pt=/^#([0-9a-f]{6})$/,Lt=new RegExp("^rgb\\("+[kt,kt,kt]+"\\)$"),Ut=new RegExp("^rgb\\("+[Dt,Dt,Dt]+"\\)$"),Ot=new RegExp("^rgba\\("+[kt,kt,kt,Ct]+"\\)$"),Ft=new RegExp("^rgba\\("+[Dt,Dt,Dt,Ct]+"\\)$"),Yt=new RegExp("^hsl\\("+[Ct,Dt,Dt]+"\\)$"),Ht=new RegExp("^hsla\\("+[Ct,Dt,Dt,Ct]+"\\)$"),qt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Bt(t){var e;return t=(t+"").trim().toLowerCase(),(e=jt.exec(t))?new Wt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Pt.exec(t))?Xt(parseInt(e[1],16)):(e=Lt.exec(t))?new Wt(e[1],e[2],e[3],1):(e=Ut.exec(t))?new Wt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ot.exec(t))?zt(e[1],e[2],e[3],e[4]):(e=Ft.exec(t))?zt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Yt.exec(t))?Jt(e[1],e[2]/100,e[3]/100,1):(e=Ht.exec(t))?Jt(e[1],e[2]/100,e[3]/100,e[4]):qt.hasOwnProperty(t)?Xt(qt[t]):"transparent"===t?new Wt(NaN,NaN,NaN,0):null}function Xt(t){return new Wt(t>>16&255,t>>8&255,255&t,1)}function zt(t,e,n,r){return r<=0&&(t=e=n=NaN),new Wt(t,e,n,r)}function Vt(t){return t instanceof $t||(t=Bt(t)),t?new Wt((t=t.rgb()).r,t.g,t.b,t.opacity):new Wt}function Rt(t,e,n,r){return 1===arguments.length?Vt(t):new Wt(t,e,n,null==r?1:r)}function Wt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Gt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Jt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Zt(t,e,n,r)}function Zt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Qt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Nt($t,Bt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Nt(Wt,Rt,It($t,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Wt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Wt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Gt(this.r)+Gt(this.g)+Gt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Nt(Zt,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Zt)return new Zt(t.h,t.s,t.l,t.opacity);if(t instanceof $t||(t=Bt(t)),!t)return new Zt;if(t instanceof Zt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,c=i-a,s=(i+a)/2;return c?(o=e===i?(n-r)/c+6*(n<r):n===i?(r-e)/c+2:(e-n)/c+4,c/=s<.5?i+a:2-i-a,o*=60):c=s>0&&s<1?0:o,new Zt(o,c,s,t.opacity)}(t):new Zt(t,e,n,null==r?1:r)},It($t,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new Wt(Qt(t>=240?t-240:t+120,a,r),Qt(t,a,r),Qt(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Kt=Math.PI/180,te=180/Math.PI,ee=.96422,ne=1,re=.82521,ae=4/29,ie=6/29,oe=3*ie*ie,ce=ie*ie*ie;function se(t){if(t instanceof fe)return new fe(t.l,t.a,t.b,t.opacity);if(t instanceof be){if(isNaN(t.h))return new fe(t.l,0,0,t.opacity);var e=t.h*Kt;return new fe(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Wt||(t=Vt(t));var n,r,a=he(t.r),i=he(t.g),o=he(t.b),c=le((.2225045*a+.7168786*i+.0606169*o)/ne);return a===i&&i===o?n=r=c:(n=le((.4360747*a+.3850649*i+.1430804*o)/ee),r=le((.0139322*a+.0971045*i+.7141733*o)/re)),new fe(116*c-16,500*(n-c),200*(c-r),t.opacity)}function fe(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function le(t){return t>ce?Math.pow(t,1/3):t/oe+ae}function ue(t){return t>ie?t*t*t:oe*(t-ae)}function de(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function he(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function be(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}Nt(fe,function(t,e,n,r){return 1===arguments.length?se(t):new fe(t,e,n,null==r?1:r)},It($t,{brighter:function(t){return new fe(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new fe(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Wt(de(3.1338561*(e=ee*ue(e))-1.6168667*(t=ne*ue(t))-.4906146*(n=re*ue(n))),de(-.9787684*e+1.9161415*t+.033454*n),de(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Nt(be,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof be)return new be(t.h,t.c,t.l,t.opacity);if(t instanceof fe||(t=se(t)),0===t.a&&0===t.b)return new be(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*te;return new be(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new be(t,e,n,null==r?1:r)},It($t,{brighter:function(t){return new be(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new be(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return se(this).rgb()}}));var pe=-.14861,ge=1.78277,me=-.29227,ye=-.90649,ve=1.97294,xe=ve*ye,we=ve*ge,_e=ge*me-ye*pe;function Me(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Se)return new Se(t.h,t.s,t.l,t.opacity);t instanceof Wt||(t=Vt(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(_e*r+xe*e-we*n)/(_e+xe-we),i=r-a,o=(ve*(n-a)-me*i)/ye,c=Math.sqrt(o*o+i*i)/(ve*a*(1-a)),s=c?Math.atan2(o,i)*te-120:NaN;return new Se(s<0?s+360:s,c,a,t.opacity)}(t):new Se(t,e,n,null==r?1:r)}function Se(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ee(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}Nt(Se,Me,It($t,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Se(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Se(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Kt,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new Wt(255*(e+n*(pe*r+ge*a)),255*(e+n*(me*r+ye*a)),255*(e+n*(ve*r)),this.opacity)}}));var Ae=function(t){return function(){return t}};function Te(t,e){return function(n){return t+n*e}}function Ne(t){return 1==(t=+t)?Ie:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ae(isNaN(e)?n:e)}}function Ie(t,e){var n=e-t;return n?Te(t,n):Ae(isNaN(t)?e:t)}var $e=function t(e){var n=Ne(e);function r(t,e){var r=n((t=Rt(t)).r,(e=Rt(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Ie(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function ke(t){return function(e){var n,r,a=e.length,i=new Array(a),o=new Array(a),c=new Array(a);for(n=0;n<a;++n)r=Rt(e[n]),i[n]=r.r||0,o[n]=r.g||0,c[n]=r.b||0;return i=t(i),o=t(o),c=t(c),r.opacity=1,function(t){return r.r=i(t),r.g=o(t),r.b=c(t),r+""}}}var Ce=ke(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,c=r<e-1?t[r+2]:2*i-a;return Ee((n-r/e)*e,o,a,i,c)}}),De=(ke(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),a=t[(r+e-1)%e],i=t[r%e],o=t[(r+1)%e],c=t[(r+2)%e];return Ee((n-r/e)*e,a,i,o,c)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),je=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pe=new RegExp(je.source,"g");var Le,Ue,Oe,Fe,Ye=function(t,e){var n,r,a,i=je.lastIndex=Pe.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=je.exec(t))&&(r=Pe.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),c[o]?c[o]+=a:c[++o]=a),(n=n[0])===(r=r[0])?c[o]?c[o]+=r:c[++o]=r:(c[++o]=null,s.push({i:o,x:De(n,r)})),i=Pe.lastIndex;return i<e.length&&(a=e.slice(i),c[o]?c[o]+=a:c[++o]=a),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)c[(n=s[r]).i]=n.x(t);return c.join("")})},He=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Ae(e):("number"===r?De:"string"===r?(n=Bt(e))?(e=n,$e):Ye:e instanceof Bt?$e:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=He(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=He(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}:De)(t,e)},qe=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Be=180/Math.PI,Xe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ze=function(t,e,n,r,a,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,s/=c),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*Be,skewX:Math.atan(s)*Be,scaleX:o,scaleY:c}};function Ve(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,r,a,i,o,c){if(t!==a||r!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:De(t,a)},{i:s-2,x:De(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:De(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:De(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,c,s),function(t,e,n,r,i,o){if(t!==n||e!==r){var c=i.push(a(i)+"scale(",null,",",null,")");o.push({i:c-4,x:De(t,n)},{i:c-2,x:De(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var Re=Ve(function(t){return"none"===t?Xe:(Le||(Le=document.createElement("DIV"),Ue=document.documentElement,Oe=document.defaultView),Le.style.transform=t,t=Oe.getComputedStyle(Ue.appendChild(Le),null).getPropertyValue("transform"),Ue.removeChild(Le),t=t.slice(7,-1).split(","),ze(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),We=Ve(function(t){return null==t?Xe:(Fe||(Fe=document.createElementNS("http://www.w3.org/2000/svg","g")),Fe.setAttribute("transform",t),(t=Fe.transform.baseVal.consolidate())?(t=t.matrix,ze(t.a,t.b,t.c,t.d,t.e,t.f)):Xe)},", ",")",")");function Ge(t){return function e(n){function r(e,r){var a=t((e=Me(e)).h,(r=Me(r)).h),i=Ie(e.s,r.s),o=Ie(e.l,r.l),c=Ie(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,r.gamma=e,r}(1)}Ge(function(t,e){var n=e-t;return n?Te(t,n>180||n<-180?n-360*Math.round(n/360):n):Ae(isNaN(t)?e:t)});var Je=Ge(Ie),Ze=function(t){return function(){return t}},Qe=function(t){return+t},Ke=[0,1];function tn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Ze(e)}function en(t,e,n,r){var a=t[0],i=t[1],o=e[0],c=e[1];return i<a?(a=n(i,a),o=r(c,o)):(a=n(a,i),o=r(o,c)),function(t){return o(a(t))}}function nn(t,e,n,r){var a=Math.min(t.length,e.length)-1,i=new Array(a),o=new Array(a),c=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<a;)i[c]=n(t[c],t[c+1]),o[c]=r(e[c],e[c+1]);return function(e){var n=ot(t,e,1,a)-1;return o[n](i[n](e))}}var rn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},an=function(t){return(t=rn(Math.abs(t)))?t[1]:NaN},on=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function cn(t){return new sn(t)}function sn(t){if(!(e=on.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}cn.prototype=sn.prototype,sn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var fn,ln,un,dn,hn=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(a>0){if(!+t[r])break t;a=0}}return a>0?t.slice(0,a)+t.slice(e+1):t},bn=function(t,e){var n=rn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")},pn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return bn(100*t,e)},r:bn,s:function(t,e){var n=rn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(fn=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+rn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},gn=function(t){return t},mn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ln=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var a=t.length,i=[],o=0,c=e[0],s=0;a>0&&c>0&&(s+c+1>r&&(c=Math.max(1,r-s)),i.push(t.substring(a-=c,a+c)),!((s+=c+1)>r));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):gn,a=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):gn,c=t.percent||"%";function s(t){var e=(t=cn(t)).fill,n=t.align,s=t.sign,f=t.symbol,l=t.zero,u=t.width,d=t.comma,h=t.precision,b=t.trim,p=t.type;"n"===p?(d=!0,p="g"):pn[p]||(null==h&&(h=12),b=!0,p="g"),(l||"0"===e&&"="===n)&&(l=!0,e="0",n="=");var g="$"===f?a[0]:"#"===f&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===f?a[1]:/[%p]/.test(p)?c:"",y=pn[p],v=/[defgprs%]/.test(p);function x(t){var a,c,f,x=g,w=m;if("c"===p)w=y(t)+w,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),h),b&&(t=hn(t)),_&&0==+t&&(_=!1),x=(_?"("===s?s:"-":"-"===s||"("===s?"":s)+x,w=("s"===p?mn[8+fn/3]:"")+w+(_&&"("===s?")":""),v)for(a=-1,c=t.length;++a<c;)if(48>(f=t.charCodeAt(a))||f>57){w=(46===f?i+t.slice(a+1):t.slice(a))+w,t=t.slice(0,a);break}}d&&!l&&(t=r(t,1/0));var M=x.length+t.length+w.length,S=M<u?new Array(u-M+1).join(e):"";switch(d&&l&&(t=r(S+t,S.length?u-w.length:1/0),S=""),n){case"<":t=x+t+w+S;break;case"=":t=x+S+t+w;break;case"^":t=S.slice(0,M=S.length>>1)+x+t+w+S.slice(M);break;default:t=S+x+t+w}return o(t)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),x.toString=function(){return t+""},x}return{format:s,formatPrefix:function(t,e){var n=s(((t=cn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(an(e)/3))),a=Math.pow(10,-r),i=mn[8+r/3];return function(t){return n(a*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),un=ln.format,dn=ln.formatPrefix;var yn=function(t,e,n){var r,a=t[0],i=t[t.length-1],o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=st?a*=10:i>=ft?a*=5:i>=lt&&(a*=2),e<t?-a:a}(a,i,null==e?10:e);switch((n=cn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(a),Math.abs(i));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(an(e)/3)))-an(Math.abs(t)))}(o,c))||(n.precision=r),dn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,an(e)-an(t))+1}(o,Math.max(Math.abs(a),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-an(Math.abs(t)))}(o))||(n.precision=r-2*("%"===n.type))}return un(n)};function vn(t){var e=t.domain;return t.ticks=function(t){var n=e();return ut(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return yn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,o=a.length-1,c=a[i],s=a[o];return s<c&&(r=c,c=s,s=r,r=i,i=o,o=r),(r=dt(c,s,n))>0?r=dt(c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=dt(c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[o]=Math.ceil(s/r)*r,e(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[o]=Math.floor(s*r)/r,e(a)),t},t}function xn(){var t=function(t,e){var n,r,a,i=Ke,o=Ke,c=He,s=!1;function f(){return n=Math.min(i.length,o.length)>2?nn:en,r=a=null,l}function l(e){return(r||(r=n(i,o,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,c)))(+e)}return l.invert=function(t){return(a||(a=n(o,i,tn,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},l.domain=function(t){return arguments.length?(i=St.call(t,Qe),f()):i.slice()},l.range=function(t){return arguments.length?(o=Et.call(t),f()):o.slice()},l.rangeRound=function(t){return o=Et.call(t),c=qe,f()},l.clamp=function(t){return arguments.length?(s=!!t,f()):s},l.interpolate=function(t){return arguments.length?(c=t,f()):c},f()}(tn,De);return t.copy=function(){return e=t,xn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp());var e},vn(t)}var wn=new Date,_n=new Date;function Mn(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return c},a.filter=function(n){return Mn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(a.count=function(e,r){return wn.setTime(+e),_n.setTime(+r),t(wn),t(_n),Math.floor(n(wn,_n))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var Sn=Mn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Sn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Mn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Sn:null};var En=6e4,An=6048e5,Tn=(Mn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Mn(function(t){t.setTime(Math.floor(t/En)*En)},function(t,e){t.setTime(+t+e*En)},function(t,e){return(e-t)/En},function(t){return t.getMinutes()}),Mn(function(t){var e=t.getTimezoneOffset()*En%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Mn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*En)/864e5},function(t){return t.getDate()-1}));function Nn(t){return Mn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*En)/An})}var In=Nn(0),$n=Nn(1),kn=(Nn(2),Nn(3),Nn(4)),Cn=(Nn(5),Nn(6),Mn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Mn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Cn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Mn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*En)},function(t,e){return(e-t)/En},function(t){return t.getUTCMinutes()}),Mn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var Dn=Mn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function jn(t){return Mn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/An})}var Pn=jn(0),Ln=jn(1),Un=(jn(2),jn(3),jn(4)),On=(jn(5),jn(6),Mn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Mn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Fn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Yn(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Hn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}On.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var qn,Bn,Xn,zn={"-":"",_:" ",0:"0"},Vn=/^\s*\d+/,Rn=/^%/,Wn=/[\\^$*+?|[\]().{}]/g;function Gn(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function Jn(t){return t.replace(Wn,"\\$&")}function Zn(t){return new RegExp("^(?:"+t.map(Jn).join("|")+")","i")}function Qn(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Kn(t,e,n){var r=Vn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function tr(t,e,n){var r=Vn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function er(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function nr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function rr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function ar(t,e,n){var r=Vn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ir(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function or(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function cr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function sr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function fr(t,e,n){var r=Vn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function lr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ur(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function dr(t,e,n){var r=Vn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function hr(t,e,n){var r=Vn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function br(t,e,n){var r=Vn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function pr(t,e,n){var r=Rn.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function gr(t,e,n){var r=Vn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function mr(t,e,n){var r=Vn.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function yr(t,e){return Gn(t.getDate(),e,2)}function vr(t,e){return Gn(t.getHours(),e,2)}function xr(t,e){return Gn(t.getHours()%12||12,e,2)}function wr(t,e){return Gn(1+Tn.count(Cn(t),t),e,3)}function _r(t,e){return Gn(t.getMilliseconds(),e,3)}function Mr(t,e){return _r(t,e)+"000"}function Sr(t,e){return Gn(t.getMonth()+1,e,2)}function Er(t,e){return Gn(t.getMinutes(),e,2)}function Ar(t,e){return Gn(t.getSeconds(),e,2)}function Tr(t){var e=t.getDay();return 0===e?7:e}function Nr(t,e){return Gn(In.count(Cn(t),t),e,2)}function Ir(t,e){var n=t.getDay();return t=n>=4||0===n?kn(t):kn.ceil(t),Gn(kn.count(Cn(t),t)+(4===Cn(t).getDay()),e,2)}function $r(t){return t.getDay()}function kr(t,e){return Gn($n.count(Cn(t),t),e,2)}function Cr(t,e){return Gn(t.getFullYear()%100,e,2)}function Dr(t,e){return Gn(t.getFullYear()%1e4,e,4)}function jr(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Gn(e/60|0,"0",2)+Gn(e%60,"0",2)}function Pr(t,e){return Gn(t.getUTCDate(),e,2)}function Lr(t,e){return Gn(t.getUTCHours(),e,2)}function Ur(t,e){return Gn(t.getUTCHours()%12||12,e,2)}function Or(t,e){return Gn(1+Dn.count(On(t),t),e,3)}function Fr(t,e){return Gn(t.getUTCMilliseconds(),e,3)}function Yr(t,e){return Fr(t,e)+"000"}function Hr(t,e){return Gn(t.getUTCMonth()+1,e,2)}function qr(t,e){return Gn(t.getUTCMinutes(),e,2)}function Br(t,e){return Gn(t.getUTCSeconds(),e,2)}function Xr(t){var e=t.getUTCDay();return 0===e?7:e}function zr(t,e){return Gn(Pn.count(On(t),t),e,2)}function Vr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Un(t):Un.ceil(t),Gn(Un.count(On(t),t)+(4===On(t).getUTCDay()),e,2)}function Rr(t){return t.getUTCDay()}function Wr(t,e){return Gn(Ln.count(On(t),t),e,2)}function Gr(t,e){return Gn(t.getUTCFullYear()%100,e,2)}function Jr(t,e){return Gn(t.getUTCFullYear()%1e4,e,4)}function Zr(){return"+0000"}function Qr(){return"%"}function Kr(t){return+t}function ta(t){return Math.floor(+t/1e3)}!function(t){qn=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,f=Zn(a),l=Qn(a),u=Zn(i),d=Qn(i),h=Zn(o),b=Qn(o),p=Zn(c),g=Qn(c),m=Zn(s),y=Qn(s),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:yr,e:yr,f:Mr,H:vr,I:xr,j:wr,L:_r,m:Sr,M:Er,p:function(t){return a[+(t.getHours()>=12)]},Q:Kr,s:ta,S:Ar,u:Tr,U:Nr,V:Ir,w:$r,W:kr,x:null,X:null,y:Cr,Y:Dr,Z:jr,"%":Qr},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Pr,e:Pr,f:Yr,H:Lr,I:Ur,j:Or,L:Fr,m:Hr,M:qr,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:Kr,s:ta,S:Br,u:Xr,U:zr,V:Vr,w:Rr,W:Wr,x:null,X:null,y:Gr,Y:Jr,Z:Zr,"%":Qr},w={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return S(t,e,n,r)},d:sr,e:sr,f:br,H:lr,I:lr,j:fr,L:hr,m:cr,M:ur,p:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:gr,s:mr,S:dr,u:tr,U:er,V:nr,w:Kn,W:rr,x:function(t,e,r){return S(t,n,e,r)},X:function(t,e,n){return S(t,r,e,n)},y:ir,Y:ar,Z:or,"%":pr};function _(t,e){return function(n){var r,a,i,o=[],c=-1,s=0,f=t.length;for(n instanceof Date||(n=new Date(+n));++c<f;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(a=zn[r=t.charAt(++c)])?r=t.charAt(++c):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function M(t,e){return function(n){var r,a,i=Hn(1900);if(S(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=(r=Yn(Hn(i.y))).getUTCDay())>4||0===a?Ln.ceil(r):Ln(r),r=Dn.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(a=(r=e(Hn(i.y))).getDay())>4||0===a?$n.ceil(r):$n(r),r=Tn.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Yn(Hn(i.y)).getUTCDay():e(Hn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Yn(i)):e(i)}}function S(t,e,n,r){for(var a,i,o=0,c=e.length,s=n.length;o<c;){if(r>=s)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=w[a in zn?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return v.x=_(n,v),v.X=_(r,v),v.c=_(e,v),x.x=_(n,x),x.X=_(r,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Fn);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,Yn);return e.toString=function(){return t},e}}}(t),Bn=qn.utcFormat,Xn=qn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Bn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Xn("%Y-%m-%dT%H:%M:%S.%LZ");function ea(t){const e="collapsedGeneModelExon";if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: Required json attribute is missing: "+e;return["start","end"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw"Parse Error: Required json attribute is missing: "+n}),t[e].map(t=>(t.chromStart=t.start,t.chromEnd=t.end,t))}var na=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n};na("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),na("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),na("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),na("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),na("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),na("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),na("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),na("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),na("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var ra=function(t){return Ce(t[t.length-1])};ra(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(na)),ra(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(na)),ra(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(na)),ra(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(na)),ra(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(na)),ra(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(na)),ra(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(na)),ra(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(na)),ra(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(na));var aa=ra(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(na));ra(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(na)),ra(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(na));var ia=ra(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(na));ra(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(na));var oa=ra(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(na));ra(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(na)),ra(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(na));var ca=ra(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(na));ra(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(na)),ra(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(na)),ra(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(na));var sa=ra(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(na)),fa=ra(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(na)),la=ra(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(na)),ua=ra(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(na)),da=ra(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(na)),ha=ra(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(na));Je(Me(300,.5,0),Me(-240,.5,1));Je(Me(-100,.75,.35),Me(80,1.5,.8)),Je(Me(260,.75,.35),Me(80,1.5,.8)),Me(),Rt();function ba(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}ba(na("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));ba(na("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),ba(na("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),ba(na("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function pa(t,e="YlGnBu",n=0){let r=ht(t);const a=function t(e){var n=0,r=1,a=1,i=!1;function o(t){var r=(t-n)*a;return e(i?Math.max(0,Math.min(1,r)):r)}return o.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],a=n===r?0:1/(r-n),o):[n,r]},o.clamp=function(t){return arguments.length?(i=!!t,o):i},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return t(e).domain([n,r]).clamp(i)},vn(o)}(function(t){const e={BuGn:aa,OrRd:ia,PuBu:oa,YlGnBu:ca,Blues:sa,Oranges:ha,Greens:fa,Purples:ua,Reds:da,Greys:la,Grays:la};if(!e.hasOwnProperty(t)){const e="Color Interpolator Error "+t;throw console.error(e),e}return e[t]}(e));return a.domain([n,r]),a}function ga(t,e,n,r,a,i=10,o=10,c={h:10,w:50},s="h"){const f=[0].concat(n.ticks(i).slice(1)),l=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"==s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${r.x}, ${r.y})`),l.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),l.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+c.h*f.length})rotate(90)`),l.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),l.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}class ma{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},a=12,i=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:a},this.topTreePanel={x:r.left+e,y:r.top,h:n-i,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function ya(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function va(t,e){var n,r,a,i,o,c=new Ma(t),s=+t.value&&(c.value=t.value),f=[c];for(null==e&&(e=xa);n=f.pop();)if(s&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)f.push(r=n.children[i]=new Ma(a[i])),r.parent=n,r.depth=n.depth+1;return c.eachBefore(_a)}function xa(t){return t.children}function wa(t){t.data=t.data.data}function _a(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Ma(t){this.data=t,this.depth=this.height=0,this.parent=null}Ma.prototype=va.prototype={constructor:Ma,count:function(){return this.eachAfter(ya)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;for(t=n.pop(),e=r.pop();t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return va(this).eachBefore(wa)}};var Sa=Array.prototype.slice,Ea=function(t){return t},Aa=1,Ta=2,Na=3,Ia=4,$a=1e-6;function ka(t){return"translate("+(t+.5)+",0)"}function Ca(t){return"translate(0,"+(t+.5)+")"}function Da(){return!this.__axis}function ja(t,e){var n=[],r=null,a=null,i=6,o=6,c=3,s=t===Aa||t===Ia?-1:1,f=t===Ia||t===Ta?"x":"y",l=t===Aa||t===Na?ka:Ca;function u(u){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==a?e.tickFormat?e.tickFormat.apply(e,n):Ea:a,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(d,e).order(),_=w.exit(),M=w.enter().append("g").attr("class","tick"),S=w.select("line"),E=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(M),S=S.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",s*i)),E=E.merge(M.append("text").attr("fill","currentColor").attr(f,s*b).attr("dy",t===Aa?"0em":t===Na?"0.71em":"0.32em")),u!==v&&(x=x.transition(u),w=w.transition(u),S=S.transition(u),E=E.transition(u),_=_.transition(u).attr("opacity",$a).attr("transform",function(t){return isFinite(t=y(t))?l(t):this.getAttribute("transform")}),M.attr("opacity",$a).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===Ia||t==Ta?o?"M"+s*o+","+g+"H0.5V"+m+"H"+s*o:"M0.5,"+g+"V"+m:o?"M"+g+","+s*o+"V0.5H"+m+"V"+s*o:"M"+g+",0.5H"+m),w.attr("opacity",1).attr("transform",function(t){return l(y(t))}),S.attr(f+"2",s*i),E.attr(f,s*b).text(h),v.filter(Da).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Ta?"start":t===Ia?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=Sa.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:Sa.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(r=null==t?null:Sa.call(t),u):r&&r.slice()},u.tickFormat=function(t){return arguments.length?(a=t,u):a},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}const Pa=!1;class La{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=va(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),a=0;a<r.length;a++){var i=r[a];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=r[a-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||rt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call((i=this.xScale,ja(Na,i)).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||rt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").call((i=this.yScale,ja(Ia,i)).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=xn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),Pa&&console.log(this.postorder),this.xScale=Tt().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),Pa&&console.log(this.postorder),this.yScale=Tt().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=xn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var Ua={value:function(){}};function Oa(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Fa(r)}function Fa(t){this._=t}function Ya(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function Ha(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=Ua,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Fa.prototype=Oa.prototype={constructor:Fa,on:function(t,e){var n,r,a=this._,i=(r=a,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)a[n]=Ha(a[n],t.name,e);else if(null==e)for(n in a)a[n]=Ha(a[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=Ya(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Fa(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var qa,Ba,Xa=0,za=0,Va=0,Ra=1e3,Wa=0,Ga=0,Ja=0,Za="object"==typeof performance&&performance.now?performance:Date,Qa="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ka(){return Ga||(Qa(ti),Ga=Za.now()+Ja)}function ti(){Ga=0}function ei(){this._call=this._time=this._next=null}function ni(t,e,n){var r=new ei;return r.restart(t,e,n),r}function ri(){Ga=(Wa=Za.now())+Ja,Xa=za=0;try{!function(){Ka(),++Xa;for(var t,e=qa;e;)(t=Ga-e._time)>=0&&e._call.call(null,t),e=e._next;--Xa}()}finally{Xa=0,function(){var t,e,n=qa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:qa=e);Ba=t,ii(r)}(),Ga=0}}function ai(){var t=Za.now(),e=t-Wa;e>Ra&&(Ja-=e,Wa=t)}function ii(t){Xa||(za&&(za=clearTimeout(za)),t-Ga>24?(t<1/0&&(za=setTimeout(ri,t-Za.now()-Ja)),Va&&(Va=clearInterval(Va))):(Va||(Wa=Za.now(),Va=setInterval(ai,Ra)),Xa=1,Qa(ri)))}ei.prototype=ni.prototype={constructor:ei,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ka():+n)+(null==e?0:+e),this._next||Ba===this||(Ba?Ba._next=this:qa=this,Ba=this),this._call=t,this._time=n,ii()},stop:function(){this._call&&(this._call=null,this._time=1/0,ii())}};var oi=function(t,e,n){var r=new ei;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},ci=Oa("start","end","interrupt"),si=[],fi=0,li=1,ui=2,di=3,hi=4,bi=5,pi=6,gi=function(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(s){var f,l,u,d;if(n.state!==li)return c();for(f in a)if((d=a[f]).name===n.name){if(d.state===di)return oi(i);d.state===hi?(d.state=pi,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete a[f]):+f<e&&(d.state=pi,d.timer.stop(),delete a[f])}if(oi(function(){n.state===di&&(n.state=hi,n.timer.restart(o,n.delay,n.time),o(s))}),n.state=ui,n.on.call("start",t,t.__data__,n.index,n.group),n.state===ui){for(n.state=di,r=new Array(u=n.tween.length),f=0,l=-1;f<u;++f)(d=n.tween[f].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=d);r.length=l+1}}function o(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=bi,1),i=-1,o=r.length;++i<o;)r[i].call(null,a);n.state===bi&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var r in n.state=pi,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=ni(function(t){n.state=li,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:a,on:ci,tween:si,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:fi})};function mi(t,e){var n=vi(t,e);if(n.state>fi)throw new Error("too late; already scheduled");return n}function yi(t,e){var n=vi(t,e);if(n.state>ui)throw new Error("too late; already started");return n}function vi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function xi(t,e,n){var r=t._id;return t.each(function(){var t=yi(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return vi(t,r).value[e]}}var wi=function(t,e){var n;return("number"==typeof e?De:e instanceof Bt?$e:(n=Bt(e))?(e=n,$e):Ye)(t,e)};var _i=z.prototype.constructor;var Mi=0;function Si(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Ei(){return++Mi}var Ai=z.prototype;Si.prototype=function(t){return z().transition(t)}.prototype={constructor:Si,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=o(t));for(var r=this._groups,a=r.length,i=new Array(a),c=0;c<a;++c)for(var s,f,l=r[c],u=l.length,d=i[c]=new Array(u),h=0;h<u;++h)(s=l[h])&&(f=t.call(s,s.__data__,h,l))&&("__data__"in s&&(f.__data__=s.__data__),d[h]=f,gi(d[h],e,n,h,d,vi(s,n)));return new Si(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=s(t));for(var r=this._groups,a=r.length,i=[],o=[],c=0;c<a;++c)for(var f,l=r[c],u=l.length,d=0;d<u;++d)if(f=l[d]){for(var h,b=t.call(f,f.__data__,d,l),p=vi(f,n),g=0,m=b.length;g<m;++g)(h=b[g])&&gi(h,e,n,g,b,p);i.push(b),o.push(f)}return new Si(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new Si(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],l=n[c],u=f.length,d=o[c]=new Array(u),h=0;h<u;++h)(s=f[h]||l[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new Si(o,this._parents,this._name,this._id)},selection:function(){return new _i(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Ei(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)if(o=c[f]){var l=vi(o,e);gi(o,t,n,f,c,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Si(r,this._parents,t,n)},call:Ai.call,nodes:Ai.nodes,node:Ai.node,size:Ai.size,empty:Ai.empty,each:Ai.each,on:function(t,e){var n=this._id;return arguments.length<2?vi(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?mi:yi;return function(){var o=i(this,t),c=o.on;c!==r&&(a=(r=c).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=r(t),a="transform"===n?We:wi;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttribute(t))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttribute(t)}})(n,a,xi(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,a;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?a:a=e(r=i,n)}}:function(t,e,n){var r,a;return function(){var i=this.getAttribute(t);return i===n?null:i===r?a:a=e(r=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=r(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var r="transform"==(t+="")?Re:wi;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=w(this,t),o=(this.style.removeProperty(t),w(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,a,i;return function(){var o=w(this,t),c=n(this);return null==c&&(this.style.removeProperty(t),c=w(this,t)),o===c?null:o===r&&c===a?i:i=e(r=o,a=c)}}(t,r,xi(this,"style."+t,e)):function(t,e,n){var r,a;return function(){var i=w(this,t);return i===n?null:i===r?a:a=e(r=i,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,a=e.apply(r,arguments);return a&&function(e){r.style.setProperty(t,a(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(xi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=vi(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var a=yi(this,t),i=a.tween;if(i!==n)for(var o=0,c=(r=n=i).length;o<c;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}:function(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=yi(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var c={name:e,value:n},s=0,f=a.length;s<f;++s)if(a[s].name===e){a[s]=c;break}s===f&&a.push(c)}i.tween=a}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){mi(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){mi(this,t).delay=e}})(e,t)):vi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){yi(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){yi(this,t).duration=e}})(e,t)):vi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){yi(this,t).ease=e}}(e,t)):vi(this.node(),e).ease}};var Ti={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ni(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Ti.time=Ka(),Ti;return n}z.prototype.interrupt=function(t){return this.each(function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>ui&&n.state<bi,n.state=pi,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)})},z.prototype.transition=function(t){var e,n;t instanceof Si?(e=t._id,t=t._name):(e=Ei(),(n=Ti).time=Ka(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)(o=c[f])&&gi(o,t,e,f,c,n||Ni(o,e));return new Si(r,this._parents,t,e)};class Ii{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,r,a="fa-download"){this.createButton(t,a);V(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);V(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]),a=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var a=n[r].cssRules,i=0;i<a.length;i++){var o=a[i];if(void 0!==o.style){var c;try{c=$(t).find(o.selectorText)}catch(t){c=[]}c.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var s=document.createElement("style");return s.setAttribute("type","text/css"),s.innerHTML="<![CDATA[\n"+e+"\n]]>",s}(r.get());a.prepend(i),$("#"+n).html("").hide();let o=$(`#${n}`).append(a).html(),c=new Blob([o],{type:"image/svg+xml"});saveAs(c,e),$(`#${n}`).html("").hide()}}class $i{constructor(t,e=!1,n=30,r=-40,a=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=a}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),V("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){V("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=U.pageX,e=U.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;V("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){V("#"+this.id).html(t)}}class ki{constructor(t,e="YlGnBu",n=!0,r=10,a=2){this.data=t,this.useLog=n,this.base=r,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=a,this.colorScheme=e,this.toolbar=void 0,this.tooltip=void 0}createToolbar(t,e){return this.toolbar=new Ii(t,e),this.toolbar}createTooltip(t){return this.tooltip=new $i(t),V(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}drawColorLegend(t,e={x:0,y:0},n=5){ga(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.base)}redraw(t,e,n,r={w:1e3,h:1e3},a=30){this._setXList(r.w,e),this._setYList(r.h,n),this.draw(t,r,a)}draw(t,e={w:1e3,h:600},n=30,r=!0){void 0===this.xList&&this._setXList(e.w),void 0===this.yList&&this._setYList(e.h),void 0===this.colorScale&&(this.colorScale=pa(this.data.map(t=>t.value),this.colorScheme));const a=t.selectAll(".exp-map-xlabel").data(this.xList),i=this.yScale.range()[1]+2*this.yScale.bandwidth();a.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}),a.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}).merge(a).text(t=>t),a.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).style("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){V(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){V(this).classed("normal",!0).classed("highlighted",!1)});const o=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);o.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const c=this;o.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class",t=>"exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill",t=>"#eeeeee").on("mouseover",function(t){const e=V(this);c.cellMouseover(e)}).on("mouseout",function(t){V(this);c.cellMouseout()}).merge(o).style("fill",t=>r&&0==t.originalValue?"#DDDDDD":this.colorScale(t.value)),o.exit().remove()}cellMouseout(t){R("*").classed("highlighted",!1)}cellMouseover(t){const e=t.attr("row"),n=t.attr("col");R(".exp-map-xlabel").filter(`.${e}`).classed("highlighted",!0),R(".exp-map-ylabel").filter(`.${n}`).classed("highlighted",!0),t.classed("highlighted",!0)}_setXList(t,e){this.xList=void 0!==e?e:yt().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=Tt().domain(this.xList).range([0,t]).padding(.05)}_setYList(t,e){this.yList=void 0!==e?e:yt().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=Tt().domain(this.yList).range([0,t]).padding(.05)}}class Ci{constructor(t,e,n,r="YlGnBu",a=2,i=new ma,o=!0,c=10,s=""){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new La(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new La(this.data.rowTree,"h"),heatmap:new ki(this.data.heatmap,r,o,c,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=s,this.tooltip=void 0,this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Ii(t,e),this.toolbar}createTooltip(t){return this.tooltip=new $i(t),V(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}render(t,e,n=!0,r=!0,a="top",i=5){this._updateConfig(a),this.visualComponents.svg=function(t,e,n,r,a){return void 0===a&&(a=`${t}-svg`),V("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),""!=this.title&&(console.log(this.title),V(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title)),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let r=this.visualComponents.svg;const a="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",function(t){V(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);r.selectAll(a).filter(t=>e.includes(t)).classed("highlighted",!0),r.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)}).on("mouseout",function(){V(this).attr("r",2).attr("fill","#333"),r.selectAll(a).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)}),i}_renderHeatmap(t,e,n,r=5){let a=this.visualComponents.svg;const i=this.config.panels.main,o=a.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(a,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var Di=Math.PI,ji=2*Di,Pi=ji-1e-6;function Li(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ui(){return new Li}Li.prototype=Ui.prototype={constructor:Li,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,c=n-t,s=r-e,f=i-t,l=o-e,u=f*f+l*l;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(l*c-s*f)>1e-6&&a){var d=n-i,h=r-o,b=c*c+s*s,p=d*d+h*h,g=Math.sqrt(b),m=Math.sqrt(u),y=a*Math.tan((Di-Math.acos((b+u-p)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*f)+","+(e+v*l)),this._+="A"+a+","+a+",0,0,"+ +(l*d>f*h)+","+(this._x1=t+x*c)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e;var o=(n=+n)*Math.cos(r),c=n*Math.sin(r),s=t+o,f=e+c,l=1^i,u=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+f:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+s+","+f),n&&(u<0&&(u=u%ji+ji),u>Pi?this._+="A"+n+","+n+",0,1,"+l+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+l+","+(this._x1=s)+","+(this._y1=f):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=Di)+","+l+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Oi=function(t){return function(){return t}};function Fi(t){this._context=t}Fi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Yi=function(t){return new Fi(t)};function Hi(t){return t[0]}function qi(t){return t[1]}var Bi=function(){var t=Hi,e=qi,n=Oi(!0),r=null,a=Yi,i=null;function o(o){var c,s,f,l=o.length,u=!1;for(null==r&&(i=a(f=Ui())),c=0;c<=l;++c)!(c<l&&n(s=o[c],c,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(s,c,o),+e(s,c,o));if(f)return i=null,f+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Oi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Oi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Oi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o};function Xi(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function zi(t,e){this._context=t,this._k=(1-e)/6}zi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Xi(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Xi(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Vi=function t(e){function n(t){return new zi(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Ri(t){return t<0?-1:1}function Wi(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),c=(i*a+o*r)/(r+a);return(Ri(i)+Ri(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function Gi(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Ji(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,c=(i-r)/3;t._context.bezierCurveTo(r+c,a+c*e,i-c,o-c*n,i,o)}function Zi(t){this._context=t}function Qi(t){this._context=t}Zi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ji(this,this._t0,Gi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Ji(this,Gi(this,n=Wi(this,t,e)),n);break;default:Ji(this,this._t0,n=Wi(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new Qi(t)}.prototype=Object.create(Zi.prototype)).point=function(t,e){Zi.prototype.point.call(this,e,t)},Qi.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}};class Ki{constructor(t,e,n,r,a=!1,i=1e3,o=0){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)):this.exons.sort((t,e)=>Number(e.exonNumber)-Number(t.exonNumber)),this.exonsCurated=n.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)),this.junctions=r.sort((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0),this.isIsoform=a,this.maxIntronLength=i,this.intronLength=0,this.minExonWidth=o,this.nullColor="#DDDDDD"}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,r,a){void 0!==e&&t.selectAll(".junc").style("fill",n=>{const a=e.filter(t=>t.junctionId==n.junctionId)[0],i=0==a.value?this.nullColor:r(a.value);return t.selectAll(".junc-curve").filter(`.junc${n.junctionId}`).style("stroke",i),i}),t.selectAll(".exon-curated").style("fill",t=>{const e=n.filter(e=>e.exonId==t.exonId)[0];if(void 0===e)throw`${t.exonId} has no data`;return 0==e.value?this.nullColor:a(e.value)})}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach((t,e)=>{t.x=0==e?0:this.exons[e-1].x+this.exons[e-1].w+this.xScale(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}),this.exonsCurated.forEach((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0!==t.oriExon){if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}else console.warn(`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`)}),this.isIsoform){t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0)}else{this.junctions=this.junctions.filter(t=>(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),void 0!==t.startExon&&void 0!==t.endExon)),console.log(this.junctions),this.junctions.sort((t,e)=>+t.chromStart<+e.chromStart?-1:+t.chromStart>+e.chromStart?1:+t.chromEnd<+e.chromEnd?-1:+t.chromEnd>+e.chromEnd?1:0),this.junctions.forEach((t,e)=>{t.displayName=`Junction ${e+1}`;const r=Number(t.chromStart)-Number(t.startExon.chromStart)+1,a=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(r),t.endX=t.endExon.x+this.xScale(a),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*(Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber))+.5),t.cy<0&&(t.cy=0)});const e=this.junctions.reduce((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t),{});this.junctions.forEach(t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())});const r=Bi().x(t=>t.x).y(t=>t.y).curve(Vi);this.junctions.forEach((e,a)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class",`junc-curve junc${e.junctionId}`).attr("d",r).style("stroke","#92bcc9")});const a=t.selectAll(".junc").data(this.junctions);a.attr("cx",t=>t.cx),a.attr("cy",t=>t.cy),a.enter().append("circle").attr("class",t=>`junc junc${t.junctionId}`).attr("cx",t=>t.cx).attr("cy",t=>t.cy).merge(a).attr("r",4).style("fill","rgb(86, 98, 107)");const i=t.selectAll(".exon").data(this.exons);i.attr("x",t=>t.x),i.attr("y",n),i.enter().append("rect").attr("class",t=>`exon exon${t.exonNumber}`).attr("y",n).attr("rx",2).attr("ry",2).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(i).style("cursor","default"),t.append("text").attr("id","modelInfo").style("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const r=t.selectAll(".exon-curated").data(this.exonsCurated);r.attr("x",t=>t.x),r.attr("y",n),r.enter().append("rect").attr("class",t=>this.isIsoform?"exon-curated":`exon-curated exon-curated${t.exonNumber}`).attr("y",n).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(r).style("fill","#eee").style("cursor","default"),"left"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabel").style("text-anchor","end").attr("x",this.xScale.range()[0]-5).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId),"right"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabelRight").style("text-anchor","start").attr("x",this.xScale.range()[1]+50).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId)}setXscale(t){this.exons.sort((t,e)=>Number(t.chromStart)<Number(e.chromStart)?-1:Number(t.chromStart)>Number(e.chromStart)?1:0);let e=0;this.exons.forEach((t,n)=>{if(t.length=Number(t.chromEnd)-Number(t.chromStart)+1,0==n)e+=t.length;else{let r=this.exons[n-1];t.intronLength=Number(t.chromStart)-Number(r.chromEnd)+1,e+=t.length+(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength)}});const n=[0,e],r=[0,t];this.xScale=xn().domain(n).range(r)}setXscaleFixIntron(t){this.exons.forEach(t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1});const e=ht(this.exons,t=>t.length),n=[0,e*this.exons.length],r=[0,t];this.xScale=xn().domain(n).range(r);const a=this.xScale.invert(this.minExonWidth),i=pt(this.exons,t=>t.length>a?t.length:a);this.intronLength=(e*this.exons.length-i)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter(e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t);return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class to{constructor(t,e,n,r){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=r,this.nullColor="#DDDDDD"}showData(t,e,n,r,a=!0){if(a){t.sort((t,e)=>-(t.originalValue-e.originalValue));const e=t.map(t=>t.transcriptId);this.sortTracks(e)}t.forEach(t=>{this.visualDom.select(`#${t.transcriptId.replace(".","_")}`).selectAll(".exon-curated").style("fill",0==t.value?this.nullColor:e(t.value))}),this.visualDom.select(".lollipopGraph").remove();const i=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),o=i.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var c;o.append("line").attr("x1",0).attr("y1",t=>this.yScale(t.transcriptId)).attr("y2",t=>this.yScale(t.transcriptId)).style("stroke",t=>0==t.value?this.nullColor:e(t.value)).style("stroke-width",2).transition().duration(1e3).attr("x2",t=>0==t.value?0:n(t.value)),o.append("circle").attr("cx",0).attr("cy",t=>this.yScale(t.transcriptId)).attr("r",5).style("fill",t=>0==t.value?this.nullColor:e(t.value)).transition().duration(1e3).attr("cx",t=>n(t.value)),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call((c=n,ja(Aa,c)).ticks(3)),i.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).style("text-anchor","end").style("font-size",9).text("log10(TPM)"),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call(function(t){return ja(Ta,t)}(this.yScale).tickValues([])),i.append("text").attr("id","lolliLabel").attr("x",10).attr("y",-20).text(`Isoform Expression in ${r}`).style("text-anchor","start").style("font-size","12px")}sortTracks(t){this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e,n="left",r=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const a=e.selectAll(".isotrack").data(this.isoforms.map(t=>t.transcriptId));a.transition().duration(r).attr("transform",t=>`translate(0, ${this.yScale(t)})`),a.enter().append("g").attr("id",t=>t.replace(".","_")).attr("class","isotrack").attr("transform",t=>"translate(0, 0)").transition().duration(r/2).attr("transform",t=>`translate(0, ${this.yScale(t)})`),t||this._renderModels(this.config.w,n)}_renderModels(t,e="left"){this.isoforms.forEach(n=>{const r=new Ki(n,this.modelExons,this.isoformExons[n.transcriptId],[],!0),a=V(`#${n.transcriptId.replace(".","_")}`);r.render(a,{w:t,h:this.yScale.bandwidth(),labelOn:e})})}setYscale(t,e){void 0===e&&(e=this.isoforms.map(t=>t.transcriptId)),this.yScale=Tt().domain(e).range([0,t]).padding(.05)}}function eo(t,e,n,r,a,i,o,c,s,f){const l=n.visualComponents.svg,u=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});l.selectAll(".exp-map-ylabel").text(t=>void 0!==u[t]?u[t].tissueSiteDetail:t).style("cursor","pointer").attr("x",n.objects.heatmap.xScale.range()[1]+15),l.select("#heatmap").selectAll(".exp-map-ycolor").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[1]+5).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("exp-map-ycolor",!0).style("fill",t=>`#${u[t].colorHex}`),n.objects.heatmap.xScale.domain().length>15&&l.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[0]-5).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("leaf-color",!0).style("fill",t=>`#${u[t].colorHex}`),l.selectAll(".exp-map-ylabel").on("mouseover",function(){V(this).classed("highlighted",!0)}).on("click",function(t){l.selectAll(".exp-map-ylabel").classed("clicked",!1),V(this).classed("clicked",!0);const n=t;let d;void 0!==c&&(d=c.filter(t=>t.tissueSiteDetailId==n));const h=s.filter(t=>t.tissueSiteDetailId==n);e.addData(l.select("#geneModel"),d,h,a,i);const b=xn().domain([bt(f.map(t=>t.value)),ht(f.map(t=>t.value))]).range([0,-100]),p=f.filter(t=>t.tissueSiteDetailId==n);r.showData(p,o,b,u[n].tissueSiteDetail)})}function no(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=r.select("#geneModel");t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});r.selectAll(".junc").on("mouseover",function(t){R(`.junc${t.junctionId}`).classed("highlighted",!0),a.show(`${t.displayName}<br/>Junction ${t.junctionId} (${Number(t.chromEnd)-Number(t.chromStart)+1} bp)`),console.log(t),void 0!==t.startExon&&(i.selectAll(".exon").filter(`.exon${t.startExon.exonNumber}`).classed("highlighted",!0),i.selectAll(".exon").filter(`.exon${t.endExon.exonNumber}`).classed("highlighted",!0)),i.select(`.junc${t.junctionId}`).classed("highlighted",!0).classed("normal",!1)}).on("mouseout",function(t){R(`.junc${t.junctionId}`).classed("highlighted",!1),i.selectAll(".exon").classed("highlighted",!1),i.selectAll(".xLabel").classed("highlighted",!1).classed("normal",!0),a.hide()}),i.selectAll(".exon-curated").on("mouseover",function(t){V(this).classed("highlighted",!0),a.show(`Exon ${t.exonNumber}: ${t.chromStart} - ${t.chromEnd} (${t.chromEnd-t.chromStart+1} bp)`)}).on("mouseout",function(t){V(this).classed("highlighted",!1),a.hide()})}function ro(t){const e=t.visualComponents.svg,n=t.tooltip;e.selectAll(".isotrack").selectAll(".exon-curated").on("mouseover",function(t){V(this).classed("highlighted",!0),n.show(`Exon ${t.oriExon.exonNumber}: ${t.chromStart} - ${t.chromEnd} (${Number(t.chromEnd)-Number(t.chromStart)+1} bp)`)}).on("mouseout",function(){V(this).classed("highlighted",!1),e.selectAll(".exon-curated").classed("highlighted",!1),n.hide()})}return t.render=function(t,e,n,r=function(){const t="https://gtexportal.org/rest/v1/";return{dyneqtl:t+"association/dyneqtl",snp:t+"reference/variant?format=json&snpId=",variantId:t+"dataset/variant?format=json&variantId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcriptExp:t+"expression/medianTranscriptExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",transcript:t+"reference/transcript?datasetId=gtex_v7&gencodeId=",exon:t+"reference/exon?datasetId=gtex_v7&gencodeId=",geneModel:t+"dataset/collapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneModelUnfiltered:t+"dataset/fullCCollapsedGeneModelExon?datasetId=gtex_v7&gencodeId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&pageSize=10000",topInTissueFiltered:t+"expression/topExpressedGene?datasetId=gtex_v7&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:t+"expression/topExpressedGene?datasetId=gtex_v7&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:t+"reference/gene?format=json&gencodeVersion=v19&genomeBuild=GRCh37%2Fhg19&geneId=",tissue:t+"metadata/tissueSiteDetail?format=json",tissueSites:t+"metadata/tissueSiteDetail?format=json",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){nt(r.geneId+e).then(function(a){if(!a.hasOwnProperty("gene"))throw"Parsing Error: attribute gene doesn't exist.";if(0==a.gene.length)throw alert("No gene is found with "+e),"Fatal Error: gene is not found";if(a.gene.length>1){let t=a.gene.filter(t=>t.geneSymbolUpper==e.toUpperCase()||t.gencodeId==e.toUpperCase());if(t.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";a.gene=t}const i=a.gene[0];if(void 0===i)throw alert("No gene is found with "+e),"Fatal Error: gene is not found";const o=i.gencodeId,c=[nt(r.tissue),nt(r.geneModelUnfiltered+o),nt(r.geneModel+o),nt(r.transcript+o),nt(r.junctionExp+o),nt(r.exonExp+o),nt(r.transcriptExp+o),nt(r.exon+o)];Promise.all(c).then(function(e){const r=function(t){const e="tissueSiteDetail";if(!t.hasOwnProperty(e))throw"Parse Error: required json attr is missing: "+e;const n=t[e];return["tissueSiteDetailId","tissueSiteDetail","colorHex"].forEach(t=>{if(!n[0].hasOwnProperty(t))throw"Parse Error: required json attr is missing: "+t}),n}(e[0]),a=ea(e[1]),o=ea(e[2]),c=function(t){const e="transcript";if(!t.hasOwnProperty(e))throw"parseIsoforms input error";return["transcriptId","start","end"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(d),"Parse Error: required json attribute is missing: "+n}),t[e].sort((t,e)=>-(Math.abs(t.end-t.start)+1-(Math.abs(e.end-e.start)+1)))}(e[3]),s=function(t){if(!t.hasOwnProperty("exon"))throw"Parse Error: required json attribute is missing: exon";return t.exon.reduce((t,e)=>(["transcriptId","chromosome","start","end","exonNumber","exonId"].forEach(t=>{if(!e.hasOwnProperty(t))throw console.error(e),"Parse Error: required json attribute is missing: "+t}),void 0===t[e.transcriptId]&&(t[e.transcriptId]=[]),e.chrom=e.chromosome,e.chromStart=e.start,e.chromEnd=e.end,t[e.transcriptId].push(e),t),{})}(e[7]),f=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"Parse Error: parseJunctions input error. "+e;return["tissueSiteDetailId","junctionId"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw console.error(t[e][0]),"Parse Error: required junction attribute is missing: "+n}),t[e].filter(t=>"Liver"==t.tissueSiteDetailId).map(t=>{let e=t.junctionId.split("_");return{chrom:e[0],chromStart:e[1],chromEnd:e[2],junctionId:t.junctionId}})}(e[4]),l=function(t,e=!0,n=1){const r="medianJunctionExpression";if(!t.hasOwnProperty(r))throw"parseJunctionExpression input error";const a=t[r];if(void 0!==a&&0!=a.length)return a.forEach(t=>{["tissueSiteDetailId","junctionId","median","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parser Error: parseJunctionExpression attr not found: "+e});let r=t.median,a=t.tissueSiteDetailId;t.tissueId=a,t.id=t.gencodeId,t.x=t.junctionId,t.y=a,t.value=e?Math.log10(Number(r+n)):Number(r),t.originalValue=Number(r)}),a.sort((t,e)=>t.junctionId>e.junctionId?1:t.junctionId<e.junctionId?-1:0);console.warn("No junction data found")}(e[4]),u=function(t,e,n=!0,r=1){const a=e.reduce((t,e)=>(t[e.exonId]=e,t),{}),i="medianExonExpression";if(!t.hasOwnProperty(i))throw"parseExonExpression input error";const o=t[i];return["median","exonId","tissueSiteDetailId"].forEach(t=>{if(!o[0].hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t}),o.forEach(t=>{const e=a[t.exonId];["end","start"].forEach(t=>{if(!e.hasOwnProperty(t))throw"Fatal Error: parseExonExpression position attr not found: "+t}),t.l=e.end-e.start+1,t.value=Number(t.median)/t.l,t.originalValue=Number(t.median)/t.l,n&&(t.value=Math.log2(t.value+1)),t.x=t.exonId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.chromStart=e.start,t.chromEnd=e.end,t.unit="median "+t.unit+" per base",t.tissueId=t.tissueSiteDetailId}),o.sort((t,e)=>t.chromStart<e.chromStart?-1:t.chromStart>e.chromStart?1:0)}(e[5],o);let h,b,p,g=function(t,e=!0,n=1){const r="medianTranscriptExpression";if(!t.hasOwnProperty(r))throw"Parse Error: parseTranscriptExpression input error";return t[r].forEach(t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: required transcipt attribute is missing: "+e}),t.value=e?Math.log10(Number(t.median+n)):Number(t.median),t.originalValue=Number(t.median),t.x=t.transcriptId,t.y=t.tissueSiteDetailId,t.id=t.gencodeId,t.tissueId=t.tissueSiteDetailId}),t[r]}(e[6]);f.length>=0&&void 0!==l&&(p=pa(l.map(t=>t.value),"Reds")),h=pa(u.map(t=>t.value),"Blues"),b=pa(g.map(t=>t.value),"Purples");let m=void 0;const y={root:n,svg:`${n}-svg`,tooltip:"isoformTooltip",toolbar:"isoformToolbar",clone:"isoformClone",buttons:{save:"isoformSave"}};0==$(`#${y.tooltip}`).length&&$("<div/>").attr("id",y.tooltip).appendTo($("body")),["toolbar","clone"].forEach(t=>{$("<div/>").attr("id",y[t]).appendTo($(`#${y.root}`))});const v=`${i.geneSymbol}: ${i.gencodeId} ${i.description}`,x=$(`#${n}`).innerWidth()||window.innerWidth;switch(t){case"isoformTransposed":{const t=new ma(x,150,100,{top:60,right:350,bottom:200,left:50},12,10);["tissue","transcript"].forEach(t=>{if(!e[6].clusters.hasOwnProperty(t))throw console.error(e[6].clusters),"Parse Error: Required cluster attribute is missing: "+t});let n=e[6].clusters.tissue,r=e[6].clusters.transcript,a=function(t,e=!0,n=1){const r="medianTranscriptExpression";if(!t.hasOwnProperty(r))throw console.error(t),"Parse Error: parseTranscriptExpressionTranspose input error.";return t[r].forEach(t=>{["median","transcriptId","tissueSiteDetailId","gencodeId"].forEach(e=>{if(!t.hasOwnProperty(e))throw console.error(t),"Parse Error: Required transcript attribute is missing: "+e});const r=t.median,a=t.tissueSiteDetailId;t.value=e?Math.log10(Number(r+n)):Number(r),t.originalValue=Number(r),t.y=t.transcriptId,t.x=a,t.id=t.gencodeId,t.tissueId=a}),t[r]}(e[6]);if((m=new Ci(n,r,a,"Purples",5,t,!0,10,`Isoform Expression of ${v}`)).render(y.root,y.svg,!0,!0,top,5),!r.startsWith("Not enough data")){const t=m.objects.rowTree.yScale.domain();c.sort((e,n)=>t.indexOf(e.transcriptId)<t.indexOf(n.transcriptId)?-1:t.indexOf(e.transcriptId)>t.indexOf(n.transcriptId)?1:0)}break}case"junction":{if(0==f.length){$(`#${n}`).text("This gene has no junctions available.");break}const t=new ma(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let r=e[4].clusters.tissue;(m=new Ci(void 0,r,l,"Reds",5,t,!0,10,`Junction Expression of ${v}`)).render(y.root,y.svg,!1,!0,top,5);break}case"exon":{const t=new ma(x,150,0,{top:60,right:350,bottom:200,left:50},12,10);let n=e[5].clusters.tissue;(m=new Ci(void 0,n,u,"Blues",5,t,!0,2,`Exon Expression of ${v}`)).render(y.root,y.svg,!1,!0,top,5);break}default:throw"Input type is not recognized"}$("#spinner").hide(),m.createTooltip(y.tooltip);const w=t.startsWith("isoform")?60:80,_={x:m.config.panels.main.x,y:m.config.panels.main.h+m.config.panels.main.y+w,w:m.config.panels.main.w,h:100},M={x:_.x,y:_.y+_.h,w:_.w,h:20*c.length,labelOn:"left"};let S=+V(`#${y.svg}`).attr("height")+_.h+M.h;t.startsWith("isoform")||(S=S<1200?1200:S),V(`#${y.svg}`).attr("height",S);const E=new Ki(i,a,o,f),A=m.visualComponents.svg.append("g").attr("id","geneModel").attr("transform",`translate(${_.x}, ${_.y})`);t.startsWith("isoform")||E.render(A,_);const T=new to(c,s,a,M),N=m.visualComponents.svg.append("g").attr("transform",`translate(${M.x}, ${M.y})`),I=t.startsWith("isoform")?"both":"left";switch(T.render(!1,N,I),t.startsWith("isoform")||function(t,e,n){const r=t.visualComponents.svg;let a=t.objects.heatmap.xScale.range()[1]+50;ga("Exon read counts per base",r.select("#geneModel"),n,{x:a,y:30},!0,5,2,{h:20,w:10},"v"),a+=50,void 0!==e&&ga("Junction read counts",r.select("#geneModel"),e,{x:a,y:30},!0,5,10,{h:20,w:10},"v")}(m,p,h),function(t,e){t.createToolbar(e.toolbar,t.tooltip).createDownloadSvgButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone)}(m,y),t){case"isoformTransposed":!function(t,e,n,r,a,i,o,c,s){const f=e.visualComponents.svg,l=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{}),u=e.tooltip;f.selectAll(".exp-map-xlabel").text(t=>void 0!==l[t]?l[t].tissueSiteDetail:t).style("cursor","pointer"),f.select("#heatmap").selectAll(".exp-map-xcolor").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>e.objects.heatmap.xScale(t)).attr("y",e.objects.heatmap.yScale.range()[1]+5).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("exp-map-xcolor",!0).style("fill",t=>`#${l[t].colorHex}`),e.objects.heatmap.yScale.domain().length>15&&f.select("#heatmap").selectAll(".leaf-color").data(e.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>e.objects.heatmap.xScale(t)).attr("y",e.objects.heatmap.yScale.range()[0]-10).attr("width",e.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("leaf-color",!0).style("fill",t=>`#${l[t].colorHex}`),f.selectAll(".exp-map-xlabel").on("mouseover",function(){V(this).classed("highlighted",!0)}).on("mouseout",function(){V(this).classed("highlighted",!1)}).on("click",function(t){f.selectAll(".exp-map-xlabel").classed("clicked",!1),V(this).classed("clicked",!0);const e=t;let r;void 0!==o&&(r=o.filter(t=>t.tissueSiteDetailId==e)),c.filter(t=>t.tissueSiteDetailId==e);const a=xn().domain([bt(s.map(t=>t.value)),ht(s.map(t=>t.value))]).range([0,-100]),u=s.filter(t=>t.tissueSiteDetailId==e);n.showData(u,i,a,l[e].tissueSiteDetail,!1)}),f.selectAll(".exp-map-cell").on("mouseover",function(t){const n=V(this);e.objects.heatmap.cellMouseover(n);const r=void 0===l[t.x]?t.x:l[t.x].tissueSiteDetail,a=parseFloat(t.originalValue.toExponential()).toPrecision(3);u.show(`Tissue: ${r}<br/> Isoform: ${t.id}<br/> ${t.unit}: ${0==a?"NA":a}`)}).on("mouseout",function(t){f.selectAll("*").classed("highlighted",!1),u.hide()}),f.selectAll(".exp-map-ylabel").on("mouseover",function(t){V(this).classed("highlighted",!0);const e=t.replace(".","_");f.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0),f.select(`#${e}`).selectAll(".intron").classed("highlighted",!0)}).on("mouseout",function(){V(this).classed("highlighted",!1),f.selectAll(".exon-curated").classed("highlighted",!1),f.selectAll(".intron").classed("highlighted",!1)}).on("click",function(){})}(r,m,T,0,0,b,l,u,g),ro(m);break;case"junction":if(0==f.length)break;eo(r,E,m,T,p,h,b,l,u,g),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const r=V(this);n.objects.heatmap.cellMouseover(r);const o=void 0===i[t.y]?t.x:i[t.y].tissueSiteDetail,c=e.junctions.filter(e=>e.junctionId==t.x&&!e.filtered)[0],s=parseFloat(t.originalValue.toExponential()).toPrecision(3);a.show(`Tissue: ${o}<br/> Junction: ${c.displayName} (${Number(c.chromEnd)-Number(c.chromStart)} bp)<br/> ${t.unit}: ${0==s?"NA":s}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").each(function(){const t=V(this),n=t.text();t.attr("id",`${n}`),t.classed(`junc${n}`,!0);const r=e.junctions.filter(t=>t.junctionId==`${n}`&&!t.filtered)[0];void 0!==r&&t.text(r.displayName)}).on("mouseover",function(){const t=V(this).attr("id");V(this).classed("highlighted",!0),r.selectAll(`.junc${t}`).classed("highlighted",!0);const n=e.junctions.filter(e=>e.junctionId==t&&!e.filtered)[0];void 0!==n&&(r.selectAll(`.exon${n.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${n.endExon.exonNumber}`).classed("highlighted",!0))}).on("mouseout",function(){V(this).classed("highlighted",!1),R(".junc").classed("highlighted",!1),R(".junc-curve").classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)})}(r,E,m),no(r,0,m),ro(m);break;case"exon":eo(r,E,m,T,p,h,b,l,u,g),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueSiteDetailId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const e=V(this);n.objects.heatmap.cellMouseover(e);const r=void 0===i[t.y]?t.x:i[t.y].tissueSiteDetail,o=parseFloat(t.originalValue.toExponential()).toPrecision(3);a.show(`Tissue: ${r}<br/> Exon: ${t.exonId}<br/> ${t.chromStart} - ${t.chromEnd} (${Number(t.chromEnd)-Number(t.chromStart)+1}bp) <br/>${t.unit}: ${0==o?"NA":o}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").each(function(t){const e=t.split("_")[1];V(this).text(`Exon ${e}`)}).on("mouseover",function(t){V(this).classed("highlighted",!0);const e=t.split("_")[1];r.selectAll(`.exon-curated${e}`).classed("highlighted",!0)}).on("mouseout",function(){V(this).classed("highlighted",!1),r.selectAll(".exon-curated").classed("highlighted",!1)})}(r,0,m),no(r,0,m),ro(m);break;default:throw"unrecognized type"}}).catch(function(t){console.error(t),$("#spinner").hide()})}).catch(function(t){console.error(t),$("#spinner").hide()})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNvZm9ybS1leHByZXNzaW9uLmJ1bmRsZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hc2NlbmRpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWF4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3N1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbmVzdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0U3BlY2lmaWVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0Um91bmRlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvd2Vlay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21vbnRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29QYXJzZS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvZ3RleERhdGFQYXJzZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jb2xvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvQWNjZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvRGFyazIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwxLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0My5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QUkduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1BpWUcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkR3kuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9TcGVjdHJhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVQdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvR25CdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvT3JSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdUduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdVJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9SZFB1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxPclJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvQmx1ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmV5cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1B1cnBsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9SZWRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvT3Jhbmdlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9yYWluYm93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9zaW5lYm93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS92aXJpZGlzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9jb2xvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3NlcXVlbnRpYWwuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQWZ0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEJlZm9yZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zdW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9wYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2FuY2VzdG9ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9kZXNjZW5kYW50cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9sZWF2ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGlua3MuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvRGVuZHJvZ3JhbS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvbmV3aWNrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL1Rvb2xiYXIuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL3V0aWxzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9Ub29sdGlwLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9IZWF0bWFwLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9EZW5kcm9IZWF0bWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL0dlbmVNb2RlbC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvSXNvZm9ybVRyYWNrVmlld2VyLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvSXNvZm9ybUV4cHJlc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsInZhciBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCFlbGVtZW50Lm1hdGNoZXMpIHtcbiAgICB2YXIgdmVuZG9yTWF0Y2hlcyA9IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmVuZG9yTWF0Y2hlcy5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBtYXRjaGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKHRydWUpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdGlvbikge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cbiIsInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBERUxJTUlURVIgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblxuICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICBpZiAoY29udmVydCkgcmV0dXJuIGNvbnZlcnQocm93LCBpIC0gMSk7XG4gICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgfSk7XG4gICAgcm93cy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUm93cyh0ZXh0LCBmKSB7XG4gICAgdmFyIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxuICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgbiA9IDAsIC8vIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gY3VycmVudCB0b2tlblxuICAgICAgICBlb2YgPSBOIDw9IDAsIC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9GP1xuICAgICAgICBlb2wgPSBmYWxzZTsgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICAvLyBTdHJpcCB0aGUgdHJhaWxpbmcgbmV3bGluZS5cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gTkVXTElORSkgLS1OO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBSRVRVUk4pIC0tTjtcblxuICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuICAgICAgaWYgKGVvZikgcmV0dXJuIEVPRjtcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuXG4gICAgICAvLyBVbmVzY2FwZSBxdW90ZXMuXG4gICAgICB2YXIgaSwgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSBRVU9URSkge1xuICAgICAgICB3aGlsZSAoSSsrIDwgTiAmJiB0ZXh0LmNoYXJDb2RlQXQoSSkgIT09IFFVT1RFIHx8IHRleHQuY2hhckNvZGVBdCgrK0kpID09PSBRVU9URSk7XG4gICAgICAgIGlmICgoaSA9IEkpID49IE4pIGVvZiA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpIC0gMSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZS5cbiAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSA9IEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IERFTElNSVRFUikgY29udGludWU7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gbGFzdCB0b2tlbiBiZWZvcmUgRU9GLlxuICAgICAgcmV0dXJuIGVvZiA9IHRydWUsIHRleHQuc2xpY2UoaiwgTik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHJvdy5wdXNoKHQpLCB0ID0gdG9rZW4oKTtcbiAgICAgIGlmIChmICYmIChyb3cgPSBmKHJvdywgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChyb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9KSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHJlRm9ybWF0LnRlc3QodGV4dCArPSBcIlwiKSA/IFwiXFxcIlwiICsgdGV4dC5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufVxuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbmV4cG9ydCB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG5leHBvcnQgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbiIsImZ1bmN0aW9uIHJlc3BvbnNlSnNvbihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3JcIjtcblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlc1tpXSkgc3VtICs9IHZhbHVlOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpIHN1bSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJpbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5cbmV4cG9ydCB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbChyYW5nZSkge1xuICB2YXIgaW5kZXggPSBtYXAoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIHJhbmdlID0gcmFuZ2UgPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChyYW5nZSk7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAoKTtcbiAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7cmFuZ2UgYXMgc2VxdWVuY2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IG9yZGluYWwgZnJvbSBcIi4vb3JkaW5hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYW5kKCkge1xuICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcmFuZ2VbMV0gPCByYW5nZVswXSxcbiAgICAgICAgc3RhcnQgPSByYW5nZVtyZXZlcnNlIC0gMF0sXG4gICAgICAgIHN0b3AgPSByYW5nZVsxIC0gcmV2ZXJzZV07XG4gICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgIGlmIChyb3VuZCkgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICBpZiAocm91bmQpIHN0YXJ0ID0gTWF0aC5yb3VuZChzdGFydCksIGJhbmR3aWR0aCA9IE1hdGgucm91bmQoYmFuZHdpZHRoKTtcbiAgICB2YXIgdmFsdWVzID0gc2VxdWVuY2UobikubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7IH0pO1xuICAgIHJldHVybiBvcmRpbmFsUmFuZ2UocmV2ZXJzZSA/IHZhbHVlcy5yZXZlcnNlKCkgOiB2YWx1ZXMpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJvdW5kID0gdHJ1ZSwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kd2lkdGg7XG4gIH07XG5cbiAgc2NhbGUuc3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdGVwO1xuICB9O1xuXG4gIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISFfLCByZXNjYWxlKCkpIDogcm91bmQ7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKClcbiAgICAgICAgLmRvbWFpbihkb21haW4oKSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gcmVzY2FsZSgpO1xufVxuXG5mdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICB2YXIgY29weSA9IHNjYWxlLmNvcHk7XG5cbiAgc2NhbGUucGFkZGluZyA9IHNjYWxlLnBhZGRpbmdPdXRlcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdPdXRlcjtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBvaW50aXNoKGNvcHkoKSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHJldHVybiBwb2ludGlzaChiYW5kKCkucGFkZGluZ0lubmVyKDEpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLyxcbiAgICByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmhleCgpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4My5leGVjKGZvcm1hdCkpID8gKG0gPSBwYXJzZUludChtWzFdLCAxNiksIG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHgwZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpKSAvLyAjZjAwXG4gICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuYiAmJiB0aGlzLmIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG4vLyBodHRwczovL2JldGEub2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xuICB9XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWRcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2VcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2JcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZVwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0XCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZ1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2VcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGVMaW5lYXIoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGIpO1xufVxuXG5mdW5jdGlvbiBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBkID0gZGVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPD0gYSA/IDAgOiB4ID49IGIgPyAxIDogZCh4KTsgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgciA9IHJlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7IHJldHVybiB0IDw9IDAgPyBhIDogdCA+PSAxID8gYiA6IHIodCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gZGVpbnRlcnBvbGF0ZShkMSwgZDApLCByMCA9IHJlaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IGRlaW50ZXJwb2xhdGUoZDAsIGQxKSwgcjAgPSByZWludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IGRlaW50ZXJwb2xhdGUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gcmVpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKTtcbn1cblxuLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gcmVpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbiwgcmFuZ2UsIGNsYW1wID8gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIDogZGVpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpKSkoK3gpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4sIGRlaW50ZXJwb2xhdGVMaW5lYXIsIGNsYW1wID8gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIDogcmVpbnRlcnBvbGF0ZSkpKSgreSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcC5jYWxsKF8sIG51bWJlciksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHJlc2NhbGUoKSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICByZXR1cm4gcmVzY2FsZSgpO1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgdGhpcy5maWxsID0gbWF0Y2hbMV0gfHwgXCIgXCI7XG4gIHRoaXMuYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIjtcbiAgdGhpcy5zaWduID0gbWF0Y2hbM10gfHwgXCItXCI7XG4gIHRoaXMuc3ltYm9sID0gbWF0Y2hbNF0gfHwgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFtYXRjaFs1XTtcbiAgdGhpcy53aWR0aCA9IG1hdGNoWzZdICYmICttYXRjaFs2XTtcbiAgdGhpcy5jb21tYSA9ICEhbWF0Y2hbN107XG4gIHRoaXMucHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpO1xuICB0aGlzLnRyaW0gPSAhIW1hdGNoWzldO1xuICB0aGlzLnR5cGUgPSBtYXRjaFsxMF0gfHwgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09IG51bGwgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09IG51bGwgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgeyBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGkwID0gMDsgfSBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICBcImJcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTsgfSxcbiAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXG4gIFwiZVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7IH0sXG4gIFwiZlwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRml4ZWQocCk7IH0sXG4gIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxuICBcIm9cIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KTsgfSxcbiAgXCJwXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCk7IH0sXG4gIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgXCJYXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH0sXG4gIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cFwiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllclwiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbVwiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyAmJiBsb2NhbGUudGhvdXNhbmRzID8gZm9ybWF0R3JvdXAobG9jYWxlLmdyb3VwaW5nLCBsb2NhbGUudGhvdXNhbmRzKSA6IGlkZW50aXR5LFxuICAgICAgY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA/IGZvcm1hdE51bWVyYWxzKGxvY2FsZS5udW1lcmFscykgOiBpZGVudGl0eSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCB8fCBcIiVcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PSBudWxsICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMF0gOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVsxXSA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRvbWFpbiwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RhcnQgPSBkb21haW5bMF0sXG4gICAgICBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSxcbiAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpLFxuICAgICAgcHJlY2lzaW9uO1xuICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICBzd2l0Y2ggKHNwZWNpZmllci50eXBlKSB7XG4gICAgY2FzZSBcInNcIjoge1xuICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgIHJldHVybiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJcIjpcbiAgICBjYXNlIFwiZVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwiclwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZcIjpcbiAgICBjYXNlIFwiJVwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzcGVjaWZpZXIpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgbWF4KSB7XG4gIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudChtYXgpIC0gZXhwb25lbnQoc3RlcCkpICsgMTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciBhcyByZWludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7ZGVmYXVsdCBhcyBjb250aW51b3VzLCBjb3B5LCBkZWludGVycG9sYXRlTGluZWFyIGFzIGRlaW50ZXJwb2xhdGV9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB0aWNrRm9ybWF0IGZyb20gXCIuL3RpY2tGb3JtYXRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRvbWFpbigpLCBjb3VudCwgc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcblxuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIGkwID0gMCxcbiAgICAgICAgaTEgPSBkLmxlbmd0aCAtIDEsXG4gICAgICAgIHN0YXJ0ID0gZFtpMF0sXG4gICAgICAgIHN0b3AgPSBkW2kxXSxcbiAgICAgICAgc3RlcDtcblxuICAgIGlmIChzdG9wIDwgc3RhcnQpIHtcbiAgICAgIHN0ZXAgPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gc3RlcDtcbiAgICAgIHN0ZXAgPSBpMCwgaTAgPSBpMSwgaTEgPSBzdGVwO1xuICAgIH1cblxuICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW5lYXIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgbWlsbGlzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgLy8gbm9vcFxufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbm1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICBrID0gTWF0aC5mbG9vcihrKTtcbiAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gIGlmICghKGsgPiAxKSkgcmV0dXJuIG1pbGxpc2Vjb25kO1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pbGxpc2Vjb25kO1xuZXhwb3J0IHZhciBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25TZWNvbmQpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgbWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25NaW51dGUpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBob3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICB2YXIgb2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogZHVyYXRpb25NaW51dGUgJSBkdXJhdGlvbkhvdXI7XG4gIGlmIChvZmZzZXQgPCAwKSBvZmZzZXQgKz0gZHVyYXRpb25Ib3VyO1xuICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcigoK2RhdGUgLSBvZmZzZXQpIC8gZHVyYXRpb25Ib3VyKSAqIGR1cmF0aW9uSG91ciArIG9mZnNldCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBob3VyO1xuZXhwb3J0IHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHllYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxueWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHllYXI7XG5leHBvcnQgdmFyIHllYXJzID0geWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgbW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRNb250aCgpIC0gc3RhcnQuZ2V0TW9udGgoKSArIChlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbW9udGg7XG5leHBvcnQgdmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjTWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ1NlY29uZHMoMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNaW51dGU7XG5leHBvcnQgdmFyIHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjSG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0hvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjSG91cjtcbmV4cG9ydCB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNZZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1dGNZZWFyO1xuZXhwb3J0IHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y01vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDTW9udGgoKSAtIHN0YXJ0LmdldFVUQ01vbnRoKCkgKyAoZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01vbnRoO1xuZXhwb3J0IHZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld1llYXIoeSkge1xuICByZXR1cm4ge3k6IHksIG06IDAsIGQ6IDEsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIG5ld0RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld1llYXIoMTkwMCksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbmV3RGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBuZXdEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgbG9jYWxEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIsIHV0Y0RhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gKCtuWzBdKSAqIDEwMDAsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge3V0Y0Zvcm1hdH0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5leHBvcnQgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdElzb05hdGl2ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciBmb3JtYXRJc28gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ1xuICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgOiB1dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0SXNvO1xuIiwiaW1wb3J0IHtpc29TcGVjaWZpZXJ9IGZyb20gXCIuL2lzb0Zvcm1hdFwiO1xuaW1wb3J0IHt1dGNQYXJzZX0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5mdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbn1cblxudmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgIDogdXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VJc287XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cInVzZSBzdHJpY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRHdGV4VXJscygpe1xuICAgIGNvbnN0IGhvc3QgPSAnaHR0cHM6Ly9ndGV4cG9ydGFsLm9yZy9yZXN0L3YxLyc7XG4gICAgLy8gY29uc3QgaG9zdCA9ICdsb2NhbC5ndGV4cG9ydGFsLm9yZy9yZXN0L3YxLydcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBlcXRsIERhc2hib2FyZCBzcGVjaWZpY1xuICAgICAgICBkeW5lcXRsOiBob3N0ICsgJ2Fzc29jaWF0aW9uL2R5bmVxdGwnLFxuICAgICAgICBzbnA6IGhvc3QgKyAncmVmZXJlbmNlL3ZhcmlhbnQ/Zm9ybWF0PWpzb24mc25wSWQ9JyxcbiAgICAgICAgdmFyaWFudElkOiBob3N0ICsgJ2RhdGFzZXQvdmFyaWFudD9mb3JtYXQ9anNvbiZ2YXJpYW50SWQ9JyxcblxuICAgICAgICAvLyB0cmFuc2NyaXB0LCBleG9uLCBqdW5jdGlvbiBleHByZXNzaW9uIHNwZWNpZmljXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5FeG9uRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuICAgICAgICB0cmFuc2NyaXB0RXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuVHJhbnNjcmlwdEV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAganVuY3Rpb25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5KdW5jdGlvbkV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZnZW5jb2RlSWQ9JyxcbiAgICAgICAgdHJhbnNjcmlwdDogaG9zdCArICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZXhvbjogaG9zdCArICdyZWZlcmVuY2UvZXhvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsOiBob3N0ICsgJ2RhdGFzZXQvY29sbGFwc2VkR2VuZU1vZGVsRXhvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsVW5maWx0ZXJlZDogaG9zdCArICdkYXRhc2V0L2Z1bGxDQ29sbGFwc2VkR2VuZU1vZGVsRXhvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcblxuICAgICAgICAvLyBnZW5lIGV4cHJlc3Npb24gdmlvbGluIHBsb3Qgc3BlY2lmaWNcbiAgICAgICAgZ2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL2dlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIC8vIGdlbmUgZXhwcmVzc2lvbiBoZWF0IG1hcCBzcGVjaWZpY1xuICAgICAgICBtZWRHZW5lRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuR2VuZUV4cHJlc3Npb24/ZGF0YXNldElkPWd0ZXhfdjcmaGNsdXN0ZXI9dHJ1ZSZwYWdlU2l6ZT0xMDAwMCcsXG5cbiAgICAgICAgLy8gdG9wIGV4cHJlc3NlZCBnZW5lIGV4cHJlc3Npb24gc3BlY2lmaWNcbiAgICAgICAgdG9wSW5UaXNzdWVGaWx0ZXJlZDogaG9zdCArICdleHByZXNzaW9uL3RvcEV4cHJlc3NlZEdlbmU/ZGF0YXNldElkPWd0ZXhfdjcmZmlsdGVyTXRHZW5lPXRydWUmc29ydEJ5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZVNpemU9NTAmdGlzc3VlU2l0ZURldGFpbElkPScsXG4gICAgICAgIHRvcEluVGlzc3VlOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZT9kYXRhc2V0SWQ9Z3RleF92NyZzb3J0Qnk9bWVkaWFuJnNvcnREaXJlY3Rpb249ZGVzYyZwYWdlU2l6ZT01MCZ0aXNzdWVTaXRlRGV0YWlsSWQ9JyxcblxuICAgICAgICBnZW5lSWQ6IGhvc3QgKyAncmVmZXJlbmNlL2dlbmU/Zm9ybWF0PWpzb24mZ2VuY29kZVZlcnNpb249djE5Jmdlbm9tZUJ1aWxkPUdSQ2gzNyUyRmhnMTkmZ2VuZUlkPScsXG5cbiAgICAgICAgLy8gdGlzc3VlIG1lbnUgc3BlY2lmaWNcbiAgICAgICAgdGlzc3VlOiAgaG9zdCArICdtZXRhZGF0YS90aXNzdWVTaXRlRGV0YWlsP2Zvcm1hdD1qc29uJyxcblxuICAgICAgICB0aXNzdWVTaXRlczogaG9zdCArICdtZXRhZGF0YS90aXNzdWVTaXRlRGV0YWlsP2Zvcm1hdD1qc29uJyxcblxuICAgICAgICAvLyBsb2NhbCBzdGF0aWMgZmlsZXNcbiAgICAgICAgc2FtcGxlOiAndG1wU3VtbWFyeURhdGEvZ3RleC5TYW1wbGUuY3N2JyxcbiAgICAgICAgcm5hc2VxQ3JhbTogJ3RtcFN1bW1hcnlEYXRhL3JuYXNlcV9jcmFtX2ZpbGVzX3Y3X2RiR2FQXzAxMTUxNi50eHQnLFxuICAgICAgICB3Z3NDcmFtOiAndG1wU3VtbWFyeURhdGEvd2dzX2NyYW1fZmlsZXNfdjdfaGczOF9kYkdhUF8wMTE1MTYudHh0JyxcblxuICAgICAgICAvLyBmaXJlQ2xvdWRcbiAgICAgICAgZmNCaWxsaW5nOiAnaHR0cHM6Ly9hcGkuZmlyZWNsb3VkLm9yZy9hcGkvcHJvZmlsZS9iaWxsaW5nJyxcbiAgICAgICAgZmNXb3JrU3BhY2U6ICdodHRwczovL2FwaS5maXJlY2xvdWQub3JnL2FwaS93b3Jrc3BhY2VzJyxcbiAgICAgICAgZmNQb3J0YWxXb3JrU3BhY2U6ICdodHRwczovL3BvcnRhbC5maXJlY2xvdWQub3JnLyN3b3Jrc3BhY2VzJ1xuICAgIH1cbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2VuZXMgZnJvbSBHVEV4IHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBnZW5lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZW5lcyhkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmUnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnR2VuZSB3ZWIgc2VydmljZSBwYXJzaW5nIGVycm9yJztcbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3Vlc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgdGlzc3Vlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlU2l0ZURldGFpbCc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyIGlzIG1pc3Npbmc6ICcgKyBhdHRyO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBqc29uW2F0dHJdO1xuXG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAndGlzc3VlU2l0ZURldGFpbCcsICdjb2xvckhleCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHIgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGlzc3Vlcztcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgdGlzc3VlIGdyb3Vwc1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiBAcGFyYW0gZm9yRXF0bCB7Qm9vbGVhbn0gcmVzdHJpY3QgdG8gZXF0bCB0aXNzdWVzXG4gKiBAcmV0dXJucyB7RGljdGlvbmFyeX0gb2YgbGlzdHMgb2YgdGlzc3VlcyBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaXNzdWVTaXRlcyhkYXRhLCBmb3JFcXRsPWZhbHNlKXtcbiAgICAvLyB0aGUgbGlzdCBvZiBpbnZhbGlkZSBlcXRsIHRpc3N1ZXMgZHVlIHRvIHNhbXBsZSBzaXplIDwgNzBcbiAgICAvLyBhIGhhcmQtY29kZWQgbGlzdCBiZWNhdXNlIHRoZSBzYW1wbGUgc2l6ZSBpcyBub3QgZWFzeSB0byByZXRyaWV2ZVxuICAgIGNvbnN0IGludmFsaWRUaXNzdWVzID0gWydCbGFkZGVyJywgJ0NlcnZpeF9FY3RvY2Vydml4JywgJ0NlcnZpeF9FbmRvY2Vydml4JywgJ0ZhbGxvcGlhbl9UdWJlJywgJ0tpZG5leV9Db3J0ZXgnXTtcblxuICAgIGNvbnN0IGF0dHIgPSAndGlzc3VlU2l0ZURldGFpbCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgbGV0IHRpc3N1ZXMgPSBkYXRhW2F0dHJdO1xuICAgIFsndGlzc3VlU2l0ZScsJ3Rpc3N1ZVNpdGVEZXRhaWxJZCcsJ3Rpc3N1ZVNpdGVEZXRhaWwnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIXRpc3N1ZXNbMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IGBwYXJzZVRpc3N1ZVNpdGVzIGF0dHIgZXJyb3IuICR7ZH0gaXMgbm90IGZvdW5kYDtcbiAgICB9KTtcbiAgICB0aXNzdWVzID0gZm9yRXF0bD09ZmFsc2U/dGlzc3Vlczp0aXNzdWVzLmZpbHRlcigoZCk9PntyZXR1cm4gIWludmFsaWRUaXNzdWVzLmluY2x1ZGVzKGQudGlzc3VlU2l0ZURldGFpbElkKX0pOyAvLyBhbiBhcnJheSBvZiB0aXNzdWVTaXRlRGV0YWlsSWQgb2JqZWN0c1xuXG4gICAgLy8gYnVpbGQgdGhlIHRpc3N1ZUdyb3VwcyBsb29rdXAgZGljdGlvbmFyeSBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZSAoaS5lLiB0aGUgdGlzc3VlIG1haW4gc2l0ZSBuYW1lKVxuICAgIGxldCB0aXNzdWVHcm91cHMgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e1xuICAgICAgICBsZXQgZ3JvdXBOYW1lID0gZC50aXNzdWVTaXRlO1xuICAgICAgICBsZXQgc2l0ZSA9IHtcbiAgICAgICAgICAgIGlkOiBkLnRpc3N1ZVNpdGVEZXRhaWxJZCxcbiAgICAgICAgICAgIG5hbWU6IGQudGlzc3VlU2l0ZURldGFpbFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWFyci5oYXNPd25Qcm9wZXJ0eShncm91cE5hbWUpKSBhcnJbZ3JvdXBOYW1lXSA9IFtdOyAvLyBpbml0aWF0ZSBhbiBhcnJheVxuICAgICAgICBhcnJbZ3JvdXBOYW1lXS5wdXNoKHNpdGUpO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH0sIHt9KTtcblxuICAgIC8vIG1vZGlmeSB0aGUgdGlzc3VlIGdyb3VwcyB0aGF0IGhhdmUgb25seSBhIHNpbmdsZSBzaXRlXG4gICAgLy8gYnkgcmVwbGFjaW5nIHRoZSBncm91cCdzIG5hbWUgd2l0aCB0aGUgc2luZ2xlIHNpdGUncyBuYW1lIC0tIHJlc3VsdGluZyBhIGJldHRlciBBbHBoYWJldGljYWwgb3JkZXIgb2YgdGhlIHRpc3N1ZSBncm91cHNcblxuICAgIE9iamVjdC5rZXlzKHRpc3N1ZUdyb3VwcykuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKHRpc3N1ZUdyb3Vwc1tkXS5sZW5ndGggPT0gMSl7IC8vIGEgc2luZ2xlLXNpdGUgZ3JvdXBcbiAgICAgICAgICAgIGxldCBzaXRlID0gdGlzc3VlR3JvdXBzW2RdWzBdOyAvLyB0aGUgc2luZ2xlIHNpdGVcbiAgICAgICAgICAgIGRlbGV0ZSB0aXNzdWVHcm91cHNbZF07IC8vIHJlbW92ZSB0aGUgb2xkIGdyb3VwIGluIHRoZSBkaWN0aW9uYXJ5XG4gICAgICAgICAgICB0aXNzdWVHcm91cHNbc2l0ZS5uYW1lXSA9IFtzaXRlXTsgLy8gY3JlYXRlIGEgbmV3IGdyb3VwIHdpdGggdGhlIHNpdGUncyBuYW1lXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aXNzdWVHcm91cHM7XG5cbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgZXhvbnNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHBhcmFtIGZ1bGwge0Jvb2xlYW59XG4gKiBAcmV0dXJucyB7TGlzdH0gb2YgZXhvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTW9kZWxFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2NvbGxhcHNlZEdlbmVNb2RlbEV4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKXtcbiAgICAgICAgY29uc29sZS5lcnJvcihqc29uKTtcbiAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiBSZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICB9XG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWydzdGFydCcsICdlbmQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWpzb25bYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93ICdQYXJzZSBFcnJvcjogUmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25bYXR0cl0ubWFwKChkKT0+e1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBkLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZC5lbmQ7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRoZSBqdW5jdGlvbnNcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb25zXG4gKiAvLyBqdW5jdGlvbiBhbm5vdGF0aW9ucyBhcmUgbm90IHN0b3JlZCBpbiBNb25nb1xuICAgIC8vIHNvIGhlcmUgd2UgdXNlIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlIHRvIHBhcnNlIHRoZSBqdW5jdGlvbiBJRCBmb3IgaXRzIGdlbm9taWMgbG9jYXRpb25cbiAgICAvLyBhc3N1bWluZyB0aGF0IGVhY2ggdGlzc3VlIGhhcyB0aGUgc2FtZSBqdW5jdGlvbnMsXG4gICAgLy8gdG8gZ3JhYiBhbGwgdGhlIGtub3duIGp1bmN0aW9ucyBvZiBhIGdlbmUsIHdlIG9ubHkgbmVlZCB0byBxdWVyeSBvbmUgdGlzc3VlXG4gICAgLy8gaGVyZSB3ZSBhcmJpdHJhcmlseSBwaWNrIExpdmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbnMoanNvbil7XG5cbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkp1bmN0aW9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzZSBFcnJvcjogcGFyc2VKdW5jdGlvbnMgaW5wdXQgZXJyb3IuICcgKyBhdHRyO1xuXG4gICAgLy8gY2hlY2sgcmVxdWlyZWQganNvbiBhdHRyaWJ1dGVzXG4gICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnanVuY3Rpb25JZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIC8vIHVzZSB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUganNvbiBvYmplY3RzIGFzIGEgdGVzdCBjYXNlXG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoanNvblthdHRyXVswXSk7XG4gICAgICAgICAgICB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGp1bmN0aW9uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgZDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqc29uW2F0dHJdLmZpbHRlcigoZCk9PmQudGlzc3VlU2l0ZURldGFpbElkPT0nTGl2ZXInKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gZC5qdW5jdGlvbklkLnNwbGl0KCdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tOiBwb3NbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21TdGFydDogcG9zWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kOiBwb3NbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25JZDogZC5qdW5jdGlvbklkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXMgZnJvbSB0aGUgR1RFeCB3ZWIgc2VydmljZTogJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIHRyYW5zY3JpcHQgZXhvbiBvYmplY3QgbGlzdHMgaW5kZXhlZCBieSB0cmFuc2NyaXB0IElEcyAtLSBFTlNUIElEc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFeG9ucyhqc29uKXtcbiAgICBjb25zdCBhdHRyID0gJ2V4b24nO1xuICAgIGlmKCFqc29uLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIGpzb24gYXR0cmlidXRlIGlzIG1pc3Npbmc6IGV4b24nO1xuICAgIHJldHVybiBqc29uW2F0dHJdLnJlZHVjZSgoYSwgZCk9PntcbiAgICAgICAgLy8gY2hlY2sgcmVxdWlyZWQgYXR0cmlidXRlc1xuICAgICAgICBbJ3RyYW5zY3JpcHRJZCcsICdjaHJvbW9zb21lJywgJ3N0YXJ0JywgJ2VuZCcsICdleG9uTnVtYmVyJywgJ2V4b25JZCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICBpZighZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFbZC50cmFuc2NyaXB0SWRdID09PSB1bmRlZmluZWQpIGFbZC50cmFuc2NyaXB0SWRdID0gW107XG4gICAgICAgIGQuY2hyb20gPSBkLmNocm9tb3NvbWU7XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgYVtkLnRyYW5zY3JpcHRJZF0ucHVzaChkKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufSBmcm9tIEdURXggd2ViIHNlcnZpY2UgJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBpc29mb3JtIG9iamVjdHMgc29ydGVkIGJ5IGxlbmd0aCBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRzKGpzb24pe1xuICAgIGNvbnN0IGF0dHIgPSAndHJhbnNjcmlwdCc7XG4gICAgaWYoIWpzb24uaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUlzb2Zvcm1zIGlucHV0IGVycm9yJyk7XG5cbiAgICAvLyBjaGVjayByZXF1aXJlZCBhdHRyaWJ1dGVzLCB1c2UgdGhlIGZpcnN0IHRyYW5zY3JpcHQgYXMgdGhlIHRlc3QgY2FzZVxuICAgIFsndHJhbnNjcmlwdElkJywgJ3N0YXJ0JywgJ2VuZCddLmZvckVhY2goKGspPT57XG4gICAgICAgIGlmKCFqc29uW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGQpO1xuICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsga1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ganNvblthdHRyXS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCBsMSA9IE1hdGguYWJzKGEuZW5kIC0gYS5zdGFydCkgKyAxO1xuICAgICAgICBjb25zdCBsMiA9IE1hdGguYWJzKGIuZW5kIC0gYi5zdGFydCkgKyAxO1xuICAgICAgICByZXR1cm4gLShsMS1sMik7IC8vIHNvcnQgYnkgaXNvZm9ybSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIGZpbmFsIChtYXNrZWQpIGdlbmUgbW9kZWwgZXhvbiBleHByZXNzaW9uXG4gKiBleHByZXNzaW9uIGlzIG5vcm1hbGl6ZWQgdG8gcmVhZHMgcGVyIGtiXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgZXhvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZXhvbnMge0xpc3R9IG9mIGV4b25zIHdpdGggcG9zaXRpb25zXG4gKiBAcGFyYW0gdXNlTG9nIHtib29sZWFufSB1c2UgbG9nMiB0cmFuc2Zvcm1hdGlvblxuICogQHBhcmFtIGFkanVzdCB7TnVtYmVyfSBkZWZhdWx0IDAuMDFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbkV4cHJlc3Npb24oZGF0YSwgZXhvbnMsIHVzZUxvZz10cnVlLCBhZGp1c3Q9MSl7XG4gICAgY29uc3QgZXhvbkRpY3QgPSBleG9ucy5yZWR1Y2UoKGEsIGQpPT57YVtkLmV4b25JZF0gPSBkOyByZXR1cm4gYTt9LCB7fSk7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5FeG9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUV4b25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBleG9uT2JqZWN0cyA9IGRhdGFbYXR0cl07XG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBbJ21lZGlhbicsICdleG9uSWQnLCAndGlzc3VlU2l0ZURldGFpbElkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFleG9uT2JqZWN0c1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUV4b25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgZDtcbiAgICB9KTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBleG9uIGNvdW50c1xuICAgIGV4b25PYmplY3RzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgY29uc3QgZXhvbiA9IGV4b25EaWN0W2QuZXhvbklkXTsgLy8gZm9yIHJldHJpZXZpbmcgZXhvbiBwb3NpdGlvbnNcbiAgICAgICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICAgICAgWydlbmQnLCAnc3RhcnQnXS5mb3JFYWNoKChwKT0+e1xuICAgICAgICAgICAgaWYgKCFleG9uLmhhc093blByb3BlcnR5KHApKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gcG9zaXRpb24gYXR0ciBub3QgZm91bmQ6ICcgKyBwO1xuICAgICAgICB9KTtcbiAgICAgICAgZC5sID0gZXhvbi5lbmQgLSBleG9uLnN0YXJ0ICsgMTtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLm1lZGlhbikvZC5sO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5tZWRpYW4pL2QubDtcbiAgICAgICAgaWYgKHVzZUxvZykgZC52YWx1ZSA9IE1hdGgubG9nMihkLnZhbHVlICsgMSk7XG4gICAgICAgIGQueCA9IGQuZXhvbklkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLmNocm9tU3RhcnQgPSBleG9uLnN0YXJ0O1xuICAgICAgICBkLmNocm9tRW5kID0gZXhvbi5lbmQ7XG4gICAgICAgIGQudW5pdCA9ICdtZWRpYW4gJyArIGQudW5pdCArICcgcGVyIGJhc2UnO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV4b25PYmplY3RzLnNvcnQoKGEsYik9PntcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydDxiLmNocm9tU3RhcnQpIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEuY2hyb21TdGFydD5iLmNocm9tU3RhcnQpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTsgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxufVxuXG4vKipcbiAqIFBhcnNlIGp1bmN0aW9uIG1lZGlhbiByZWFkIGNvdW50IGRhdGFcbiAqIEBwYXJhbSBkYXRhIHtKU09OfSBvZiB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn0gcGVyZm9ybSBsb2cgdHJhbnNmb3JtYXRpb25cbiAqIEBwYXJhbSBhZGp1c3Qge051bWJlcn0gZm9yIGhhbmRsaW5nIDAncyB3aGVuIHVzZUxvZyBpcyB0cnVlXG4gKiBAcmV0dXJucyB7TGlzdH0gb2YganVuY3Rpb24gb2JqZWN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24oZGF0YSwgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhbkp1bmN0aW9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuXG4gICAgY29uc3QganVuY3Rpb25zID0gZGF0YVthdHRyXTtcblxuICAgIC8vIGVycm9yLWNoZWNraW5nXG4gICAgaWYgKGp1bmN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IGp1bmN0aW9ucy5sZW5ndGggPT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ05vIGp1bmN0aW9uIGRhdGEgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cblxuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGp1bmN0aW9uIHJlYWQgY291bnRzXG4gICAganVuY3Rpb25zLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgWyd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnanVuY3Rpb25JZCcsICdtZWRpYW4nLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmICghZC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlciBFcnJvcjogcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IG1lZGlhbiA9IGQubWVkaWFuO1xuICAgICAgICBsZXQgdGlzc3VlSWQgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC50aXNzdWVJZCA9IHRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQueCA9IGQuanVuY3Rpb25JZDtcbiAgICAgICAgZC55ID0gdGlzc3VlSWQ7XG4gICAgICAgIGQudmFsdWUgPSB1c2VMb2c/TWF0aC5sb2cxMChOdW1iZXIobWVkaWFuICsgYWRqdXN0KSk6TnVtYmVyKG1lZGlhbik7XG4gICAgICAgIGQub3JpZ2luYWxWYWx1ZSA9IE51bWJlcihtZWRpYW4pO1xuICAgIH0pO1xuXG4gICAgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxuICAgIHJldHVybiBqdW5jdGlvbnMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5qdW5jdGlvbklkPmIuanVuY3Rpb25JZCkgcmV0dXJuIDE7XG4gICAgICAgIGVsc2UgaWYgKGEuanVuY3Rpb25JZDxiLmp1bmN0aW9uSWQpIHJldHVybiAtMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdHJhbnNjcmlwdCBleHByZXNzaW9uXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIHVzZUxvZ1xuICogQHBhcmFtIGFkanVzdFxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uKGRhdGEsIHVzZUxvZz10cnVlLCBhZGp1c3Q9MSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5UcmFuc2NyaXB0RXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdQYXJzZSBFcnJvcjogcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvbiBpbnB1dCBlcnJvcicpO1xuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFsnbWVkaWFuJywgJ3RyYW5zY3JpcHRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdygnUGFyc2UgRXJyb3I6IHJlcXVpcmVkIHRyYW5zY2lwdCBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihkLm1lZGlhbiArIGFkanVzdCkpOk51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQub3JpZ2luYWxWYWx1ZSA9IE51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZVNpdGVEZXRhaWxJZDtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgICAgICBkLnRpc3N1ZUlkID0gZC50aXNzdWVTaXRlRGV0YWlsSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UoZGF0YSwgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBhdHRyID0gJ21lZGlhblRyYW5zY3JpcHRFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICB0aHJvdygnUGFyc2UgRXJyb3I6IHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UgaW5wdXQgZXJyb3IuJyk7XG4gICAgfVxuICAgIC8vIHBhcnNlIEdURXggaXNvZm9ybSBtZWRpYW4gVFBNXG4gICAgZGF0YVthdHRyXS5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIFsnbWVkaWFuJywgJ3RyYW5zY3JpcHRJZCcsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuY29kZUlkJ10uZm9yRWFjaCgoayk9PntcbiAgICAgICAgICAgIGlmKCFkLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihkKTtcbiAgICAgICAgICAgICAgICB0aHJvdygnUGFyc2UgRXJyb3I6IFJlcXVpcmVkIHRyYW5zY3JpcHQgYXR0cmlidXRlIGlzIG1pc3Npbmc6ICcgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1lZGlhbiA9IGQubWVkaWFuO1xuICAgICAgICBjb25zdCB0aXNzdWVJZCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLnZhbHVlID0gdXNlTG9nP01hdGgubG9nMTAoTnVtYmVyKG1lZGlhbiArIGFkanVzdCkpOk51bWJlcihtZWRpYW4pO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIobWVkaWFuKTtcbiAgICAgICAgZC55ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueCA9IHRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgICAgIGQudGlzc3VlSWQgPSB0aXNzdWVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhIHtKc29ufSB3aXRoIGF0dHIgbWVkaWFuR2VuZUV4cHJlc3Npb25cbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHBlcmZvcm1zIGxvZzEwIHRyYW5zZm9ybWF0aW9uXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVkaWFuRXhwcmVzc2lvbihkYXRhLCB1c2VMb2c9dHJ1ZSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZzogJyArIGF0dHI7XG4gICAgY29uc3QgYWRqdXN0ID0gMTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAgICAvLyBlcnJvci1jaGVja2luZyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlczpcbiAgICBpZiAoZGF0YVthdHRyXS5sZW5ndGggPT0gMCkgdGhyb3cgJ3BhcnNlTWVkaWFuRXhwcmVzc2lvbiBmaW5kcyBubyBkYXRhLic7XG4gICAgWydtZWRpYW4nLCAndGlzc3VlU2l0ZURldGFpbElkJywgJ2dlbmNvZGVJZCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghZGF0YVthdHRyXVswXS5oYXNPd25Qcm9wZXJ0eShkKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkYXRhW2F0dHJdWzBdKTtcbiAgICAgICAgICAgIHRocm93IGBQYXJzZSBFcnJvcjogcmVxdWlyZWQganNvbiBhdHRyaWJ1dGUgaXMgbWlzc2luZ3A6ICR7ZH1gO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IHJlc3VsdHMgPSBkYXRhW2F0dHJdO1xuICAgIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihkLm1lZGlhbikgKyBhZGp1c3QpOk51bWJlcihkLm1lZGlhbik7XG4gICAgICAgIGQueCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLnkgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGV4cHJlc3Npb24gZGF0YSBvZiBhIGdlbmUgZm9yIGEgZ3JvdXBlZCB2aW9saW4gcGxvdFxuICogQHBhcmFtIGRhdGEge0pTT059IGZyb20gR1RFeCBnZW5lIGV4cHJlc3Npb24gd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBjb2xvcnMge0RpY3Rpb25hcnl9IHRoZSB2aW9saW4gY29sb3IgZm9yIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVFeHByZXNzaW9uRm9yVmlvbGluKGRhdGEsIHVzZUxvZz10cnVlLCBjb2xvcnM9dW5kZWZpbmVkKXtcbiAgICBjb25zdCBhdHRyID0gJ2dlbmVFeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgYXR0cjtcbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4gICAgICAgIFsnZGF0YScsICd0aXNzdWVTaXRlRGV0YWlsSWQnLCAnZ2VuZVN5bWJvbCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChrKT0+e1xuICAgICAgICAgICAgaWYoIWQuaGFzT3duUHJvcGVydHkoaykpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlIEVycm9yOiByZXF1aXJlZCBqc29uIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGQudmFsdWVzID0gdXNlTG9nP2QuZGF0YS5tYXAoKGRkKT0+e3JldHVybiBNYXRoLmxvZzEwKCtkZCsxKX0pOmQuZGF0YTtcbiAgICAgICAgZC5ncm91cCA9IGQudGlzc3VlU2l0ZURldGFpbElkO1xuICAgICAgICBkLmxhYmVsID0gZC5nZW5lU3ltYm9sO1xuICAgICAgICBkLmNvbG9yID0gY29sb3JzPT09dW5kZWZpbmVkPycjOTBjMWMxJzpjb2xvcnNbZC5nZW5jb2RlSWRdO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiN2ZjOTdmYmVhZWQ0ZmRjMDg2ZmZmZjk5Mzg2Y2IwZjAwMjdmYmY1YjE3NjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFiOWU3N2Q5NWYwMjc1NzBiM2U3Mjk4YTY2YTYxZWU2YWIwMmE2NzYxZDY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJhNmNlZTMxZjc4YjRiMmRmOGEzM2EwMmNmYjlhOTllMzFhMWNmZGJmNmZmZjdmMDBjYWIyZDY2YTNkOWFmZmZmOTliMTU5MjhcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZmJiNGFlYjNjZGUzY2NlYmM1ZGVjYmU0ZmVkOWE2ZmZmZmNjZTVkOGJkZmRkYWVjZjJmMmYyXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImIzZTJjZGZkY2RhY2NiZDVlOGY0Y2FlNGU2ZjVjOWZmZjJhZWYxZTJjY2NjY2NjY1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJlNDFhMWMzNzdlYjg0ZGFmNGE5ODRlYTNmZjdmMDBmZmZmMzNhNjU2MjhmNzgxYmY5OTk5OTlcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNjZjMmE1ZmM4ZDYyOGRhMGNiZTc4YWMzYTZkODU0ZmZkOTJmZTVjNDk0YjNiM2IzXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjhkZDNjN2ZmZmZiM2JlYmFkYWZiODA3MjgwYjFkM2ZkYjQ2MmIzZGU2OWZjY2RlNWQ5ZDlkOWJjODBiZGNjZWJjNWZmZWQ2ZlwiKTtcbiIsImltcG9ydCB7aW50ZXJwb2xhdGVSZ2JCYXNpc30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNjaGVtZSkge1xuICByZXR1cm4gaW50ZXJwb2xhdGVSZ2JCYXNpcyhzY2hlbWVbc2NoZW1lLmxlbmd0aCAtIDFdKTtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImQ4YjM2NWY1ZjVmNTVhYjRhY1wiLFxuICBcImE2NjExYWRmYzI3ZDgwY2RjMTAxODU3MVwiLFxuICBcImE2NjExYWRmYzI3ZGY1ZjVmNTgwY2RjMTAxODU3MVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2M3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2Y1ZjVmNWM3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJhZjhkYzNmN2Y3Zjc3ZmJmN2JcIixcbiAgXCI3YjMyOTRjMmE1Y2ZhNmRiYTAwMDg4MzdcIixcbiAgXCI3YjMyOTRjMmE1Y2ZmN2Y3ZjdhNmRiYTAwMDg4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThmN2Y3ZjdkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTlhM2M5ZjdmN2Y3YTFkNzZhXCIsXG4gIFwiZDAxYzhiZjFiNmRhYjhlMTg2NGRhYzI2XCIsXG4gIFwiZDAxYzhiZjFiNmRhZjdmN2Y3YjhlMTg2NGRhYzI2XCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZjdmN2Y3ZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcIjk5OGVjM2Y3ZjdmN2YxYTM0MFwiLFxuICBcIjVlM2M5OWIyYWJkMmZkYjg2M2U2NjEwMVwiLFxuICBcIjVlM2M5OWIyYWJkMmY3ZjdmN2ZkYjg2M2U2NjEwMVwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmY3ZjdmN2ZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmN2Y3Zjc2N2E5Y2ZcIixcbiAgXCJjYTAwMjBmNGE1ODI5MmM1ZGUwNTcxYjBcIixcbiAgXCJjYTAwMjBmNGE1ODJmN2Y3Zjc5MmM1ZGUwNTcxYjBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmN2Y3ZjdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZmZmZmZmOTk5OTk5XCIsXG4gIFwiY2EwMDIwZjRhNTgyYmFiYWJhNDA0MDQwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZmZmZmZmYmFiYWJhNDA0MDQwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZmZmZmZmZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxYmZkYlwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZDllOTJjN2JiNlwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZDllOTJjN2JiNlwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGZmZmZiZmUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWNmNjBcIixcbiAgXCJkNzE5MWNmZGFlNjFhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJmZmZmYmZkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTlkNTk0XCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZmZmZmJmZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVmOTk5ZDhjOTJjYTI1ZlwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDIzOGI0NVwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlMGVjZjQ5ZWJjZGE4ODU2YTdcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODQxOWRcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ4MTBmN2M0ZDAwNGJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBmM2RiYThkZGI1NDNhMmNhXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0MmI4Y2JlXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg2OGFjMDg0MDgxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZThjOGZkYmI4NGUzNGEzM1wiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWQ3MzAxZlwiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZmIzMDAwMDdmMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2UyZjBhNmJkZGIxYzkwOTlcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YwMjgxOGFcIixcbiAgXCJmNmVmZjdiZGM5ZTE2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YxYzkwOTkwMTZjNTlcIixcbiAgXCJmNmVmZjdkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTY0NTBcIixcbiAgXCJmZmY3ZmJlY2UyZjBkMGQxZTZhNmJkZGI2N2E5Y2YzNjkwYzAwMjgxOGEwMTZjNTkwMTQ2MzZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlN2YyYTZiZGRiMmI4Y2JlXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMDU3MGIwXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDQ1YThkMDIzODU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU3ZTFlZmM5OTRjN2RkMWM3N1wiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGNlMTI1NlwiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1Njk4MDA0MzY3MDAxZlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZGUwZGRmYTlmYjVjNTFiOGFcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFhZTAxN2VcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzc0OTAwNmFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWRmOGIxN2ZjZGJiMmM3ZmI4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MjI1ZWE4XCIsXG4gIFwiZmZmZmNjYTFkYWI0NDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MmM3ZmI4MjUzNDk0XCIsXG4gIFwiZmZmZmNjYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MGMyYzg0XCIsXG4gIFwiZmZmZmQ5ZWRmOGIxYzdlOWI0N2ZjZGJiNDFiNmM0MWQ5MWMwMjI1ZWE4MjUzNDk0MDgxZDU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImY3ZmNiOWFkZGQ4ZTMxYTM1NFwiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTIzODQ0M1wiLFxuICBcImZmZmZjY2MyZTY5OTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTMxYTM1NDAwNjgzN1wiLFxuICBcImZmZmZjY2Q5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNWEzMlwiLFxuICBcImZmZmZlNWY3ZmNiOWQ5ZjBhM2FkZGQ4ZTc4YzY3OTQxYWI1ZDIzODQ0MzAwNjgzNzAwNDUyOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmY3YmNmZWM0NGZkOTVmMGVcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjljYzRjMDJcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI5OTM0MDQ2NjI1MDZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZlZGEwZmViMjRjZjAzYjIwXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZTMxYTFjXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYmQwMDI2ODAwMDI2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImRlZWJmNzllY2FlMTMxODJiZFwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjIxNzFiNVwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NTE5YzA4MzA2YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1ZTBhMWQ5OWIzMWEzNTRcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYyMzhiNDVcIixcbiAgXCJlZGY4ZTliYWU0YjM3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzYzMWEzNTQwMDZkMmNcIixcbiAgXCJlZGY4ZTljN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDVhMzJcIixcbiAgXCJmN2ZjZjVlNWY1ZTBjN2U5YzBhMWQ5OWI3NGM0NzY0MWFiNWQyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjBmMGYwYmRiZGJkNjM2MzYzXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NTI1MjUyXCIsXG4gIFwiZjdmN2Y3Y2NjY2NjOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NjM2MzYzMjUyNTI1XCIsXG4gIFwiZjdmN2Y3ZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1XCIsXG4gIFwiZmZmZmZmZjBmMGYwZDlkOWQ5YmRiZGJkOTY5Njk2NzM3MzczNTI1MjUyMjUyNTI1MDAwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmZWRmNWJjYmRkYzc1NmJiMVwiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODZhNTFhM1wiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzU0Mjc4ZjNmMDA3ZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWUwZDJmYzkyNzJkZTJkMjZcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFjYjE4MWRcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWRhNTBmMTU2NzAwMGRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlNmNlZmRhZTZiZTY1NTBkXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZDk0NzAxXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxYTYzNjAzN2YyNzA0XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCB2YXIgd2FybSA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbmV4cG9ydCB2YXIgY29vbCA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxudmFyIGMgPSBjdWJlaGVsaXgoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICBpZiAodCA8IDAgfHwgdCA+IDEpIHQgLT0gTWF0aC5mbG9vcih0KTtcbiAgdmFyIHRzID0gTWF0aC5hYnModCAtIDAuNSk7XG4gIGMuaCA9IDM2MCAqIHQgLSAxMDA7XG4gIGMucyA9IDEuNSAtIDEuNSAqIHRzO1xuICBjLmwgPSAwLjggLSAwLjkgKiB0cztcbiAgcmV0dXJuIGMgKyBcIlwiO1xufVxuIiwiaW1wb3J0IHtyZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuXG52YXIgYyA9IHJnYigpLFxuICAgIHBpXzFfMyA9IE1hdGguUEkgLyAzLFxuICAgIHBpXzJfMyA9IE1hdGguUEkgKiAyIC8gMztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB2YXIgeDtcbiAgdCA9ICgwLjUgLSB0KSAqIE1hdGguUEk7XG4gIGMuciA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCkpICogeDtcbiAgYy5nID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMV8zKSkgKiB4O1xuICBjLmIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8yXzMpKSAqIHg7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5mdW5jdGlvbiByYW1wKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuZXhwb3J0IHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuZXhwb3J0IHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG5leHBvcnQgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7bWF4fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2NhbGVTZXF1ZW50aWFsfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCAqIGFzIGQzQ2hyb21hdGljIGZyb20gXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29sb3JDaGFydChzaHVmZmxlPXRydWUpe1xuICAgIC8vIHJlZiBpbGx1c3RyYXRvciBjb2xvciB0aGVtZXNcbiAgICBjb25zdCBjb2xvcnMgPSBbXG4gICAgICAgIFwicmdiKDEwMCwxMTgsMTIwKVwiLFxuICAgICAgICBcInJnYigxMDEsMTQxLDE0NSlcIixcbiAgICAgICAgXCJyZ2IoMTAzLDEyNiw4MilcIixcbiAgICAgICAgXCJyZ2IoMTAzLDE4NCwyMjIpXCIsXG4gICAgICAgIFwicmdiKDEwOCwxMTAsODgpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTA4LDE0NywxMjgpXCIsXG4gICAgICAgIFwicmdiKDExOSwxNDQsMTgyKVwiLFxuICAgICAgICBcInJnYigxMjYsMTMwLDEyMilcIixcbiAgICAgICAgXCJyZ2IoMTMzLDE3MywxODYpXCIsXG4gICAgICAgIFwicmdiKDEzNywxMTQsOTEpXCIsXG4gICAgICAgIFwicmdiKDE0NSwxNzAsMTU3KVwiLFxuXG4gICAgICAgIFwicmdiKDE0NSwyMDEsMjMyKVwiLFxuICAgICAgICBcInJnYigxNDcsMTA1LDY2KVwiLFxuICAgICAgICBcInJnYigxNTksMTE0LDExNilcIixcbiAgICAgICAgXCJyZ2IoMTU5LDE4OCwxOTEpXCIsXG4gICAgICAgIFwicmdiKDE1OSwyMjksMTk0KVwiLFxuICAgICAgICBcInJnYigxNjMsMTYzLDE3MSlcIixcblxuICAgICAgICBcInJnYigxNjQsMjA3LDE5MClcIixcbiAgICAgICAgXCJyZ2IoMTcyLDEwOCwxMzApXCIsXG4gICAgICAgIFwicmdiKDE3Myw4NCwxMTQpXCIsXG4gICAgICAgIFwicmdiKDE3NCwxOTUsMjIyKVwiLFxuICAgICAgICBcInJnYigxNzYsMjA0LDE1MylcIixcblxuICAgICAgICBcInJnYigxNzksMTgwLDE1MClcIixcbiAgICAgICAgXCJyZ2IoMTgwLDIyMCwyMzcpXCIsXG4gICAgICAgIFwicmdiKDE4MywyMDIsMTIxKVwiLFxuICAgICAgICBcInJnYigxOTIsMjAyLDg1KVwiLFxuICAgICAgICBcInJnYigxOTMsMTkxLDE5M1wiLFxuICAgICAgICBcInJnYigxOTUsOTcsMTM2KVwiLFxuXG4gICAgICAgIFwicmdiKDE5OSwxMjEsMTAyKVwiLFxuICAgICAgICBcInJnYigyMDcsMjAyLDc2KVwiLFxuICAgICAgICBcInJnYigyMDksMjE5LDE4OSlcIixcbiAgICAgICAgXCJyZ2IoMjEzLDI1MSwyNTUpXCIsXG4gICAgICAgIFwicmdiKDIxNSw5NCw1NilcIixcblxuICAgICAgICBcInJnYigyMTgsMTE0LDEyNilcIixcbiAgICAgICAgXCJyZ2IoMjIzLDkwLDczKVwiLFxuICAgICAgICBcInJnYigyMjQsMjQ3LDIxNylcIixcbiAgICAgICAgXCJyZ2IoMjI3LDIwNSwxNjQpXCIsXG4gICAgICAgIFwicmdiKDIyOCwxNjgsMTg1KVwiLFxuXG4gICAgICAgIFwicmdiKDIzMCwxNzYsMTUyKVwiLFxuICAgICAgICBcInJnYigyMzIsMjEyLDE3NSlcIixcbiAgICAgICAgXCJyZ2IoMjM5LDIwMSw3NilcIixcbiAgICAgICAgXCJyZ2IoMjQwLDEyNCwxMDgpXCIsXG4gICAgICAgIFwicmdiKDI0NiwyMzIsMTc3KVwiLFxuXG4gICAgICAgIFwicmdiKDI0OSwyMjgsMTczKVwiLFxuICAgICAgICBcInJnYigyNTIsMjQ1LDE5MSlcIixcbiAgICAgICAgXCJyZ2IoMjU1LDE4OCwxMDMpXCIsXG4gICAgICAgIFwicmdiKDQ1LDk0LDExMClcIixcbiAgICAgICAgXCJyZ2IoNTEsMTUzLDIwNClcIixcblxuICAgICAgICBcInJnYig2MCwxMjQsMTQ1KVwiLFxuICAgICAgICBcInJnYig2Miw4NywxNDUpXCIsXG4gICAgICAgIFwicmdiKDY1LDExNSwxMjApXCIsXG4gICAgICAgIFwicmdiKDg5LDIxNiwyMjkpXCIsXG4gICAgICAgIFwicmdiKDk0LDE3OCwxNTMpXCIsXG4gICAgICAgIFwicmdiKDk1LDEyNCwxMzQpXCJcbiAgICBdO1xuXG4gICAgaWYgKHNodWZmbGUpIHJldHVybiBzaHVmZmxlQ29sb3JzKGNvbG9ycyk7XG4gICAgcmV0dXJuIGNvbG9ycztcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZUNvbG9ycyhhcnJheSkge1xuICAgIC8vIEZpc2hlci1ZYXRlcyBzaHVmZmxlXG4gICAgbGV0IGNvdW50ZXIgPSBhcnJheS5sZW5ndGg7XG5cbiAgICAvLyBXaGlsZSB0aGVyZSBhcmUgZWxlbWVudHMgaW4gdGhlIGFycmF5XG4gICAgd2hpbGUgKGNvdW50ZXIgPiAwKSB7XG4gICAgICAgIC8vIFBpY2sgYSByYW5kb20gaW5kZXhcbiAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY291bnRlcik7XG5cbiAgICAgICAgLy8gRGVjcmVhc2UgY291bnRlciBieSAxXG4gICAgICAgIGNvdW50ZXItLTtcblxuICAgICAgICAvLyBBbmQgc3dhcCB0aGUgbGFzdCBlbGVtZW50IHdpdGggaXRcbiAgICAgICAgbGV0IHRlbXAgPSBhcnJheVtjb3VudGVyXTtcbiAgICAgICAgYXJyYXlbY291bnRlcl0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHRlbXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIGdldCBhIGNvbG9yIGludGVycG9sYXRvclxuICogQHBhcmFtIG5hbWUge2VudW19OiBCdUduLCBPclJkLi4uLlxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvckludGVycG9sYXRvcihuYW1lKXtcbiAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZS1jaHJvbWF0aWMvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI3NlcXVlbnRpYWwtbXVsdGktaHVlXG4gICAgY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgICAgICAgQnVHbjogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVCdUduLFxuICAgICAgICBPclJkOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yUmQsXG4gICAgICAgIFB1QnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVCdSxcbiAgICAgICAgWWxHbkJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVlsR25CdSxcbiAgICAgICAgQmx1ZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlQmx1ZXMsXG4gICAgICAgIE9yYW5nZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlT3JhbmdlcyxcbiAgICAgICAgR3JlZW5zOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZWVucyxcbiAgICAgICAgUHVycGxlczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdXJwbGVzLFxuICAgICAgICBSZWRzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJlZHMsXG4gICAgICAgIEdyZXlzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZXlzLFxuICAgICAgICBHcmF5czogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5c1xuICAgIH07XG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IFwiQ29sb3IgSW50ZXJwb2xhdG9yIEVycm9yIFwiICsgbmFtZTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB0aHJvdyhlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tuYW1lXTtcblxufVxuXG4vKipcbiAqIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLXNjYWxlXG4gKiByZWZlcmVuY2U6IGh0dHA6Ly9ibC5vY2tzLm9yZy9jdXJyYW4vMzA5NGIzN2U2M2I5MThiYWIwYTA2Nzg3ZTE2MTYwN2JcbiAqIHNjYWxlU2VxdWVudGlhbCBtYXBzIHRoZSBjb250aW51b3VzIGRvbWFpbiB0byBhIGNvbnRpbnVvdXMgY29sb3Igc2NhbGVcbiAqIEBwYXJhbSBkYXRhIHtMaXN0fSBvZiBudW1lcmljYWwgZGF0YVxuICogQHBhcmFtIGNvbG9ycyB7U3RyaW5nfSBhIGNvbG9yIG5hbWUgdGhhdCBpcyBhdmFpbGFibGUgaW4gZ2V0Q29sb3JJbnRlcnBvbGF0b3IoKVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29sb3JTY2FsZShkYXRhLCBjb2xvcnM9XCJZbEduQnVcIiwgZG1pbiA9IDApIHtcbiAgICAvLyBsZXQgZG1heCA9IE1hdGgucm91bmQobWF4KGRhdGEpKTtcbiAgICBsZXQgZG1heCA9IG1heChkYXRhKTtcbiAgICBjb25zdCBzY2FsZSA9IHNjYWxlU2VxdWVudGlhbChnZXRDb2xvckludGVycG9sYXRvcihjb2xvcnMpKTtcbiAgICBzY2FsZS5kb21haW4oW2RtaW4sIGRtYXhdKTtcbiAgICByZXR1cm4gc2NhbGU7XG59XG5cbi8qKlxuICogRHJhdyBhIGNvbG9yIGxlZ2VuZCBiYXIuXG4gKiBEZXBlbmRlbmNpZXM6IGV4cHJlc3Npb25NYXAuY3NzXG4gKiBAcGFyYW0gdGl0bGUge1N0cmluZ31cbiAqIEBwYXJhbSBkb20ge29iamVjdH0gRDMgZG9tIG9iamVjdFxuICogQHBhcmFtIHNjYWxlIHtPYmplY3R9IEQzIHNjYWxlIG9mIHRoZSBjb2xvclxuICogQHBhcmFtIGNvbmZpZyB7T2JqZWN0fSB3aXRoIGF0dHI6IHgsIHlcbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59XG4gKiBAcGFyYW0gb3JpZW50YXRpb24ge2VudW19IGggb3IgdiwgaS5lLiBob3Jpem9udGFsIG9yIHZlcnRpY2FsXG4gKiBAcGFyYW0gY2VsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZHJhd0NvbG9yTGVnZW5kKHRpdGxlLCBkb20sIHNjYWxlLCBjb25maWcsIHVzZUxvZywgdGlja3M9MTAsIGJhc2U9MTAsIGNlbGw9e2g6MTAsIHc6NTB9LCBvcmllbnRhdGlvbj1cImhcIil7XG5cbiAgICBjb25zdCBkYXRhID0gWzBdLmNvbmNhdChzY2FsZS50aWNrcyh0aWNrcykuc2xpY2UoMSkpOyAvLyB3aHkgZG9lc24ndCB0aGlzIHByb3ZpZGUgY29uc2lzdGVudCBudW1iZXIgb2YgdGlja3M/P1xuXG5cbiAgICAvLyBsZWdlbmQgZ3JvdXBzXG4gICAgY29uc3QgbGVnZW5kcyA9IGRvbS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYClcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIi5sZWdlbmRcIikuZGF0YShkYXRhKTtcblxuICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwibGVnZW5kXCIsIHRydWUpO1xuXG4gICAgaWYgKG9yaWVudGF0aW9uID09ICdoJyl7XG4gICAgICAgICAvLyBsZWdlbmQgdGl0bGVcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KHRpdGxlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC0xMClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcblxuICAgICAgICAvLyB0aGUgY29sb3IgbGVnZW5kXG4gICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiBjZWxsLncqaSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjZWxsLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHNjYWxlKTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB1c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpLTEpLnRvUHJlY2lzaW9uKDIpOmQudG9QcmVjaXNpb24oMikpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IGNlbGwudyAqIGkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgIC8vIGxlZ2VuZCB0aXRsZVxuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQodGl0bGUpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgNSlcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55ICsgY2VsbC5oICogZGF0YS5sZW5ndGh9KXJvdGF0ZSg5MClgKTtcblxuICAgICAgICBnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkLCBpKSA9PiBjZWxsLmgqaSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY2VsbC53KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBzY2FsZSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gdXNlTG9nPyhNYXRoLnBvdyhiYXNlLCBkKS0xKS50b1ByZWNpc2lvbigyKTpkLnRvUHJlY2lzaW9uKDIpKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDE1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkLCBpKSA9PiBjZWxsLmggKiBpICsgKGNlbGwuaC8yKSk7XG4gICAgfVxuXG5cblxufSIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMSxcbiAgICAgIGsxMCA9IDEsXG4gICAgICBjbGFtcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICB2YXIgdCA9ICh4IC0geDApICogazEwO1xuICAgIHJldHVybiBpbnRlcnBvbGF0b3IoY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSkgOiB0KTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdLCB4MSA9ICtfWzFdLCBrMTAgPSB4MCA9PT0geDEgPyAwIDogMSAvICh4MSAtIHgwKSwgc2NhbGUpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikuZG9tYWluKFt4MCwgeDFdKS5jbGFtcChjbGFtcCk7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKipcbiAqIFRPRE86IGNvZGUgcmV2aWV3IG9mIGhvdyB0byBwcmVzZXQgcGFyYW1ldGVyIHZhbHVlc1xuICogcmV2aWV3IGFsbCB0aGUgcG9zaXRpb24gY2FsY3VsYXRpb25zXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb0hlYXRtYXBDb25maWcge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBtYWluUGFuZWxXIHtOdW1iZXJ9LCBzZXQgdGhpcyB0byBkZXRlcm1pbmUgdGhlIGNlbGxXXG4gICAgICogQHBhcmFtIGxlZnRQYW5lbFcge0ludGVnZXJ9LCBzZXQgdG8gMCBpZiB0aGVyZSdzIG5vIGxlZnQgcGFuZWxcbiAgICAgKiBAcGFyYW0gdG9wUGFuZWxIIHtJbnRlZ2VyfSwgc2V0IHRvIDAgaWYgdGhlcmUncyBubyB0b3AgcGFuZWxcbiAgICAgKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggYXR0cjogdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzbWFsbGVyIHZhbHVlcyB0aGFuIHRoZSBkZWZhdWx0IGFyZSBub3QgcmVjb21tZW5kZWQgZm9yIHRoZSBoZWF0bWFwLCB0b3AgbWFyZ2luIHNob3VsZCBiZSBhdCBsZWFzdCA1MFxuICAgICAqIEBwYXJhbSBjZWxsSCB7SW50ZWdlcn1cbiAgICAgKiBAcGFyYW0gYWRqdXN0IHtJbnRlZ2VyfSwgYWRqdXN0ZWQgc3BhY2luZyBiZXR3ZWVuIHRoZSBoZWF0bWFwIGFuZCB0aGUgZGVuZHJvZ3JhbVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJvb3RXPXdpbmRvdy5pbm5lcldpZHRoLCBsZWZ0UGFuZWxXPTEwMCwgdG9wUGFuZWxIPTEwMCwgbWFyZ2luPXt0b3A6NTAsIHJpZ2h0OjI1MCwgYm90dG9tOjE3MCwgbGVmdDoxMH0sIGNlbGxIPTEyLCBhZGp1c3Q9MTApIHtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSBtYXJnaW47XG4gICAgICAgIHRoaXMucm9vdFcgPSByb290VztcblxuICAgICAgICB0aGlzLmxlZnRUcmVlUGFuZWwgPSB7IC8vIHRoZSByb3cgZGVuZHJvZ3JhbSBwYW5lbFxuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQsXG4gICAgICAgICAgICB5OiBtYXJnaW4udG9wICsgdG9wUGFuZWxILFxuICAgICAgICAgICAgaDogdW5kZWZpbmVkLCAvLyB1bmRlZmluZWQgaW5pdGlhbGx5LCBiZWNhdXNlIGl0J3MgZGF0YS1kZXBlbmRlbnRcbiAgICAgICAgICAgIHc6IGxlZnRQYW5lbFcgLSBhZGp1c3QsXG4gICAgICAgICAgICBpZDogXCJsZWZ0VHJlZVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jZWxsID0ge1xuICAgICAgICAgICAgdzogdW5kZWZpbmVkLCAvLyB0byBiZSBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBkYXRhIGFuZCByb290V1xuICAgICAgICAgICAgaDogY2VsbEhcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRvcFRyZWVQYW5lbCA9IHsgLy8gdGhlIGNvbHVtbiBkZW5kcm9ncmFtIHBhbmVsXG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcsXG4gICAgICAgICAgICB5OiBtYXJnaW4udG9wLFxuICAgICAgICAgICAgaDogdG9wUGFuZWxIIC0gYWRqdXN0LFxuICAgICAgICAgICAgdzogdGhpcy5yb290VyAtIChtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcgKyBtYXJnaW4ucmlnaHQpLCAvLyBoYXJkLWNvZGVkIHZhbHVlcz9cbiAgICAgICAgICAgIGlkOiBcInRvcFRyZWVcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGVhdG1hcFBhbmVsID0ge1xuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXLFxuICAgICAgICAgICAgeTogbWFyZ2luLnRvcCArIHRvcFBhbmVsSCxcbiAgICAgICAgICAgIGg6IHRoaXMubGVmdFRyZWVQYW5lbC5oLFxuICAgICAgICAgICAgdzogdGhpcy50b3BUcmVlUGFuZWwudyxcbiAgICAgICAgICAgIGlkOiBcImhlYXRtYXBcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubGVnZW5kUGFuZWwgPSB7IC8vIHRoZSBjb2xvciBsZWdlbmQgcGFuZWxcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICBoOiBtYXJnaW4udG9wLzIsXG4gICAgICAgICAgICB3OiB0aGlzLnRvcFRyZWVQYW5lbC53LFxuICAgICAgICAgICAgY2VsbDoge3c6IDYwfSxcbiAgICAgICAgICAgIGlkOiBcImxlZ2VuZFwiXG4gICAgICAgIH07XG5cblxuICAgIH1cblxuICAgIGdldCgpe1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWFyZ2luOiB0aGlzLm1hcmdpbixcbiAgICAgICAgICAgIGNlbGw6IHRoaXMuY2VsbCxcbiAgICAgICAgICAgIHc6IHRoaXMucm9vdFcsXG4gICAgICAgICAgICBoOiB0aGlzLm1hcmdpbi50b3AgKyB0aGlzLnRvcFRyZWVQYW5lbC5oICsgdGhpcy5sZWdlbmRQYW5lbC5oICsgdGhpcy5tYXJnaW4uYm90dG9tLCAvLyBpbml0aWFsIGhlaWdodFxuICAgICAgICAgICAgcGFuZWxzOiB7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnRvcFRyZWVQYW5lbCxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLmxlZnRUcmVlUGFuZWwsXG4gICAgICAgICAgICAgICAgbWFpbjogdGhpcy5oZWF0bWFwUGFuZWwsXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB0aGlzLmxlZ2VuZFBhbmVsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4iLCJmdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGNvdW50KTtcbn1cbiIsImltcG9ydCBub2RlX2NvdW50IGZyb20gXCIuL2NvdW50XCI7XG5pbXBvcnQgbm9kZV9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBub2RlX2VhY2hCZWZvcmUgZnJvbSBcIi4vZWFjaEJlZm9yZVwiO1xuaW1wb3J0IG5vZGVfZWFjaEFmdGVyIGZyb20gXCIuL2VhY2hBZnRlclwiO1xuaW1wb3J0IG5vZGVfc3VtIGZyb20gXCIuL3N1bVwiO1xuaW1wb3J0IG5vZGVfc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgbm9kZV9wYXRoIGZyb20gXCIuL3BhdGhcIjtcbmltcG9ydCBub2RlX2FuY2VzdG9ycyBmcm9tIFwiLi9hbmNlc3RvcnNcIjtcbmltcG9ydCBub2RlX2Rlc2NlbmRhbnRzIGZyb20gXCIuL2Rlc2NlbmRhbnRzXCI7XG5pbXBvcnQgbm9kZV9sZWF2ZXMgZnJvbSBcIi4vbGVhdmVzXCI7XG5pbXBvcnQgbm9kZV9saW5rcyBmcm9tIFwiLi9saW5rc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgIHZhbHVlZCA9ICtkYXRhLnZhbHVlICYmIChyb290LnZhbHVlID0gZGF0YS52YWx1ZSksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbcm9vdF0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcyxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKHZhbHVlZCkgbm9kZS52YWx1ZSA9ICtub2RlLmRhdGEudmFsdWU7XG4gICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IE5vZGUoY2hpbGRzW2ldKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgIGNoaWxkLmRlcHRoID0gbm9kZS5kZXB0aCArIDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvb3QuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gbm9kZV9jb3B5KCkge1xuICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q2hpbGRyZW4oZCkge1xuICByZXR1cm4gZC5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xuICBub2RlLmRhdGEgPSBub2RlLmRhdGEuZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICB2YXIgaGVpZ2h0ID0gMDtcbiAgZG8gbm9kZS5oZWlnaHQgPSBoZWlnaHQ7XG4gIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZGVwdGggPVxuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbn1cblxuTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTm9kZSxcbiAgY291bnQ6IG5vZGVfY291bnQsXG4gIGVhY2g6IG5vZGVfZWFjaCxcbiAgZWFjaEFmdGVyOiBub2RlX2VhY2hBZnRlcixcbiAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxuICBzdW06IG5vZGVfc3VtLFxuICBzb3J0OiBub2RlX3NvcnQsXG4gIHBhdGg6IG5vZGVfcGF0aCxcbiAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gIGxpbmtzOiBub2RlX2xpbmtzLFxuICBjb3B5OiBub2RlX2NvcHlcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIGN1cnJlbnQsIG5leHQgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBuO1xuICBkbyB7XG4gICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgd2hpbGUgKG5vZGUgPSBjdXJyZW50LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5leHQucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IHdoaWxlIChuZXh0Lmxlbmd0aCk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbjtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChub2RlID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGk7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHN1bSA9ICt2YWx1ZShub2RlLmRhdGEpIHx8IDAsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICBub2RlLnZhbHVlID0gc3VtO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZW5kKSB7XG4gIHZhciBzdGFydCA9IHRoaXMsXG4gICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICBub2RlcyA9IFtzdGFydF07XG4gIHdoaWxlIChzdGFydCAhPT0gYW5jZXN0b3IpIHtcbiAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcbiAgfVxuICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgd2hpbGUgKGVuZCAhPT0gYW5jZXN0b3IpIHtcbiAgICBub2Rlcy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICBlbmQgPSBlbmQucGFyZW50O1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxuICAgICAgYyA9IG51bGw7XG4gIGEgPSBhTm9kZXMucG9wKCk7XG4gIGIgPSBiTm9kZXMucG9wKCk7XG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgYyA9IGE7XG4gICAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgICBiID0gYk5vZGVzLnBvcCgpO1xuICB9XG4gIHJldHVybiBjO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV07XG4gIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBbXTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsZWF2ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICByb290LmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlICE9PSByb290KSB7IC8vIERvbuKAmXQgaW5jbHVkZSB0aGUgcm9vdOKAmXMgcGFyZW50LCBpZiBhbnkuXG4gICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGlua3M7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTTAuNSxcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLDAuNUhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLypcbiAgICBEZW5kcm9ncmFtIHZpc3VhbGl6ZXMgYSB0ZXh0LWJhc2VkIE5ld2ljayB0cmVlIHVzaW5nIEQzIFY1LlxuXG4gICAgZGVwZW5kZW5jaWVzOlxuICAgIGQzIHY1XG4gICAgdGhlIG5ld2ljayBwYXJzZXI6IG5ld2ljay5qc1xuXG4gICAgcmVmZXJlbmNlczpcbiAgICBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtaGllcmFyY2h5XG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL25ld2ljay5qcy9cblxuICAgIG5vdGVzIG9uIHRoZSB1bmRlcmx5aW5nIGRhdGEgc3RydWN0dXJlczpcbiAgICAtIGl0IHVzZXMgcGFyc2VOZXdpY2soKSB0byBjb252ZXJ0IHRoZSBuZXdpY2sgdHJlZSBpbnRvIHRoZSBmb2xsb3dpbmcganNvbjpcbiAgICAgICAge1xuICAgICAgICAgICAgYnJhbmNoc2V0OltjaGlsZCBub2RlIGpzb24gb2JqZWN0c10sXG4gICAgICAgICAgICBuYW1lOiBcIlwiIC8vIGludGVybmFsIG5vZGVzIHdvdWxkIGhhdmUgbm8gcmVhbCBsYWJlbHNcbiAgICAgICAgfVxuICAgICAgIFRoaXMganNvbiBzdHJ1Y3R1cmUgaXMgdGhlIGlucHV0IGRhdGEgb2YgZDMuaGllcmFyY2h5KClcblxuICAgIC0gSW4gdGhlIGQzLmhpZXJhcmNoeSgpLCB0aGUgcm9vdCBub2RlIG9iamVjdCBoYXMgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbY28sIGNvXSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBicmFuY2hzZXQ6IEFycmF5KDIpLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibm9kZSBuYW1lXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogaW50ZWdlcixcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiA5XG4gICAgICAgIH1cbiAqL1xuXG4vLyBUT0RPOiBlbGltaW5hdGUgaGFyZC1jb2RlZCB2YWx1ZXNcblxuaW1wb3J0IHtoaWVyYXJjaHl9IGZyb20gXCJkMy1oaWVyYXJjaHlcIjtcbmltcG9ydCB7YXNjZW5kaW5nfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7YXhpc0JvdHRvbSwgYXhpc0xlZnR9IGZyb20gXCJkMy1heGlzXCI7XG5pbXBvcnQge3NjYWxlTGluZWFyLCBzY2FsZUJhbmR9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHtwYXJzZU5ld2lja30gZnJvbSBcIi4vbmV3aWNrXCI7XG5jb25zdCB2ZXJib3NlID0gZmFsc2U7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZW5kcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcihuZXdpY2ssIG9yaWVudGF0aW9uPSdoJyl7XG4gICAgICAgIHRoaXMubmV3aWNrID0gbmV3aWNrO1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgICAgIHRoaXMucG9zdG9yZGVyID0gW107XG4gICAgICAgIHRoaXMucm9vdCA9IGhpZXJhcmNoeShwYXJzZU5ld2ljayhuZXdpY2spLCAoZCkgPT4gZC5icmFuY2hzZXQpXG4gICAgICAgICAgICAuc3VtKChkKT0+ZC5icmFuY2hzZXQ/MDoxKVxuICAgICAgICAgICAgLnNvcnQoKGEsYik9PmEudmFsdWUtYi52YWx1ZXx8YS5kYXRhLmxlbmd0aC1iLmRhdGEubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5sZWF2ZXMgPSB0aGlzLnJvb3QubGVhdmVzKCkuc29ydCgoYSwgYikgPT4gKGEudmFsdWUgLSBiLnZhbHVlKSB8fCBhc2NlbmRpbmcoYS5kYXRhLmxlbmd0aCwgYi5kYXRhLmxlbmd0aCkpO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueVNjYWxlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGRyYXcoZG9tLCB3aWR0aCwgaGVpZ2h0KXtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fc2V0WFNjYWxlKCk7XG4gICAgICAgIHRoaXMuX3NldFlTY2FsZSgpO1xuICAgICAgICBpZiAoJ2gnID09IHRoaXMub3JpZW50YXRpb24pIHRoaXMuX2RyYXdIVHJlZShkb20pO1xuICAgICAgICBlbHNlIHRoaXMuX2RyYXdWVHJlZShkb20pO1xuICAgIH1cblxuICAgIC8vLy8vLy8gcHJpdmF0ZSBtZXRob2RzIC8vLy8vLy9cblxuICAgIF9kcmF3SFRyZWUoZG9tKXtcbiAgICAgICAgY29uc3Qgc2V0WSA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBsZWFmIG5vZGVcbiAgICAgICAgICAgICAgICBub2RlLnkgPSB0aGlzLnlTY2FsZShub2RlLmRhdGEubmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFuIGludGVybmFsIG5vZGVcbiAgICAgICAgICAgICAgICAvLyB0aGUgeSBjb29yZGluYXRlIG9mIGFuIGludGVybmFsIG5vZGUgaXMgdGhlIGF2ZXJhZ2UgeSBmcm9tIGl0cyBjaGlsZHJlblxuICAgICAgICAgICAgICAgIG5vZGUueSA9IG5vZGUuY2hpbGRyZW4ucmVkdWNlKChzdW0sIGQpPT5zdW0rZC55LCAwKS9ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2V0WCA9IChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLnggPSB0aGlzLnhTY2FsZSh0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZyb20gdGhlIGxlYWYgbGV2ZWwgLT4gcm9vdFxuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuX3NvcnROb2Rlc0J5TGV2ZWwoKTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgc2V0WChub2RlKTtcbiAgICAgICAgICAgIHNldFkobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5icmFuY2gnKVxuICAgICAgICAgICAgLmRhdGEobm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLmRhdGEubGVuZ3RoP2QueCAtIHRoaXMueFNjYWxlKGQuZGF0YS5sZW5ndGgpOmQueClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKSA9PiBkLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICAvLyBmb3IgYWxsIGludGVybmFsIG5vZGVzXG4gICAgICAgIGNvbnN0IGlub2RlcyA9IHRoaXMucm9vdC5kZXNjZW5kYW50cygpLmZpbHRlcigoZCk9PmQuaGVpZ2h0KS5zb3J0KChhLGIpPT5iLmhlaWdodC1hLmhlaWdodCk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5hcm0nKVxuICAgICAgICAgICAgLmRhdGEoaW5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC5jaGlsZHJlblswXS55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQuY2hpbGRyZW5bMV0ueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5ub2RlJylcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzMzMycpXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMC41KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiclwiLCAzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkLmxlYXZlcygpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGF4aXNcbiAgICAgICAgLy8gQWRkIHRoZSB4IEF4aXNcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLWF4aXNcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyB0aGlzLmhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgLmNhbGwoXG4gICAgICAgICAgICAgICAgYXhpc0JvdHRvbSh0aGlzLnhTY2FsZSlcbiAgICAgICAgICAgICAgICAgICAgLnRpY2tzKDMpXG4gICAgICAgICAgICAgICAgLy8gLnRpY2tWYWx1ZXMoW01hdGguZmxvb3IodGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCkvMiksIE1hdGguZmxvb3IodGhpcy5fZ2V0TWF4QnJhbmNoTGVuZ3RoKCkpXSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgX3NvcnROb2Rlc0J5TGV2ZWwoKXtcbiAgICAgICAgLy8gcmV0dXJucyBhIGxpc3Qgb2Ygbm9kZXMgb3JkZXJlZCBieSBhbmNlc3RyYWwgbGV2ZWwsIHRoZW4gYnkgYnJhbmNoIGxlbmd0aFxuICAgICAgICByZXR1cm4gdGhpcy5yb290LmRlc2NlbmRhbnRzKCkuc29ydCgoYSwgYikgPT4gKGEuaGVpZ2h0IC0gYi5oZWlnaHQpIHx8IGFzY2VuZGluZyhhLmRhdGEubGVuZ3RoLCBiLmRhdGEubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgX2RyYXdWVHJlZShkb20pe1xuICAgICAgICBjb25zdCBzZXRYID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBhIGxlYWYgbm9kZVxuICAgICAgICAgICAgICAgIG5vZGUueCA9IHRoaXMueFNjYWxlKG5vZGUuZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYW4gaW50ZXJuYWwgbm9kZVxuICAgICAgICAgICAgICAgIC8vIHRoZSB5IGNvb3JkaW5hdGUgb2YgYW4gaW50ZXJuYWwgbm9kZSBpcyB0aGUgYXZlcmFnZSB5IGZyb20gaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgbm9kZS54ID0gbm9kZS5jaGlsZHJlbi5yZWR1Y2UoKHN1bSwgZCk9PnN1bStkLngsIDApL25vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXRZID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUueSA9IHRoaXMueVNjYWxlKHRoaXMuX2dldEJyYW5jaExlbmd0aFRvUm9vdChub2RlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGZyb20gdGhlIGxlYWYgbGV2ZWwgLT4gcm9vdFxuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuX3NvcnROb2Rlc0J5TGV2ZWwoKTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgc2V0WChub2RlKTtcbiAgICAgICAgICAgIHNldFkobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkb20uc2VsZWN0QWxsKCcuYnJhbmNoJylcbiAgICAgICAgICAgIC5kYXRhKG5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC5kYXRhLmxlbmd0aD9kLnkgLSB0aGlzLnlTY2FsZShkLmRhdGEubGVuZ3RoKTpkLnkpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSk7XG5cbiAgICAgICAgLy8gZm9yIGFsbCBpbnRlcm5hbCBub2Rlc1xuICAgICAgICBjb25zdCBpbm9kZXMgPSB0aGlzLnJvb3QuZGVzY2VuZGFudHMoKS5maWx0ZXIoKGQpPT5kLmhlaWdodCkuc29ydCgoYSxiKT0+Yi5oZWlnaHQtYS5oZWlnaHQpO1xuICAgICAgICBkb20uc2VsZWN0QWxsKCcuYXJtJylcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQuY2hpbGRyZW5bMF0ueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLmNoaWxkcmVuWzFdLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICBkb20uc2VsZWN0QWxsKCcubm9kZScpXG4gICAgICAgICAgICAuZGF0YShpbm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IGQueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKSA9PiBkLnkpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJyMzMzMnKVxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDAuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLW5vZGVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInJcIiwgMyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZC5sZWF2ZXMoKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJyXCIsIDIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBheGlzXG4gICAgICAgIC8vIEFkZCB0aGUgeCBBeGlzXG4gICAgICAgIGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAvLyAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7dGhpcy53aWR0aH0sIDApYClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5kcm9ncmFtLWF4aXNcIilcbiAgICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgICAgIGF4aXNMZWZ0KHRoaXMueVNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja3MoMylcbiAgICAgICAgICAgICAgICAvLyAudGlja1ZhbHVlcyhbTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKS8yKSwgTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKSldKVxuICAgICAgICAgICAgKTtcblxuICAgIH1cblxuICAgIF9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSkge1xuICAgICAgICAvLyBub2RlOiBhIGQzLmhpZXJhcmNoeSBub2RlXG4gICAgICAgIHJldHVybiBub2RlLnBhdGgodGhpcy5yb290KVxuICAgICAgICAgICAgLnJlZHVjZSgoc3VtLCBkKSA9PiBkLmRhdGEubGVuZ3RoP3N1bStkLmRhdGEubGVuZ3RoOnN1bSwgMCk7XG4gICAgfVxuXG4gICAgX2dldE1heEJyYW5jaExlbmd0aCgpIHtcbiAgICAgICAgLy8gdGhlIGFzc3VtcHRpb24gaGVyZSBpcyB0aGF0IGFsbCBsZWFmIG5vZGVzIGhhdmUgdGhlIHNhbWUgZGlzdGFuY2UgdG8gdGhlIHJvb3QuXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5sZWF2ZXNbMF07IC8vIHJhbmRvbWx5IHBpY2tzIGEgbGVhZiBub2RlXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3Qobm9kZSk7XG4gICAgfVxuXG4gICAgX2Fzc2lnblBvc3RvcmRlcihub2RlKXtcbiAgICAgICAgLy8gYXNzaWducyBwb3N0LW9yZGVyIG9mIGFsbCBsZWFmIG5vZGVzXG4gICAgICAgIGlmKG5vZGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAvLyBiYXNlIGNhc2VcbiAgICAgICAgICAgIHRoaXMucG9zdG9yZGVyLnB1c2gobm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIobm9kZS5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qb3N0b3JkZXIobm9kZS5jaGlsZHJlblsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0WFNjYWxlKCl7XG4gICAgICAgIGlmICgnaCcgPT0gdGhpcy5vcmllbnRhdGlvbil7XG4gICAgICAgICAgICB0aGlzLnhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKFswLCB0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKV0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLndpZHRoXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcih0aGlzLnJvb3QpO1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpIGNvbnNvbGUubG9nKHRoaXMucG9zdG9yZGVyKTtcbiAgICAgICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMucG9zdG9yZGVyLm1hcCgoZCkgPT4gZC5kYXRhLm5hbWUpKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy53aWR0aF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRZU2NhbGUoKXtcbiAgICAgICAgaWYgKCdoJyA9PSB0aGlzLm9yaWVudGF0aW9uKXtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcih0aGlzLnJvb3QpO1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpIGNvbnNvbGUubG9nKHRoaXMucG9zdG9yZGVyKTtcbiAgICAgICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMucG9zdG9yZGVyLm1hcCgoZCkgPT4gZC5kYXRhLm5hbWUpKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgdGhpcy5oZWlnaHRdKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnlTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKFswLCB0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKV0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLmhlaWdodF0pXG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCIvLyBDb3B5cmlnaHQgMjAxMSBKYXNvbiBEYXZpZXMgaHR0cHM6Ly9naXRodWIuY29tL2phc29uZGF2aWVzL25ld2ljay5qc1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOZXdpY2socykge1xuICAgIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgICB2YXIgdHJlZSA9IHt9O1xuICAgIHZhciB0b2tlbnMgPSBzLnNwbGl0KC9cXHMqKDt8XFwofFxcKXwsfDopXFxzKi8pO1xuICAgIGZvciAodmFyIGk9MDsgaTx0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnKCc6IC8vIG5ldyBicmFuY2hzZXRcbiAgICAgICAgICB2YXIgc3VidHJlZSA9IHt9O1xuICAgICAgICAgIHRyZWUuYnJhbmNoc2V0ID0gW3N1YnRyZWVdO1xuICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKHRyZWUpO1xuICAgICAgICAgIHRyZWUgPSBzdWJ0cmVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcsJzogLy8gYW5vdGhlciBicmFuY2hcbiAgICAgICAgICB2YXIgc3VidHJlZSA9IHt9O1xuICAgICAgICAgIGFuY2VzdG9yc1thbmNlc3RvcnMubGVuZ3RoLTFdLmJyYW5jaHNldC5wdXNoKHN1YnRyZWUpO1xuICAgICAgICAgIHRyZWUgPSBzdWJ0cmVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcpJzogLy8gb3B0aW9uYWwgbmFtZSBuZXh0XG4gICAgICAgICAgdHJlZSA9IGFuY2VzdG9ycy5wb3AoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnOic6IC8vIG9wdGlvbmFsIGxlbmd0aCBuZXh0XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdmFyIHggPSB0b2tlbnNbaS0xXTtcbiAgICAgICAgICBpZiAoeCA9PSAnKScgfHwgeCA9PSAnKCcgfHwgeCA9PSAnLCcpIHtcbiAgICAgICAgICAgIHRyZWUubmFtZSA9IHRva2VuO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeCA9PSAnOicpIHtcbiAgICAgICAgICAgIHRyZWUubGVuZ3RoID0gcGFyc2VGbG9hdCh0b2tlbik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJlZTtcbn1cblxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHN0YXJ0ZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGludGVycnVwdCBldmVudC5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgLy8gYmVjYXVzZSB0aGUgY2FuY2VsbGVkIHRyYW5zaXRpb25zIG5ldmVyIHN0YXJ0ZWQuIE5vdGUgdGhhdCB0aGlzIGFsc29cbiAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobnVsbCwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXlcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbikoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgOiB2YWx1ZSA9PSBudWxsID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkoZnVsbG5hbWUpXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KShmdWxsbmFtZSwgaSwgdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmVFbmQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUsIGkpKVxuICAgICAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlRW5kKG5hbWUpKVxuICAgICAgOiB0aGlzLnN0eWxlVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgICAgIDogc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSArIFwiXCIpLCBwcmlvcml0eSk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBpZiAoYWN0aXZlKSBzY2hlZHVsZS5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSB0b29sYmFyXG4gKiBUaGlzIGNsYXNzIHVzZXMgYSBsb3Qgb2YgalF1ZXJ5IGZvciBkb20gZWxlbWVudCBtYW5pcHVsYXRpb25cbiAqL1xuXG5pbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtwYXJzZUNzc1N0eWxlc30gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbGJhciB7XG4gICAgY29uc3RydWN0b3IoZG9tSWQsIHRvb2x0aXA9dW5kZWZpbmVkLCB2ZXJ0aWNhbD1mYWxzZSl7XG4gICAgICAgICQoYCMke2RvbUlkfWApLnNob3coKTsgLy8gaWYgaGlkZGVuXG5cbiAgICAgICAgLy8gYWRkIGEgbmV3IGJhcmdyb3VwIGRpdiB0byBkb21JRCB3aXRoIGJvb3RzdHJhcCBidXR0b24gY2xhc3Nlc1xuICAgICAgICBjb25zdCBidG5DbGFzc2VzID0gdmVydGljYWw/J2J0bi1ncm91cC12ZXJ0aWNhbCBidG4tZ3JvdXAtc20nOiAnYnRuLWdyb3VwIGJ0bi1ncm91cC1zbSc7XG4gICAgICAgIHRoaXMuYmFyID0gJCgnPGRpdi8+JykuYWRkQ2xhc3MoYnRuQ2xhc3NlcykuYXBwZW5kVG8oYCMke2RvbUlkfWApO1xuICAgICAgICB0aGlzLmJ1dHRvbnMgPSB7fTtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkb3dubG9hZCBidXR0b24gZm9yIFNWR1xuICAgICAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgYnV0dG9uIGRvbSBJRFxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRCB0byBncmFiIGFuZCBkb3dubG9hZFxuICAgICAqIEBwYXJhbSBvdXRmaWxlTmFtZSB7U3RyaW5nfSB0aGUgZG93bmxvYWQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIGNsb25lZCBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSdzIGljb24gY2xhc3MgbmFtZVxuICAgICAqL1xuICAgIGNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uKGlkLCBzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRTdmcoc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJEb3dubG9hZFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVzZXRCdXR0b24oaWQsIGNhbGxiYWNrLCBpY29uPSdmYS1leHBhbmQtYXJyb3dzLWFsdCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgY2FsbGJhY2spXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJSZXNldCB0aGUgc2NhbGVzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBidXR0b24gdG8gdGhlIHRvb2xiYXJcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbidzIGlkXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSBpY29uIGNsYXNzXG4gICAgICogRGVwZW5kZW5jaWVzOiBCb290c3RyYXAsIGpRdWVyeSwgRm9udGF3ZXNvbWVcbiAgICAgKi9cbiAgICBjcmVhdGVCdXR0b24oaWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSAkKCc8YS8+JykuYXR0cignaWQnLCBpZClcbiAgICAgICAgICAgIC5hZGRDbGFzcygnYnRuIGJ0bi1kZWZhdWx0JykuYXBwZW5kVG8odGhpcy5iYXIpO1xuICAgICAgICAkKCc8aS8+JykuYWRkQ2xhc3MoYGZhICR7aWNvbn1gKS5hcHBlbmRUbygkYnV0dG9uKTtcbiAgICAgICAgdGhpcy5idXR0b25zW2lkXSA9ICRidXR0b247XG4gICAgICAgIHJldHVybiAkYnV0dG9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGF0dGFjaCBhIHRvb2x0aXAgZG9tIHdpdGggdGhlIHRvb2xiYXJcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBhdHRhY2hUb29sdGlwKHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERvd25sb2FkIFNWRyBvYmpcbiAgICAgKiBAcGFyYW0gc3ZnSWQge1N0cmluZ30gdGhlIFNWRyBkb20gSURcbiAgICAgKiBAcGFyYW0gZmlsZU5hbWUge1N0cmluZ30gdGhlIG91dHB1dCBmaWxlIG5hbWVcbiAgICAgKiBAcGFyYW0gY2xvbmVJZCB7U3RyaW5nfSB0aGUgdGVtcG9yYXJ5IGRvbSBJRCB0byBjb3B5IHRoZSBTVkcgdG9cbiAgICAgKiBEZXBlbmRlbmNpZXM6IEZpbGVTYXZlclxuICAgICAqL1xuICAgIGRvd25sb2FkU3ZnKHN2Z0lkLCBmaWxlTmFtZSwgY2xvbmVJZCl7XG4gICAgICAgIC8vIGxldCBzdmdPYmogPSAkKCQoJChgJHtcIiNcIiArc3ZnSWR9IHN2Z2ApKVswXSk7IC8vIGNvbXBsaWNhdGVkIGpRdWVyeSB0byBnZXQgdG8gdGhlIFNWRyBvYmplY3RcbiAgICAgICAgbGV0IHN2Z09iaiA9ICQoJCgkKGAke1wiI1wiICtzdmdJZH1gKSlbMF0pO1xuICAgICAgICBsZXQgJHN2Z0NvcHkgPSBzdmdPYmouY2xvbmUoKVxuICAgICAgICAuYXR0cihcInZlcnNpb25cIiwgXCIxLjFcIilcbiAgICAgICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgICAgIC8vIHBhcnNlIGFuZCBhZGQgYWxsIHRoZSBDU1Mgc3R5bGluZyB1c2VkIGJ5IHRoZSBTVkdcbiAgICAgICAgbGV0IHN0eWxlcyA9IHBhcnNlQ3NzU3R5bGVzKHN2Z09iai5nZXQoKSk7XG4gICAgICAgICRzdmdDb3B5LnByZXBlbmQoc3R5bGVzKTtcblxuICAgICAgICAkKFwiI1wiICsgY2xvbmVJZCkuaHRtbCgnJykuaGlkZSgpOyAvLyBtYWtlIHN1cmUgdGhlIGNvcHlJRCBpcyBpbnZpc2libGVcbiAgICAgICAgbGV0IHN2Z0h0bWwgPSAkKGAjJHtjbG9uZUlkfWApLmFwcGVuZCgkc3ZnQ29weSkuaHRtbCgpO1xuXG4gICAgICAgIGxldCBzdmdCbG9iID0gbmV3IEJsb2IoW3N2Z0h0bWxdLCB7dHlwZTogXCJpbWFnZS9zdmcreG1sXCJ9KTtcbiAgICAgICAgc2F2ZUFzKHN2Z0Jsb2IsIGZpbGVOYW1lKTsgLy8gdGhpcyBpcyBhIEZpbGVTYXZlciBmdW5jdGlvbi4uLi5cblxuICAgICAgICAvLyBjbGVhciB0aGUgdGVtcCBkb3dubG9hZCBkaXZcbiAgICAgICAgJChgIyR7Y2xvbmVJZH1gKS5odG1sKCcnKS5oaWRlKCk7XG4gICAgfVxufSIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhbiBTVkdcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSBhIERPTSBlbGVtZW50IElEIHRoYXQgc3RhcnRzIHdpdGggYSBcIiNcIlxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfVxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY31cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCB0d28gYXR0cmlidXRlczogd2lkdGggYW5kIGhlaWdodFxuICogQHJldHVybiB7U2VsZWN0aW9ufSB0aGUgZDMgc2VsZWN0aW9uIG9iamVjdCBvZiB0aGUgU1ZHXG4gKi9cblxuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuLyoqXG4gKlxuICogQHBhcmFtIGlkIHtTdHJpbmd9IHRoZSBwYXJlbnQgZG9tIElEXG4gKiBAcGFyYW0gd2lkdGgge051bWVyaWN9XG4gKiBAcGFyYW0gaGVpZ2h0IHtOdW1lcmljfVxuICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IGxlZnQsIHRvcFxuICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN2ZyhpZCwgd2lkdGgsIGhlaWdodCwgbWFyZ2luLCBzdmdJZD11bmRlZmluZWQpe1xuICAgIGlmIChzdmdJZD09PXVuZGVmaW5lZCkgc3ZnSWQ9YCR7aWR9LXN2Z2A7XG4gICAgcmV0dXJuIHNlbGVjdChcIiNcIitpZCkuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBzdmdJZClcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgKVxufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gc3ZnT2JqXG4gKiBAcGFyYW0gZG93bmxvYWRGaWxlTmFtZSB7U3RyaW5nfVxuICogQHBhcmFtIHRlbXBEb3dubG9hZERpdklkIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZFN2ZyhzdmdPYmosIGRvd25sb2FkRmlsZU5hbWUsIHRlbXBEb3dubG9hZERpdklkKXtcbiAgICBjb25zb2xlLmxvZyhzdmdPYmopO1xuICAgIHZhciAkc3ZnQ29weSA9IHN2Z09iai5jbG9uZSgpXG4gICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgLmF0dHIoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgLy8gcGFyc2UgYW5kIGFkZCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgdmFyIHN0eWxlcyA9IHBhcnNlQ3NzU3R5bGVzKHN2Z09iai5nZXQoKSk7XG4gICAgJHN2Z0NvcHkucHJlcGVuZChzdHlsZXMpO1xuXG4gICAgJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5odG1sKCcnKS5oaWRlKCk7XG4gICAgdmFyIHN2Z0h0bWwgPSAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmFwcGVuZCgkc3ZnQ29weSkuaHRtbCgpO1xuXG4gICAgdmFyIHN2Z0Jsb2IgPSBuZXcgQmxvYihbc3ZnSHRtbF0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgIHNhdmVBcyhzdmdCbG9iLCBkb3dubG9hZEZpbGVOYW1lKTtcblxuICAgIC8vIGNsZWFyIHRoZSB0ZW1wIGRvd25sb2FkIGRpdlxuICAgICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbCgnJykuaGlkZSgpO1xufVxuLyoqXG4gKiBBIGZ1bmN0aW9uIGZvciBwYXJzaW5nIHRoZSBDU1Mgc3R5bGUgc2hlZXQgYW5kIGluY2x1ZGluZyB0aGUgc3R5bGUgcHJvcGVydGllcyBpbiB0aGUgZG93bmxvYWRhYmxlIFNWRy5cbiAqIEBwYXJhbSBkb21cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3NTdHlsZXMgKGRvbSkge1xuICAgIHZhciB1c2VkID0gXCJcIjtcbiAgICB2YXIgc2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoZWV0cy5sZW5ndGg7IGkrKykgeyAvLyBUT0RPOiB3YWxrIHRocm91Z2ggdGhpcyBibG9jayBvZiBjb2RlXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChzaGVldHNbaV0uY3NzUnVsZXMgPT0gbnVsbCkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBzaGVldHNbaV0uY3NzUnVsZXM7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocnVsZS5zdHlsZSkgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXM7XG4gICAgICAgICAgICAgICAgICAgIC8vU29tZSBzZWxlY3RvcnMgd29uJ3Qgd29yaywgYW5kIG1vc3Qgb2YgdGhlc2UgZG9uJ3QgbWF0dGVyLlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXMgPSAkKGRvbSkuZmluZChydWxlLnNlbGVjdG9yVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCArPSBydWxlLnNlbGVjdG9yVGV4dCArIFwiIHsgXCIgKyBydWxlLnN0eWxlLmNzc1RleHQgKyBcIiB9XFxuXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEluIEZpcmVmb3gsIGlmIHN0eWxlc2hlZXQgb3JpZ2luYXRlcyBmcm9tIGEgZGlmZiBkb21haW4sXG4gICAgICAgICAgICAvLyB0cnlpbmcgdG8gYWNjZXNzIHRoZSBjc3NSdWxlcyB3aWxsIHRocm93IGEgU2VjdXJpdHlFcnJvci5cbiAgICAgICAgICAgIC8vIEhlbmNlLCB3ZSBtdXN0IHVzZSBhIHRyeS9jYXRjaCB0byBoYW5kbGUgdGhpcyBpbiBGaXJlZm94XG4gICAgICAgICAgICBpZiAoZS5uYW1lICE9PSAnU2VjdXJpdHlFcnJvcicpIHRocm93IGU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgIHMuaW5uZXJIVE1MID0gXCI8IVtDREFUQVtcXG5cIiArIHVzZWQgKyBcIlxcbl1dPlwiO1xuXG4gICAgcmV0dXJuIHM7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5pbXBvcnQge3NlbGVjdCwgZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCB7XG4gICAgY29uc3RydWN0b3IoaWQsIHZlcmJvc2U9ZmFsc2UsIG9mZnNldFg9MzAsIG9mZnNldFk9LTQwLCBkdXJhdGlvbj0xMDApe1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IHZlcmJvc2U7XG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICBzaG93KGluZm8pIHtcbiAgICAgICAgaWYodGhpcy52ZXJib3NlKSBjb25zb2xlLmxvZyhpbmZvKTtcbiAgICAgICAgdGhpcy5lZGl0KGluZm8pO1xuICAgICAgICB0aGlzLm1vdmUoKTtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmVcIilcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxLjApXG5cbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICBzZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHRoaXMuZHVyYXRpb24pXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDAuMCk7XG4gICAgICAgIHRoaXMuZWRpdChcIlwiKTtcbiAgICB9XG5cbiAgICBtb3ZlKHggPSBldmVudC5wYWdlWCwgeSA9IGV2ZW50LnBhZ2VZKSB7XG4gICAgICAgIGlmICh0aGlzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coeSk7XG4gICAgICAgIH1cbiAgICAgICAgeCA9IHggKyB0aGlzLm9mZnNldFg7IC8vIFRPRE86IGdldCByaWQgb2YgdGhlIGhhcmQtY29kZWQgYWRqdXN0bWVudFxuICAgICAgICB5ID0gKHkgKyB0aGlzLm9mZnNldFkpPDA/MTA6eSt0aGlzLm9mZnNldFk7XG4gICAgICAgIGNvbnN0IHQgPSBzZWxlY3QoJyMnK3RoaXMuaWQpXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGAke3h9cHhgKVxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGAke3l9cHhgKVxuICAgIH1cblxuICAgIGVkaXQoaW5mbykge1xuICAgICAgICBzZWxlY3QoXCIjXCIgKyB0aGlzLmlkKVxuICAgICAgICAgICAgLmh0bWwoaW5mbylcbiAgICB9XG59XG5cbiIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2NhbGVCYW5kfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7bmVzdH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7dHJhbnNpdGlvbn0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcblxuaW1wb3J0IHtzZXRDb2xvclNjYWxlLCBkcmF3Q29sb3JMZWdlbmR9IGZyb20gXCIuL2NvbG9yc1wiO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIi4vVG9vbGJhclwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWF0bWFwIHtcbiAgICAvKiBkYXRhIGlzIGEganNvbiB3aXRoIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAgICAgICAgeDogdGhlIHggbGFiZWxcbiAgICAgICAgeTogdGhlIHkgbGFiZWxcbiAgICAgICAgdmFsdWU6IHRoZSByZW5kZXJlZCBudW1lcmljYWwgdmFsdWUgKHRyYW5zZm9ybWVkKVxuICAgICAgICBvcmlnaW5hbFZhbHVlOiB0aGUgb3JpZ2luYWwgbnVtZXJpY2FsIHZhbHVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBkYXRhIHtPYmplY3R9LCBzZWUgYWJvdmVcbiAgICAgKiBAcGFyYW0gdXNlTG9nIHtCb29sZWFufSBwZXJmb3JtcyBsb2cgdHJhbnNmb3JtYXRpb25cbiAgICAgKiBAcGFyYW0gY29sb3JTY2hlbWUge1N0cmluZ306IHJlY29nbml6ZWQgdGVybXMgaW4gQ29sb3JzOmdldENvbG9ySW50ZXJwb2xhdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YSwgY29sb3JTY2hlbWU9XCJZbEduQnVcIiwgdXNlTG9nPXRydWUsIGJhc2U9MTAsIHI9Mil7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMudXNlTG9nID0gdXNlTG9nO1xuICAgICAgICB0aGlzLmJhc2UgPSBiYXNlO1xuICAgICAgICB0aGlzLm51bGxDb2xvciA9IFwiI2U2ZTZlNlwiO1xuICAgICAgICB0aGlzLmNvbG9yU2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueExpc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueUxpc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueFNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5jb2xvclNjaGVtZSA9IGNvbG9yU2NoZW1lO1xuXG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b29sdGlwID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbGJhciBwYW5lbFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbGJhcidzIGRvbSBJRFxuICAgICAqIEBwYXJhbSB0b29sdGlwIHtUb29sdGlwfVxuICAgICAqIEByZXR1cm5zIHtUb29sYmFyfVxuICAgICAqL1xuXG4gICAgY3JlYXRlVG9vbGJhcihkb21JZCwgdG9vbHRpcCl7XG4gICAgICAgIHRoaXMudG9vbGJhciA9IG5ldyBUb29sYmFyKGRvbUlkLCB0b29sdGlwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbGJhcjtcbiAgICB9XG5cbiAgICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSB0b29sdGlwIG9iamVjdFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgdG9vbHRpcCdzIGRvbSBJRFxuICAgICAqIEByZXR1cm5zIHtUb29sdGlwfVxuICAgICAqL1xuICAgIGNyZWF0ZVRvb2x0aXAoZG9tSWQpe1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChkb21JZCk7XG4gICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9YCkuY2xhc3NlZCgnaGVhdG1hcC10b29sdGlwJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZHJhdyBjb2xvciBsZWdlbmQgZm9yIHRoZSBoZWF0IG1hcFxuICAgICAqIEBwYXJhbSBkb20ge1NlbGVjdGlvbn0gYSBkMyBzZWxlY3Rpb24gb2JqZWN0XG4gICAgICogQHBhcmFtIGxlZ2VuZENvbmZpZyB7T2JqZWN0fSB3aXRoIGF0dHI6IHgsIHlcbiAgICAgKi9cblxuICAgIGRyYXdDb2xvckxlZ2VuZChkb20sIGxlZ2VuZENvbmZpZz17eDowLCB5OjB9LCB0aWNrcz01KXtcbiAgICAgICAgZHJhd0NvbG9yTGVnZW5kKHRoaXMuZGF0YVswXS51bml0fHxcIlZhbHVlXCIsIGRvbSwgdGhpcy5jb2xvclNjYWxlLCBsZWdlbmRDb25maWcsIHRoaXMudXNlTG9nLCB0aWNrcywgdGhpcy5iYXNlKTtcbiAgICB9XG5cbiAgICAgLyoqXG4gICAgICogcmVkcmF3cyB0aGUgaGVhdG1hcDogd2hlbiB0aGUgeGxpc3QgYW5kIHlsaXN0IGFyZSBjaGFuZ2VkLCByZWRyYXcgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gZG9tIHtTZWxlY3Rpb259IGEgZDMgc2VsZWN0aW9uIG9iamVjdFxuICAgICAqIEBwYXJhbSB4TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHggbGFiZWxzXG4gICAgICogQHBhcmFtIHlMaXN0IHtMaXN0fSBhIGxpc3Qgb2YgeSBsYWJlbHNcbiAgICAgKiBAcGFyYW0gZGltZW5zaW9ucyB7RGljdGlvbmFyeX0ge3c6SW50ZWdlciwgaDppbnRlZ2VyfSB3aXRoIHR3byBhdHRyaWJ1dGVzOiB3IGFuZCBoXG4gICAgICogQHBhcmFtIGFuZ2xlIHtJbnRlZ2VyfSBmb3IgdGhlIHkgdGV4dCBsYWJlbHNcbiAgICAgKi9cbiAgICByZWRyYXcoZG9tLCB4TGlzdCwgeUxpc3QsIGRpbWVuc2lvbnM9e3c6MTAwMCwgaDoxMDAwfSwgYW5nbGU9MzApe1xuICAgICAgICB0aGlzLl9zZXRYTGlzdChkaW1lbnNpb25zLncsIHhMaXN0KTtcbiAgICAgICAgdGhpcy5fc2V0WUxpc3QoZGltZW5zaW9ucy5oLCB5TGlzdCk7XG4gICAgICAgIHRoaXMuZHJhdyhkb20sIGRpbWVuc2lvbnMsIGFuZ2xlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBkcmF3cyB0aGUgaGVhdG1hcFxuICAgICAqIEBwYXJhbSBkb20ge1NlbGVjdGlvbn1cbiAgICAgKiBAcGFyYW0gZGltZW5zaW9ucyB7RGljdGlvbmFyeX0ge3c6SW50ZWdlciwgaDppbnRlZ2VyfSBvZiB0aGUgaGVhdG1hcFxuICAgICAqIEBwYXJhbSBhbmdsZSB7SW50ZWdlcn0gZm9yIHRoZSB5IHRleHQgbGFiZWxzXG4gICAgICogQHBhcmFtIHVzZU51bGxDb2xvciB7Qm9vbGVhbn0gd2hldGhlciB0byByZW5kZXIgbnVsbCB2YWx1ZXMgd2l0aCB0aGUgcHJlLWRlZmluZWQgbnVsbCBjb2xvclxuICAgICAqL1xuXG4gICAgZHJhdyhkb20sIGRpbWVuc2lvbnM9e3c6MTAwMCwgaDo2MDB9LCBhbmdsZT0zMCwgdXNlTnVsbENvbG9yPXRydWUpe1xuICAgICAgICBpZiAodGhpcy54TGlzdCA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRYTGlzdChkaW1lbnNpb25zLncpO1xuICAgICAgICBpZiAodGhpcy55TGlzdCA9PT0gdW5kZWZpbmVkKSB0aGlzLl9zZXRZTGlzdChkaW1lbnNpb25zLmgpO1xuICAgICAgICBpZiAodGhpcy5jb2xvclNjYWxlID09PSB1bmRlZmluZWQpIHRoaXMuY29sb3JTY2FsZSA9IHNldENvbG9yU2NhbGUodGhpcy5kYXRhLm1hcCgoZCk9PmQudmFsdWUpLCB0aGlzLmNvbG9yU2NoZW1lKTtcblxuICAgICAgICAvLyB0ZXh0IGxhYmVsc1xuICAgICAgICAvLyBkYXRhIGpvaW5cbiAgICAgICAgY29uc3QgeExhYmVscyA9IGRvbS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgICAgIC5kYXRhKHRoaXMueExpc3QpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBvbGQgZWxlbWVudHNcbiAgICAgICAgY29uc3QgWSA9IHRoaXMueVNjYWxlLnJhbmdlKClbMV0gKyAodGhpcy55U2NhbGUuYmFuZHdpZHRoKCkgKiAyKTtcbiAgICAgICAgY29uc3QgYWRqdXN0ID0gNTtcbiAgICAgICAgeExhYmVscy5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLnhTY2FsZShkKSArIGFkanVzdDtcbiAgICAgICAgICAgICAgICBsZXQgeSA9IFk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSkgcm90YXRlKCR7YW5nbGV9KWA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIC5hdHRyKFwiY2xhc3NcIiwgKGQsIGkpID0+IGBleHAtbWFwLXhsYWJlbCB4JHtpfWApO1xuXG5cbiAgICAgICAgLy8gZW50ZXJzIG5ldyBlbGVtZW50c1xuICAgICAgICB4TGFiZWxzLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCwgaSkgPT4gYGV4cC1tYXAteGxhYmVsIHgke2l9YClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyBhZGp1c3Q7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBZO1xuICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke2FuZ2xlfSlgO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5tZXJnZSh4TGFiZWxzKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IGQpO1xuXG4gICAgICAgIC8vIGV4aXQgLS0gcmVtb3ZlcyBvbGQgZWxlbWVudHMgYXMgbmVlZGVkXG4gICAgICAgIHhMYWJlbHMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgIGNvbnN0IHlMYWJlbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLnlMaXN0KVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLnRleHQoKGQpID0+IGQpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy54U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQpID0+IHRoaXMueVNjYWxlKGQpICsgMTApXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgZXhwLW1hcC15bGFiZWwgeSR7aX1gKVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgYWxlcnQoYCR7ZH0gaXMgY2xpY2tlZC4gVG8gYmUgaW1wbGVtZW50ZWRgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdub3JtYWwnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnbm9ybWFsJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVycyB0aGUgaGVhdG1hcCBjZWxsc1xuXG4gICAgICAgIC8vIGRhdGEgam9pblxuICAgICAgICBjb25zdCBjZWxscyA9IGRvbS5zZWxlY3RBbGwoXCIuZXhwLW1hcC1jZWxsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmRhdGEsIChkKSA9PiBkLnZhbHVlKTtcblxuICAgICAgICAvLyB1cGRhdGUgb2xkIGVsZW1lbnRzXG4gICAgICAgIGNlbGxzLmF0dHIoXCJ4XCIsIChkKSA9PiB0aGlzLnhTY2FsZShkLngpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB0aGlzLnlTY2FsZShkLnkpKVxuICAgICAgICAgICAgLmF0dHIoXCJyb3dcIiwgKGQpID0+IGB4JHt0aGlzLnhMaXN0LmluZGV4T2YoZC54KX1gKVxuICAgICAgICAgICAgLmF0dHIoXCJjb2xcIiwgKGQpID0+IGB5JHt0aGlzLnlMaXN0LmluZGV4T2YoZC55KX1gKTtcblxuICAgICAgICAvLyBlbnRlciBuZXcgZWxlbWVudHNcbiAgICAgICAgY29uc3QgbnVsbENvbG9yID0gXCIjREREREREXCI7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjZWxscy5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwicm93XCIsIChkKSA9PiBgeCR7dGhpcy54TGlzdC5pbmRleE9mKGQueCl9YClcbiAgICAgICAgICAgIC5hdHRyKFwiY29sXCIsIChkKSA9PiBgeSR7dGhpcy55TGlzdC5pbmRleE9mKGQueSl9YClcblxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkKSA9PiB0aGlzLnhTY2FsZShkLngpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB0aGlzLnlTY2FsZShkLnkpKVxuICAgICAgICAgICAgLmF0dHIoXCJyeFwiLCB0aGlzLnIpXG4gICAgICAgICAgICAuYXR0cigncnknLCB0aGlzLnIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkKSA9PiBgZXhwLW1hcC1jZWxsYClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IFwiI2VlZWVlZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpOyAvLyBOb3RlOiBcInRoaXNcIiBoZXJlIHJlZmVycyB0byB0aGUgZG9tIGVsZW1lbnQgbm90IHRoZSBvYmplY3RcbiAgICAgICAgICAgICAgICBzZWxmLmNlbGxNb3VzZW92ZXIoc2VsZWN0ZWQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBzZWxlY3QodGhpcyk7IC8vIE5vdGU6IFwidGhpc1wiIGhlcmUgcmVmZXJzIHRvIHRoZSBkb20gZWxlbWVudCBub3QgdGhlIG9iamVjdFxuICAgICAgICAgICAgICAgIHNlbGYuY2VsbE1vdXNlb3V0KClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2UoY2VsbHMpXG4gICAgICAgICAgICAvLyAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAvLyAuZHVyYXRpb24oMjAwMClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpID0+IHVzZU51bGxDb2xvciYmZC5vcmlnaW5hbFZhbHVlPT0wP251bGxDb2xvcjp0aGlzLmNvbG9yU2NhbGUoZC52YWx1ZSkpOyAvLyBUT0RPOiB3aGF0IGlmIG51bGwgdmFsdWUgaXNuJ3QgMD9cblxuICAgICAgICAvLyBleGl0IGFuZCByZW1vdmVcbiAgICAgICAgY2VsbHMuZXhpdCgpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGNlbGxNb3VzZW91dChkKXtcbiAgICAgICAgc2VsZWN0QWxsKFwiKlwiKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjZWxsTW91c2VvdmVyIChzZWxlY3RlZCkge1xuICAgICAgICBjb25zdCByb3dDbGFzcyA9IHNlbGVjdGVkLmF0dHIoXCJyb3dcIik7XG4gICAgICAgIGNvbnN0IGNvbENsYXNzID0gc2VsZWN0ZWQuYXR0cihcImNvbFwiKTtcbiAgICAgICAgc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpLmZpbHRlcihgLiR7cm93Q2xhc3N9YClcbiAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICBzZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIikuZmlsdGVyKGAuJHtjb2xDbGFzc31gKVxuICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgICAgIHNlbGVjdGVkLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgX3NldFhMaXN0KHdpZHRoLCBuZXdMaXN0KSB7XG4gICAgICAgIGlmKG5ld0xpc3QgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnhMaXN0ID0gbmV3TGlzdFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy54TGlzdCA9IG5lc3QoKVxuICAgICAgICAgICAgICAgIC5rZXkoKGQpID0+IGQueClcbiAgICAgICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgLm1hcCgoZCkgPT4gZC5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgIC5kb21haW4odGhpcy54TGlzdClcbiAgICAgICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKVxuICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTsgLy8gVE9ETzogZWxpbWluYXRlIGhhcmQtY29kZWQgdmFsdWVcbiAgICB9XG5cbiAgICBfc2V0WUxpc3QoaGVpZ2h0LCBuZXdMaXN0KSB7XG4gICAgICAgIGlmKG5ld0xpc3QgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnlMaXN0ID0gbmV3TGlzdFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICB0aGlzLnlMaXN0ID0gbmVzdCgpXG4gICAgICAgICAgICAua2V5KChkKSA9PiBkLnkpXG4gICAgICAgICAgICAuZW50cmllcyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAubWFwKChkKSA9PiBkLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy55U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5kb21haW4odGhpcy55TGlzdClcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIGhlaWdodF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTsgLy8gVE9ETzogZWxpbWluYXRlIGhhcmQtY29kZWQgdmFsdWVcbiAgICB9XG5cblxufSIsIi8qKlxuICogQ29weXJpZ2h0IMKpIDIwMTUgLSAyMDE4IFRoZSBCcm9hZCBJbnN0aXR1dGUsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSAoaHR0cHM6Ly9naXRodWIuY29tL2Jyb2FkaW5zdGl0dXRlL2d0ZXgtdml6L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWQpXG4gKi9cbmltcG9ydCB7Y3JlYXRlU3ZnfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuaW1wb3J0IERlbmRyb0hlYXRtYXBDb25maWcgZnJvbSBcIi4vRGVuZHJvSGVhdG1hcENvbmZpZ1wiO1xuaW1wb3J0IERlbmRyb2dyYW0gZnJvbSBcIi4vRGVuZHJvZ3JhbVwiO1xuaW1wb3J0IEhlYXRtYXAgZnJvbSBcIi4vSGVhdG1hcFwiO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSBcIi4vVG9vbHRpcFwiO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIi4vVG9vbGJhclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZW5kcm9IZWF0bWFwIHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGNvbHVtblRyZWUge1N0cmluZ30gYSBuZXdpY2sgdHJlZVxuICAgICAqIEBwYXJhbSByb3dUcmVlIHtTdHJpbmd9IGEgbmV3aWNrIHRyZWVcbiAgICAgKiBAcGFyYW0gaGVhdG1hcERhdGEge0xpc3R9IG9mIG9iamVjdHMgd2l0aCBhdHRyaWJ1dGVzOiB4OiBTdHJpbmcsIHk6U3RyaW5nLCB2YWx1ZTpGbG9hdCwgb3JpZ2luYWxWYWx1ZTpGbG9hdFxuICAgICAqIEBwYXJhbSBjb2xvciB7U3RyaW5nfSBhIGNvbG9yIG5hbWUgdGhhdCdzIGF2YWlsYWJsZSBpbiBDb2xvcnMuZ2V0Q29sb3JJbnRlcnBvbGF0b3JcbiAgICAgKiBAcGFyYW0gciB7SW50ZWdlcn0gdGhlIGRlZ3JlZXMgb2Ygcm91bmRlZC1jb3JuZXJzIG9mIHRoZSBoZWF0bWFwIGNlbGxzXG4gICAgICogQHBhcmFtIGNvbmZpZyB7RGVuZHJvSGVhdG1hcENvbmZpZ31cbiAgICAgKiBAcGFyYW0gdXNlTG9nIHtCb29sZWFufVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbHVtblRyZWUsIHJvd1RyZWUsIGhlYXRtYXBEYXRhLCBjb2xvcj1cIllsR25CdVwiLCByPTIsIGNvbmZpZz1uZXcgRGVuZHJvSGVhdG1hcENvbmZpZygpLCB1c2VMb2c9dHJ1ZSwgYmFzZT0xMCwgdGl0bGUgPSAnJyl7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnLmdldCgpO1xuICAgICAgICAvL2lucHV0IGV2YWx1YXRpb25zXG4gICAgICAgIGNvbHVtblRyZWUgPSBjb2x1bW5UcmVlPT09dW5kZWZpbmVkfHxjb2x1bW5UcmVlLnN0YXJ0c1dpdGgoXCJOb3QgZW5vdWdoIGRhdGFcIik/dW5kZWZpbmVkOmNvbHVtblRyZWU7XG4gICAgICAgIHJvd1RyZWUgPSByb3dUcmVlPT09dW5kZWZpbmVkfHxyb3dUcmVlLnN0YXJ0c1dpdGgoXCJOb3QgZW5vdWdoIGRhdGFcIik/dW5kZWZpbmVkOnJvd1RyZWU7XG4gICAgICAgIC8vIGFzc2lnbiBhdHRyaWJ1dGUgdmFsdWVzIGJhc2VkIG9uIGlucHV0IGFyZ3VtZW50c1xuICAgICAgICB0aGlzLmRhdGEgPSB7XG4gICAgICAgICAgICBjb2x1bW5UcmVlOiBjb2x1bW5UcmVlLFxuICAgICAgICAgICAgcm93VHJlZTogcm93VHJlZSxcbiAgICAgICAgICAgIGhlYXRtYXA6IGhlYXRtYXBEYXRhLFxuICAgICAgICAgICAgZXh0ZXJuYWw6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9iamVjdHMgPSB7XG4gICAgICAgICAgICBjb2x1bW5UcmVlOiB0aGlzLmRhdGEuY29sdW1uVHJlZT09PXVuZGVmaW5lZD8gdW5kZWZpbmVkOm5ldyBEZW5kcm9ncmFtKHRoaXMuZGF0YS5jb2x1bW5UcmVlLCBcInZcIiksXG4gICAgICAgICAgICByb3dUcmVlOiB0aGlzLmRhdGEucm93VHJlZT09PXVuZGVmaW5lZD91bmRlZmluZWQ6bmV3IERlbmRyb2dyYW0odGhpcy5kYXRhLnJvd1RyZWUsIFwiaFwiKSxcbiAgICAgICAgICAgIGhlYXRtYXA6IG5ldyBIZWF0bWFwKHRoaXMuZGF0YS5oZWF0bWFwLCBjb2xvciwgdXNlTG9nLCBiYXNlLCByKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMgPSB7XG4gICAgICAgICAgICBzdmc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbHVtblRyZWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJvd1RyZWU6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcblxuICAgICAgICB0aGlzLnRvb2x0aXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbHRpcCBvYmplY3RcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2x0aXAncyBkb20gSURcbiAgICAgKiBAcmV0dXJucyB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBjcmVhdGVUb29sdGlwKGRvbUlkKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAoZG9tSWQpO1xuICAgICAgICBzZWxlY3QoYCMke2RvbUlkfWApLmNsYXNzZWQoJ2hlYXRtYXAtdG9vbHRpcCcsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgZGVuZHJvZ3JhbXMgYW5kIGNvcnJlc3BvbmRpbmcgaGVhdG1hcFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgcGFyZW50IERPTSBpZCBvZiB0aGUgU1ZHXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IG9mIHRoZSBTVkdcbiAgICAgKiBAcGFyYW0gc2hvd0NvbHVtblRyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgY29sdW1uIGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gc2hvd1Jvd1RyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgcm93IGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gbGVnZW5kUG9zIHtFbnVtfSB3aGVyZSB0byBwbGFjZSB0aGUgY29sb3IgbGVnZW5kOiBib3R0b20sIHRvcFxuICAgICAqIEBwYXJhbSB0aWNrcyB7SW50ZWdlcn0gbnVtYmVyIG9mIGJpbnMgb2YgdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAqL1xuICAgIHJlbmRlcihkb21JZCwgc3ZnSWQsIHNob3dDb2x1bW5UcmVlPXRydWUsIHNob3dSb3dUcmVlPXRydWUsIGxlZ2VuZFBvcz1cInRvcFwiLCB0aWNrcz01KXtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyk7XG4gICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cy5zdmcgPSBjcmVhdGVTdmcoZG9tSWQsIHRoaXMuY29uZmlnLncsIHRoaXMuY29uZmlnLmgsIHRoaXMuY29uZmlnLm1hcmdpbiwgc3ZnSWQpO1xuXG4gICAgICAgIGxldCB4bGlzdCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHlsaXN0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzaG93Q29sdW1uVHJlZSAmJiB0aGlzLm9iamVjdHMuY29sdW1uVHJlZSE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMuY29sdW1uVHJlZSA9IHRoaXMuX3JlbmRlclRyZWUoXCJjb2x1bW5cIiwgdGhpcy5vYmplY3RzLmNvbHVtblRyZWUsIHRoaXMuY29uZmlnLnBhbmVscy50b3ApO1xuICAgICAgICAgICAgeGxpc3QgPSB0aGlzLm9iamVjdHMuY29sdW1uVHJlZS54U2NhbGUuZG9tYWluKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3dSb3dUcmVlICYmIHRoaXMub2JqZWN0cy5yb3dUcmVlICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzLnJvd1RyZWUgPSB0aGlzLl9yZW5kZXJUcmVlKFwicm93XCIsIHRoaXMub2JqZWN0cy5yb3dUcmVlLCB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdCk7XG4gICAgICAgICAgICB5bGlzdCA9IHRoaXMub2JqZWN0cy5yb3dUcmVlLnlTY2FsZS5kb21haW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRpdGxlICE9ICcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnRpdGxlKTtcbiAgICAgICAgICAgIHNlbGVjdChgIyR7ZG9tSWR9LXN2Z2ApLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgMjApXG4gICAgICAgICAgICAgICAgLnRleHQodGhpcy50aXRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW5kZXJIZWF0bWFwKHRoaXMub2JqZWN0cy5oZWF0bWFwLCB4bGlzdCwgeWxpc3QsIHRpY2tzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBuZXdpY2sgdHJlZVxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24ge2VudW19IGNvbHVtbiBvciByb3dcbiAgICAgKiBAcGFyYW0gdHJlZSB7RGVuZHJvZ3JhbX0gYSBEZW5kcm9ncmFtIG9iamVjdFxuICAgICAqIEBwYXJhbSBjb25maWcge09iamVjdH0gYSBwYW5lbCBjb25maWcgd2l0aCBhdHRyaWJ1dGVzOiB4LCB5LCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVyVHJlZShkaXJlY3Rpb24sIHRyZWUsIGNvbmZpZyl7XG4gICAgICAgIGxldCBzdmcgPSB0aGlzLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgICAgICBjb25zdCBsYWJlbENsYXNzID0gZGlyZWN0aW9uPT1cInJvd1wiP1wiLmV4cC1tYXAteWxhYmVsXCI6XCIuZXhwLW1hcC14bGFiZWxcIjtcblxuICAgICAgICBjb25zdCB0b29sdGlwID0gdGhpcy52aXN1YWxDb21wb25lbnRzLnRvb2x0aXA7XG4gICAgICAgIGNvbnN0IGcgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBjb25maWcuaWQpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcbiAgICAgICAgdHJlZS5kcmF3KGcsIGNvbmZpZy53LCBjb25maWcuaCk7XG5cbiAgICAgICAgY29uc3QgbW91c2VvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzMzM1wiKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwobGFiZWxDbGFzcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG1vdXNlb3ZlciA9IGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDYpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmVkXCIpO1xuICAgICAgICAgICAgbGV0IGlkcyA9IGQubGVhdmVzKCkubWFwKChub2RlKT0+bm9kZS5kYXRhLm5hbWUpO1xuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbChsYWJlbENsYXNzKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGxhYmVsKT0+aWRzLmluY2x1ZGVzKGxhYmVsKSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbChcIi5sZWFmLWNvbG9yXCIpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigobGFiZWwpPT5pZHMuaW5jbHVkZXMobGFiZWwpKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZy5zZWxlY3RBbGwoXCIuZGVuZHJvZ3JhbS1ub2RlXCIpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgbW91c2VvdmVyKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgbW91c2VvdXQpO1xuICAgICAgICByZXR1cm4gZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdGhlIGhlYXRtYXAgYW5kIGNvbG9yIGxlZ2VuZFxuICAgICAqIEBwYXJhbSBoZWF0bWFwIHtIZWF0bWFwfSBhIEhlYXRtYXAgb2JqZWN0XG4gICAgICogQHBhcmFtIHhMaXN0IHtMaXN0fSBhIGxpc3Qgb2YgeCBsYWJlbHNcbiAgICAgKiBAcGFyYW0geUxpc3Qge0xpc3R9IGEgbGlzdCBvZiB5IGxhYmVsc1xuICAgICAqIEBwYXJhbSB0aWNrcyB7SW50ZWdlcn0gdGhlIG51bWJlciBvZiBiaW5zIGluIHRoZSBjb2xvciBsZWdlbmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZW5kZXJIZWF0bWFwKGhlYXRtYXAsIHhMaXN0LCB5TGlzdCwgdGlja3M9NSl7XG4gICAgICAgIGxldCBkb20gPSB0aGlzLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZy5wYW5lbHMubWFpbjtcbiAgICAgICAgY29uc3QgZyA9IGRvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGNvbmZpZy5pZClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnl9KWApO1xuICAgICAgICBoZWF0bWFwLnJlZHJhdyhnLCB4TGlzdCwgeUxpc3QsIHt3OiBjb25maWcudywgaDogY29uZmlnLmh9KTtcbiAgICAgICAgaGVhdG1hcC5kcmF3Q29sb3JMZWdlbmQoZG9tLCB0aGlzLmNvbmZpZy5wYW5lbHMubGVnZW5kLCB0aWNrcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRqdXN0IHRoZSBsYXlvdXQgZGltZW5zaW9ucyBiYXNlZCBvbiB0aGUgYWN0dWFsIGRhdGFcbiAgICAgKiBAcGFyYW0gbGVnZW5kUG9zIHtTdHJpbmd9IGJvdHRvbSBvciB0b3BcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF91cGRhdGVDb25maWcobGVnZW5kUG9zKXtcbiAgICAgICAgY29uc3Qgcm93cyA9IHRoaXMub2JqZWN0cy5yb3dUcmVlPT09dW5kZWZpbmVkPzE6dGhpcy5vYmplY3RzLnJvd1RyZWUubGVhdmVzLmxlbmd0aDtcblxuICAgICAgICAvLyB1cGRhdGVzIHRoZSBsZWZ0IHBhbmVsJ3MgaGVpZ2h0IGJhc2VkIG9uIHRoZSBkYXRhXG4gICAgICAgIHRoaXMuY29uZmlnLnBhbmVscy5sZWZ0LmggPSB0aGlzLmNvbmZpZy5jZWxsLmggKiByb3dzPDIwPzIwOnRoaXMuY29uZmlnLmNlbGwuaCAqIHJvd3M7XG4gICAgICAgIHRoaXMuY29uZmlnLmggKz0gdGhpcy5jb25maWcucGFuZWxzLmxlZnQuaDtcbiAgICAgICAgdGhpcy5jb25maWcucGFuZWxzLm1haW4uaCA9IHRoaXMuY29uZmlnLnBhbmVscy5sZWZ0Lmg7XG4gICAgICAgIGlmKGxlZ2VuZFBvcz09XCJib3R0b21cIikgdGhpcy5jb25maWcucGFuZWxzLmxlZ2VuZC55ICs9IHRoaXMuY29uZmlnLnBhbmVscy5tYWluLmggKyB0aGlzLmNvbmZpZy5wYW5lbHMubWFpbi54ICsgNTA7XG5cblxuICAgIH1cbn0iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHggLSBkeCkgKyBcIixcIiArICh5IC0gZHkpICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHgwKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTApO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgZWxzZSBpZiAoZGEgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24geChwKSB7XG4gIHJldHVybiBwWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShwKSB7XG4gIHJldHVybiBwWzFdO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gcG9pbnRYLFxuICAgICAgeSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgIHRoYXQuX3gxICsgdGhhdC5fayAqICh0aGF0Ll94MiAtIHRoYXQuX3gwKSxcbiAgICB0aGF0Ll95MSArIHRoYXQuX2sgKiAodGhhdC5feTIgLSB0aGF0Ll95MCksXG4gICAgdGhhdC5feDIgKyB0aGF0Ll9rICogKHRoYXQuX3gxIC0geCksXG4gICAgdGhhdC5feTIgKyB0aGF0Ll9rICogKHRoYXQuX3kxIC0geSksXG4gICAgdGhhdC5feDIsXG4gICAgdGhhdC5feTJcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MSA9IHgsIHRoaXMuX3kxID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG4vKlxuVGhpcyBjbGFzcyBkZWZpbmVzIGEgZ2VuZSBtb2RlbCAob3IgaXNvZm9ybSksIHJlbmRlcmluZyB0aGUgZXhvbnMgYW5kIGp1bmN0aW9ucyBvZiBhIGdpdmVuIGdlbmUuIFRoZSBtb2RlbCBpcyByZW5kZXJlZCBiYXNlZCBvblxuZ2Vub21pYyBwb3NpdGlvbnMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN0cmFuZCBhbmQgdHJhbnNjcmlwdGlvbmFsIGRpcmVjdGlvbi5cblxuVE9ETzogZXh0cmFjdCBvdXQgdGhlIHNpbXBsZSBpc29mb3JtIHN0cnVjdHVyZSByZW5kZXJpbmc/XG4gKi9cblxuaW1wb3J0IHtjdXJ2ZUNhcmRpbmFsLCBsaW5lfSBmcm9tIFwiZDMtc2hhcGVcIjtcbmltcG9ydCB7bWF4LCBzdW19IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzY2FsZUxpbmVhcn0gZnJvbSBcImQzLXNjYWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlbmVNb2RlbCB7XG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gZ2VuZSB7T2JqZWN0fSB3aXRoIGF0dHJpYnV0ZXM6IHN0cmFuZCwgdHJhbnNjcmlwdElkLCBnZW5lU3ltYm9sXG4gICAgICogQHBhcmFtIGV4b25zIHtMaXN0fSBvZiBleG9uIG9iamVjdHMgd2l0aCBhdHRyaWJ1dGVzOiBjaHJvbSwgY2hyb21TdGFydCwgY2hyb21FbmQsIGxlbmd0aCwgZXhvbk51bWJlciwgZXhvbklkXG4gICAgICogQHBhcmFtIGV4b25zQ3VyYXRlZCB7TGlzdH0gb2YgZXhvbiBvYmplY3RzIGluIHRoZSBmaW5hbCBnZW5lIG1vZGVsLiBUaGlzIGlzIHByZXR0eSBzcGVjaWZpYyB0byBHVEV4LiBJZiB0aGlzIGxpc3QgaXNuJ3QgYXZhaWxhYmxlIGZvciB5b3VyIGRhdGEsIHRoZW4ganVzdCBwYXNzIGluIHRoZSBzYW1lIGV4b24gbGlzdCBhZ2Fpbi5cbiAgICAgKiBAcGFyYW0ganVuY3Rpb25zIHtMaXN0fSBvZiBqdW5jdGlvbiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogY2hyb20sIGNocm9tU3RhcnQsIGNocm9tRW5kLCBqdW5jdGlvbklkXG4gICAgICogQHBhcmFtIGlzSXNvZm9ybSB7Qm9vbGVhbn1cbiAgICAgKiBAcGFyYW0gbWF4SW50cm9uTGVuZ3RoIHtJbnRlZ2VyfSB0aGUgbWF4aW11bSBsZW5ndGggb2YgaW50cm9uLiBJbnRyb24gcmVuZGVyaW5nIGlzIGNhcHBlZCBhdCB0aGlzIHZhbHVlXG4gICAgICogQHBhcmFtIG1pbkV4b25XaWR0aCB7SW50ZWdlcn0gdGhlIG1pbmltdW0gd2lkdGggKHBpeGVscykgb2YgdGhlIGV4b24gcmVjdGFuZ2xlLlxuICAgICAqL1xuXG4gICAgLyoqIE5PVEU6IHRoZSBleG9uTnVtYmVyIGluIGV4b25zICYgZXhvbnNDdXJhdGVkIGRvbid0IHJlZmVyIHRvIHRoZSBzYW1lIGV4b25zIChhdCBsZWFzdCB0aGlzIGlzIHRoZSBjYXNlIGluIEdURXgpXG4gICAgICogIFRvIGVuc3VyZSBjb3JyZWN0IGV4b24gbWFwcGluZyBvZiB0aGUgY3VyYXRlZCBnZW5lIG1vZGVsIHRvIHRoZSBvcmlnaW5hbCBtb2RlbCwgaGVyZSB3ZSB1c2UgZ2Vub21pYyBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoZ2VuZSwgZXhvbnMsIGV4b25zQ3VyYXRlZCwganVuY3Rpb25zLCBpc0lzb2Zvcm09ZmFsc2UsIG1heEludHJvbkxlbmd0aD0xMDAwLCBtaW5FeG9uV2lkdGg9MCl7XG4gICAgICAgIHRoaXMuZ2VuZSA9IGdlbmU7XG4gICAgICAgIHRoaXMuZXhvbnMgPSBleG9ucztcbiAgICAgICAgaWYgKHRoaXMuZ2VuZS5zdHJhbmQgPT0gXCIrXCIpIHRoaXMuZXhvbnMuc29ydCgoYSwgYik9PntyZXR1cm4gTnVtYmVyKGEuZXhvbk51bWJlciktTnVtYmVyKGIuZXhvbk51bWJlcil9KTtcbiAgICAgICAgZWxzZSB0aGlzLmV4b25zLnNvcnQoKGEsIGIpPT57cmV0dXJuIE51bWJlcihiLmV4b25OdW1iZXIpLU51bWJlcihhLmV4b25OdW1iZXIpfSk7XG4gICAgICAgIHRoaXMuZXhvbnNDdXJhdGVkID0gZXhvbnNDdXJhdGVkLnNvcnQoKGEsIGIpPT57cmV0dXJuIE51bWJlcihhLmV4b25OdW1iZXIpLU51bWJlcihiLmV4b25OdW1iZXIpfSk7XG4gICAgICAgIHRoaXMuanVuY3Rpb25zID0ganVuY3Rpb25zLnNvcnQoKGEsYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEuanVuY3Rpb25JZCA8IGIuanVuY3Rpb25JZCkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKGEuanVuY3Rpb25JZCA+IGIuanVuY3Rpb25JZCkgcmV0dXJuIDE7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7IC8vIHNvcnRlZCBieSBqdW5jdGlvbiBJRFxuICAgICAgICB0aGlzLmlzSXNvZm9ybSA9IGlzSXNvZm9ybTtcbiAgICAgICAgdGhpcy5tYXhJbnRyb25MZW5ndGggPSBtYXhJbnRyb25MZW5ndGg7XG5cbiAgICAgICAgLy8gaGFyZC1jb2RlZCBmb3Igbm93XG4gICAgICAgIHRoaXMuaW50cm9uTGVuZ3RoID0gMDsgLy8gZml4ZWQgZmFrZSBpbnRyb24gbGVuZ3RoIGluIGJhc2UgcGFpcnMsIG9ic29sZXRlP1xuICAgICAgICB0aGlzLm1pbkV4b25XaWR0aCA9IG1pbkV4b25XaWR0aDsgLy8gbWluaW11bSBleG9uIHdpZHRoIGluIHBpeGVsc1xuICAgICAgICB0aGlzLm51bGxDb2xvciA9ICcjREREREREJztcbiAgICB9XG5cbiAgICBjaGFuZ2VUZXh0bGFiZWwoZG9tLCBsYWJlbCl7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIjbW9kZWxJbmZvXCIpLnRleHQobGFiZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvbSB7T2JqZWN0fSBvZiBEM1xuICAgICAqIEBwYXJhbSBqZGF0YSB7TGlzdH0gb2YganVuY3Rpb24gZXhwcmVzc2lvbiBvYmplY3RzXG4gICAgICogQHBhcmFtIGVkYXRhIHtMaXN0fSBvZiBleG9uIGV4cHJlc3Npb24gb2JqZWN0c1xuICAgICAqIEBwYXJhbSBqc2NhbGUge0QzIHNjYWxlfSBvZiBjb2xvcnMgb2YganVuY3Rpb24gZGF0YVxuICAgICAqIEBwYXJhbSBlc2NhbGUge0QzIHNjYWxlfSBvZiBjb2xvcnMgb2YgZXhvbiBkYXRhXG4gICAgICovXG4gICAgYWRkRGF0YShkb20sIGpkYXRhLCBlZGF0YSwganNjYWxlLCBlc2NhbGUpe1xuICAgICAgICBpZiAoamRhdGEgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmp1bmNcIikuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IGpkYXRhLmZpbHRlcigoeik9PnouanVuY3Rpb25JZD09ZC5qdW5jdGlvbklkKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCBqY29sb3IgPSB2LnZhbHVlPT0wP3RoaXMubnVsbENvbG9yOmpzY2FsZSh2LnZhbHVlKTtcbiAgICAgICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmp1bmMtY3VydmVcIikuZmlsdGVyKChgLmp1bmMke2QuanVuY3Rpb25JZH1gKSkuc3R5bGUoXCJzdHJva2VcIiwgamNvbG9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gamNvbG9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKS5zdHlsZShcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBlZGF0YS5maWx0ZXIoKHopPT56LmV4b25JZD09ZC5leG9uSWQpWzBdO1xuICAgICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkgdGhyb3cgYCR7ZC5leG9uSWR9IGhhcyBubyBkYXRhYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2xvciA9IHYudmFsdWUgPT0gMD90aGlzLm51bGxDb2xvcjplc2NhbGUodi52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZWNvbG9yO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgdGhlIFNWRyBvZiB0aGUgZ2VuZSBtb2RlbFxuICAgICAqIEBwYXJhbSBkb206IGFuIFNWRyBkb20gb2JqZWN0XG4gICAgICogQHBhcmFtIGNvbmZpZ1xuXG4gICAgICovXG4gICAgcmVuZGVyKGRvbSwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuc2V0WHNjYWxlKGNvbmZpZy53KTtcblxuICAgICAgICAvKiBOb3RlOiBleG9uLngsIGV4b24udyBhcmUgaW4gcGl4ZWxzIGZvciB2aXN1YWwgcmVuZGVyaW5nICovXG4gICAgICAgIC8qIE5vdGU6IGV4b24ubGVuZ3RoIGlzIGluIGJhc2UgcGFpcnMgKi9cbiAgICAgICAgLy8gY2FsY3VsYXRpbmcgeCBhbmQgdyBmb3IgZWFjaCBleG9uXG4gICAgICAgIGNvbnN0IGV4b25ZID0gY29uZmlnLmgvMjsgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgIHRoaXMuZXhvbnMuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICAgICAgICAgIGQueCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGQueCA9IHRoaXMuZXhvbnNbaS0xXS54ICsgdGhpcy5leG9uc1tpLTFdLncgKyB0aGlzLnhTY2FsZShkLmludHJvbkxlbmd0aD50aGlzLm1heEludHJvbkxlbmd0aD90aGlzLm1heEludHJvbkxlbmd0aDpkLmludHJvbkxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLncgPSB0aGlzLnhTY2FsZShkLmxlbmd0aCk8dGhpcy5taW5FeG9uV2lkdGg/dGhpcy5taW5FeG9uV2lkdGg6dGhpcy54U2NhbGUoZC5sZW5ndGgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjYWxjdWxhaW5nIHggYW5kIHcgb2YgdGhlIHJlY3RhbmdsZSBmb3IgZWFjaCBjdXJhdGVkIGV4b24gb24gdGhlIGZpbmFsIGdlbmUgbW9kZWxcbiAgICAgICAgdGhpcy5leG9uc0N1cmF0ZWQuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgLy8gZmlyc3QsIG1hcCBlYWNoIGZpbmFsIGN1cmF0ZWQgZXhvbiB0byB0aGUgb3JpZ2luYWwgZnVsbCBnZW5lIG1vZGVsLS1maW5kIHRoZSBvcmlnaW5hbCBleG9uXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBvcmlnaW5hbCBleG9uXG4gICAgICAgICAgICBkLm9yaUV4b24gPSB0aGlzLl9maW5kRXhvbihkLmNocm9tU3RhcnQpfHx0aGlzLl9maW5kRXhvbihkLmNocm9tRW5kKTtcbiAgICAgICAgICAgIGlmIChkLm9yaUV4b24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vdCBmb3VuZFxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLmdlbmUudHJhbnNjcmlwdElkfS0ke2QuZXhvbklkfSBjYW4ndCBtYXAgdG8gZnVsbCBnZW5lIG1vZGVsYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBpZ25vcmUgdW5tYXBwYWJsZSBleG9ucywgdGhpcyBoYXBwZW5zIGF0IHRpbWVzICh3aHk/KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgZm9yIHhcbiAgICAgICAgICAgIGlmIChOdW1iZXIoZC5vcmlFeG9uLmNocm9tU3RhcnQpID09IE51bWJlcihkLmNocm9tU3RhcnQpKSBkLnggPSBkLm9yaUV4b24ueDtcbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBleG9uIGRvZXNuJ3Qgc3RhcnQgZnJvbSB0aGUgb3JpRXhvbiBzdGFydCBwb3NcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0ID0gTnVtYmVyKGQuY2hyb21TdGFydCkgLSBOdW1iZXIoZC5vcmlFeG9uLmNocm9tU3RhcnQpICsgMTtcbiAgICAgICAgICAgICAgICBkLnggPSBkLm9yaUV4b24ueCArIHRoaXMueFNjYWxlKGRpc3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgZm9yIHdcbiAgICAgICAgICAgIGlmIChkLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSBkLmxlbmd0aCA9IE51bWJlcihkLmNocm9tRW5kKSAtIE51bWJlcihkLmNocm9tU3RhcnQpICsgMTtcbiAgICAgICAgICAgIGQudyA9IHRoaXMueFNjYWxlKGQubGVuZ3RoKTx0aGlzLm1pbkV4b25XaWR0aD90aGlzLm1pbkV4b25XaWR0aDp0aGlzLnhTY2FsZShkLmxlbmd0aCk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZXZhbHVhdGVzIHdoZXRoZXIgaXQncyBhbiBpbmRpdmlkdWFsIGlzb2Zvcm0gb3IgYSBjb2xsYXBzZWQgZ2VuZSBtb2RlbFxuICAgICAgICBpZighdGhpcy5pc0lzb2Zvcm0pe1xuICAgICAgICAgICAgLy8gTk9URTogZG8gbm90IGFsdGVyIHRoZSByZW5kZXJpbmcgb3JkZXIgb2YgdmlzdWFsIGNvbXBvbmVudHMuXG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgZ2VuZSBtb2RlbCwgbm90IGFuIGlzb2Zvcm1cbiAgICAgICAgICAgIC8vIGNhbGN1bGF0aW5nIHBvc2l0aW9ucyBmb3IgZWFjaCBqdW5jdGlvblxuICAgICAgICAgICAgdGhpcy5qdW5jdGlvbnMgPSB0aGlzLmp1bmN0aW9ucy5maWx0ZXIoKGQpPT57XG4gICAgICAgICAgICAgICAgLy8gZmlyc3QgZmlsdGVyIHVubWFwcGVkIGp1bmN0aW9uc1xuICAgICAgICAgICAgICAgIGQuc3RhcnRFeG9uID0gdGhpcy5fZmluZEV4b24oZC5jaHJvbVN0YXJ0KTtcbiAgICAgICAgICAgICAgICBkLmVuZEV4b24gPSB0aGlzLl9maW5kRXhvbihkLmNocm9tRW5kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5zdGFydEV4b24gIT09IHVuZGVmaW5lZCAmJiBkLmVuZEV4b24gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmp1bmN0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmp1bmN0aW9ucy5zb3J0KChhLGIpPT57XG4gICAgICAgICAgICAgICAgLy8gZmlyc3Qgc29ydCBieSBjaHJvbVN0YXJ0XG4gICAgICAgICAgICAgICAgaWYgKCthLmNocm9tU3RhcnQgPCArYi5jaHJvbVN0YXJ0KSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgaWYgKCthLmNocm9tU3RhcnQgPiArYi5jaHJvbVN0YXJ0KSByZXR1cm4gMTtcblxuICAgICAgICAgICAgICAgIC8vIHRoZW4gc29ydCBieSBjaHJvbUVuZDpcbiAgICAgICAgICAgICAgICBpZiAoK2EuY2hyb21FbmQgPCArYi5jaHJvbUVuZCkgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIGlmICgrYS5jaHJvbUVuZCA+ICtiLmNocm9tRW5kKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5qdW5jdGlvbnMuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGQuc3RhcnRFeG9uID0gdGhpcy5fZmluZEV4b24oZC5jaHJvbVN0YXJ0KTtcbiAgICAgICAgICAgICAgICAvLyBkLmVuZEV4b24gPSB0aGlzLl9maW5kRXhvbihkLmNocm9tRW5kKTtcbiAgICAgICAgICAgICAgICBkLmRpc3BsYXlOYW1lID0gYEp1bmN0aW9uICR7aSsxfWA7XG5cblxuICAgICAgICAgICAgICAgIC8vIGQuZGlzcGxheU5hbWUgPSBgRXhvbiAke2Quc3RhcnRFeG9uLmV4b25OdW1iZXJ9IC0gJHtkLmVuZEV4b24uZXhvbk51bWJlcn1gO1xuICAgICAgICAgICAgICAgIC8vIGlmIChkLnN0YXJ0RXhvbi5leG9uTnVtYmVyID09IGQuZW5kRXhvbi5leG9uTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUud2FybihkLmp1bmN0aW9uSWQgKyBcIiBpcyBpbiBFeG9uOiBcIiArZC5zdGFydEV4b24uY2hyb21TdGFydCArIFwiIC0gXCIgKyBkLnN0YXJ0RXhvbi5jaHJvbUVuZCApO1xuICAgICAgICAgICAgICAgIC8vIH0gLy8gd2hhdCBpcyBoYXBwZW5pbmdcblxuICAgICAgICAgICAgICAgIC8vIGQuZmlsdGVyZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBmb3IgcG9zaXRpb25zXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdCA9IE51bWJlcihkLmNocm9tU3RhcnQpIC0gTnVtYmVyKGQuc3RhcnRFeG9uLmNocm9tU3RhcnQpICsgMTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0MiA9IE51bWJlcihkLmNocm9tRW5kKSAtIE51bWJlcihkLmVuZEV4b24uY2hyb21TdGFydCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgZC5zdGFydFggPSBkLnN0YXJ0RXhvbi54ICsgdGhpcy54U2NhbGUoZGlzdCk7XG4gICAgICAgICAgICAgICAgZC5lbmRYID0gZC5lbmRFeG9uLnggKyB0aGlzLnhTY2FsZShkaXN0Mik7XG4gICAgICAgICAgICAgICAgZC5jeCA9IGQuc3RhcnRYICsgKGQuZW5kWCAtIGQuc3RhcnRYICsgMSkvMjsgLy8ganVuY3Rpb24gaXMgcmVuZGVyZWQgYXQgdGhlIG1pZHBvaW50IGJldHdlZW4gc3RhcnRYIGFuZCBlbmRYXG4gICAgICAgICAgICAgICAgZC5jeSA9IGV4b25ZIC0gMTUgKiAoIE1hdGguYWJzKE51bWJlcihkLmVuZEV4b24uZXhvbk51bWJlcikgLSBOdW1iZXIoZC5zdGFydEV4b24uZXhvbk51bWJlcikpICsgMC41ICk7XG4gICAgICAgICAgICAgICAgaWYgKGQuY3kgPCAwKSBkLmN5ID0gMDtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsaW5nIGVkZ2UgY2FzZTogb3ZlcmxhcHBpbmcganVuY3Rpb25zLCBhZGQgaml0dGVyXG4gICAgICAgICAgICAvLyBhLnJlZHVjZSgocixrKT0+e3Jba109MStyW2tdfHwxO3JldHVybiByfSx7fSlcbiAgICAgICAgICAgIGNvbnN0IGNvdW50cyA9IHRoaXMuanVuY3Rpb25zLnJlZHVjZSgocixkKT0+e3JbZC5kaXNwbGF5TmFtZV09MStyW2QuZGlzcGxheU5hbWVdfHwxO3JldHVybiByfSx7fSk7XG4gICAgICAgICAgICB0aGlzLmp1bmN0aW9ucy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaml0dGVyXG4gICAgICAgICAgICAgICAgaWYoY291bnRzW2QuZGlzcGxheU5hbWVdID4gMSl7IC8vIG92ZXJsYXBwaW5nIGp1bmN0aW9uc1xuICAgICAgICAgICAgICAgICAgICAvLyBkLmN4ICs9IE1hdGgucmFuZG9tKCkqMjA7XG4gICAgICAgICAgICAgICAgICAgIGQuY3kgLT0gTWF0aC5yYW5kb20oKSoxNTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLyoqKioqIHJlbmRlciBqdW5jdGlvbnMgKi9cbiAgICAgICAgICAgIGNvbnN0IGN1cnZlID0gbGluZSgpXG4gICAgICAgICAgICAgICAgLngoKGQpID0+IGQueClcbiAgICAgICAgICAgICAgICAueSgoZCkgPT4gZC55KVxuICAgICAgICAgICAgICAgIC5jdXJ2ZShjdXJ2ZUNhcmRpbmFsKTtcblxuICAgICAgICAgICAgdGhpcy5qdW5jdGlvbnMuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXR1bShbe3g6ZC5zdGFydFgsIHk6ZXhvbll9LCB7eDpkLmN4LCB5OmQuY3l9LCB7eDpkLmVuZFgsIHk6ZXhvbll9XSkgLy8gdGhlIGlucHV0IHBvaW50cyB0byBkcmF3IHRoZSBjdXJ2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBganVuYy1jdXJ2ZSBqdW5jJHtkLmp1bmN0aW9uSWR9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBjdXJ2ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcIiM5MmJjYzlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGNvbnN0IGp1bmNEb3RzID0gZG9tLnNlbGVjdEFsbChcIi5qdW5jXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEodGhpcy5qdW5jdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGluZyBlbGVtZW50c1xuICAgICAgICAgICAganVuY0RvdHMuYXR0cihcImN4XCIsIChkKSA9PiBkLmN4KTtcbiAgICAgICAgICAgIGp1bmNEb3RzLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC5jeSk7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlc1xuXG4gICAgICAgICAgICAvLyBlbnRlcmluZyBuZXcgZWxlbWVudHNcbiAgICAgICAgICAgIGp1bmNEb3RzLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCkgPT4gYGp1bmMganVuYyR7ZC5qdW5jdGlvbklkfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC5jeClcbiAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKSA9PiBkLmN5KVxuICAgICAgICAgICAgICAgIC5tZXJnZShqdW5jRG90cylcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgNClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwicmdiKDg2LCA5OCwgMTA3KVwiKTtcblxuICAgICAgICAgICAgLyoqKioqIHJlbmRlcmluZyBmdWxsIGdlbmUgbW9kZWwgZXhvbnMgKi9cbiAgICAgICAgICAgIGNvbnN0IGV4b25SZWN0cyA9IGRvbS5zZWxlY3RBbGwoXCIuZXhvblwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5leG9ucyk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0aW5nIGVsZW1lbnRzXG4gICAgICAgICAgICBleG9uUmVjdHMuYXR0cihcInhcIiwgKGQpID0+IGQueCk7XG4gICAgICAgICAgICBleG9uUmVjdHMuYXR0cihcInlcIiwgZXhvblkpO1xuXG4gICAgICAgICAgICAvLyBlbnRlcmluZyBuZXcgZWxlbWVudHNcbiAgICAgICAgICAgIGV4b25SZWN0cy5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkKT0+YGV4b24gZXhvbiR7ZC5leG9uTnVtYmVyfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4b25ZKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwicnhcIiwgMilcbiAgICAgICAgICAgICAgICAuYXR0cigncnknLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgKGQpID0+IGQudylcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAxNSkgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAgICAgLm1lcmdlKGV4b25SZWN0cylcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpO1xuXG4gICAgICAgICAgICAvLyBtb2RlbCBpbmZvIHRleHQgbGFiZWxcbiAgICAgICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcIm1vZGVsSW5mb1wiKSAvLyBUT0RPOiBubyBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy54U2NhbGUoMCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4b25ZLTEwKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCAxMilcbiAgICAgICAgICAgICAgICAudGV4dChcIkdlbmUgTW9kZWxcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaXNvZm9ybSwgcmVuZGVyIHRoZSBpbnRyb24gbGluZVxuICAgICAgICAgICAgY29uc3QgaW50cm9uTGluZSA9IGRvbS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB0aGlzLmV4b25zQ3VyYXRlZFswXS54KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgdGhpcy5leG9uc0N1cmF0ZWRbdGhpcy5leG9uc0N1cmF0ZWQubGVuZ3RoLTFdLngpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBleG9uWSArICgxNS8yKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIGV4b25ZICsgKDE1LzIpKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiaW50cm9uXCIsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqKioqIHJlbmRlcmluZyBjdXJhdGVkIGV4b25zIG9uIHRoZSBmaW5hbCBnZW5lIG1vZGVsIG9yIGlzb2Zvcm0gZXhvbnMgKi9cbiAgICAgICAgY29uc3QgZXhvblJlY3RzMiA9IGRvbS5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLmV4b25zQ3VyYXRlZCk7XG5cbiAgICAgICAgLy8gdXBkYXRpbmcgZWxlbWVudHNcbiAgICAgICAgZXhvblJlY3RzMi5hdHRyKFwieFwiLCAoZCkgPT4gZC54KTtcbiAgICAgICAgZXhvblJlY3RzMi5hdHRyKFwieVwiLCBleG9uWSk7XG5cbiAgICAgICAgLy8gZW50ZXJpbmcgbmV3IGVsZW1lbnRzXG4gICAgICAgIGV4b25SZWN0czIuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkKT0+dGhpcy5pc0lzb2Zvcm0/J2V4b24tY3VyYXRlZCc6YGV4b24tY3VyYXRlZCBleG9uLWN1cmF0ZWQke2QuZXhvbk51bWJlcn1gKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4b25ZKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC53KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgMTUpIC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAubWVyZ2UoZXhvblJlY3RzMilcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjZWVlXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpO1xuXG5cbiAgICAgICAgLyoqKioqIHJlbmRlcmluZyB0ZXh0IGxhYmVscyAqL1xuICAgICAgICBpZiAoY29uZmlnLmxhYmVsT24gPT0gJ2xlZnQnIHx8IGNvbmZpZy5sYWJlbE9uID09ICdib3RoJyl7XG4gICAgICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcIm1vZGVsTGFiZWxcIikgLy8gVE9ETzogbm8gaGFyZC1jb2RlZCB2YWx1ZVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLnhTY2FsZS5yYW5nZSgpWzBdIC0gNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleG9uWSArIDcuNSlcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjlweFwiKVxuICAgICAgICAgICAgLnRleHQodGhpcy5nZW5lLnRyYW5zY3JpcHRJZD09PXVuZGVmaW5lZD9gJHt0aGlzLmdlbmUuZ2VuZVN5bWJvbH1gOnRoaXMuZ2VuZS50cmFuc2NyaXB0SWQpO1xuXG5cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLmxhYmVsT24gPT0gJ3JpZ2h0JyB8fCBjb25maWcubGFiZWxPbiA9PSAnYm90aCcpe1xuICAgICAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJtb2RlbExhYmVsUmlnaHRcIikgLy8gVE9ETzogbm8gaGFyZC1jb2RlZCB2YWx1ZVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMueFNjYWxlLnJhbmdlKClbMV0gKyA1MClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleG9uWSArIDcuNSlcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjlweFwiKVxuICAgICAgICAgICAgLnRleHQodGhpcy5nZW5lLnRyYW5zY3JpcHRJZD09PXVuZGVmaW5lZD9gJHt0aGlzLmdlbmUuZ2VuZVN5bWJvbH1gOnRoaXMuZ2VuZS50cmFuc2NyaXB0SWQpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRYc2NhbGUodyl7XG4gICAgICAgIC8vIGNvbmNlcHQgZXhwbGFpbmVkOlxuICAgICAgICAvLyBhc3N1bWluZyB0aGUgY2FudmFzIHdpZHRoIGlzIGZpeGVkXG4gICAgICAgIC8vIHRoZSB0YXNrIGlzIGhvdyB0byByZW5kZXIgYWxsIGV4b25zICsgZml4ZWQtd2lkdGggaW50cm9ucyB3aXRoaW4gdGhlIGNhbnZhc1xuICAgICAgICAvLyBmaXJzdCBmaW5kIHRoZSBsYXJnZXN0IGV4b24sXG4gICAgICAgIC8vIHRoZW4gc2V0IHRoZSB4IHNjYWxlIG9mIHRoZSBjYW52YXMgdG8gYWNjb21tb2RhdGUgbWF4KGV4b24gbGVuZ3RoKSpleG9uIGNvdW50cyxcbiAgICAgICAgLy8gdGhpcyBlbnN1cmVzIHRoYXQgdGhlcmUncyBhbHdheXMgc3BhY2UgZm9yIHJlbmRlcmluZyBpbnRyb25zXG4gICAgICAgIC8vIHRoZSBmaXhlZCBpbnRyb24gd2lkdGggaXMgY2FsY3VsYXRlZCBhcyBzdWNoOlxuICAgICAgICAvLyAoKG1heChleG9uIGxlbmd0aCkgKiBleG9uIGNvdW50cykgLSB0b3RhbCBleG9uIGxlbmd0aCkvKGV4b24gY291bnRzIC0gMSlcblxuICAgICAgICB0aGlzLmV4b25zLnNvcnQoKGEsYik9PntcbiAgICAgICAgICAgIGlmIChOdW1iZXIoYS5jaHJvbVN0YXJ0KSA8IE51bWJlcihiLmNocm9tU3RhcnQpKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoTnVtYmVyKGEuY2hyb21TdGFydCkgPiBOdW1iZXIoYi5jaHJvbVN0YXJ0KSkgcmV0dXJuIDE7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgIHRoaXMuZXhvbnMuZm9yRWFjaCgoZCwgaSk9PntcbiAgICAgICAgICAgIGQubGVuZ3RoID0gTnVtYmVyKGQuY2hyb21FbmQpIC0gTnVtYmVyKGQuY2hyb21TdGFydCkgKyAxO1xuICAgICAgICAgICAgaWYgKGkgPT0gMCl7XG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGV4b25cbiAgICAgICAgICAgICAgICBzdW0gKz0gZC5sZW5ndGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBuYiA9IHRoaXMuZXhvbnNbaS0xXTsgLy8gdGhlIHVwc3RyZWFtIG5laWdoYm9yIGV4b25cbiAgICAgICAgICAgICAgICBkLmludHJvbkxlbmd0aCA9IE51bWJlcihkLmNocm9tU3RhcnQpIC0gTnVtYmVyKG5iLmNocm9tRW5kKSArIDE7XG4gICAgICAgICAgICAgICAgc3VtICs9IGQubGVuZ3RoICsgKGQuaW50cm9uTGVuZ3RoPnRoaXMubWF4SW50cm9uTGVuZ3RoP3RoaXMubWF4SW50cm9uTGVuZ3RoOmQuaW50cm9uTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZG9tYWluID0gWzAsIHN1bV07XG4gICAgICAgIGNvbnN0IHJhbmdlID0gWzAsIHddO1xuICAgICAgICB0aGlzLnhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAgICAgLnJhbmdlKHJhbmdlKTtcbiAgICB9XG5cbiAgICBzZXRYc2NhbGVGaXhJbnRyb24odyl7XG4gICAgICAgIC8vIGNvbmNlcHQgZXhwbGFpbmVkOlxuICAgICAgICAvLyBhc3N1bWluZyB0aGUgY2FudmFzIHdpZHRoIGlzIGZpeGVkXG4gICAgICAgIC8vIHRoZSB0YXNrIGlzIGhvdyB0byByZW5kZXIgYWxsIGV4b25zICsgZml4ZWQtd2lkdGggaW50cm9ucyB3aXRoaW4gdGhlIGNhbnZhc1xuICAgICAgICAvLyBmaXJzdCBmaW5kIHRoZSBsYXJnZXN0IGV4b24sXG4gICAgICAgIC8vIHRoZW4gc2V0IHRoZSB4IHNjYWxlIG9mIHRoZSBjYW52YXMgdG8gYWNjb21tb2RhdGUgbWF4KGV4b24gbGVuZ3RoKSpleG9uIGNvdW50cyxcbiAgICAgICAgLy8gdGhpcyBlbnN1cmVzIHRoYXQgdGhlcmUncyBhbHdheXMgc3BhY2UgZm9yIHJlbmRlcmluZyBpbnRyb25zXG4gICAgICAgIC8vIHRoZSBmaXhlZCBpbnRyb24gd2lkdGggaXMgY2FsY3VsYXRlZCBhcyBzdWNoOlxuICAgICAgICAvLyAoKG1heChleG9uIGxlbmd0aCkgKiBleG9uIGNvdW50cykgLSB0b3RhbCBleG9uIGxlbmd0aCkvKGV4b24gY291bnRzIC0gMSlcblxuICAgICAgICB0aGlzLmV4b25zLmZvckVhY2goKGQpID0+IHtkLmxlbmd0aCA9IE51bWJlcihkLmNocm9tRW5kKSAtIE51bWJlcihkLmNocm9tU3RhcnQpICsgMX0pO1xuICAgICAgICBjb25zdCBtYXhFeG9uTGVuZ3RoID0gbWF4KHRoaXMuZXhvbnMsIChkKT0+ZC5sZW5ndGgpO1xuXG4gICAgICAgIGNvbnN0IGRvbWFpbiA9IFswLCBtYXhFeG9uTGVuZ3RoKnRoaXMuZXhvbnMubGVuZ3RoXTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBbMCwgd107XG4gICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgICAgICAucmFuZ2UocmFuZ2UpO1xuXG4gICAgICAgIC8vIGZpeGVkIGludHJvbiB3aWR0aFxuICAgICAgICBjb25zdCBtaW5MZW5ndGggPSB0aGlzLnhTY2FsZS5pbnZlcnQodGhpcy5taW5FeG9uV2lkdGgpOyAvLyB0aGUgbWluaW11bSBleG9uIGxlbmd0aCB0aGF0IG1hcHMgdG8gbWluaW11bSBleG9uIHdpZHRoIChwaXhlbHMpIHVzaW5nIHhTY2FsZVxuICAgICAgICBjb25zdCB0b3RhbEV4b25MZW5ndGggPSBzdW0odGhpcy5leG9ucywgKGQpPT5kLmxlbmd0aD5taW5MZW5ndGg/ZC5sZW5ndGg6bWluTGVuZ3RoKTsgLy8gaWYgYW4gZXhvbiBpcyBzaG9ydGVyIHRoYW4gbWluIGxlbmd0aCwgdXNlIG1pbiBsZW5ndGhcbiAgICAgICAgdGhpcy5pbnRyb25MZW5ndGggPSAobWF4RXhvbkxlbmd0aCAqIHRoaXMuZXhvbnMubGVuZ3RoIC0gdG90YWxFeG9uTGVuZ3RoKS8odGhpcy5leG9ucy5sZW5ndGgtMSk7IC8vIGNhbHVjbGF0ZSB0aGUgZml4ZWQgaW50cm9uIGxlbmd0aFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBhIGdpdmVuIHBvc2l0aW9uLCBmaW5kIHRoZSBleG9uXG4gICAgICogQHBhcmFtIHBvcyB7SW50ZWdlcn06IGEgZ2Vub21pYyBwb3NpdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZpbmRFeG9uKHBvcyl7XG4gICAgICAgIHBvcyA9IE51bWJlcihwb3MpO1xuICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5leG9ucy5maWx0ZXIoKGQpID0+IHtyZXR1cm4gTnVtYmVyKGQuY2hyb21TdGFydCkgLSAxIDw9IHBvcyAmJiBOdW1iZXIoZC5jaHJvbUVuZCkgKyAxID49IHBvc30pO1xuICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPT0gMSkgcmV0dXJuIHJlc3VsdHNbMF07XG4gICAgICAgIGVsc2UgaWYocmVzdWx0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gZXhvbiBmb3VuZCBmb3I6IFwiICsgcG9zKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJNb3JlIHRoYW4gb25lIGV4b25zIGZvdW5kIGZvcjogXCIgKyBwb3MpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgwqkgMjAxNSAtIDIwMTggVGhlIEJyb2FkIEluc3RpdHV0ZSwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vYnJvYWRpbnN0aXR1dGUvZ3RleC12aXovYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcbiAqL1xuLypcblRoaXMgY2xhc3MgaXMgYSB2aWV3ZXIgb2YgdHJhbnNjcmlwdGlvbmFsIGlzb2Zvcm1zLCBlYWNoIGlzIHJlbmRlciBhcyBhIHRyYWNrXG4gKi9cblxuaW1wb3J0IEdlbmVNb2RlbCBmcm9tIFwiLi9HZW5lTW9kZWxcIjtcbmltcG9ydCB7c2VsZWN0LCBzZWxlY3RBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2NhbGVCYW5kfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCB7YXhpc1RvcCwgYXhpc1JpZ2h0fSBmcm9tIFwiZDMtYXhpc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJc29mb3JtVHJhY2tWaWV3ZXIge1xuICAgIGNvbnN0cnVjdG9yKGlzb2Zvcm1zLCBpc29mb3JtRXhvbnMsIG1vZGVsRXhvbnMsIGNvbmZpZyl7XG4gICAgICAgIHRoaXMuaXNvZm9ybXMgPSBpc29mb3JtcztcbiAgICAgICAgdGhpcy5pc29mb3JtRXhvbnMgPSBpc29mb3JtRXhvbnM7XG4gICAgICAgIHRoaXMubW9kZWxFeG9ucyA9IG1vZGVsRXhvbnM7XG4gICAgICAgIHRoaXMudmlzdWFsRG9tID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5udWxsQ29sb3IgPSBcIiNERERERERcIjtcbiAgICB9XG5cbiAgICBzaG93RGF0YShkYXRhLCBjb2xvclNjYWxlLCBiYXJTY2FsZSwgZGF0YUxhYmVsLCBzb3J0PXRydWUpe1xuXG4gICAgICAgIGlmIChzb3J0KXtcbiAgICAgICAgICAgIGRhdGEuc29ydCgoYSxiKT0+e3JldHVybiAtKGEub3JpZ2luYWxWYWx1ZSAtIGIub3JpZ2luYWxWYWx1ZSl9KTsgLy8gZmlyc3Qgc29ydCB0aGUgZXhwcmVzc2lvbiBkYXRhXG4gICAgICAgICAgICBjb25zdCBpZHMgPSBkYXRhLm1hcCgoZCk9PmQudHJhbnNjcmlwdElkKTtcbiAgICAgICAgICAgIHRoaXMuc29ydFRyYWNrcyhpZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAgICAgY29uc3QgaXNvZm9ybSA9IHRoaXMudmlzdWFsRG9tLnNlbGVjdChgIyR7ZC50cmFuc2NyaXB0SWQucmVwbGFjZShcIi5cIiwgXCJfXCIpfWApO1xuICAgICAgICAgICAgaXNvZm9ybS5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBkLnZhbHVlPT0wP3RoaXMubnVsbENvbG9yOmNvbG9yU2NhbGUoZC52YWx1ZSkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlbmRlciB0aGUgbG9sbGlwb3AgZ3JhcGhcbiAgICAgICAgdGhpcy52aXN1YWxEb20uc2VsZWN0KFwiLmxvbGxpcG9wR3JhcGhcIikucmVtb3ZlKCk7XG4gICAgICAgIGNvbnN0IGxvbGxpcG9wR3JhcGggPSB0aGlzLnZpc3VhbERvbS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuY2xhc3NlZChcImxvbGxpcG9wR3JhcGhcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoLTEwMCwgMTMpYCk7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlc1xuXG4gICAgICAgIGNvbnN0IGxvbGxpcG9wcyA9IGxvbGxpcG9wR3JhcGguc2VsZWN0QWxsKFwiLmxvbGxpcG9wXCIpXG4gICAgICAgICAgICAuZGF0YShkYXRhKTtcblxuICAgICAgICBjb25zdCBnID0gbG9sbGlwb3BzLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuY2xhc3NlZChcImxvbGxpcG9wXCIsIHRydWUpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCk9PnRoaXMueVNjYWxlKGQudHJhbnNjcmlwdElkKSlcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpPT50aGlzLnlTY2FsZShkLnRyYW5zY3JpcHRJZCkpXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgKGQpPT5kLnZhbHVlPT0wP3RoaXMubnVsbENvbG9yOmNvbG9yU2NhbGUoZC52YWx1ZSkpXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgMilcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbigxMDAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCAoZCk9PmQudmFsdWU9PTA/MDpiYXJTY2FsZShkLnZhbHVlKSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpPT50aGlzLnlTY2FsZShkLnRyYW5zY3JpcHRJZCkgKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDUpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKT0+ZC52YWx1ZT09MD90aGlzLm51bGxDb2xvcjpjb2xvclNjYWxlKGQudmFsdWUpKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKDEwMDApXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKT0+YmFyU2NhbGUoZC52YWx1ZSkpO1xuXG4gICAgICAgIC8vIGFkZCB0aGUgYXhlc1xuICAgICAgICBsb2xsaXBvcEdyYXBoLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsb2xsaXBvcC1heGlzXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsLSR7dGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMn0pYClcbiAgICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgICAgIGF4aXNUb3AoYmFyU2NhbGUpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrcygzKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBsb2xsaXBvcEdyYXBoLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJsb2xsaUxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtNDApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIDkpXG4gICAgICAgICAgICAudGV4dChcImxvZzEwKFRQTSlcIik7IC8vIFRPRE86IHRoaXMgc2hvdWxkIGJlIGEgdXNlci1kZWZpbmVkIHRleHRcblxuICAgICAgICBsb2xsaXBvcEdyYXBoLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsb2xsaXBvcC1heGlzXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsLSR7dGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMn0pYClcbiAgICAgICAgICAgIC5jYWxsKFxuICAgICAgICAgICAgICAgIGF4aXNSaWdodCh0aGlzLnlTY2FsZSlcbiAgICAgICAgICAgICAgICAgIC50aWNrVmFsdWVzKFtdKSAvLyBzaG93IG5vIHRpY2tzXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIC8vIGRhdGEgbGFiZWxcbiAgICAgICAgbG9sbGlwb3BHcmFwaC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIFwibG9sbGlMYWJlbFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDEwKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0yMClcblxuICAgICAgICAgICAgLnRleHQoYElzb2Zvcm0gRXhwcmVzc2lvbiBpbiAke2RhdGFMYWJlbH1gKVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMTJweFwiKTtcblxuXG4gICAgfVxuXG4gICAgc29ydFRyYWNrcyh5bGlzdCl7XG4gICAgICAgIHRoaXMuc2V0WXNjYWxlKHRoaXMuY29uZmlnLmgsIHlsaXN0KTtcbiAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHJlZHJhdz1mYWxzZSwgZG9tPXVuZGVmaW5lZCwgbGFiZWxPbj0nbGVmdCcsIGR1cmF0aW9uPTEwMDApe1xuICAgICAgICBpZiAoZG9tID09PSB1bmRlZmluZWQgJiYgdGhpcy52aXN1YWxEb20gPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJGYXRhbCBFcnJvcjogbXVzdCBwcm92aWRlIGEgZG9tIGVsZW1lbnRcIjtcbiAgICAgICAgaWYgKGRvbSA9PT0gdW5kZWZpbmVkKSBkb20gPSB0aGlzLnZpc3VhbERvbTtcbiAgICAgICAgZWxzZSB0aGlzLnZpc3VhbERvbSA9IGRvbTtcblxuICAgICAgICBpZih0aGlzLnlTY2FsZT09PXVuZGVmaW5lZCkgdGhpcy5zZXRZc2NhbGUodGhpcy5jb25maWcuaCk7XG5cbiAgICAgICAgY29uc3QgaXNvVHJhY2tzID0gZG9tLnNlbGVjdEFsbChcIi5pc290cmFja1wiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5pc29mb3Jtcy5tYXAoKGQpPT5kLnRyYW5zY3JpcHRJZCkpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBvbGQgaXNvZm9ybSB0cmFja3MsIGlmIGFueVxuICAgICAgICBpc29UcmFja3MudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCk9PnsgcmV0dXJuIGB0cmFuc2xhdGUoMCwgJHt0aGlzLnlTY2FsZShkKX0pYH0pO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBuZXcgdHJhY2tzXG4gICAgICAgIGlzb1RyYWNrcy5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCAoZCk9PihkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKSkpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaXNvdHJhY2tcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKT0+eyByZXR1cm4gYHRyYW5zbGF0ZSgwLCAwKWB9KVxuXG4gICAgICAgICAgICAvLyAubWVyZ2UoaXNvVHJhY2tzKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uLzIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCk9PnsgcmV0dXJuIGB0cmFuc2xhdGUoMCwgJHt0aGlzLnlTY2FsZShkKX0pYH0pO1xuXG4gICAgICAgIGlmIChyZWRyYXcpIHJldHVybjtcblxuICAgICAgICB0aGlzLl9yZW5kZXJNb2RlbHModGhpcy5jb25maWcudywgbGFiZWxPbik7XG5cbiAgICB9XG5cbiAgICBfcmVuZGVyTW9kZWxzKHcsIGxhYmVsT24gPSAnbGVmdCcpe1xuICAgICAgICB0aGlzLmlzb2Zvcm1zLmZvckVhY2goKGlzb2Zvcm0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IEdlbmVNb2RlbChpc29mb3JtLCB0aGlzLm1vZGVsRXhvbnMsIHRoaXMuaXNvZm9ybUV4b25zW2lzb2Zvcm0udHJhbnNjcmlwdElkXSwgW10sIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgaXNvZm9ybUcgPSBzZWxlY3QoYCMke2lzb2Zvcm0udHJhbnNjcmlwdElkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKX1gKTtcbiAgICAgICAgICAgIG1vZGVsLnJlbmRlcihpc29mb3JtRywge3c6dywgaDogdGhpcy55U2NhbGUuYmFuZHdpZHRoKCksIGxhYmVsT246IGxhYmVsT259KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBzZXRZc2NhbGUoaCwgeWxpc3Q9dW5kZWZpbmVkKXtcbiAgICAgICAgaWYgKHlsaXN0ID09PSB1bmRlZmluZWQpIHlsaXN0ID0gdGhpcy5pc29mb3Jtcy5tYXAoKGQpPT5kLnRyYW5zY3JpcHRJZCk7XG4gICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgIC5kb21haW4oeWxpc3QpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGhdKVxuICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTtcbiAgICB9XG5cbn0iLCIvKipcbiAqIENvcHlyaWdodCDCqSAyMDE1IC0gMjAxOCBUaGUgQnJvYWQgSW5zdGl0dXRlLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm9hZGluc3RpdHV0ZS9ndGV4LXZpei9ibG9iL21hc3Rlci9MSUNFTlNFLm1kKVxuICovXG5cInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtqc29ufSBmcm9tIFwiZDMtZmV0Y2hcIjtcbmltcG9ydCB7c2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHttaW4sIG1heH0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmltcG9ydCB7Z2V0R3RleFVybHMsXG4gICAgICAgIHBhcnNlVGlzc3VlcyxcbiAgICAgICAgcGFyc2VNb2RlbEV4b25zLFxuICAgICAgICBwYXJzZUp1bmN0aW9ucyxcbiAgICAgICAgcGFyc2VUcmFuc2NyaXB0cyxcbiAgICAgICAgcGFyc2VUcmFuc2NyaXB0RXhwcmVzc2lvblRyYW5zcG9zZSxcbiAgICAgICAgcGFyc2VFeG9ucyxcbiAgICAgICAgcGFyc2VKdW5jdGlvbkV4cHJlc3Npb24sXG4gICAgICAgIHBhcnNlRXhvbkV4cHJlc3Npb24sXG4gICAgICAgIHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25cbn0gZnJvbSBcIi4vbW9kdWxlcy9ndGV4RGF0YVBhcnNlclwiO1xuXG5pbXBvcnQge3NldENvbG9yU2NhbGUsIGRyYXdDb2xvckxlZ2VuZH0gZnJvbSBcIi4vbW9kdWxlcy9jb2xvcnNcIjtcbi8vIGltcG9ydCB7ZG93bmxvYWRTdmd9IGZyb20gXCIuL21vZHVsZXMvdXRpbHNcIjtcblxuaW1wb3J0IERlbmRyb0hlYXRtYXBDb25maWcgZnJvbSBcIi4vbW9kdWxlcy9EZW5kcm9IZWF0bWFwQ29uZmlnXCI7XG5pbXBvcnQgRGVuZHJvSGVhdG1hcCBmcm9tIFwiLi9tb2R1bGVzL0RlbmRyb0hlYXRtYXBcIjtcbmltcG9ydCBHZW5lTW9kZWwgZnJvbSBcIi4vbW9kdWxlcy9HZW5lTW9kZWxcIjtcbmltcG9ydCBJc29mb3JtVHJhY2tWaWV3ZXIgZnJvbSBcIi4vbW9kdWxlcy9Jc29mb3JtVHJhY2tWaWV3ZXJcIjtcblxuLyoqXG4gKiBSZW5kZXIgZXhwcmVzc2lvbiBoZWF0bWFwLCBnZW5lIG1vZGVsLCBhbmQgaXNvZm9ybSB0cmFja3NcbiAqIEBwYXJhbSB0eXBlIHtlbnVtfSBpc29mb3JtLCBleG9uLCBqdW5jdGlvblxuICogQHBhcmFtIGdlbmVJZCB7U3RyaW5nfSBhIGdlbmUgbmFtZSBvciBnZW5jb2RlIElEXG4gKiBAcGFyYW0gcm9vdElkIHtTdHJpbmd9IHRoZSBET00gSUQgb2YgdGhlIFNWR1xuICogQHBhcmFtIHVybHMge09iamVjdH0gb2YgdGhlIEdURXggd2ViIHNlcnZpY2UgdXJscyB3aXRoIGF0dHI6IGdlbmVJZCwgdGlzc3VlLCBnZW5lTW9kZWxVbmZpbHRlcmVkLCBnZW5lTW9kZWwsIGp1bmN0aW9uRXhwLCBleG9uRXhwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIodHlwZSwgZ2VuZUlkLCByb290SWQsIHVybHM9Z2V0R3RleFVybHMoKSl7XG4gICAganNvbih1cmxzLmdlbmVJZCArIGdlbmVJZCkgLy8gcXVlcnkgdGhlIGdlbmUgYnkgZ2VuZUlkLS1nZW5lIG5hbWUgb3IgZ2VuY29kZSBJRCB3aXRoIG9yIHdpdGhvdXQgdmVyc2lvbmluZ1xuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAvLyBnZXQgdGhlIGdlbmUgb2JqZWN0IGFuZCBpdHMgZ2VuY29kZSBJZFxuICAgICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShcImdlbmVcIikpIHRocm93IFwiUGFyc2luZyBFcnJvcjogYXR0cmlidXRlIGdlbmUgZG9lc24ndCBleGlzdC5cIjtcbiAgICAgICAgICAgICBpZiAoZGF0YS5nZW5lLmxlbmd0aD09MCl7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZCB3aXRoIFwiICsgZ2VuZUlkKTtcbiAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZSBpcyBub3QgZm91bmRcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgaWYgKGRhdGEuZ2VuZS5sZW5ndGg+MSkge1xuICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyZWQgPSBkYXRhLmdlbmUuZmlsdGVyKChnKT0+e1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT1nZW5lSWQudG9VcHBlckNhc2UoKSB8fCBnLmdlbmNvZGVJZCA9PSBnZW5lSWQudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRmF0YWwgRXJyb3I6IGlucHV0IGdlbmUgSUQgaXMgbm90IHVuaXF1ZS5cIik7XG4gICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBpbnB1dCBnZW5lIElEIGlzIG5vdCB1bmlxdWUuXCI7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgIGRhdGEuZ2VuZSA9IGZpbHRlcmVkO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGNvbnN0IGdlbmUgPSBkYXRhLmdlbmVbMF07XG4gICAgICAgICAgICAgaWYgKGdlbmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICBhbGVydChcIk5vIGdlbmUgaXMgZm91bmQgd2l0aCBcIiArIGdlbmVJZCk7XG4gICAgICAgICAgICAgICAgIHRocm93IFwiRmF0YWwgRXJyb3I6IGdlbmUgaXMgbm90IGZvdW5kXCI7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGNvbnN0IGdlbmNvZGVJZCA9IGdlbmUuZ2VuY29kZUlkO1xuXG4gICAgICAgICAgICAgLy8gYnVpbGQgdGhlIHByb21pc2VzXG4gICAgICAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgICAgICAgICAganNvbih1cmxzLnRpc3N1ZSksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLmdlbmVNb2RlbFVuZmlsdGVyZWQgKyBnZW5jb2RlSWQpLFxuICAgICAgICAgICAgICAgIGpzb24odXJscy5nZW5lTW9kZWwgKyBnZW5jb2RlSWQpLFxuICAgICAgICAgICAgICAgIGpzb24odXJscy50cmFuc2NyaXB0ICsgZ2VuY29kZUlkKSxcbiAgICAgICAgICAgICAgICBqc29uKHVybHMuanVuY3Rpb25FeHAgKyBnZW5jb2RlSWQpLFxuICAgICAgICAgICAgICAgIGpzb24odXJscy5leG9uRXhwICsgZ2VuY29kZUlkKSxcbiAgICAgICAgICAgICAgICBqc29uKHVybHMudHJhbnNjcmlwdEV4cCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLmV4b24gKyBnZW5jb2RlSWQpXG4gICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihhcmdzKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGlzc3VlcyA9IHBhcnNlVGlzc3VlcyhhcmdzWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4b25zID0gcGFyc2VNb2RlbEV4b25zKGFyZ3NbMV0pLCAvLyBleG9ucyBvZiB0aGUgZnVsbCBnZW5lIG1vZGVsXG4gICAgICAgICAgICAgICAgICAgICAgICBleG9uc0N1cmF0ZWQgPSBwYXJzZU1vZGVsRXhvbnMoYXJnc1syXSksIC8vIGV4b25zIG9mIHRoZSBjdXJhdGVkIGZpbmFsIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2Zvcm1zID0gcGFyc2VUcmFuc2NyaXB0cyhhcmdzWzNdKSwgLy8gYnkgZGVmYXVsdCwgdGhlIHBhcnNlciBzb3J0cyB0aGUgaXNvZm9ybXMgaW4gZGVzY2VuZGluZyBvcmRlciBieSBsZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2Zvcm1FeG9ucyA9IHBhcnNlRXhvbnMoYXJnc1s3XSksIC8vIGV4b25zIG9mIHRoZSBpbmRpdmlkdWFsIGlzb2Zvcm1zXG4gICAgICAgICAgICAgICAgICAgICAgICBqdW5jdGlvbnMgPSBwYXJzZUp1bmN0aW9ucyhhcmdzWzRdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGp1bmN0aW9uRXhwcmVzcyA9IHBhcnNlSnVuY3Rpb25FeHByZXNzaW9uKGFyZ3NbNF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhvbkV4cHJlc3MgPSBwYXJzZUV4b25FeHByZXNzaW9uKGFyZ3NbNV0sICBleG9uc0N1cmF0ZWQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNvZm9ybUV4cHJlc3MgPSBwYXJzZVRyYW5zY3JpcHRFeHByZXNzaW9uKGFyZ3NbNl0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGNoZWNraW5nXG4gICAgICAgICAgICAgICAgICAgIGxldCBleG9uQ29sb3JTY2FsZSwgaXNvZm9ybUNvbG9yU2NhbGUsIGp1bmN0aW9uQ29sb3JTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGp1bmN0aW9ucy5sZW5ndGggPj0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzY2VuYXJpbzE6IG5vdCBhIHNpbmdsZS1leG9uIGdlbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqdW5jdGlvbkV4cHJlc3MgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25Db2xvclNjYWxlID0gc2V0Q29sb3JTY2FsZShqdW5jdGlvbkV4cHJlc3MubWFwKGQ9PmQudmFsdWUpLCBcIlJlZHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgYWxsIHRoZSBjb2xvciBzY2FsZXNcbiAgICAgICAgICAgICAgICAgICAgZXhvbkNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGV4b25FeHByZXNzLm1hcChkPT5kLnZhbHVlKSwgXCJCbHVlc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaXNvZm9ybUNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGlzb2Zvcm1FeHByZXNzLm1hcChkPT5kLnZhbHVlKSwgXCJQdXJwbGVzXCIpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGVhdCBtYXBcbiAgICAgICAgICAgICAgICBsZXQgZG1hcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjb25zdCBpZHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3RJZCxcbiAgICAgICAgICAgICAgICAgICAgc3ZnOiBgJHtyb290SWR9LXN2Z2AsXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IFwiaXNvZm9ybVRvb2x0aXBcIixcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhcjogXCJpc29mb3JtVG9vbGJhclwiLFxuICAgICAgICAgICAgICAgICAgICBjbG9uZTogXCJpc29mb3JtQ2xvbmVcIixcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZTogXCJpc29mb3JtU2F2ZVwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIHRoZSBkb20gY29tcG9uZW50c1xuICAgICAgICAgICAgICAgIGlmKCQoYCMke2lkcy50b29sdGlwfWApLmxlbmd0aCA9PSAwKSAkKCc8ZGl2Lz4nKS5hdHRyKCdpZCcsIGlkcy50b29sdGlwKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgICAgICAgICAgICAgIFtcInRvb2xiYXJcIiwgXCJjbG9uZVwiXS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICAgICAgICAgICQoJzxkaXYvPicpLmF0dHIoXCJpZFwiLCBpZHNba2V5XSkuYXBwZW5kVG8oJChgIyR7aWRzLnJvb3R9YCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN2Z1RpdGxlID0gYCR7Z2VuZS5nZW5lU3ltYm9sfTogJHtnZW5lLmdlbmNvZGVJZH0gJHtnZW5lLmRlc2NyaXB0aW9ufWA7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSAkKGAjJHtyb290SWR9YCkuaW5uZXJXaWR0aCgpfHx3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlzb2Zvcm1UcmFuc3Bvc2VkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRtYXBDb25maWcgPSBuZXcgRGVuZHJvSGVhdG1hcENvbmZpZyh3aWR0aCwgMTUwLCAxMDAsIHt0b3A6IDYwLCByaWdodDogMzUwLCBib3R0b206IDIwMCwgbGVmdDogNTB9LCAxMiwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogbW92ZSBjbHVzdGVyIGRhdGEgcGFyc2luZyB0byBndGV4RGF0YVBhcnNlci5qc1xuICAgICAgICAgICAgICAgICAgICAgICAgWyd0aXNzdWUnLCAndHJhbnNjcmlwdCddLmZvckVhY2goKGspPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWFyZ3NbNl0uY2x1c3RlcnMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihhcmdzWzZdLmNsdXN0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3coJ1BhcnNlIEVycm9yOiBSZXF1aXJlZCBjbHVzdGVyIGF0dHJpYnV0ZSBpcyBtaXNzaW5nOiAnICsgayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlzc3VlVHJlZSA9IGFyZ3NbNl0uY2x1c3RlcnMudGlzc3VlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzb2Zvcm1UcmVlID0gYXJnc1s2XS5jbHVzdGVycy50cmFuc2NyaXB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzb2Zvcm1FeHByZXNzVCA9IHBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UoYXJnc1s2XSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRtYXAgPSBuZXcgRGVuZHJvSGVhdG1hcCh0aXNzdWVUcmVlLCBpc29mb3JtVHJlZSwgaXNvZm9ybUV4cHJlc3NULCBcIlB1cnBsZXNcIiwgNSwgZG1hcENvbmZpZywgdHJ1ZSwgMTAsIGBJc29mb3JtIEV4cHJlc3Npb24gb2YgJHtzdmdUaXRsZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRtYXAucmVuZGVyKGlkcy5yb290LCBpZHMuc3ZnLCB0cnVlLCB0cnVlLCB0b3AsIDUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc29mb3JtVHJlZS5zdGFydHNXaXRoKFwiTm90IGVub3VnaCBkYXRhXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmRlcnMgPSBkbWFwLm9iamVjdHMucm93VHJlZS55U2NhbGUuZG9tYWluKCk7IC8vIHRoZSBsZWFmIG9yZGVyIG9mIHRoZSBpc29mb3JtIGRlbmRyb2dyYW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc29mb3Jtcy5zb3J0KChhLCBiKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJzLmluZGV4T2YoYS50cmFuc2NyaXB0SWQpIDwgb3JkZXJzLmluZGV4T2YoYi50cmFuc2NyaXB0SWQpKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlcnMuaW5kZXhPZihhLnRyYW5zY3JpcHRJZCkgPiBvcmRlcnMuaW5kZXhPZihiLnRyYW5zY3JpcHRJZCkpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImp1bmN0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqdW5jdGlvbnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGAjJHtyb290SWR9YCkudGV4dCgnVGhpcyBnZW5lIGhhcyBubyBqdW5jdGlvbnMgYXZhaWxhYmxlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG1hcENvbmZpZyA9IG5ldyBEZW5kcm9IZWF0bWFwQ29uZmlnKHdpZHRoLCAxNTAsIDAsIHt0b3A6IDYwLCByaWdodDogMzUwLCBib3R0b206IDIwMCwgbGVmdDogNTB9LCAxMiwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpc3N1ZVRyZWUgPSBhcmdzWzRdLmNsdXN0ZXJzLnRpc3N1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRtYXAgPSBuZXcgRGVuZHJvSGVhdG1hcCh1bmRlZmluZWQsIHRpc3N1ZVRyZWUsIGp1bmN0aW9uRXhwcmVzcywgXCJSZWRzXCIsIDUsIGRtYXBDb25maWcsIHRydWUsIDEwLCBgSnVuY3Rpb24gRXhwcmVzc2lvbiBvZiAke3N2Z1RpdGxlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIGZhbHNlLCB0cnVlLCB0b3AsIDUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXhvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkbWFwQ29uZmlnID0gbmV3IERlbmRyb0hlYXRtYXBDb25maWcod2lkdGgsIDE1MCwgMCwge3RvcDogNjAsIHJpZ2h0OiAzNTAsIGJvdHRvbTogMjAwLCBsZWZ0OiA1MH0sIDEyLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlzc3VlVHJlZSA9IGFyZ3NbNV0uY2x1c3RlcnMudGlzc3VlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG1hcCA9IG5ldyBEZW5kcm9IZWF0bWFwKHVuZGVmaW5lZCwgdGlzc3VlVHJlZSwgZXhvbkV4cHJlc3MsIFwiQmx1ZXNcIiwgNSwgZG1hcENvbmZpZywgdHJ1ZSwgMiwgYEV4b24gRXhwcmVzc2lvbiBvZiAke3N2Z1RpdGxlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIGZhbHNlLCB0cnVlLCB0b3AsIDUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIklucHV0IHR5cGUgaXMgbm90IHJlY29nbml6ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKCcjc3Bpbm5lcicpLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGNvZGUgcmV2aWV3XG4gICAgICAgICAgICAgICAgLy8gdG9vbHRpcFxuICAgICAgICAgICAgICAgIGRtYXAuY3JlYXRlVG9vbHRpcChpZHMudG9vbHRpcCk7XG5cbiAgICAgICAgICAgICAgICAvLyBkZWZpbmUgdGhlIGdlbmUgbW9kZWwgYW5kIGlzb2Zvcm0gdHJhY2tzIGxheW91dCBkaW1lbnNpb25zXG4gICAgICAgICAgICAgICAgY29uc3QgeUFkanVzdCA9IHR5cGUuc3RhcnRzV2l0aCgnaXNvZm9ybScpPzYwOjgwOyAvLyB2ZXJ0aWNhbCBzcGFjZSBiZXR3ZWVuIHRoZSBoZWF0bWFwIGFuZCBnZW5lIG1vZGVsL2lzb2Zvcm0gdHJhY2tzXG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWxDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGRtYXAuY29uZmlnLnBhbmVscy5tYWluLngsXG4gICAgICAgICAgICAgICAgICAgIHk6IGRtYXAuY29uZmlnLnBhbmVscy5tYWluLmggKyBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi55ICsgeUFkanVzdCwgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIHc6IGRtYXAuY29uZmlnLnBhbmVscy5tYWluLncsXG4gICAgICAgICAgICAgICAgICAgIGg6IDEwMFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCBleG9uSCA9IDIwOyAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBpc29UcmFja1ZpZXdlckNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogbW9kZWxDb25maWcueCxcbiAgICAgICAgICAgICAgICAgICAgeTogbW9kZWxDb25maWcueSArIG1vZGVsQ29uZmlnLmgsXG4gICAgICAgICAgICAgICAgICAgIHc6IG1vZGVsQ29uZmlnLncsXG4gICAgICAgICAgICAgICAgICAgIGg6IGV4b25IKihpc29mb3Jtcy5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbE9uOiAnbGVmdCdcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5kIHRoZSBTVkcgaGVpZ2h0IHRvIGFjY29tbW9uZGF0ZSB0aGUgZ2VuZSBtb2RlbCBhbmQgaXNvZm9ybSB0cmFja3NcbiAgICAgICAgICAgICAgICBsZXQgaCA9ICtzZWxlY3QoYCMke2lkcy5zdmd9YCkuYXR0cihcImhlaWdodFwiKTsgLy8gZ2V0IHRoZSBjdXJyZW50IGhlaWdodFxuICAgICAgICAgICAgICAgIGxldCBhZGp1c3QgPSBoICsgbW9kZWxDb25maWcuaCArIGlzb1RyYWNrVmlld2VyQ29uZmlnLmg7XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlLnN0YXJ0c1dpdGgoJ2lzb2Zvcm0nKSkgYWRqdXN0ID0gYWRqdXN0IDwgMTIwMD8xMjAwOmFkanVzdDtcbiAgICAgICAgICAgICAgICBzZWxlY3QoYCMke2lkcy5zdmd9YCkuYXR0cihcImhlaWdodFwiLCBhZGp1c3QpOyAvLyBzZXQgbWluaW11bSBoZWlnaHQgdG8gMTIwMCBmb3IgY29sb3IgbGVnZW5kcyAvLyBUT0RPOiBjb2RlIHJldmlldywgcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG5cbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgdGhlIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICBjb25zdCBnZW5lTW9kZWwgPSBuZXcgR2VuZU1vZGVsKGdlbmUsIGV4b25zLCBleG9uc0N1cmF0ZWQsIGp1bmN0aW9ucyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWxHID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2Zy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJpZFwiLCBcImdlbmVNb2RlbFwiKSAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCBpZFxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bW9kZWxDb25maWcueH0sICR7bW9kZWxDb25maWcueX0pYCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlLnN0YXJ0c1dpdGgoXCJpc29mb3JtXCIpKSBnZW5lTW9kZWwucmVuZGVyKG1vZGVsRywgbW9kZWxDb25maWcpOyAvLyBnZW5lIG1vZGVsIGlzIG5vdCByZW5kZXJlZCB3aGVuIHRoZSBwYWdlIGlzIGluIGlzb2Zvcm0gdmlldyBtb2RlXG5cbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgaXNvZm9ybSB0cmFja3MsIGlnbm9yaW5nIGludHJvbiBsZW5ndGhzXG4gICAgICAgICAgICAgICAgY29uc3QgaXNvZm9ybVRyYWNrVmlld2VyID0gbmV3IElzb2Zvcm1UcmFja1ZpZXdlcihpc29mb3JtcywgaXNvZm9ybUV4b25zLCBleG9ucywgaXNvVHJhY2tWaWV3ZXJDb25maWcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrVmlld2VyRyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7aXNvVHJhY2tWaWV3ZXJDb25maWcueH0sICR7aXNvVHJhY2tWaWV3ZXJDb25maWcueX0pYCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWxPbiA9IHR5cGUuc3RhcnRzV2l0aCgnaXNvZm9ybScpPydib3RoJzonbGVmdCc7XG4gICAgICAgICAgICAgICAgaXNvZm9ybVRyYWNrVmlld2VyLnJlbmRlcihmYWxzZSwgdHJhY2tWaWV3ZXJHLCBsYWJlbE9uKTtcblxuICAgICAgICAgICAgICAgIC8vIGN1c3RvbWl6YXRpb25cbiAgICAgICAgICAgICAgICBpZighdHlwZS5zdGFydHNXaXRoKCdpc29mb3JtJykpIF9hZGRDb2xvckxlZ2VuZHNGb3JHZW5lTW9kZWwoZG1hcCwganVuY3Rpb25Db2xvclNjYWxlLCBleG9uQ29sb3JTY2FsZSk7XG4gICAgICAgICAgICAgICAgX2NyZWF0ZVRvb2xiYXIoZG1hcCwgaWRzKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlzb2Zvcm1UcmFuc3Bvc2VkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVJc29mb3JtVHJhbnNwb3NlZE1hcCh0aXNzdWVzLCBkbWFwLCBpc29mb3JtVHJhY2tWaWV3ZXIsIGp1bmN0aW9uQ29sb3JTY2FsZSwgZXhvbkNvbG9yU2NhbGUsIGlzb2Zvcm1Db2xvclNjYWxlLCBqdW5jdGlvbkV4cHJlc3MsIGV4b25FeHByZXNzLCBpc29mb3JtRXhwcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplSXNvZm9ybVRyYWNrcyhkbWFwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJqdW5jdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanVuY3Rpb25zLmxlbmd0aCA9PSAwKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVIZWF0TWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCwgaXNvZm9ybVRyYWNrVmlld2VyLCBqdW5jdGlvbkNvbG9yU2NhbGUsIGV4b25Db2xvclNjYWxlLCBpc29mb3JtQ29sb3JTY2FsZSwganVuY3Rpb25FeHByZXNzLCBleG9uRXhwcmVzcywgaXNvZm9ybUV4cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUp1bmN0aW9uTWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplR2VuZU1vZGVsKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplSXNvZm9ybVRyYWNrcyhkbWFwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImV4b25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUhlYXRNYXAodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwLCBpc29mb3JtVHJhY2tWaWV3ZXIsIGp1bmN0aW9uQ29sb3JTY2FsZSwgZXhvbkNvbG9yU2NhbGUsIGlzb2Zvcm1Db2xvclNjYWxlLCBqdW5jdGlvbkV4cHJlc3MsIGV4b25FeHByZXNzLCBpc29mb3JtRXhwcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplRXhvbk1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUdlbmVNb2RlbCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUlzb2Zvcm1UcmFja3MoZG1hcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwidW5yZWNvZ25pemVkIHR5cGVcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICQoJyNzcGlubmVyJykuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAkKCcjc3Bpbm5lcicpLmhpZGUoKTtcbiAgICAgICAgfSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgdGhlIFNWRyB0b29sYmFyXG4gKiBAcGFyYW0gZG1hcCB7RGVuZHJvSGVhdG1hcH1cbiAqIEBwYXJhbSBpZHMge0RpY3Rpb25hcnl9IG9mIERPTSBJRHMgd2l0aCBidXR0b25zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY3JlYXRlVG9vbGJhcihkbWFwLCBpZHMpe1xuICAgIGxldCB0b29sYmFyID0gZG1hcC5jcmVhdGVUb29sYmFyKGlkcy50b29sYmFyLCBkbWFwLnRvb2x0aXApO1xuICAgIHRvb2xiYXIuY3JlYXRlRG93bmxvYWRTdmdCdXR0b24oaWRzLmJ1dHRvbnMuc2F2ZSwgaWRzLnN2ZywgYCR7aWRzLnJvb3R9LXNhdmUuc3ZnYCwgaWRzLmNsb25lKTtcbn1cblxuLyoqXG4gKiBjdXN0b21pemluZyB0aGUgaGVhdG1hcFxuICogZGVwZW5kZW5jaWVzOiBDU1MgY2xhc3NlcyBmcm9tIGV4cHJlc3NNYXAuY3NzLCBqdW5jdGlvbk1hcC5jc3NcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiBHVEV4IHRpc3N1ZSBvYmplY3RzIHdpdGggYXR0cjogY29sb3JIZXgsIHRpc3N1ZVNpdGVEZXRhaWxJZCwgdGlzc3VlU2l0ZURldGFpbFxuICogQHBhcmFtIGdlbmVNb2RlbCB7R2VuZU1vZGVsfSBvZiB0aGUgY29sbGFwc2VkIGdlbmUgbW9kZWxcbiAqIEBwYXJhbSBkbWFwIHtPYmplY3R9IG9mIERlbmRyb0hlYXRtYXBcbiAqIEBwYXJhbSBpc29UcmFja1ZpZXdlciB7SXNvZm9ybVRyYWNrVmlld2VyfVxuICogQHBhcmFtIGp1bmN0aW9uU2NhbGVcbiAqIEBwYXJhbSBleG9uU2NhbGVcbiAqIEBwYXJhbSBpc29mb3JtU2NhbGVcbiAqIEBwYXJhbSBqdW5jdGlvbkRhdGEge0xpc3R9IG9mIGp1bmN0aW9uIGV4cHJlc3Npb24gZGF0YSBvYmplY3RzXG4gKiBAcGFyYW0gZXhvbkRhdGEge0xpc3R9IG9mIGV4b24gZXhwcmVzc2lvbiBkYXRhIG9iamVjdHNcbiAqIEBwYXJhbSBpc29mb3JtRGF0YSB7TGlzdH0gb2YgaXNvZm9ybSBleHByZXNzaW9uIGRhdGEgb2JqZWN0c1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2N1c3RvbWl6ZUhlYXRNYXAodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwLCBpc29UcmFja1ZpZXdlciwganVuY3Rpb25TY2FsZSwgZXhvblNjYWxlLCBpc29mb3JtU2NhbGUsIGp1bmN0aW9uRGF0YSwgZXhvbkRhdGEsIGlzb2Zvcm1EYXRhKXtcbiAgICBjb25zdCBtYXBTdmcgPSBkbWFwLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuXG4gICAgLy8gcmVwbGFjZSB0aXNzdWUgSUQgd2l0aCB0aXNzdWUgc2l0ZSBkZXRhaWxcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpXG4gICAgICAgIC50ZXh0KChkKT0+dGlzc3VlRGljdFtkXSE9PXVuZGVmaW5lZD90aXNzdWVEaWN0W2RdLnRpc3N1ZVNpdGVEZXRhaWw6ZClcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgICAgICAuYXR0cihcInhcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLnJhbmdlKClbMV0gKyAxNSk7IC8vIG1ha2Ugcm9vbSBmb3IgdGlzc3VlIGNvbG9yIGJveGVzXG5cbiAgICAvLyBhZGQgdGlzc3VlIGJhbmRzXG4gICAgbWFwU3ZnLnNlbGVjdChcIiNoZWF0bWFwXCIpLnNlbGVjdEFsbChcIi5leHAtbWFwLXljb2xvclwiKVxuICAgICAgICAuZGF0YShkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUuZG9tYWluKCkpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgIC5hdHRyKFwieVwiLCAoZCk9PmRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA1KVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5jbGFzc2VkKFwiZXhwLW1hcC15Y29sb3JcIiwgdHJ1ZSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCk9PmAjJHt0aXNzdWVEaWN0W2RdLmNvbG9ySGV4fWApO1xuXG4gICAgaWYgKGRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZS5kb21haW4oKS5sZW5ndGggPiAxNSkge1xuICAgICAgICAvLyBBZGQgYW4gZXh0cmEgdGlzc3VlIGNvbG9yIGJhbmQgaWYgdGhlIG51bWJlciBvZiBjb2x1bW5zIGFyZSBsYXJnZXIgdGhhbiAxNVxuICAgICAgICBtYXBTdmcuc2VsZWN0KFwiI2hlYXRtYXBcIikuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIilcbiAgICAgICAgICAgIC5kYXRhKGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5kb21haW4oKSlcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZS5yYW5nZSgpWzBdIC0gNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlKGQpKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsZWFmLWNvbG9yXCIsIHRydWUpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiBgIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcbiAgICB9XG5cbiAgICAvLyBkZWZpbmUgdGlzc3VlIGxhYmVsIG1vdXNlIGV2ZW50c1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpLmNsYXNzZWQoXCJjbGlja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZSA9IGQ7XG4gICAgICAgICAgICBsZXQgajtcbiAgICAgICAgICAgIGlmIChqdW5jdGlvbkRhdGEgIT09IHVuZGVmaW5lZCkgaiA9IGp1bmN0aW9uRGF0YS5maWx0ZXIoKGopPT5qLnRpc3N1ZVNpdGVEZXRhaWxJZD09dGlzc3VlKTsgLy8ganVuY3Rpb24gZGF0YVxuICAgICAgICAgICAgY29uc3QgZXggPSBleG9uRGF0YS5maWx0ZXIoKGUpPT4gZS50aXNzdWVTaXRlRGV0YWlsSWQ9PXRpc3N1ZSk7IC8vIGV4b24gZGF0YVxuICAgICAgICAgICAgLy8gZ2VuZU1vZGVsLmNoYW5nZVRleHRsYWJlbChtYXBTdmcuc2VsZWN0KFwiI2dlbmVNb2RlbFwiKSwgdGlzc3VlRGljdFt0aXNzdWVdLnRpc3N1ZVNpdGVEZXRhaWwpO1xuICAgICAgICAgICAgZ2VuZU1vZGVsLmFkZERhdGEobWFwU3ZnLnNlbGVjdChcIiNnZW5lTW9kZWxcIiksIGosIGV4LCBqdW5jdGlvblNjYWxlLCBleG9uU2NhbGUpO1xuXG4gICAgICAgICAgICAvLyBpc29mb3JtcyB1cGRhdGVcbiAgICAgICAgICAgIGNvbnN0IGlzb0JhclNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5kb21haW4oW21pbihpc29mb3JtRGF0YS5tYXAoZD0+ZC52YWx1ZSkpLCBtYXgoaXNvZm9ybURhdGEubWFwKGQ9PmQudmFsdWUpKV0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCAtMTAwXSk7XG4gICAgICAgICAgICBjb25zdCBpc29EYXRhID0gaXNvZm9ybURhdGEuZmlsdGVyKChpc28pPT5pc28udGlzc3VlU2l0ZURldGFpbElkPT10aXNzdWUpO1xuICAgICAgICAgICAgaXNvVHJhY2tWaWV3ZXIuc2hvd0RhdGEoaXNvRGF0YSwgaXNvZm9ybVNjYWxlLCBpc29CYXJTY2FsZSwgdGlzc3VlRGljdFt0aXNzdWVdLnRpc3N1ZVNpdGVEZXRhaWwpO1xuICAgICAgICB9KTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHRpc3N1ZXMge0xpc3R9IG9mIHRoZSBHVEV4IHRpc3N1ZSBvYmplY3RzIHdpdGggYXR0cjogdGlzc3VlU2l0ZURldGFpbFxuICogQHBhcmFtIGRtYXAge09iamVjdH0gb2YgRGVuZHJvSGVhdG1hcFxuICogQHBhcmFtIGlzb1RyYWNrVmlld2VyIHtJc29UcmFja1ZpZXdlcn1cbiAqIEBwYXJhbSBqdW5jdGlvblNjYWxlXG4gKiBAcGFyYW0gZXhvblNjYWxlXG4gKiBAcGFyYW0gaXNvZm9ybVNjYWxlXG4gKiBAcGFyYW0ganVuY3Rpb25EYXRhIHtMaXN0fSBvZiBqdW5jdGlvbiBleHByZXNzaW9uIGRhdGEgb2JqZWN0c1xuICogQHBhcmFtIGV4b25EYXRhIHtMaXN0fSBvZiBleG9uIGV4cHJlc3Npb24gZGF0YSBvYmplY3RzXG4gKiBAcGFyYW0gaXNvZm9ybURhdGEge0xpc3R9IG9mIGlzb2Zvcm0gZXhwcmVzc2lvbiBkYXRhIG9iamVjdHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jdXN0b21pemVJc29mb3JtVHJhbnNwb3NlZE1hcCh0aXNzdWVzLCBkbWFwLCBpc29UcmFja1ZpZXdlciwganVuY3Rpb25TY2FsZSwgZXhvblNjYWxlLCBpc29mb3JtU2NhbGUsIGp1bmN0aW9uRGF0YSwgZXhvbkRhdGEsIGlzb2Zvcm1EYXRhKXtcbiAgICBjb25zdCBtYXBTdmcgPSBkbWFwLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuICAgIGNvbnN0IHRvb2x0aXAgPSBkbWFwLnRvb2x0aXA7XG5cbiAgICAvL3JlcGxhY2UgdGlzc3VlIHNpdGUgZGV0YWlsIElEIHdpdGggdGlzc3VlIHNpdGUgZGV0YWlsXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKVxuICAgICAgICAudGV4dCgoZCk9PnRpc3N1ZURpY3RbZF0hPT11bmRlZmluZWQ/dGlzc3VlRGljdFtkXS50aXNzdWVTaXRlRGV0YWlsOmQpXG4gICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcInBvaW50ZXJcIik7XG5cbiAgICAvLyBhZGQgdGlzc3VlIGJhbmRzXG4gICAgbWFwU3ZnLnNlbGVjdChcIiNoZWF0bWFwXCIpLnNlbGVjdEFsbChcIi5leHAtbWFwLXhjb2xvclwiKVxuICAgICAgICAuZGF0YShkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuZG9tYWluKCkpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCAoZCk9PmRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5yYW5nZSgpWzFdICsgNSlcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDUpXG4gICAgICAgIC5jbGFzc2VkKFwiZXhwLW1hcC14Y29sb3JcIiwgdHJ1ZSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCk9PmAjJHt0aXNzdWVEaWN0W2RdLmNvbG9ySGV4fWApO1xuXG4gICAgaWYgKGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5kb21haW4oKS5sZW5ndGggPiAxNSl7XG4gICAgICAgIC8vIHdoZW4gdGhlcmUgYXJlIG1vcmUgdGhhbiAxNSBpc29mb3JtcywgYWRkIGFub3RoZXIgdGlzc3VlIGNvbG9yIGJhbmRzIHVuZGVyIHRoZSBkZW5kcm9ncmFtJ3MgbGVhZiBub2Rlc1xuICAgICAgICAgbWFwU3ZnLnNlbGVjdChcIiNoZWF0bWFwXCIpLnNlbGVjdEFsbChcIi5sZWFmLWNvbG9yXCIpXG4gICAgICAgICAgICAuZGF0YShkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuZG9tYWluKCkpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCk9PmRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZShkKSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUucmFuZ2UoKVswXSAtIDEwKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCA1KVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsZWFmLWNvbG9yXCIsIHRydWUpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKT0+YCMke3Rpc3N1ZURpY3RbZF0uY29sb3JIZXh9YCk7XG4gICAgfVxuXG5cbiAgICAvLyBkZWZpbmUgdGlzc3VlIGxhYmVsIG1vdXNlIGV2ZW50c1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpLmNsYXNzZWQoXCJjbGlja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZSA9IGQ7XG4gICAgICAgICAgICBsZXQgajtcbiAgICAgICAgICAgIGlmIChqdW5jdGlvbkRhdGEgIT09IHVuZGVmaW5lZCkgaiA9IGp1bmN0aW9uRGF0YS5maWx0ZXIoKGopPT5qLnRpc3N1ZVNpdGVEZXRhaWxJZD09dGlzc3VlKTsgLy8ganVuY3Rpb24gZGF0YVxuICAgICAgICAgICAgY29uc3QgZXggPSBleG9uRGF0YS5maWx0ZXIoKGUpPT5lLnRpc3N1ZVNpdGVEZXRhaWxJZD09dGlzc3VlKTsgLy8gZXhvbiBkYXRhXG5cbiAgICAgICAgICAgIC8vIGlzb2Zvcm1zIHVwZGF0ZVxuXG4gICAgICAgICAgICBjb25zdCBpc29CYXJTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKFttaW4oaXNvZm9ybURhdGEubWFwKGQ9PmQudmFsdWUpKSwgbWF4KGlzb2Zvcm1EYXRhLm1hcChkPT5kLnZhbHVlKSldKVxuICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgLTEwMF0pO1xuICAgICAgICAgICAgY29uc3QgaXNvRGF0YSA9IGlzb2Zvcm1EYXRhLmZpbHRlcigoaXNvKT0+aXNvLnRpc3N1ZVNpdGVEZXRhaWxJZD09dGlzc3VlKTtcbiAgICAgICAgICAgIGNvbnN0IHNvcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlzb1RyYWNrVmlld2VyLnNob3dEYXRhKGlzb0RhdGEsIGlzb2Zvcm1TY2FsZSwgaXNvQmFyU2NhbGUsIHRpc3N1ZURpY3RbdGlzc3VlXS50aXNzdWVTaXRlRGV0YWlsLCBzb3J0KTtcbiAgICAgICAgfSk7XG5cblxuXG4gICAgLy8gZGVmaW5lIHRoZSBpc29mb3JtIGhlYXRtYXAgY2VsbHMnIG1vdXNlIGV2ZW50c1xuICAgIC8vIG5vdGU6IHRvIHJlZmVyZW5jZSB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGZ1bmN0aW9uIChlLmcuIGQzLnNlbGVjdCh0aGlzKSkgaGVyZSB3ZSBtdXN0IHVzZSBhIG5vcm1hbCBhbm9ueW1vdXMgZnVuY3Rpb24uXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLWNlbGxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBzZWxlY3QodGhpcyk7IC8vICd0aGlzJyByZWZlcnMgdG8gdGhlIGQzIERPTSBvYmplY3RcbiAgICAgICAgICAgIGRtYXAub2JqZWN0cy5oZWF0bWFwLmNlbGxNb3VzZW92ZXIoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgY29uc3QgdGlzc3VlID0gdGlzc3VlRGljdFtkLnhdID09PSB1bmRlZmluZWQ/ZC54OnRpc3N1ZURpY3RbZC54XS50aXNzdWVTaXRlRGV0YWlsOyAvLyBnZXQgdGlzc3VlIG5hbWUgb3IgSURcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdChkLm9yaWdpbmFsVmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbigzKTtcbiAgICAgICAgICAgIHRvb2x0aXAuc2hvdyhgVGlzc3VlOiAke3Rpc3N1ZX08YnIvPiBJc29mb3JtOiAke2QuaWR9PGJyLz4gJHtkLnVuaXR9OiAke3ZhbHVlPT0wPydOQSc6dmFsdWV9YClcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiKlwiKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgIC8vIGlzb2Zvcm0gbGFiZWxzXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBoaWdobGlnaHQgdGhlIGlzb2Zvcm0gdHJhY2tcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZC5yZXBsYWNlKFwiLlwiLCBcIl9cIik7IC8vIGRvdCBpcyBub3QgYW4gYWxsb3dhYmxlIGNoYXJhY3Rlciwgc28gaXQgaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBhbiB1bmRlcnNjb3JlXG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0KGAjJHtpZH1gKS5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTsgLy8gVE9ETzogcGVyaGFwcyBjaGFuZ2UgdGhlIGNsYXNzIG5hbWU/XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0KGAjJHtpZH1gKS5zZWxlY3RBbGwoXCIuaW50cm9uXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuaW50cm9uXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbiAoXCJjbGlja1wiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gbm8gYWN0aW9uIGltcGxlbWVudGVkXG4gICAgICAgIH0pO1xuXG59XG5cbi8qKlxuICogY3VzdG9taXppbmcgdGhlIGV4b24gaGVhdCBtYXBcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiB0aGUgR1RFeCB0aXNzdWUgb2JqZWN0cyB3aXRoIGF0dHI6IHRpc3N1ZVNpdGVEZXRhaWxcbiAqIEBwYXJhbSBnZW5lTW9kZWwge0dlbmVNb2RlbH1cbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY3VzdG9taXplRXhvbk1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApe1xuICAgIGNvbnN0IG1hcFN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgY29uc3QgdG9vbHRpcCA9IGRtYXAudG9vbHRpcDtcbiAgICBjb25zdCB0aXNzdWVEaWN0ID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVTaXRlRGV0YWlsSWRdID0gZDsgcmV0dXJuIGFycjt9LHt9KTtcblxuICAgIC8vIGRlZmluZSB0aGUgZXhvbiBoZWF0bWFwIGNlbGxzJyBtb3VzZSBldmVudHNcbiAgICAvLyBub3RlOiB0byByZWZlcmVuY2UgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBmdW5jdGlvbiAoZS5nLiBkMy5zZWxlY3QodGhpcykpIGhlcmUgd2UgbXVzdCB1c2UgYSBub3JtYWwgYW5vbnltb3VzIGZ1bmN0aW9uLlxuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC1jZWxsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpOyAvLyAndGhpcycgcmVmZXJzIHRvIHRoZSBkMyBET00gb2JqZWN0XG4gICAgICAgICAgICBkbWFwLm9iamVjdHMuaGVhdG1hcC5jZWxsTW91c2VvdmVyKHNlbGVjdGVkKTtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZSA9IHRpc3N1ZURpY3RbZC55XSA9PT0gdW5kZWZpbmVkP2QueDp0aXNzdWVEaWN0W2QueV0udGlzc3VlU2l0ZURldGFpbDsgLy8gZ2V0IHRpc3N1ZSBuYW1lIG9yIElEXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQoZC5vcmlnaW5hbFZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyk7XG4gICAgICAgICAgICB0b29sdGlwLnNob3coYFRpc3N1ZTogJHt0aXNzdWV9PGJyLz4gRXhvbjogJHtkLmV4b25JZH08YnIvPiAke2QuY2hyb21TdGFydH0gLSAke2QuY2hyb21FbmR9ICgke051bWJlcihkLmNocm9tRW5kKS1OdW1iZXIoZC5jaHJvbVN0YXJ0KSArIDF9YnApIDxici8+JHtkLnVuaXR9OiAke3ZhbHVlPT0wPydOQSc6dmFsdWV9YClcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiKlwiKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgIC8vIGV4b24gbGFiZWxzXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKVxuICAgICAgICAuZWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIC8vIHNpbXBsaWZpZWQgdGhlIGV4b24gbGFiZWxcbiAgICAgICAgICAgIGNvbnN0IGV4b25OdW1iZXIgPSBkLnNwbGl0KFwiX1wiKVsxXTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS50ZXh0KGBFeG9uICR7ZXhvbk51bWJlcn1gKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBleG9uIG9uIHRoZSBnZW5lIG1vZGVsXG4gICAgICAgICAgICBjb25zdCBleG9uTnVtYmVyID0gZC5zcGxpdChcIl9cIilbMV07XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKGAuZXhvbi1jdXJhdGVkJHtleG9uTnVtYmVyfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbn1cblxuLyoqXG4gKiBjdXN0b21pemluZyB0aGUganVuY3Rpb24gaGVhdCBtYXBcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiB0aGUgR1RFeCB0aXNzdWUgb2JqZWN0cyB3aXRoIGF0dHI6IHRpc3N1ZVNpdGVEZXRhaWxcbiAqIEBwYXJhbSBnZW5lTW9kZWwge0dlbmVNb2RlbH1cbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2N1c3RvbWl6ZUp1bmN0aW9uTWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuXG4gICAgLy8gZGVmaW5lIHRoZSBqdW5jdGlvbiBoZWF0bWFwIGNlbGxzJyBtb3VzZSBldmVudHNcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTtcbiAgICAgICAgICAgIGRtYXAub2JqZWN0cy5oZWF0bWFwLmNlbGxNb3VzZW92ZXIoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgY29uc3QgdGlzc3VlID0gdGlzc3VlRGljdFtkLnldID09PSB1bmRlZmluZWQ/ZC54OnRpc3N1ZURpY3RbZC55XS50aXNzdWVTaXRlRGV0YWlsOyAvLyBnZXQgdGlzc3VlIG5hbWUgb3IgSURcbiAgICAgICAgICAgIGNvbnN0IGp1bmMgPSBnZW5lTW9kZWwuanVuY3Rpb25zLmZpbHRlcigoaik9PmouanVuY3Rpb25JZCA9PSBkLnggJiYgIWouZmlsdGVyZWQpWzBdOyAvLyBnZXQgdGhlIGp1bmN0aW9uIGRpc3BsYXkgbmFtZVxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KGQub3JpZ2luYWxWYWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDMpO1xuICAgICAgICAgICAgdG9vbHRpcC5zaG93KGBUaXNzdWU6ICR7dGlzc3VlfTxici8+IEp1bmN0aW9uOiAke2p1bmMuZGlzcGxheU5hbWV9ICgke051bWJlcihqdW5jLmNocm9tRW5kKSAtIE51bWJlcihqdW5jLmNocm9tU3RhcnQpfSBicCk8YnIvPiAke2QudW5pdH06ICR7dmFsdWU9PTA/J05BJzp2YWx1ZX1gKVxuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIqXCIpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgdG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgIC8vIGp1bmN0aW9uIGxhYmVsc1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGFkZCBqdW5jdGlvbiBJRCBhcyB0aGUgZG9tIGlkXG4gICAgICAgICAgICBjb25zdCB4bGFiZWwgPSBzZWxlY3QodGhpcyk7XG4gICAgICAgICAgICBjb25zdCBqSWQgPSB4bGFiZWwudGV4dCgpO1xuICAgICAgICAgICAgeGxhYmVsLmF0dHIoXCJpZFwiLCBgJHtqSWR9YCk7XG4gICAgICAgICAgICB4bGFiZWwuY2xhc3NlZChganVuYyR7aklkfWAsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBhbmQgdGhlbiBjaGFuZ2UgdGhlIHRleHQgdG8gc3RhcnRFeG9uLWVuZEV4b24gZm9ybWF0XG4gICAgICAgICAgICBjb25zdCBqdW5jID0gZ2VuZU1vZGVsLmp1bmN0aW9ucy5maWx0ZXIoKGQpPT5kLmp1bmN0aW9uSWQgPT0gYCR7aklkfWAgJiYgIWQuZmlsdGVyZWQpWzBdO1xuICAgICAgICAgICAgaWYgKGp1bmMgIT09IHVuZGVmaW5lZCkgeGxhYmVsLnRleHQoanVuYy5kaXNwbGF5TmFtZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY29uc3QgaklkID0gc2VsZWN0KHRoaXMpLmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIGhpZ2hsaWdodCB0aGUganVuY3Rpb24gYW5kIGl0cyBleG9ucyBvbiB0aGUgZ2VuZSBtb2RlbFxuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChgLmp1bmMke2pJZH1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBqdW5jID0gZ2VuZU1vZGVsLmp1bmN0aW9ucy5maWx0ZXIoKGQpPT5kLmp1bmN0aW9uSWQgPT0gaklkICYmICFkLmZpbHRlcmVkKVswXTtcbiAgICAgICAgICAgIGlmIChqdW5jICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKGAuZXhvbiR7anVuYy5zdGFydEV4b24uZXhvbk51bWJlcn1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChgLmV4b24ke2p1bmMuZW5kRXhvbi5leG9uTnVtYmVyfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgc2VsZWN0QWxsKFwiLmp1bmNcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGVjdEFsbChcIi5qdW5jLWN1cnZlXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4b25cIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfSk7XG5cblxufVxuXG5mdW5jdGlvbiBfY3VzdG9taXplR2VuZU1vZGVsKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuICAgIGNvbnN0IG1vZGVsID0gbWFwU3ZnLnNlbGVjdCgnI2dlbmVNb2RlbCcpO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZVNpdGVEZXRhaWxJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuICAgIC8vIG1vdXNlIGV2ZW50cyBvbiB0aGUgZ2VuZSBtb2RlbFxuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuanVuY1wiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBzZWxlY3RBbGwoYC5qdW5jJHtkLmp1bmN0aW9uSWR9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgdG9vbHRpcC5zaG93KGAke2QuZGlzcGxheU5hbWV9PGJyLz5KdW5jdGlvbiAke2QuanVuY3Rpb25JZH0gKCR7TnVtYmVyKGQuY2hyb21FbmQpIC0gTnVtYmVyKGQuY2hyb21TdGFydCkgKyAxfSBicClgKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGQpO1xuXG4gICAgICAgICAgICBpZiAoZC5zdGFydEV4b24gIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgbW9kZWwuc2VsZWN0QWxsKFwiLmV4b25cIikuZmlsdGVyKGAuZXhvbiR7ZC5zdGFydEV4b24uZXhvbk51bWJlcn1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbW9kZWwuc2VsZWN0QWxsKFwiLmV4b25cIikuZmlsdGVyKGAuZXhvbiR7ZC5lbmRFeG9uLmV4b25OdW1iZXJ9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbiB0aGUganVuY3Rpb24gaGVhdCBtYXAsIGxhYmVsIHRoZSB4bGFiZWxcbiAgICAgICAgICAgIG1vZGVsLnNlbGVjdChgLmp1bmMke2QuanVuY3Rpb25JZH1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcIm5vcm1hbFwiLCBmYWxzZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0QWxsKGAuanVuYyR7ZC5qdW5jdGlvbklkfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBtb2RlbC5zZWxlY3RBbGwoXCIuZXhvblwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbW9kZWwuc2VsZWN0QWxsKFwiLnhMYWJlbFwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJub3JtYWxcIiwgdHJ1ZSk7XG4gICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgbW9kZWwuc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKVxuICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHRvb2x0aXAuc2hvdyhgRXhvbiAke2QuZXhvbk51bWJlcn06ICR7ZC5jaHJvbVN0YXJ0fSAtICR7ZC5jaHJvbUVuZH0gKCR7ZC5jaHJvbUVuZC1kLmNocm9tU3RhcnQrMX0gYnApYClcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIF9jdXN0b21pemVJc29mb3JtVHJhY2tzKGRtYXApe1xuICAgIGNvbnN0IG1hcFN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgY29uc3QgdG9vbHRpcCA9IGRtYXAudG9vbHRpcDtcblxuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuaXNvdHJhY2tcIikuc2VsZWN0QWxsKCcuZXhvbi1jdXJhdGVkJylcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIHRvb2x0aXAuc2hvdyhgRXhvbiAke2Qub3JpRXhvbi5leG9uTnVtYmVyfTogJHtkLmNocm9tU3RhcnR9IC0gJHtkLmNocm9tRW5kfSAoJHtOdW1iZXIoZC5jaHJvbUVuZCkgLSBOdW1iZXIoZC5jaHJvbVN0YXJ0KSArIDF9IGJwKWApO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgdG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH0pXG59XG5cbmZ1bmN0aW9uIF9hZGRDb2xvckxlZ2VuZHNGb3JHZW5lTW9kZWwoZG1hcCwganVuY3Rpb25TY2FsZSwgZXhvblNjYWxlKXtcbiAgICBjb25zdCBtYXBTdmcgPSBkbWFwLnZpc3VhbENvbXBvbmVudHMuc3ZnO1xuICAgIGxldCBYID0gZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLnJhbmdlKClbMV0gKyA1MDtcbiAgICBjb25zdCBZID0gMzA7XG4gICAgY29uc3QgaW5jID0gNTA7XG4gICAgZHJhd0NvbG9yTGVnZW5kKFwiRXhvbiByZWFkIGNvdW50cyBwZXIgYmFzZVwiLCBtYXBTdmcuc2VsZWN0KFwiI2dlbmVNb2RlbFwiKSwgZXhvblNjYWxlLCB7eDogWCwgeTpZfSwgdHJ1ZSwgNSwgMiwge2g6MjAsIHc6MTB9LCAndicpO1xuXG4gICAgWCA9IFggKyBpbmM7XG4gICAgaWYgKGp1bmN0aW9uU2NhbGUgIT09IHVuZGVmaW5lZCkgZHJhd0NvbG9yTGVnZW5kKFwiSnVuY3Rpb24gcmVhZCBjb3VudHNcIiwgbWFwU3ZnLnNlbGVjdChcIiNnZW5lTW9kZWxcIiksIGp1bmN0aW9uU2NhbGUsIHt4OiBYLCB5Oll9LCB0cnVlLCA1LCAxMCwge2g6MjAsIHc6MTB9LCAndicpO1xuXG59XG4iXSwibmFtZXMiOlsieGh0bWwiLCJzdmciLCJ4bGluayIsInhtbCIsInhtbG5zIiwibmFtZSIsInByZWZpeCIsImkiLCJpbmRleE9mIiwic2xpY2UiLCJuYW1lc3BhY2VzIiwiaGFzT3duUHJvcGVydHkiLCJzcGFjZSIsImxvY2FsIiwiZnVsbG5hbWUiLCJuYW1lc3BhY2UiLCJ0aGlzIiwib3duZXJEb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImRvY3VtZW50IiwidXJpIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5vbmUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJlbXB0eSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImVsZW1lbnQiLCJ2ZW5kb3JNYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwiY2FsbCIsInVwZGF0ZSIsIkFycmF5IiwibGVuZ3RoIiwiRW50ZXJOb2RlIiwicGFyZW50IiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJrZXlQcmVmaXgiLCJiaW5kSW5kZXgiLCJncm91cCIsImVudGVyIiwiZXhpdCIsImRhdGEiLCJub2RlIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJhc2NlbmRpbmciLCJhIiwiYiIsIk5hTiIsImRlZmF1bHRWaWV3Iiwic3R5bGVWYWx1ZSIsInN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJjbGFzc0FycmF5Iiwic3RyaW5nIiwidHJpbSIsInNwbGl0IiwiY2xhc3NMaXN0IiwiQ2xhc3NMaXN0IiwiX25vZGUiLCJfbmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VkQWRkIiwibmFtZXMiLCJsaXN0IiwibiIsImFkZCIsImNsYXNzZWRSZW1vdmUiLCJyZW1vdmUiLCJwdXNoIiwic2V0QXR0cmlidXRlIiwiam9pbiIsInNwbGljZSIsImNvbnRhaW5zIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImZpbHRlckV2ZW50cyIsImV2ZW50IiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJvbiIsIl9fb24iLCJvIiwiaiIsIm0iLCJ0eXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsInZhbHVlIiwid3JhcCIsImQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsInBhcmFtcyIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwic2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJtYXRjaCIsInNpemUiLCJlYWNoIiwieCIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsIm1hcCIsInNwYXJzZSIsIm1lcmdlIiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm0xIiwiTWF0aCIsIm1pbiIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsIm9yZGVyIiwic29ydCIsImNvbXBhcmUiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJjYWxsYmFjayIsImFyZ3VtZW50cyIsImFwcGx5Iiwibm9kZXMiLCJhdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsInYiLCJzZXRBdHRyaWJ1dGVOUyIsInByaW9yaXR5IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsInByb3BlcnR5IiwiY2xhc3NlZCIsInRleHQiLCJodG1sIiwiYXBwZW5kIiwiY3JlYXRlIiwiY3JlYXRvciIsImluc2VydCIsImJlZm9yZSIsImNsb25lIiwiZGVlcCIsInQiLCJ0eXBlbmFtZXMiLCJwYXJzZVR5cGVuYW1lcyIsImRpc3BhdGNoIiwiRU9MIiwiRU9GIiwiUVVPVEUiLCJORVdMSU5FIiwiUkVUVVJOIiwib2JqZWN0Q29udmVydGVyIiwiY29sdW1ucyIsIkZ1bmN0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiUmVnRXhwIiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsInBhcnNlUm93cyIsImYiLCJyb3dzIiwiTiIsIkkiLCJlb2YiLCJlb2wiLCJ0b2tlbiIsImMiLCJyZXBsYWNlIiwicm93IiwiZm9ybWF0Um93IiwiZm9ybWF0VmFsdWUiLCJ0ZXN0IiwicGFyc2UiLCJjb252ZXJ0Iiwib2JqZWN0IiwiY3VzdG9tQ29udmVydGVyIiwiZm9ybWF0IiwiY29sdW1uU2V0IiwiT2JqZWN0IiwiZm9yRWFjaCIsImNvbHVtbiIsImluZmVyQ29sdW1ucyIsImNvbmNhdCIsImZvcm1hdFJvd3MiLCJkc3YiLCJyZXNwb25zZUpzb24iLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwianNvbiIsImlucHV0IiwiaW5pdCIsImZldGNoIiwidGhlbiIsImJpc2VjdFJpZ2h0IiwibGVmdCIsImxvIiwiaGkiLCJtaWQiLCJyaWdodCIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJtYXgiLCJjZWlsIiwicmFuZ2UiLCJlMTAiLCJzcXJ0IiwiZTUiLCJlMiIsImNvdW50IiwicmV2ZXJzZSIsInRpY2tzIiwidGlja0luY3JlbWVudCIsImlzRmluaXRlIiwiZmxvb3IiLCJwb3dlciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInBvdyIsInZhbHVlcyIsInZhbHVlb2YiLCJzdW0iLCJNYXAiLCJzZXQiLCJpc0FycmF5IiwiaGFzIiwiZ2V0IiwiY2xlYXIiLCJrZXlzIiwiZW50cmllcyIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwic29ydEtleXMiLCJhcnJheSIsImRlcHRoIiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0IiwidmFsdWVzQnlLZXkiLCJyZXN1bHQiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJzb3J0S2V5IiwiayIsImltcGxpY2l0IiwiYmFuZCIsImJhbmR3aWR0aCIsInNjYWxlIiwib3JkaW5hbCIsImRvbWFpbiIsInVua25vd24iLCJfIiwiY29weSIsInVuZGVmaW5lZCIsIm9yZGluYWxSYW5nZSIsInJvdW5kIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ091dGVyIiwiYWxpZ24iLCJyZXNjYWxlIiwic2VxdWVuY2UiLCJyYW5nZVJvdW5kIiwicGFkZGluZyIsImZhY3RvcnkiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleDMiLCJyZUhleDYiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3IiLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJSZ2IiLCJwYXJzZUludCIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsInIiLCJnIiwicmdiQ29udmVydCIsInJnYiIsIm9wYWNpdHkiLCJoZXgiLCJ0b1N0cmluZyIsImgiLCJzIiwibCIsIkhzbCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImRpc3BsYXlhYmxlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJpc05hTiIsImhzbENvbnZlcnQiLCJkZWcycmFkIiwiUEkiLCJyYWQyZGVnIiwiWG4iLCJZbiIsIlpuIiwidDAiLCJ0MSIsInQyIiwidDMiLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwiY29zIiwic2luIiwieiIsInJnYjJscmdiIiwieSIsInh5ejJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJhdGFuMiIsImhjbENvbnZlcnQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeCIsIkN1YmVoZWxpeCIsImJsIiwiY3ViZWhlbGl4Q29udmVydCIsImJhc2lzIiwidjAiLCJ2MSIsInYyIiwidjMiLCJjb3NoIiwic2luaCIsImxpbmVhciIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29uc3RhbnQiLCJyZ2JHYW1tYSIsImVuZCIsImNvbG9yUmdiIiwicmdiU3BsaW5lIiwic3BsaW5lIiwiY29sb3JzIiwicmdiQmFzaXMiLCJyZUEiLCJyZUIiLCJzb3VyY2UiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiYW0iLCJibSIsImJzIiwiYmkiLCJsYXN0SW5kZXgiLCJxIiwibnVtYmVyIiwib25lIiwiemVybyIsIkRhdGUiLCJzZXRUaW1lIiwibmIiLCJuYSIsInZhbHVlT2YiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJodWUiLCJjdWJlaGVsaXhHYW1tYSIsImNvbG9yQ3ViZWhlbGl4IiwiY3ViZWhlbGl4JDEiLCJjdWJlaGVsaXhMb25nIiwidW5pdCIsImRlaW50ZXJwb2xhdGVMaW5lYXIiLCJiaW1hcCIsImRlaW50ZXJwb2xhdGUiLCJyZWludGVycG9sYXRlIiwiZDAiLCJkMSIsInIwIiwicjEiLCJwb2x5bWFwIiwiYmlzZWN0IiwicCIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJhYnMiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsInByZWZpeEV4cG9uZW50IiwibG9jYWxlIiwiZm9ybWF0UHJlZml4Iiwib3V0IiwiZXhwb25lbnQiLCIlIiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsIlgiLCJ0b1VwcGVyQ2FzZSIsInByZWZpeGVzIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJzdWJzdHJpbmciLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm5ld0Zvcm1hdCIsImZvcm1hdFR5cGVzIiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJmb3JtYXRUcmltIiwiSW5maW5pdHkiLCJmb3JtYXRMb2NhbGUiLCJzdGVwMCIsInN0ZXAxIiwidGlja1N0ZXAiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInByZWNpc2lvbkZpeGVkIiwibGluZWFyaXNoIiwidGlja0Zvcm1hdCIsIm5pY2UiLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnRlcnBvbGF0ZSIsImludGVycG9sYXRlVmFsdWUiLCJjbGFtcCIsImRlaW50ZXJwb2xhdGVDbGFtcCIsImludmVydCIsInJlaW50ZXJwb2xhdGVDbGFtcCIsImludGVycG9sYXRlUm91bmQiLCJjb250aW51b3VzIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJpbnRlcnZhbCIsImRhdGUiLCJvZmZzZXQiLCJldmVyeSIsIm1pbGxpc2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJkYXkiLCJnZXRVVENTZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0SG91cnMiLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwid2Vla2RheSIsImdldERheSIsInN1bmRheSIsIm1vbmRheSIsInRodXJzZGF5IiwieWVhciIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwic2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwidXRjV2Vla2RheSIsImdldFVUQ0RheSIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1RodXJzZGF5IiwidXRjWWVhciIsInNldFVUQ01vbnRoIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJTIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdZZWFyIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJwYWRzIiwiLSIsIjAiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInBhZCIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInciLCJwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkiLCJ1IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwiVSIsInBhcnNlV2Vla051bWJlcklTTyIsIlYiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJXIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWWVhciIsInBhcnNlWm9uZSIsIloiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZUhvdXIyNCIsInBhcnNlTWludXRlcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlTWlsbGlzZWNvbmRzIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFyc2VVbml4VGltZXN0YW1wIiwiUSIsInBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwidGltZURheSIsInRpbWVZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0U2Vjb25kcyIsImdldFNlY29uZHMiLCJmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsInRpbWVTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwidGltZVRodXJzZGF5IiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJ0aW1lTW9uZGF5IiwiZm9ybWF0WWVhciIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJ0aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsIlkiLCJ1dGNGb3JtYXRzIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJjaGFyQXQiLCJuZXdQYXJzZSIsIm5ld0RhdGUiLCJ3ZWVrIiwiZGVmYXVsdExvY2FsZSIsInRvSVNPU3RyaW5nIiwicGFyc2VNb2RlbEV4b25zIiwiY29uc29sZSIsImNocm9tU3RhcnQiLCJjaHJvbUVuZCIsInNjaGVtZSIsImludGVycG9sYXRlUmdiQmFzaXMiLCJyYW1wIiwiaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nIiwicmFtcCQxIiwic2V0Q29sb3JTY2FsZSIsImRtaW4iLCJkbWF4Iiwic2VxdWVudGlhbCIsImludGVycG9sYXRvciIsIngwIiwieDEiLCJrMTAiLCJzY2FsZVNlcXVlbnRpYWwiLCJpbnRlcnBvbGF0b3JzIiwiQnVHbiIsImQzQ2hyb21hdGljLmludGVycG9sYXRlQnVHbiIsIk9yUmQiLCJkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yUmQiLCJQdUJ1IiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdUJ1IiwiWWxHbkJ1IiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVZbEduQnUiLCJCbHVlcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlQmx1ZXMiLCJPcmFuZ2VzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPcmFuZ2VzIiwiR3JlZW5zIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmVlbnMiLCJQdXJwbGVzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdXJwbGVzIiwiUmVkcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUmVkcyIsIkdyZXlzIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5cyIsIkdyYXlzIiwiZXJyIiwiZ2V0Q29sb3JJbnRlcnBvbGF0b3IiLCJkcmF3Q29sb3JMZWdlbmQiLCJ0aXRsZSIsImRvbSIsImNvbmZpZyIsInVzZUxvZyIsImJhc2UiLCJjZWxsIiwib3JpZW50YXRpb24iLCJEZW5kcm9IZWF0bWFwQ29uZmlnIiwiW29iamVjdCBPYmplY3RdIiwicm9vdFciLCJpbm5lcldpZHRoIiwibGVmdFBhbmVsVyIsInRvcFBhbmVsSCIsIm1hcmdpbiIsInRvcCIsImJvdHRvbSIsImNlbGxIIiwiYWRqdXN0IiwibGVmdFRyZWVQYW5lbCIsImlkIiwidG9wVHJlZVBhbmVsIiwiaGVhdG1hcFBhbmVsIiwibGVnZW5kUGFuZWwiLCJwYW5lbHMiLCJtYWluIiwibGVnZW5kIiwiY2hpbGRyZW4iLCJoaWVyYXJjaHkiLCJjaGlsZHMiLCJOb2RlIiwidmFsdWVkIiwiZGVmYXVsdENoaWxkcmVuIiwiZWFjaEJlZm9yZSIsImNvbXB1dGVIZWlnaHQiLCJjb3B5RGF0YSIsImhlaWdodCIsImVhY2hBZnRlciIsImN1cnJlbnQiLCJwYXRoIiwiYW5jZXN0b3IiLCJhTm9kZXMiLCJhbmNlc3RvcnMiLCJiTm9kZXMiLCJsZWFzdENvbW1vbkFuY2VzdG9yIiwiZGVzY2VuZGFudHMiLCJsZWF2ZXMiLCJsaW5rcyIsInRhcmdldCIsImVwc2lsb24iLCJlbnRlcmluZyIsIl9fYXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrQXJndW1lbnRzIiwidGlja1ZhbHVlcyIsInRpY2tTaXplSW5uZXIiLCJ0aWNrU2l6ZU91dGVyIiwidGlja1BhZGRpbmciLCJjb250ZXh0Iiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInBvc2l0aW9uIiwidGljayIsInRpY2tFeGl0IiwidGlja0VudGVyIiwibGluZSIsInRyYW5zaXRpb24iLCJ0aWNrU2l6ZSIsInZlcmJvc2UiLCJEZW5kcm9ncmFtIiwibmV3aWNrIiwicG9zdG9yZGVyIiwidHJlZSIsInRva2VucyIsInN1YnRyZWUiLCJicmFuY2hzZXQiLCJwYXJzZUZsb2F0IiwicGFyc2VOZXdpY2siLCJ4U2NhbGUiLCJ5U2NhbGUiLCJfc2V0WFNjYWxlIiwiX3NldFlTY2FsZSIsIl9kcmF3SFRyZWUiLCJfZHJhd1ZUcmVlIiwic2V0WSIsInJlZHVjZSIsInNldFgiLCJfZ2V0QnJhbmNoTGVuZ3RoVG9Sb290IiwiX3NvcnROb2Rlc0J5TGV2ZWwiLCJpbm9kZXMiLCJkMyIsIl9hc3NpZ25Qb3N0b3JkZXIiLCJzY2FsZUxpbmVhciIsIl9nZXRNYXhCcmFuY2hMZW5ndGgiLCJzY2FsZUJhbmQiLCJub29wIiwiRGlzcGF0Y2giLCJ0eXBlcyIsIlQiLCJ0aGF0IiwiYXJncyIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJmcmFtZSIsInRpbWVvdXQiLCJwb2tlRGVsYXkiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzZXRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJyZXN0YXJ0Iiwid2FrZSIsInRpbWVyRmx1c2giLCJzbGVlcCIsIm5hcCIsInBva2UiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJUeXBlRXJyb3IiLCJlbGFwc2VkIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJDUkVBVEVEIiwiU0NIRURVTEVEIiwiU1RBUlRJTkciLCJTVEFSVEVEIiwiUlVOTklORyIsIkVORElORyIsIkVOREVEIiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhdGUiLCJkdXJhdGlvbiIsImVhc2UiLCJzY2hlZHVsZSIsInR3ZWVuVmFsdWUiLCJfaWQiLCJpbnRlcnBvbGF0ZU51bWJlciIsImludGVycG9sYXRlUmdiIiwiaW50ZXJwb2xhdGVTdHJpbmciLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJpbmhlcml0IiwiaWQwIiwiaWQxIiwib24wIiwib24xIiwic2l0Iiwib25GdW5jdGlvbiIsImF0dHJUd2VlbiIsInZhbHVlMDAiLCJ2YWx1ZTEwIiwiaW50ZXJwb2xhdGUwIiwidmFsdWUwIiwidmFsdWUxIiwiX3ZhbHVlIiwic3R5bGVUd2VlbiIsInN0eWxlUmVtb3ZlIiwic3R5bGVSZW1vdmVFbmQiLCJzdHlsZUZ1bmN0aW9uIiwic3R5bGVDb25zdGFudCIsInRleHRGdW5jdGlvbiIsInRleHRDb25zdGFudCIsInR3ZWVuMCIsInR3ZWVuMSIsImVhc2VDb25zdGFudCIsImRlZmF1bHRUaW1pbmciLCJpbnRlcnJ1cHQiLCJhY3RpdmUiLCJUb29sYmFyIiwiZG9tSWQiLCJ0b29sdGlwIiwidmVydGljYWwiLCIkIiwic2hvdyIsImJ0bkNsYXNzZXMiLCJiYXIiLCJhZGRDbGFzcyIsImFwcGVuZFRvIiwiYnV0dG9ucyIsInN2Z0lkIiwib3V0ZmlsZU5hbWUiLCJjbG9uZUlkIiwiaWNvbiIsImNyZWF0ZUJ1dHRvbiIsImRvd25sb2FkU3ZnIiwiaGlkZSIsIiRidXR0b24iLCJmaWxlTmFtZSIsInN2Z09iaiIsIiRzdmdDb3B5Iiwic3R5bGVzIiwidXNlZCIsInNoZWV0cyIsInN0eWxlU2hlZXRzIiwiY3NzUnVsZXMiLCJydWxlcyIsInJ1bGUiLCJlbGVtcyIsImZpbmQiLCJzZWxlY3RvclRleHQiLCJjc3NUZXh0IiwicGFyc2VDc3NTdHlsZXMiLCJwcmVwZW5kIiwic3ZnSHRtbCIsInN2Z0Jsb2IiLCJCbG9iIiwic2F2ZUFzIiwiVG9vbHRpcCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaW5mbyIsImVkaXQiLCJtb3ZlIiwicGFnZVgiLCJwYWdlWSIsIkhlYXRtYXAiLCJjb2xvclNjaGVtZSIsIm51bGxDb2xvciIsImNvbG9yU2NhbGUiLCJ4TGlzdCIsInlMaXN0IiwidG9vbGJhciIsImxlZ2VuZENvbmZpZyIsImRpbWVuc2lvbnMiLCJhbmdsZSIsIl9zZXRYTGlzdCIsIl9zZXRZTGlzdCIsImRyYXciLCJ1c2VOdWxsQ29sb3IiLCJ4TGFiZWxzIiwiYWxlcnQiLCJjZWxscyIsInNlbGVjdGVkIiwiY2VsbE1vdXNlb3ZlciIsImNlbGxNb3VzZW91dCIsIm9yaWdpbmFsVmFsdWUiLCJyb3dDbGFzcyIsImNvbENsYXNzIiwibmV3TGlzdCIsIkRlbmRyb0hlYXRtYXAiLCJjb2x1bW5UcmVlIiwicm93VHJlZSIsImhlYXRtYXBEYXRhIiwic3RhcnRzV2l0aCIsImhlYXRtYXAiLCJleHRlcm5hbCIsIm9iamVjdHMiLCJ2aXN1YWxDb21wb25lbnRzIiwic2hvd0NvbHVtblRyZWUiLCJzaG93Um93VHJlZSIsImxlZ2VuZFBvcyIsIl91cGRhdGVDb25maWciLCJjcmVhdGVTdmciLCJ4bGlzdCIsInlsaXN0IiwiX3JlbmRlclRyZWUiLCJfcmVuZGVySGVhdG1hcCIsImRpcmVjdGlvbiIsImxhYmVsQ2xhc3MiLCJpZHMiLCJsYWJlbCIsImluY2x1ZGVzIiwicmVkcmF3IiwicGkiLCJ0YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsIm1vdmVUbyIsImNsb3NlUGF0aCIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsImwwMSIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsImN3IiwiZGEiLCJyZWN0IiwiTGluZWFyIiwiX2NvbnRleHQiLCJhcmVhU3RhcnQiLCJfbGluZSIsImFyZWFFbmQiLCJsaW5lU3RhcnQiLCJfcG9pbnQiLCJsaW5lRW5kIiwicG9pbnQiLCJwb2ludFgiLCJwb2ludFkiLCJkZWZpbmVkIiwiY3VydmUiLCJjdXJ2ZUxpbmVhciIsImJ1ZmZlciIsImRlZmluZWQwIiwiX2siLCJfeDIiLCJfeTIiLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjdXN0b20iLCJjYXJkaW5hbCIsInNsb3BlMyIsImgwIiwiaDEiLCJzMCIsInMxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiUmVmbGVjdENvbnRleHQiLCJfdDAiLCJHZW5lTW9kZWwiLCJnZW5lIiwiZXhvbnMiLCJleG9uc0N1cmF0ZWQiLCJqdW5jdGlvbnMiLCJpc0lzb2Zvcm0iLCJtYXhJbnRyb25MZW5ndGgiLCJtaW5FeG9uV2lkdGgiLCJzdHJhbmQiLCJOdW1iZXIiLCJleG9uTnVtYmVyIiwianVuY3Rpb25JZCIsImludHJvbkxlbmd0aCIsImpkYXRhIiwiZWRhdGEiLCJqc2NhbGUiLCJlc2NhbGUiLCJqY29sb3IiLCJleG9uSWQiLCJzZXRYc2NhbGUiLCJleG9uWSIsIm9yaUV4b24iLCJfZmluZEV4b24iLCJkaXN0Iiwid2FybiIsInRyYW5zY3JpcHRJZCIsInN0YXJ0RXhvbiIsImVuZEV4b24iLCJkaXNwbGF5TmFtZSIsImRpc3QyIiwic3RhcnRYIiwiZW5kWCIsImN4IiwiY3kiLCJjb3VudHMiLCJyYW5kb20iLCJjdXJ2ZUNhcmRpbmFsIiwianVuY0RvdHMiLCJleG9uUmVjdHMiLCJleG9uUmVjdHMyIiwibGFiZWxPbiIsImdlbmVTeW1ib2wiLCJtYXhFeG9uTGVuZ3RoIiwibWluTGVuZ3RoIiwidG90YWxFeG9uTGVuZ3RoIiwicG9zIiwicmVzdWx0cyIsIklzb2Zvcm1UcmFja1ZpZXdlciIsImlzb2Zvcm1zIiwiaXNvZm9ybUV4b25zIiwibW9kZWxFeG9ucyIsInZpc3VhbERvbSIsImJhclNjYWxlIiwiZGF0YUxhYmVsIiwic29ydFRyYWNrcyIsImxvbGxpcG9wR3JhcGgiLCJheGlzUmlnaHQiLCJzZXRZc2NhbGUiLCJyZW5kZXIiLCJpc29UcmFja3MiLCJfcmVuZGVyTW9kZWxzIiwiaXNvZm9ybSIsIm1vZGVsIiwiaXNvZm9ybUciLCJfY3VzdG9taXplSGVhdE1hcCIsInRpc3N1ZXMiLCJnZW5lTW9kZWwiLCJkbWFwIiwiaXNvVHJhY2tWaWV3ZXIiLCJqdW5jdGlvblNjYWxlIiwiZXhvblNjYWxlIiwiaXNvZm9ybVNjYWxlIiwianVuY3Rpb25EYXRhIiwiZXhvbkRhdGEiLCJpc29mb3JtRGF0YSIsIm1hcFN2ZyIsInRpc3N1ZURpY3QiLCJhcnIiLCJ0aXNzdWVTaXRlRGV0YWlsSWQiLCJ0aXNzdWVTaXRlRGV0YWlsIiwiY29sb3JIZXgiLCJ0aXNzdWUiLCJleCIsImFkZERhdGEiLCJpc29CYXJTY2FsZSIsImlzb0RhdGEiLCJpc28iLCJzaG93RGF0YSIsIl9jdXN0b21pemVHZW5lTW9kZWwiLCJfY3VzdG9taXplSXNvZm9ybVRyYWNrcyIsImdlbmVJZCIsInJvb3RJZCIsInVybHMiLCJob3N0IiwiZHluZXF0bCIsInNucCIsInZhcmlhbnRJZCIsImV4b25FeHAiLCJ0cmFuc2NyaXB0RXhwIiwianVuY3Rpb25FeHAiLCJ0cmFuc2NyaXB0IiwiZXhvbiIsImdlbmVNb2RlbFVuZmlsdGVyZWQiLCJnZW5lRXhwIiwibWVkR2VuZUV4cCIsInRvcEluVGlzc3VlRmlsdGVyZWQiLCJ0b3BJblRpc3N1ZSIsInRpc3N1ZVNpdGVzIiwic2FtcGxlIiwicm5hc2VxQ3JhbSIsIndnc0NyYW0iLCJmY0JpbGxpbmciLCJmY1dvcmtTcGFjZSIsImZjUG9ydGFsV29ya1NwYWNlIiwiZ2V0R3RleFVybHMiLCJmaWx0ZXJlZCIsImdlbmVTeW1ib2xVcHBlciIsImdlbmNvZGVJZCIsInByb21pc2VzIiwiUHJvbWlzZSIsImFsbCIsInBhcnNlVGlzc3VlcyIsInBhcnNlVHJhbnNjcmlwdHMiLCJjaHJvbSIsImNocm9tb3NvbWUiLCJwYXJzZUV4b25zIiwicGFyc2VKdW5jdGlvbnMiLCJqdW5jdGlvbkV4cHJlc3MiLCJtZWRpYW4iLCJ0aXNzdWVJZCIsImxvZzEwIiwicGFyc2VKdW5jdGlvbkV4cHJlc3Npb24iLCJleG9uRXhwcmVzcyIsImV4b25EaWN0IiwiZXhvbk9iamVjdHMiLCJsb2cyIiwicGFyc2VFeG9uRXhwcmVzc2lvbiIsImV4b25Db2xvclNjYWxlIiwiaXNvZm9ybUNvbG9yU2NhbGUiLCJqdW5jdGlvbkNvbG9yU2NhbGUiLCJpc29mb3JtRXhwcmVzcyIsInBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb24iLCJzYXZlIiwic3ZnVGl0bGUiLCJkZXNjcmlwdGlvbiIsImRtYXBDb25maWciLCJjbHVzdGVycyIsInRpc3N1ZVRyZWUiLCJpc29mb3JtVHJlZSIsImlzb2Zvcm1FeHByZXNzVCIsInBhcnNlVHJhbnNjcmlwdEV4cHJlc3Npb25UcmFuc3Bvc2UiLCJvcmRlcnMiLCJjcmVhdGVUb29sdGlwIiwieUFkanVzdCIsIm1vZGVsQ29uZmlnIiwiaXNvVHJhY2tWaWV3ZXJDb25maWciLCJtb2RlbEciLCJpc29mb3JtVHJhY2tWaWV3ZXIiLCJ0cmFja1ZpZXdlckciLCJfYWRkQ29sb3JMZWdlbmRzRm9yR2VuZU1vZGVsIiwiY3JlYXRlVG9vbGJhciIsImNyZWF0ZURvd25sb2FkU3ZnQnV0dG9uIiwiX2NyZWF0ZVRvb2xiYXIiLCJfY3VzdG9taXplSXNvZm9ybVRyYW5zcG9zZWRNYXAiLCJqdW5jIiwieGxhYmVsIiwiaklkIiwiX2N1c3RvbWl6ZUp1bmN0aW9uTWFwIiwiX2N1c3RvbWl6ZUV4b25NYXAiLCJjYXRjaCJdLCJtYXBwaW5ncyI6IitDQUFPLElBQUlBLEVBQVEsa0NBR2pCQyxJQUFLLDZCQUNMRCxNQUFPQSxFQUNQRSxNQUFPLCtCQUNQQyxJQUFLLHVDQUNMQyxNQUFPLG1DQ0xNLFNBQVNDLEdBQ3RCLElBQUlDLEVBQVNELEdBQVEsR0FBSUUsRUFBSUQsRUFBT0UsUUFBUSxLQUU1QyxPQURJRCxHQUFLLEdBQXFDLFdBQS9CRCxFQUFTRCxFQUFLSSxNQUFNLEVBQUdGLE1BQWlCRixFQUFPQSxFQUFLSSxNQUFNRixFQUFJLElBQ3RFRyxFQUFXQyxlQUFlTCxJQUFXTSxNQUFPRixFQUFXSixHQUFTTyxNQUFPUixHQUFRQSxHQ2N4RixNQUFlLFNBQVNBLEdBQ3RCLElBQUlTLEVBQVdDLEVBQVVWLEdBQ3pCLE9BQVFTLEVBQVNELE1BUm5CLFNBQXNCQyxHQUNwQixPQUFPLFdBQ0wsT0FBT0UsS0FBS0MsY0FBY0MsZ0JBQWdCSixFQUFTRixNQUFPRSxFQUFTRCxTQVp2RSxTQUF3QlIsR0FDdEIsT0FBTyxXQUNMLElBQUljLEVBQVdILEtBQUtDLGNBQ2hCRyxFQUFNSixLQUFLSyxhQUNmLE9BQU9ELElBQVFwQixHQUFTbUIsRUFBU0csZ0JBQWdCRCxlQUFpQnJCLEVBQzVEbUIsRUFBU0ksY0FBY2xCLEdBQ3ZCYyxFQUFTRCxnQkFBZ0JFLEVBQUtmLE1BY2hCUyxJQ3ZCeEIsU0FBU1UsS0FFVCxNQUFlLFNBQVNDLEdBQ3RCLE9BQW1CLE1BQVpBLEVBQW1CRCxFQUFPLFdBQy9CLE9BQU9SLEtBQUtVLGNBQWNELEtDSjlCLFNBQVNFLElBQ1AsU0FHRixNQUFlLFNBQVNGLEdBQ3RCLE9BQW1CLE1BQVpBLEVBQW1CRSxFQUFRLFdBQ2hDLE9BQU9YLEtBQUtZLGlCQUFpQkgsS0NON0JJLEVBQVUsU0FBU0osR0FDckIsT0FBTyxXQUNMLE9BQU9ULEtBQUtjLFFBQVFMLEtBSXhCLEdBQXdCLG9CQUFiTixTQUEwQixDQUNuQyxJQUFJWSxFQUFVWixTQUFTRyxnQkFDdkIsSUFBS1MsRUFBUUQsUUFBUyxDQUNwQixJQUFJRSxFQUFnQkQsRUFBUUUsdUJBQ3JCRixFQUFRRyxtQkFDUkgsRUFBUUksb0JBQ1JKLEVBQVFLLGlCQUNmUCxFQUFVLFNBQVNKLEdBQ2pCLE9BQU8sV0FDTCxPQUFPTyxFQUFjSyxLQUFLckIsS0FBTVMsTUFNeEMsTUFBZUksSUNyQkEsU0FBU1MsR0FDdEIsT0FBTyxJQUFJQyxNQUFNRCxFQUFPRSxTQ00xQixTQUFnQkMsRUFBVUMsRUFBUUMsR0FDaEMzQixLQUFLQyxjQUFnQnlCLEVBQU96QixjQUM1QkQsS0FBS0ssYUFBZXFCLEVBQU9yQixhQUMzQkwsS0FBSzRCLE1BQVEsS0FDYjVCLEtBQUs2QixRQUFVSCxFQUNmMUIsS0FBSzhCLFNBQVdILEVBR2xCRixFQUFVTSxXQUNSQyxZQUFhUCxFQUNiUSxZQUFhLFNBQVNDLEdBQVMsT0FBT2xDLEtBQUs2QixRQUFRTSxhQUFhRCxFQUFPbEMsS0FBSzRCLFFBQzVFTyxhQUFjLFNBQVNELEVBQU9FLEdBQVEsT0FBT3BDLEtBQUs2QixRQUFRTSxhQUFhRCxFQUFPRSxJQUM5RTFCLGNBQWUsU0FBU0QsR0FBWSxPQUFPVCxLQUFLNkIsUUFBUW5CLGNBQWNELElBQ3RFRyxpQkFBa0IsU0FBU0gsR0FBWSxPQUFPVCxLQUFLNkIsUUFBUWpCLGlCQUFpQkgsS0NwQjlFLElDSUk0QixFQUFZLElBRWhCLFNBQVNDLEVBQVVaLEVBQVFhLEVBQU9DLEVBQU9sQixFQUFRbUIsRUFBTUMsR0FTckQsSUFSQSxJQUNJQyxFQURBcEQsRUFBSSxFQUVKcUQsRUFBY0wsRUFBTWYsT0FDcEJxQixFQUFhSCxFQUFLbEIsT0FLZmpDLEVBQUlzRCxJQUFjdEQsR0FDbkJvRCxFQUFPSixFQUFNaEQsS0FDZm9ELEVBQUtiLFNBQVdZLEVBQUtuRCxHQUNyQitCLEVBQU8vQixHQUFLb0QsR0FFWkgsRUFBTWpELEdBQUssSUFBSWtDLEVBQVVDLEVBQVFnQixFQUFLbkQsSUFLMUMsS0FBT0EsRUFBSXFELElBQWVyRCxHQUNwQm9ELEVBQU9KLEVBQU1oRCxNQUNma0QsRUFBS2xELEdBQUtvRCxHQUtoQixTQUFTRyxFQUFRcEIsRUFBUWEsRUFBT0MsRUFBT2xCLEVBQVFtQixFQUFNQyxFQUFNSyxHQUN6RCxJQUFJeEQsRUFDQW9ELEVBS0FLLEVBSkFDLEtBQ0FMLEVBQWNMLEVBQU1mLE9BQ3BCcUIsRUFBYUgsRUFBS2xCLE9BQ2xCMEIsRUFBWSxJQUFJM0IsTUFBTXFCLEdBSzFCLElBQUtyRCxFQUFJLEVBQUdBLEVBQUlxRCxJQUFlckQsR0FDekJvRCxFQUFPSixFQUFNaEQsTUFDZjJELEVBQVUzRCxHQUFLeUQsRUFBV1gsRUFBWVUsRUFBSTFCLEtBQUtzQixFQUFNQSxFQUFLYixTQUFVdkMsRUFBR2dELEdBQ25FUyxLQUFZQyxFQUNkUixFQUFLbEQsR0FBS29ELEVBRVZNLEVBQWVELEdBQVlMLEdBUWpDLElBQUtwRCxFQUFJLEVBQUdBLEVBQUlzRCxJQUFjdEQsR0FFeEJvRCxFQUFPTSxFQURYRCxFQUFXWCxFQUFZVSxFQUFJMUIsS0FBS0ssRUFBUWdCLEVBQUtuRCxHQUFJQSxFQUFHbUQsTUFFbERwQixFQUFPL0IsR0FBS29ELEVBQ1pBLEVBQUtiLFNBQVdZLEVBQUtuRCxHQUNyQjBELEVBQWVELEdBQVksTUFFM0JSLEVBQU1qRCxHQUFLLElBQUlrQyxFQUFVQyxFQUFRZ0IsRUFBS25ELElBSzFDLElBQUtBLEVBQUksRUFBR0EsRUFBSXFELElBQWVyRCxHQUN4Qm9ELEVBQU9KLEVBQU1oRCxLQUFRMEQsRUFBZUMsRUFBVTNELE1BQVFvRCxJQUN6REYsRUFBS2xELEdBQUtvRCxHQ2xEaEIsU0FBU1EsRUFBVUMsRUFBR0MsR0FDcEIsT0FBT0QsRUFBSUMsR0FBSyxFQUFJRCxFQUFJQyxFQUFJLEVBQUlELEdBQUtDLEVBQUksRUFBSUMsSUNvQi9DLE1DMUNlLFNBQVNYLEdBQ3RCLE9BQVFBLEVBQUsxQyxlQUFpQjBDLEVBQUsxQyxjQUFjc0QsYUFDekNaLEVBQUt4QyxVQUFZd0MsR0FDbEJBLEVBQUtZLGFDNEJkLFNBQWdCQyxFQUFXYixFQUFNdEQsR0FDL0IsT0FBT3NELEVBQUtjLE1BQU1DLGlCQUFpQnJFLElBQzVCa0UsRUFBWVosR0FBTWdCLGlCQUFpQmhCLEVBQU0sTUFBTWUsaUJBQWlCckUsR0NqQ3pFLFNBQVN1RSxFQUFXQyxHQUNsQixPQUFPQSxFQUFPQyxPQUFPQyxNQUFNLFNBRzdCLFNBQVNDLEVBQVVyQixHQUNqQixPQUFPQSxFQUFLcUIsV0FBYSxJQUFJQyxFQUFVdEIsR0FHekMsU0FBU3NCLEVBQVV0QixHQUNqQjNDLEtBQUtrRSxNQUFRdkIsRUFDYjNDLEtBQUttRSxPQUFTUCxFQUFXakIsRUFBS3lCLGFBQWEsVUFBWSxJQXVCekQsU0FBU0MsRUFBVzFCLEVBQU0yQixHQUV4QixJQURBLElBQUlDLEVBQU9QLEVBQVVyQixHQUFPcEQsR0FBSyxFQUFHaUYsRUFBSUYsRUFBTTlDLFNBQ3JDakMsRUFBSWlGLEdBQUdELEVBQUtFLElBQUlILEVBQU0vRSxJQUdqQyxTQUFTbUYsRUFBYy9CLEVBQU0yQixHQUUzQixJQURBLElBQUlDLEVBQU9QLEVBQVVyQixHQUFPcEQsR0FBSyxFQUFHaUYsRUFBSUYsRUFBTTlDLFNBQ3JDakMsRUFBSWlGLEdBQUdELEVBQUtJLE9BQU9MLEVBQU0vRSxJQTNCcEMwRSxFQUFVbEMsV0FDUjBDLElBQUssU0FBU3BGLEdBQ0pXLEtBQUttRSxPQUFPM0UsUUFBUUgsR0FDcEIsSUFDTlcsS0FBS21FLE9BQU9TLEtBQUt2RixHQUNqQlcsS0FBS2tFLE1BQU1XLGFBQWEsUUFBUzdFLEtBQUttRSxPQUFPVyxLQUFLLFFBR3RESCxPQUFRLFNBQVN0RixHQUNmLElBQUlFLEVBQUlTLEtBQUttRSxPQUFPM0UsUUFBUUgsR0FDeEJFLEdBQUssSUFDUFMsS0FBS21FLE9BQU9ZLE9BQU94RixFQUFHLEdBQ3RCUyxLQUFLa0UsTUFBTVcsYUFBYSxRQUFTN0UsS0FBS21FLE9BQU9XLEtBQUssUUFHdERFLFNBQVUsU0FBUzNGLEdBQ2pCLE9BQU9XLEtBQUttRSxPQUFPM0UsUUFBUUgsSUFBUyxJQzdCeEMsU0FBUzRGLElBQ1BqRixLQUFLa0YsWUFBYyxHQ0RyQixTQUFTQyxJQUNQbkYsS0FBS29GLFVBQVksR0NEbkIsU0FBU0MsSUFDSHJGLEtBQUtzRixhQUFhdEYsS0FBS3VGLFdBQVd0RCxZQUFZakMsTUNEcEQsU0FBU3dGLElBQ0h4RixLQUFLeUYsaUJBQWlCekYsS0FBS3VGLFdBQVdwRCxhQUFhbkMsS0FBTUEsS0FBS3VGLFdBQVdHLFlDRS9FLFNBQVNDLElBQ1AsT0FBTyxLQ0pULFNBQVNoQixJQUNQLElBQUlqRCxFQUFTMUIsS0FBS3VGLFdBQ2Q3RCxHQUFRQSxFQUFPa0UsWUFBWTVGLE1DRmpDLFNBQVM2RixJQUNQLE9BQU83RixLQUFLdUYsV0FBV3BELGFBQWFuQyxLQUFLOEYsV0FBVSxHQUFROUYsS0FBS3NGLGFBR2xFLFNBQVNTLElBQ1AsT0FBTy9GLEtBQUt1RixXQUFXcEQsYUFBYW5DLEtBQUs4RixXQUFVLEdBQU85RixLQUFLc0YsYUFHakUsSUNSSVUsS0FFT0MsRUFBUSxLQUVLLG9CQUFiOUYsV0FFSCxpQkFEUUEsU0FBU0csa0JBRXJCMEYsR0FBZ0JFLFdBQVksWUFBYUMsV0FBWSxjQUl6RCxTQUFTQyxFQUFzQkMsRUFBVUMsRUFBTy9ELEdBRTlDLE9BREE4RCxFQUFXRSxFQUFnQkYsRUFBVUMsRUFBTy9ELEdBQ3JDLFNBQVMwRCxHQUNkLElBQUlPLEVBQVVQLEVBQU1RLGNBQ2ZELElBQVlBLElBQVl4RyxNQUFrRCxFQUF4Q3dHLEVBQVFFLHdCQUF3QjFHLFFBQ3JFcUcsRUFBU2hGLEtBQUtyQixLQUFNaUcsSUFLMUIsU0FBU00sRUFBZ0JGLEVBQVVDLEVBQU8vRCxHQUN4QyxPQUFPLFNBQVNvRSxHQUNkLElBQUlDLEVBQVNYLEVBQ2JBLEVBQVFVLEVBQ1IsSUFDRU4sRUFBU2hGLEtBQUtyQixLQUFNQSxLQUFLOEIsU0FBVXdFLEVBQU8vRCxXQUUxQzBELEVBQVFXLElBYWQsU0FBU0MsRUFBU0MsR0FDaEIsT0FBTyxXQUNMLElBQUlDLEVBQUsvRyxLQUFLZ0gsS0FDZCxHQUFLRCxFQUFMLENBQ0EsSUFBSyxJQUFrQ0UsRUFBOUJDLEVBQUksRUFBRzNILEdBQUssRUFBRzRILEVBQUlKLEVBQUd2RixPQUFXMEYsRUFBSUMsSUFBS0QsRUFDN0NELEVBQUlGLEVBQUdHLEdBQU1KLEVBQVNNLE1BQVFILEVBQUVHLE9BQVNOLEVBQVNNLE1BQVNILEVBQUU1SCxPQUFTeUgsRUFBU3pILEtBR2pGMEgsSUFBS3hILEdBQUswSCxFQUZWakgsS0FBS3FILG9CQUFvQkosRUFBRUcsS0FBTUgsRUFBRVosU0FBVVksRUFBRUssV0FLN0MvSCxFQUFHd0gsRUFBR3ZGLE9BQVNqQyxTQUNUUyxLQUFLZ0gsT0FJckIsU0FBU08sRUFBTVQsRUFBVVUsRUFBT0YsR0FDOUIsSUFBSUcsRUFBT3pCLEVBQWFyRyxlQUFlbUgsRUFBU00sTUFBUWhCLEVBQXdCRyxFQUNoRixPQUFPLFNBQVNtQixFQUFHbkksRUFBR2dELEdBQ3BCLElBQW9CMEUsRUFBaEJGLEVBQUsvRyxLQUFLZ0gsS0FBU1gsRUFBV29CLEVBQUtELEVBQU9qSSxFQUFHZ0QsR0FDakQsR0FBSXdFLEVBQUksSUFBSyxJQUFJRyxFQUFJLEVBQUdDLEVBQUlKLEVBQUd2RixPQUFRMEYsRUFBSUMsSUFBS0QsRUFDOUMsSUFBS0QsRUFBSUYsRUFBR0csSUFBSUUsT0FBU04sRUFBU00sTUFBUUgsRUFBRTVILE9BQVN5SCxFQUFTekgsS0FJNUQsT0FIQVcsS0FBS3FILG9CQUFvQkosRUFBRUcsS0FBTUgsRUFBRVosU0FBVVksRUFBRUssU0FDL0N0SCxLQUFLMkgsaUJBQWlCVixFQUFFRyxLQUFNSCxFQUFFWixTQUFXQSxFQUFVWSxFQUFFSyxRQUFVQSxRQUNqRUwsRUFBRU8sTUFBUUEsR0FJZHhILEtBQUsySCxpQkFBaUJiLEVBQVNNLEtBQU1mLEVBQVVpQixHQUMvQ0wsR0FBS0csS0FBTU4sRUFBU00sS0FBTS9ILEtBQU15SCxFQUFTekgsS0FBTW1JLE1BQU9BLEVBQU9uQixTQUFVQSxFQUFVaUIsUUFBU0EsR0FDckZQLEVBQ0FBLEVBQUduQyxLQUFLcUMsR0FESmpILEtBQUtnSCxNQUFRQyxJQ3JFMUIsU0FBU1csRUFBY2pGLEVBQU15RSxFQUFNUyxHQUNqQyxJQUFJQyxFQUFTdkUsRUFBWVosR0FDckJzRCxFQUFRNkIsRUFBT0MsWUFFRSxtQkFBVjlCLEVBQ1RBLEVBQVEsSUFBSUEsRUFBTW1CLEVBQU1TLElBRXhCNUIsRUFBUTZCLEVBQU8zSCxTQUFTNkgsWUFBWSxTQUNoQ0gsR0FBUTVCLEVBQU1nQyxVQUFVYixFQUFNUyxFQUFPSyxRQUFTTCxFQUFPTSxZQUFhbEMsRUFBTW1DLE9BQVNQLEVBQU9PLFFBQ3ZGbkMsRUFBTWdDLFVBQVViLEdBQU0sR0FBTyxJQUdwQ3pFLEVBQUtpRixjQUFjM0IsR0FlckIsSUNFV29DLEdBQVEsTUFFbkIsU0FBZ0JDLEVBQVVDLEVBQVFDLEdBQ2hDeEksS0FBS3lJLFFBQVVGLEVBQ2Z2SSxLQUFLMEksU0FBV0YsRUFHbEIsU0FBU0csSUFDUCxPQUFPLElBQUlMLElBQVluSSxTQUFTRyxrQkFBbUIrSCxHQUdyREMsRUFBVXZHLFVBQVk0RyxFQUFVNUcsV0FDOUJDLFlBQWFzRyxFQUNiTSxPQ3pDYSxTQUFTQSxHQUNBLG1CQUFYQSxJQUF1QkEsRUFBU25JLEVBQVNtSSxJQUVwRCxJQUFLLElBQUlMLEVBQVN2SSxLQUFLeUksUUFBU3RCLEVBQUlvQixFQUFPL0csT0FBUXFILEVBQVksSUFBSXRILE1BQU00RixHQUFJRCxFQUFJLEVBQUdBLEVBQUlDLElBQUtELEVBQzNGLElBQUssSUFBaUZ2RSxFQUFNbUcsRUFBbkZ2RyxFQUFRZ0csRUFBT3JCLEdBQUkxQyxFQUFJakMsRUFBTWYsT0FBUXVILEVBQVdGLEVBQVUzQixHQUFLLElBQUkzRixNQUFNaUQsR0FBbUJqRixFQUFJLEVBQUdBLEVBQUlpRixJQUFLakYsR0FDOUdvRCxFQUFPSixFQUFNaEQsTUFBUXVKLEVBQVVGLEVBQU92SCxLQUFLc0IsRUFBTUEsRUFBS2IsU0FBVXZDLEVBQUdnRCxNQUNsRSxhQUFjSSxJQUFNbUcsRUFBUWhILFNBQVdhLEVBQUtiLFVBQ2hEaUgsRUFBU3hKLEdBQUt1SixHQUtwQixPQUFPLElBQUlSLEVBQVVPLEVBQVc3SSxLQUFLMEksV0Q4QnJDTSxVRTFDYSxTQUFTSixHQUNBLG1CQUFYQSxJQUF1QkEsRUFBU0ssRUFBWUwsSUFFdkQsSUFBSyxJQUFJTCxFQUFTdkksS0FBS3lJLFFBQVN0QixFQUFJb0IsRUFBTy9HLE9BQVFxSCxLQUFnQkwsS0FBY3RCLEVBQUksRUFBR0EsRUFBSUMsSUFBS0QsRUFDL0YsSUFBSyxJQUF5Q3ZFLEVBQXJDSixFQUFRZ0csRUFBT3JCLEdBQUkxQyxFQUFJakMsRUFBTWYsT0FBY2pDLEVBQUksRUFBR0EsRUFBSWlGLElBQUtqRixHQUM5RG9ELEVBQU9KLEVBQU1oRCxNQUNmc0osRUFBVWpFLEtBQUtnRSxFQUFPdkgsS0FBS3NCLEVBQU1BLEVBQUtiLFNBQVV2QyxFQUFHZ0QsSUFDbkRpRyxFQUFRNUQsS0FBS2pDLElBS25CLE9BQU8sSUFBSTJGLEVBQVVPLEVBQVdMLElGK0JoQ1UsT0czQ2EsU0FBU0MsR0FDRCxtQkFBVkEsSUFBc0JBLEVBQVF0SSxFQUFRc0ksSUFFakQsSUFBSyxJQUFJWixFQUFTdkksS0FBS3lJLFFBQVN0QixFQUFJb0IsRUFBTy9HLE9BQVFxSCxFQUFZLElBQUl0SCxNQUFNNEYsR0FBSUQsRUFBSSxFQUFHQSxFQUFJQyxJQUFLRCxFQUMzRixJQUFLLElBQXVFdkUsRUFBbkVKLEVBQVFnRyxFQUFPckIsR0FBSTFDLEVBQUlqQyxFQUFNZixPQUFRdUgsRUFBV0YsRUFBVTNCLE1BQWUzSCxFQUFJLEVBQUdBLEVBQUlpRixJQUFLakYsR0FDM0ZvRCxFQUFPSixFQUFNaEQsS0FBTzRKLEVBQU05SCxLQUFLc0IsRUFBTUEsRUFBS2IsU0FBVXZDLEVBQUdnRCxJQUMxRHdHLEVBQVNuRSxLQUFLakMsR0FLcEIsT0FBTyxJQUFJMkYsRUFBVU8sRUFBVzdJLEtBQUswSSxXSGlDckNoRyxLZjZCYSxTQUFTOEUsRUFBT3pFLEdBQzdCLElBQUt5RSxFQUdILE9BRkE5RSxFQUFPLElBQUluQixNQUFNdkIsS0FBS29KLFFBQVNsQyxHQUFLLEVBQ3BDbEgsS0FBS3FKLEtBQUssU0FBUzNCLEdBQUtoRixJQUFPd0UsR0FBS1EsSUFDN0JoRixFQUdULElEbkZzQjRHLEVDbUZsQkMsRUFBT3hHLEVBQU1ELEVBQVVSLEVBQ3ZCa0csRUFBVXhJLEtBQUswSSxTQUNmSCxFQUFTdkksS0FBS3lJLFFBRUcsbUJBQVZqQixJRHZGVzhCLEVDdUY0QjlCLEVBQWpCQSxFRHRGMUIsV0FDTCxPQUFPOEIsSUN1RlQsSUFBSyxJQUFJbkMsRUFBSW9CLEVBQU8vRyxPQUFRRixFQUFTLElBQUlDLE1BQU00RixHQUFJM0UsRUFBUSxJQUFJakIsTUFBTTRGLEdBQUkxRSxFQUFPLElBQUlsQixNQUFNNEYsR0FBSUQsRUFBSSxFQUFHQSxFQUFJQyxJQUFLRCxFQUFHLENBQy9HLElBQUl4RixFQUFTOEcsRUFBUXRCLEdBQ2pCM0UsRUFBUWdHLEVBQU9yQixHQUNmdEUsRUFBY0wsRUFBTWYsT0FDcEJrQixFQUFPOEUsRUFBTW5HLEtBQUtLLEVBQVFBLEdBQVVBLEVBQU9JLFNBQVVvRixFQUFHc0IsR0FDeEQzRixFQUFhSCxFQUFLbEIsT0FDbEJnSSxFQUFhaEgsRUFBTTBFLEdBQUssSUFBSTNGLE1BQU1zQixHQUNsQzRHLEVBQWNuSSxFQUFPNEYsR0FBSyxJQUFJM0YsTUFBTXNCLEdBR3hDMEcsRUFBSzdILEVBQVFhLEVBQU9pSCxFQUFZQyxFQUZoQmhILEVBQUt5RSxHQUFLLElBQUkzRixNQUFNcUIsR0FFb0JGLEVBQU1LLEdBSzlELElBQUssSUFBb0IyRyxFQUFVdEgsRUFBMUJ1SCxFQUFLLEVBQUdDLEVBQUssRUFBbUJELEVBQUs5RyxJQUFjOEcsRUFDMUQsR0FBSUQsRUFBV0YsRUFBV0csR0FBSyxDQUU3QixJQURJQSxHQUFNQyxJQUFJQSxFQUFLRCxFQUFLLEtBQ2Z2SCxFQUFPcUgsRUFBWUcsT0FBVUEsRUFBSy9HLElBQzNDNkcsRUFBUzlILE1BQVFRLEdBQVEsTUFRL0IsT0FIQWQsRUFBUyxJQUFJZ0gsRUFBVWhILEVBQVFrSCxJQUN4QnFCLE9BQVNySCxFQUNoQmxCLEVBQU93SSxNQUFRckgsRUFDUm5CLEdlcEVQa0IsTWpCN0NhLFdBQ2IsT0FBTyxJQUFJOEYsRUFBVXRJLEtBQUs2SixRQUFVN0osS0FBS3lJLFFBQVFzQixJQUFJQyxHQUFTaEssS0FBSzBJLFdpQjZDbkVqRyxLSTlDYSxXQUNiLE9BQU8sSUFBSTZGLEVBQVV0SSxLQUFLOEosT0FBUzlKLEtBQUt5SSxRQUFRc0IsSUFBSUMsR0FBU2hLLEtBQUswSSxXSjhDbEV1QixNS2hEYSxTQUFTdEIsR0FFdEIsSUFBSyxJQUFJdUIsRUFBVWxLLEtBQUt5SSxRQUFTMEIsRUFBVXhCLEVBQVVGLFFBQVMyQixFQUFLRixFQUFRMUksT0FBUTZJLEVBQUtGLEVBQVEzSSxPQUFRMkYsRUFBSW1ELEtBQUtDLElBQUlILEVBQUlDLEdBQUtHLEVBQVMsSUFBSWpKLE1BQU02SSxHQUFLbEQsRUFBSSxFQUFHQSxFQUFJQyxJQUFLRCxFQUNwSyxJQUFLLElBQW1HdkUsRUFBL0Y4SCxFQUFTUCxFQUFRaEQsR0FBSXdELEVBQVNQLEVBQVFqRCxHQUFJMUMsRUFBSWlHLEVBQU9qSixPQUFReUksRUFBUU8sRUFBT3RELEdBQUssSUFBSTNGLE1BQU1pRCxHQUFVakYsRUFBSSxFQUFHQSxFQUFJaUYsSUFBS2pGLEdBQ3hIb0QsRUFBTzhILEVBQU9sTCxJQUFNbUwsRUFBT25MLE1BQzdCMEssRUFBTTFLLEdBQUtvRCxHQUtqQixLQUFPdUUsRUFBSWtELElBQU1sRCxFQUNmc0QsRUFBT3RELEdBQUtnRCxFQUFRaEQsR0FHdEIsT0FBTyxJQUFJb0IsRUFBVWtDLEVBQVF4SyxLQUFLMEksV0xtQ2xDaUMsTU1uRGEsV0FFYixJQUFLLElBQUlwQyxFQUFTdkksS0FBS3lJLFFBQVN2QixHQUFLLEVBQUdDLEVBQUlvQixFQUFPL0csU0FBVTBGLEVBQUlDLEdBQy9ELElBQUssSUFBOER4RSxFQUExREosRUFBUWdHLEVBQU9yQixHQUFJM0gsRUFBSWdELEVBQU1mLE9BQVMsRUFBR1ksRUFBT0csRUFBTWhELEtBQVlBLEdBQUssSUFDMUVvRCxFQUFPSixFQUFNaEQsTUFDWDZDLEdBQVFBLElBQVNPLEVBQUsyQyxhQUFhbEQsRUFBS21ELFdBQVdwRCxhQUFhUSxFQUFNUCxHQUMxRUEsRUFBT08sR0FLYixPQUFPM0MsTU55Q1A0SyxLZGxEYSxTQUFTQyxHQUd0QixTQUFTQyxFQUFZMUgsRUFBR0MsR0FDdEIsT0FBT0QsR0FBS0MsRUFBSXdILEVBQVF6SCxFQUFFdEIsU0FBVXVCLEVBQUV2QixXQUFhc0IsR0FBS0MsRUFIckR3SCxJQUFTQSxFQUFVMUgsR0FNeEIsSUFBSyxJQUFJb0YsRUFBU3ZJLEtBQUt5SSxRQUFTdEIsRUFBSW9CLEVBQU8vRyxPQUFRdUosRUFBYSxJQUFJeEosTUFBTTRGLEdBQUlELEVBQUksRUFBR0EsRUFBSUMsSUFBS0QsRUFBRyxDQUMvRixJQUFLLElBQW1GdkUsRUFBL0VKLEVBQVFnRyxFQUFPckIsR0FBSTFDLEVBQUlqQyxFQUFNZixPQUFRd0osRUFBWUQsRUFBVzdELEdBQUssSUFBSTNGLE1BQU1pRCxHQUFVakYsRUFBSSxFQUFHQSxFQUFJaUYsSUFBS2pGLEdBQ3hHb0QsRUFBT0osRUFBTWhELE1BQ2Z5TCxFQUFVekwsR0FBS29ELEdBR25CcUksRUFBVUosS0FBS0UsR0FHakIsT0FBTyxJQUFJeEMsRUFBVXlDLEVBQVkvSyxLQUFLMEksVUFBVWlDLFNjbUNoRHRKLEtPckRhLFdBQ2IsSUFBSTRKLEVBQVdDLFVBQVUsR0FHekIsT0FGQUEsVUFBVSxHQUFLbEwsS0FDZmlMLEVBQVNFLE1BQU0sS0FBTUQsV0FDZGxMLE1Qa0RQb0wsTVF0RGEsV0FDYixJQUFJQSxFQUFRLElBQUk3SixNQUFNdkIsS0FBS29KLFFBQVM3SixHQUFLLEVBRXpDLE9BREFTLEtBQUtxSixLQUFLLFdBQWErQixJQUFRN0wsR0FBS1MsT0FDN0JvTCxHUm9EUHpJLEtTdkRhLFdBRWIsSUFBSyxJQUFJNEYsRUFBU3ZJLEtBQUt5SSxRQUFTdkIsRUFBSSxFQUFHQyxFQUFJb0IsRUFBTy9HLE9BQVEwRixFQUFJQyxJQUFLRCxFQUNqRSxJQUFLLElBQUkzRSxFQUFRZ0csRUFBT3JCLEdBQUkzSCxFQUFJLEVBQUdpRixFQUFJakMsRUFBTWYsT0FBUWpDLEVBQUlpRixJQUFLakYsRUFBRyxDQUMvRCxJQUFJb0QsRUFBT0osRUFBTWhELEdBQ2pCLEdBQUlvRCxFQUFNLE9BQU9BLEVBSXJCLE9BQU8sTVQrQ1B5RyxLVXhEYSxXQUNiLElBQUlBLEVBQU8sRUFFWCxPQURBcEosS0FBS3FKLEtBQUssYUFBZUQsSUFDbEJBLEdWc0RQekksTVd6RGEsV0FDYixPQUFRWCxLQUFLMkMsUVh5RGIwRyxLWTFEYSxTQUFTNEIsR0FFdEIsSUFBSyxJQUFJMUMsRUFBU3ZJLEtBQUt5SSxRQUFTdkIsRUFBSSxFQUFHQyxFQUFJb0IsRUFBTy9HLE9BQVEwRixFQUFJQyxJQUFLRCxFQUNqRSxJQUFLLElBQWdEdkUsRUFBNUNKLEVBQVFnRyxFQUFPckIsR0FBSTNILEVBQUksRUFBR2lGLEVBQUlqQyxFQUFNZixPQUFjakMsRUFBSWlGLElBQUtqRixHQUM5RG9ELEVBQU9KLEVBQU1oRCxLQUFJMEwsRUFBUzVKLEtBQUtzQixFQUFNQSxFQUFLYixTQUFVdkMsRUFBR2dELEdBSS9ELE9BQU92QyxNWm1EUHFMLEtiakJhLFNBQVNoTSxFQUFNbUksR0FDNUIsSUFBSTFILEVBQVdDLEVBQVVWLEdBRXpCLEdBQUk2TCxVQUFVMUosT0FBUyxFQUFHLENBQ3hCLElBQUltQixFQUFPM0MsS0FBSzJDLE9BQ2hCLE9BQU83QyxFQUFTRCxNQUNWOEMsRUFBSzJJLGVBQWV4TCxFQUFTRixNQUFPRSxFQUFTRCxPQUM3QzhDLEVBQUt5QixhQUFhdEUsR0FHMUIsT0FBT0UsS0FBS3FKLE1BQWUsTUFBVDdCLEVBQ1gxSCxFQUFTRCxNQTdDbEIsU0FBc0JDLEdBQ3BCLE9BQU8sV0FDTEUsS0FBS3VMLGtCQUFrQnpMLEVBQVNGLE1BQU9FLEVBQVNELFNBUnBELFNBQW9CUixHQUNsQixPQUFPLFdBQ0xXLEtBQUt3TCxnQkFBZ0JuTSxLQWlEZ0QsbUJBQVZtSSxFQUN0RDFILEVBQVNELE1BcEJsQixTQUF3QkMsRUFBVTBILEdBQ2hDLE9BQU8sV0FDTCxJQUFJaUUsRUFBSWpFLEVBQU0yRCxNQUFNbkwsS0FBTWtMLFdBQ2pCLE1BQUxPLEVBQVd6TCxLQUFLdUwsa0JBQWtCekwsRUFBU0YsTUFBT0UsRUFBU0QsT0FDMURHLEtBQUswTCxlQUFlNUwsRUFBU0YsTUFBT0UsRUFBU0QsTUFBTzRMLEtBWjdELFNBQXNCcE0sRUFBTW1JLEdBQzFCLE9BQU8sV0FDTCxJQUFJaUUsRUFBSWpFLEVBQU0yRCxNQUFNbkwsS0FBTWtMLFdBQ2pCLE1BQUxPLEVBQVd6TCxLQUFLd0wsZ0JBQWdCbk0sR0FDL0JXLEtBQUs2RSxhQUFheEYsRUFBTW9NLEtBeUJ4QjNMLEVBQVNELE1BbkNsQixTQUF3QkMsRUFBVTBILEdBQ2hDLE9BQU8sV0FDTHhILEtBQUswTCxlQUFlNUwsRUFBU0YsTUFBT0UsRUFBU0QsTUFBTzJILEtBUnhELFNBQXNCbkksRUFBTW1JLEdBQzFCLE9BQU8sV0FDTHhILEtBQUs2RSxhQUFheEYsRUFBTW1JLE1BdUMrQjFILEVBQVUwSCxLYUtuRS9ELE1YdENhLFNBQVNwRSxFQUFNbUksRUFBT21FLEdBQ25DLE9BQU9ULFVBQVUxSixPQUFTLEVBQ3BCeEIsS0FBS3FKLE1BQWUsTUFBVDdCLEVBdEJuQixTQUFxQm5JLEdBQ25CLE9BQU8sV0FDTFcsS0FBS3lELE1BQU1tSSxlQUFldk0sS0FxQmUsbUJBQVZtSSxFQVhuQyxTQUF1Qm5JLEVBQU1tSSxFQUFPbUUsR0FDbEMsT0FBTyxXQUNMLElBQUlGLEVBQUlqRSxFQUFNMkQsTUFBTW5MLEtBQU1rTCxXQUNqQixNQUFMTyxFQUFXekwsS0FBS3lELE1BQU1tSSxlQUFldk0sR0FDcENXLEtBQUt5RCxNQUFNb0ksWUFBWXhNLEVBQU1vTSxFQUFHRSxLQVZ6QyxTQUF1QnRNLEVBQU1tSSxFQUFPbUUsR0FDbEMsT0FBTyxXQUNMM0wsS0FBS3lELE1BQU1vSSxZQUFZeE0sRUFBTW1JLEVBQU9tRSxNQWlCWHRNLEVBQU1tSSxFQUFtQixNQUFabUUsRUFBbUIsR0FBS0EsSUFDMURuSSxFQUFXeEQsS0FBSzJDLE9BQVF0RCxJV2lDOUJ5TSxTYXpDYSxTQUFTek0sRUFBTW1JLEdBQzVCLE9BQU8wRCxVQUFVMUosT0FBUyxFQUNwQnhCLEtBQUtxSixNQUFlLE1BQVQ3QixFQXRCbkIsU0FBd0JuSSxHQUN0QixPQUFPLGtCQUNFVyxLQUFLWCxLQXFCOEIsbUJBQVZtSSxFQVhwQyxTQUEwQm5JLEVBQU1tSSxHQUM5QixPQUFPLFdBQ0wsSUFBSWlFLEVBQUlqRSxFQUFNMkQsTUFBTW5MLEtBQU1rTCxXQUNqQixNQUFMTyxTQUFrQnpMLEtBQUtYLEdBQ3RCVyxLQUFLWCxHQUFRb00sSUFWdEIsU0FBMEJwTSxFQUFNbUksR0FDOUIsT0FBTyxXQUNMeEgsS0FBS1gsR0FBUW1JLEtBaUJhbkksRUFBTW1JLElBQzVCeEgsS0FBSzJDLE9BQU90RCxJYm9DbEIwTSxRVkRhLFNBQVMxTSxFQUFNbUksR0FDNUIsSUFBSWxELEVBQVFWLEVBQVd2RSxFQUFPLElBRTlCLEdBQUk2TCxVQUFVMUosT0FBUyxFQUFHLENBRXhCLElBREEsSUFBSStDLEVBQU9QLEVBQVVoRSxLQUFLMkMsUUFBU3BELEdBQUssRUFBR2lGLEVBQUlGLEVBQU05QyxTQUM1Q2pDLEVBQUlpRixHQUFHLElBQUtELEVBQUtTLFNBQVNWLEVBQU0vRSxJQUFLLE9BQU8sRUFDckQsT0FBTyxFQUdULE9BQU9TLEtBQUtxSixNQUF1QixtQkFBVjdCLEVBZjNCLFNBQXlCbEQsRUFBT2tELEdBQzlCLE9BQU8sWUFDSkEsRUFBTTJELE1BQU1uTCxLQUFNa0wsV0FBYTdHLEVBQWFLLEdBQWUxRSxLQUFNc0UsS0FjNUNrRCxFQTVCMUIsU0FBcUJsRCxHQUNuQixPQUFPLFdBQ0xELEVBQVdyRSxLQUFNc0UsS0FJckIsU0FBc0JBLEdBQ3BCLE9BQU8sV0FDTEksRUFBYzFFLEtBQU1zRSxNQXNCRkEsRUFBT2tELEtVVjNCd0UsS1Q5Q2EsU0FBU3hFLEdBQ3RCLE9BQU8wRCxVQUFVMUosT0FDWHhCLEtBQUtxSixLQUFjLE1BQVQ3QixFQUNOdkMsR0FBK0IsbUJBQVZ1QyxFQVZqQyxTQUFzQkEsR0FDcEIsT0FBTyxXQUNMLElBQUlpRSxFQUFJakUsRUFBTTJELE1BQU1uTCxLQUFNa0wsV0FDMUJsTCxLQUFLa0YsWUFBbUIsTUFBTHVHLEVBQVksR0FBS0EsSUFUeEMsU0FBc0JqRSxHQUNwQixPQUFPLFdBQ0x4SCxLQUFLa0YsWUFBY3NDLEtBZ0JHQSxJQUNsQnhILEtBQUsyQyxPQUFPdUMsYVN5Q2xCK0csS1IvQ2EsU0FBU3pFLEdBQ3RCLE9BQU8wRCxVQUFVMUosT0FDWHhCLEtBQUtxSixLQUFjLE1BQVQ3QixFQUNOckMsR0FBK0IsbUJBQVZxQyxFQVZqQyxTQUFzQkEsR0FDcEIsT0FBTyxXQUNMLElBQUlpRSxFQUFJakUsRUFBTTJELE1BQU1uTCxLQUFNa0wsV0FDMUJsTCxLQUFLb0YsVUFBaUIsTUFBTHFHLEVBQVksR0FBS0EsSUFUdEMsU0FBc0JqRSxHQUNwQixPQUFPLFdBQ0x4SCxLQUFLb0YsVUFBWW9DLEtBZ0JLQSxJQUNsQnhILEtBQUsyQyxPQUFPeUMsV1EwQ2xCQyxNUDdEYSxXQUNiLE9BQU9yRixLQUFLcUosS0FBS2hFLElPNkRqQkcsTU45RGEsV0FDYixPQUFPeEYsS0FBS3FKLEtBQUs3RCxJTThEakIwRyxPY2pFYSxTQUFTN00sR0FDdEIsSUFBSThNLEVBQXlCLG1CQUFUOU0sRUFBc0JBLEVBQU8rTSxFQUFRL00sR0FDekQsT0FBT1csS0FBSzRJLE9BQU8sV0FDakIsT0FBTzVJLEtBQUtpQyxZQUFZa0ssRUFBT2hCLE1BQU1uTCxLQUFNa0wsZWQrRDdDbUIsT0w3RGEsU0FBU2hOLEVBQU1pTixHQUM1QixJQUFJSCxFQUF5QixtQkFBVDlNLEVBQXNCQSxFQUFPK00sRUFBUS9NLEdBQ3JEdUosRUFBbUIsTUFBVjBELEVBQWlCM0csRUFBaUMsbUJBQVgyRyxFQUF3QkEsRUFBUzdMLEVBQVM2TCxHQUM5RixPQUFPdE0sS0FBSzRJLE9BQU8sV0FDakIsT0FBTzVJLEtBQUttQyxhQUFhZ0ssRUFBT2hCLE1BQU1uTCxLQUFNa0wsV0FBWXRDLEVBQU91QyxNQUFNbkwsS0FBTWtMLFlBQWMsU0swRDNGdkcsT0poRWEsV0FDYixPQUFPM0UsS0FBS3FKLEtBQUsxRSxJSWdFakI0SCxNSDlEYSxTQUFTQyxHQUN0QixPQUFPeE0sS0FBSzRJLE9BQU80RCxFQUFPekcsRUFBc0JGLElHOERoRGxFLE1ldkVhLFNBQVM2RixHQUN0QixPQUFPMEQsVUFBVTFKLE9BQ1h4QixLQUFLOEwsU0FBUyxXQUFZdEUsR0FDMUJ4SCxLQUFLMkMsT0FBT2IsVWZxRWxCaUYsR0ZJYSxTQUFTRCxFQUFVVSxFQUFPRixHQUN2QyxJQUErQy9ILEVBQXlCa04sRUFBcEVDLEVBNUNOLFNBQXdCQSxHQUN0QixPQUFPQSxFQUFVNUksT0FBT0MsTUFBTSxTQUFTZ0csSUFBSSxTQUFTMEMsR0FDbEQsSUFBSXBOLEVBQU8sR0FBSUUsRUFBSWtOLEVBQUVqTixRQUFRLEtBRTdCLE9BRElELEdBQUssSUFBR0YsRUFBT29OLEVBQUVoTixNQUFNRixFQUFJLEdBQUlrTixFQUFJQSxFQUFFaE4sTUFBTSxFQUFHRixLQUMxQzZILEtBQU1xRixFQUFHcE4sS0FBTUEsS0F3Q1RzTixDQUFlN0YsRUFBVyxJQUFRdEMsRUFBSWtJLEVBQVVsTCxPQUVoRSxLQUFJMEosVUFBVTFKLE9BQVMsR0FBdkIsQ0FjQSxJQUZBdUYsRUFBS1MsRUFBUUQsRUFBUVYsRUFDTixNQUFYUyxJQUFpQkEsR0FBVSxHQUMxQi9ILEVBQUksRUFBR0EsRUFBSWlGLElBQUtqRixFQUFHUyxLQUFLcUosS0FBS3RDLEVBQUcyRixFQUFVbk4sR0FBSWlJLEVBQU9GLElBQzFELE9BQU90SCxLQWRMLElBQUkrRyxFQUFLL0csS0FBSzJDLE9BQU9xRSxLQUNyQixHQUFJRCxFQUFJLElBQUssSUFBMEJFLEVBQXRCQyxFQUFJLEVBQUdDLEVBQUlKLEVBQUd2RixPQUFXMEYsRUFBSUMsSUFBS0QsRUFDakQsSUFBSzNILEVBQUksRUFBRzBILEVBQUlGLEVBQUdHLEdBQUkzSCxFQUFJaUYsSUFBS2pGLEVBQzlCLElBQUtrTixFQUFJQyxFQUFVbk4sSUFBSTZILE9BQVNILEVBQUVHLE1BQVFxRixFQUFFcE4sT0FBUzRILEVBQUU1SCxLQUNyRCxPQUFPNEgsRUFBRU8sT0VYakJvRixTRDVDYSxTQUFTeEYsRUFBTVMsR0FDNUIsT0FBTzdILEtBQUtxSixNQUF3QixtQkFBWHhCLEVBUDNCLFNBQTBCVCxFQUFNUyxHQUM5QixPQUFPLFdBQ0wsT0FBT0QsRUFBYzVILEtBQU1vSCxFQUFNUyxFQUFPc0QsTUFBTW5MLEtBQU1rTCxjQVJ4RCxTQUEwQjlELEVBQU1TLEdBQzlCLE9BQU8sV0FDTCxPQUFPRCxFQUFjNUgsS0FBTW9ILEVBQU1TLE1BYVhULEVBQU1TLE1pQjlCaEMsTUFBZSxTQUFTcEgsR0FDdEIsTUFBMkIsaUJBQWJBLEVBQ1IsSUFBSTZILElBQVluSSxTQUFTTyxjQUFjRCxNQUFjTixTQUFTRyxrQkFDOUQsSUFBSWdJLElBQVk3SCxJQUFZNEgsTUNIckIsU0FBUzVILEdBQ3RCLE1BQTJCLGlCQUFiQSxFQUNSLElBQUk2SCxHQUFXbkksU0FBU1MsaUJBQWlCSCxLQUFhTixTQUFTRyxrQkFDL0QsSUFBSWdJLEdBQXVCLE1BQVo3SCxLQUF3QkEsR0FBVzRILElDTHREd0UsS0FDQUMsS0FDQUMsRUFBUSxHQUNSQyxFQUFVLEdBQ1ZDLEVBQVMsR0FFYixTQUFTQyxFQUFnQkMsR0FDdkIsT0FBTyxJQUFJQyxTQUFTLElBQUssV0FBYUQsRUFBUXBELElBQUksU0FBUzFLLEVBQU1FLEdBQy9ELE9BQU84TixLQUFLQyxVQUFVak8sR0FBUSxPQUFTRSxFQUFJLE1BQzFDdUYsS0FBSyxLQUFPLEtBMEJqQixPQUFlLFNBQVN5SSxHQUN0QixJQUFJQyxFQUFXLElBQUlDLE9BQU8sS0FBUUYsRUFBWSxTQUMxQ0csRUFBWUgsRUFBVUksV0FBVyxHQVdyQyxTQUFTQyxFQUFVNUIsRUFBTTZCLEdBQ3ZCLElBSUlwQixFQUpBcUIsS0FDQUMsRUFBSS9CLEVBQUt4SyxPQUNUd00sRUFBSSxFQUNKeEosRUFBSSxFQUVKeUosRUFBTUYsR0FBSyxFQUNYRyxHQUFNLEVBTVYsU0FBU0MsSUFDUCxHQUFJRixFQUFLLE9BQU9uQixFQUNoQixHQUFJb0IsRUFBSyxPQUFPQSxHQUFNLEVBQU9yQixFQUc3QixJQUFJdE4sRUFBVTZPLEVBQVBsSCxFQUFJOEcsRUFDWCxHQUFJaEMsRUFBSzJCLFdBQVd6RyxLQUFPNkYsRUFBTyxDQUNoQyxLQUFPaUIsSUFBTUQsR0FBSy9CLEVBQUsyQixXQUFXSyxLQUFPakIsR0FBU2YsRUFBSzJCLGFBQWFLLEtBQU9qQixJQUkzRSxPQUhLeE4sRUFBSXlPLElBQU1ELEVBQUdFLEdBQU0sR0FDZEcsRUFBSXBDLEVBQUsyQixXQUFXSyxRQUFVaEIsRUFBU2tCLEdBQU0sRUFDOUNFLElBQU1uQixJQUFVaUIsR0FBTSxFQUFVbEMsRUFBSzJCLFdBQVdLLEtBQU9oQixLQUFXZ0IsR0FDcEVoQyxFQUFLdk0sTUFBTXlILEVBQUksRUFBRzNILEVBQUksR0FBRzhPLFFBQVEsTUFBTyxLQUlqRCxLQUFPTCxFQUFJRCxHQUFHLENBQ1osSUFBS0ssRUFBSXBDLEVBQUsyQixXQUFXcE8sRUFBSXlPLFFBQVVoQixFQUFTa0IsR0FBTSxPQUNqRCxHQUFJRSxJQUFNbkIsRUFBVWlCLEdBQU0sRUFBVWxDLEVBQUsyQixXQUFXSyxLQUFPaEIsS0FBV2dCLE9BQ3RFLEdBQUlJLElBQU1WLEVBQVcsU0FDMUIsT0FBTzFCLEVBQUt2TSxNQUFNeUgsRUFBRzNILEdBSXZCLE9BQU8wTyxHQUFNLEVBQU1qQyxFQUFLdk0sTUFBTXlILEVBQUc2RyxHQUduQyxJQTdCSS9CLEVBQUsyQixXQUFXSSxFQUFJLEtBQU9mLEtBQVdlLEVBQ3RDL0IsRUFBSzJCLFdBQVdJLEVBQUksS0FBT2QsS0FBVWMsR0E0QmpDdEIsRUFBSTBCLE9BQWFyQixHQUFLLENBRTVCLElBREEsSUFBSXdCLEtBQ0c3QixJQUFNSSxHQUFPSixJQUFNSyxHQUFLd0IsRUFBSTFKLEtBQUs2SCxHQUFJQSxFQUFJMEIsSUFDNUNOLEdBQTRCLE9BQXRCUyxFQUFNVCxFQUFFUyxFQUFLOUosT0FDdkJzSixFQUFLbEosS0FBSzBKLEdBR1osT0FBT1IsRUFnQlQsU0FBU1MsRUFBVUQsR0FDakIsT0FBT0EsRUFBSXZFLElBQUl5RSxHQUFhMUosS0FBS3lJLEdBR25DLFNBQVNpQixFQUFZeEMsR0FDbkIsT0FBZSxNQUFSQSxFQUFlLEdBQ2hCd0IsRUFBU2lCLEtBQUt6QyxHQUFRLElBQU0sSUFBT0EsRUFBS3FDLFFBQVEsS0FBTSxNQUFVLElBQ2hFckMsRUFHUixPQUNFMEMsTUFsRkYsU0FBZTFDLEVBQU02QixHQUNuQixJQUFJYyxFQUFTeEIsRUFBU1csRUFBT0YsRUFBVTVCLEVBQU0sU0FBU3NDLEVBQUsvTyxHQUN6RCxHQUFJb1AsRUFBUyxPQUFPQSxFQUFRTCxFQUFLL08sRUFBSSxHQUNyQzROLEVBQVVtQixFQUFLSyxFQUFVZCxFQTlCL0IsU0FBeUJWLEVBQVNVLEdBQ2hDLElBQUllLEVBQVMxQixFQUFnQkMsR0FDN0IsT0FBTyxTQUFTbUIsRUFBSy9PLEdBQ25CLE9BQU9zTyxFQUFFZSxFQUFPTixHQUFNL08sRUFBRzROLElBMkJNMEIsQ0FBZ0JQLEVBQUtULEdBQUtYLEVBQWdCb0IsS0FHekUsT0FEQVIsRUFBS1gsUUFBVUEsTUFDUlcsR0E2RVBGLFVBQVdBLEVBQ1hrQixPQTFCRixTQUFnQmhCLEVBQU1YLEdBRXBCLE9BRGUsTUFBWEEsSUFBaUJBLEVBOUV6QixTQUFzQlcsR0FDcEIsSUFBSWlCLEVBQVlDLE9BQU83QyxPQUFPLE1BQzFCZ0IsS0FVSixPQVJBVyxFQUFLbUIsUUFBUSxTQUFTWCxHQUNwQixJQUFLLElBQUlZLEtBQVVaLEVBQ1hZLEtBQVVILEdBQ2Q1QixFQUFRdkksS0FBS21LLEVBQVVHLEdBQVVBLEtBS2hDL0IsRUFrRTBCZ0MsQ0FBYXJCLEtBQ3BDWCxFQUFRcEQsSUFBSXlFLEdBQWExSixLQUFLeUksSUFBWTZCLE9BQU90QixFQUFLL0QsSUFBSSxTQUFTdUUsR0FDekUsT0FBT25CLEVBQVFwRCxJQUFJLFNBQVNtRixHQUMxQixPQUFPVixFQUFZRixFQUFJWSxNQUN0QnBLLEtBQUt5SSxNQUNOekksS0FBSyxPQXFCVHVLLFdBbEJGLFNBQW9CdkIsR0FDbEIsT0FBT0EsRUFBSy9ELElBQUl3RSxHQUFXekosS0FBSyxTQ3pHMUJ3SyxHQUFJLEtDQUpBLEdBQUksTUNGZCxTQUFTQyxHQUFhQyxHQUNwQixJQUFLQSxFQUFTQyxHQUFJLE1BQU0sSUFBSUMsTUFBTUYsRUFBU0csT0FBUyxJQUFNSCxFQUFTSSxZQUNuRSxPQUFPSixFQUFTSyxPQUdsQixPQUFlLFNBQVNDLEVBQU9DLEdBQzdCLE9BQU9DLE1BQU1GLEVBQU9DLEdBQU1FLEtBQUtWLFFDTmxCLFNBQVNuTSxFQUFHQyxHQUN6QixPQUFPRCxFQUFJQyxHQUFLLEVBQUlELEVBQUlDLEVBQUksRUFBSUQsR0FBS0MsRUFBSSxFQUFJQyxLQ0UvQyxJQ0R3QnVILEdBMEJLZ0QsR0R4QmxCcUMsSUNEYyxLQUREckYsR0RDTzFILElDQWpCM0IsU0F5QmVxTSxHQXpCNkJoRCxHQUE5QkEsR0EwQm5CLFNBQVNuRCxFQUFHNEIsR0FDakIsT0FBT25HLEdBQVUwSyxHQUFFbkcsR0FBSTRCLE1BekJ2QjZHLEtBQU0sU0FBUy9NLEVBQUdrRyxFQUFHOEcsRUFBSUMsR0FHdkIsSUFGVSxNQUFORCxJQUFZQSxFQUFLLEdBQ1gsTUFBTkMsSUFBWUEsRUFBS2pOLEVBQUU1QixRQUNoQjRPLEVBQUtDLEdBQUksQ0FDZCxJQUFJQyxFQUFNRixFQUFLQyxJQUFPLEVBQ2xCeEYsR0FBUXpILEVBQUVrTixHQUFNaEgsR0FBSyxFQUFHOEcsRUFBS0UsRUFBTSxFQUNsQ0QsRUFBS0MsRUFFWixPQUFPRixHQUVURyxNQUFPLFNBQVNuTixFQUFHa0csRUFBRzhHLEVBQUlDLEdBR3hCLElBRlUsTUFBTkQsSUFBWUEsRUFBSyxHQUNYLE1BQU5DLElBQVlBLEVBQUtqTixFQUFFNUIsUUFDaEI0TyxFQUFLQyxHQUFJLENBQ2QsSUFBSUMsRUFBTUYsRUFBS0MsSUFBTyxFQUNsQnhGLEdBQVF6SCxFQUFFa04sR0FBTWhILEdBQUssRUFBRytHLEVBQUtDLEVBQzVCRixFQUFLRSxFQUFNLEVBRWxCLE9BQU9GLEtEbkI0QkcsU0VKMUIsU0FBU0MsRUFBT0MsRUFBTUMsR0FDbkNGLEdBQVNBLEVBQU9DLEdBQVFBLEVBQU1DLEdBQVFsTSxFQUFJMEcsVUFBVTFKLFFBQVUsR0FBS2lQLEVBQU9ELEVBQU9BLEVBQVEsRUFBRyxHQUFLaE0sRUFBSSxFQUFJLEdBQUtrTSxFQU05RyxJQUpBLElBQUluUixHQUFLLEVBQ0xpRixFQUFvRCxFQUFoRDhGLEtBQUtxRyxJQUFJLEVBQUdyRyxLQUFLc0csTUFBTUgsRUFBT0QsR0FBU0UsSUFDM0NHLEVBQVEsSUFBSXRQLE1BQU1pRCxLQUViakYsRUFBSWlGLEdBQ1hxTSxFQUFNdFIsR0FBS2lSLEVBQVFqUixFQUFJbVIsRUFHekIsT0FBT0csR0NYTEMsR0FBTXhHLEtBQUt5RyxLQUFLLElBQ2hCQyxHQUFLMUcsS0FBS3lHLEtBQUssSUFDZkUsR0FBSzNHLEtBQUt5RyxLQUFLLE1BRUosU0FBU1AsRUFBT0MsRUFBTVMsR0FDbkMsSUFBSUMsRUFFQTNNLEVBQ0E0TSxFQUNBVixFQUhBblIsR0FBSyxFQU1ULEdBRDhCMlIsR0FBU0EsR0FBekJWLEdBQVNBLE1BQXZCQyxHQUFRQSxJQUNjUyxFQUFRLEVBQUcsT0FBUVYsR0FFekMsSUFESVcsRUFBVVYsRUFBT0QsS0FBT2hNLEVBQUlnTSxFQUFPQSxFQUFRQyxFQUFNQSxFQUFPak0sR0FDVCxLQUE5Q2tNLEVBQU9XLEdBQWNiLEVBQU9DLEVBQU1TLE1BQWtCSSxTQUFTWixHQUFPLFNBRXpFLEdBQUlBLEVBQU8sRUFJVCxJQUhBRixFQUFRbEcsS0FBS3NHLEtBQUtKLEVBQVFFLEdBQzFCRCxFQUFPbkcsS0FBS2lILE1BQU1kLEVBQU9DLEdBQ3pCVSxFQUFRLElBQUk3UCxNQUFNaUQsRUFBSThGLEtBQUtzRyxLQUFLSCxFQUFPRCxFQUFRLE1BQ3RDalIsRUFBSWlGLEdBQUc0TSxFQUFNN1IsSUFBTWlSLEVBQVFqUixHQUFLbVIsT0FLekMsSUFIQUYsRUFBUWxHLEtBQUtpSCxNQUFNZixFQUFRRSxHQUMzQkQsRUFBT25HLEtBQUtzRyxLQUFLSCxFQUFPQyxHQUN4QlUsRUFBUSxJQUFJN1AsTUFBTWlELEVBQUk4RixLQUFLc0csS0FBS0osRUFBUUMsRUFBTyxNQUN0Q2xSLEVBQUlpRixHQUFHNE0sRUFBTTdSLElBQU1pUixFQUFRalIsR0FBS21SLEVBSzNDLE9BRklTLEdBQVNDLEVBQU1ELFVBRVpDLEdBR1QsU0FBZ0JDLEdBQWNiLEVBQU9DLEVBQU1TLEdBQ3pDLElBQUlSLEdBQVFELEVBQU9ELEdBQVNsRyxLQUFLcUcsSUFBSSxFQUFHTyxHQUNwQ00sRUFBUWxILEtBQUtpSCxNQUFNakgsS0FBS21ILElBQUlmLEdBQVFwRyxLQUFLb0gsTUFDekNDLEVBQVFqQixFQUFPcEcsS0FBS3NILElBQUksR0FBSUosR0FDaEMsT0FBT0EsR0FBUyxHQUNURyxHQUFTYixHQUFNLEdBQUthLEdBQVNYLEdBQUssRUFBSVcsR0FBU1YsR0FBSyxFQUFJLEdBQUszRyxLQUFLc0gsSUFBSSxHQUFJSixJQUMxRWxILEtBQUtzSCxJQUFJLElBQUtKLElBQVVHLEdBQVNiLEdBQU0sR0FBS2EsR0FBU1gsR0FBSyxFQUFJVyxHQUFTVixHQUFLLEVBQUksR0N2Q3pGLE9BQWUsU0FBU1ksRUFBUUMsR0FDOUIsSUFFSXRLLEVBQ0FtSixFQUhBbk0sRUFBSXFOLEVBQU9yUSxPQUNYakMsR0FBSyxFQUlULEdBQWUsTUFBWHVTLEdBQ0YsT0FBU3ZTLEVBQUlpRixHQUNYLEdBQTJCLE9BQXRCZ0QsRUFBUXFLLEVBQU90UyxLQUFlaUksR0FBU0EsRUFFMUMsSUFEQW1KLEVBQU1uSixJQUNHakksRUFBSWlGLEdBQ2dCLE9BQXRCZ0QsRUFBUXFLLEVBQU90UyxLQUFlaUksRUFBUW1KLElBQ3pDQSxFQUFNbkosUUFRZCxPQUFTakksRUFBSWlGLEdBQ1gsR0FBK0MsT0FBMUNnRCxFQUFRc0ssRUFBUUQsRUFBT3RTLEdBQUlBLEVBQUdzUyxLQUFvQnJLLEdBQVNBLEVBRTlELElBREFtSixFQUFNbkosSUFDR2pJLEVBQUlpRixHQUNvQyxPQUExQ2dELEVBQVFzSyxFQUFRRCxFQUFPdFMsR0FBSUEsRUFBR3NTLEtBQW9CckssRUFBUW1KLElBQzdEQSxFQUFNbkosR0FPaEIsT0FBT21KLE1DaENNLFNBQVNrQixFQUFRQyxHQUM5QixJQUVJdEssRUFDQStDLEVBSEEvRixFQUFJcU4sRUFBT3JRLE9BQ1hqQyxHQUFLLEVBSVQsR0FBZSxNQUFYdVMsR0FDRixPQUFTdlMsRUFBSWlGLEdBQ1gsR0FBMkIsT0FBdEJnRCxFQUFRcUssRUFBT3RTLEtBQWVpSSxHQUFTQSxFQUUxQyxJQURBK0MsRUFBTS9DLElBQ0dqSSxFQUFJaUYsR0FDZ0IsT0FBdEJnRCxFQUFRcUssRUFBT3RTLEtBQWVnTCxFQUFNL0MsSUFDdkMrQyxFQUFNL0MsUUFRZCxPQUFTakksRUFBSWlGLEdBQ1gsR0FBK0MsT0FBMUNnRCxFQUFRc0ssRUFBUUQsRUFBT3RTLEdBQUlBLEVBQUdzUyxLQUFvQnJLLEdBQVNBLEVBRTlELElBREErQyxFQUFNL0MsSUFDR2pJLEVBQUlpRixHQUNvQyxPQUExQ2dELEVBQVFzSyxFQUFRRCxFQUFPdFMsR0FBSUEsRUFBR3NTLEtBQW9CdEgsRUFBTS9DLElBQzNEK0MsRUFBTS9DLEdBT2hCLE9BQU8rQyxNQ2hDTSxTQUFTc0gsRUFBUUMsR0FDOUIsSUFFSXRLLEVBRkFoRCxFQUFJcU4sRUFBT3JRLE9BQ1hqQyxHQUFLLEVBRUx3UyxFQUFNLEVBRVYsR0FBZSxNQUFYRCxFQUNGLE9BQVN2UyxFQUFJaUYsSUFDUGdELEdBQVNxSyxFQUFPdFMsTUFBSXdTLEdBQU92SyxRQUtqQyxPQUFTakksRUFBSWlGLElBQ1BnRCxHQUFTc0ssRUFBUUQsRUFBT3RTLEdBQUlBLEVBQUdzUyxNQUFTRSxHQUFPdkssR0FJdkQsT0FBT3VLLEdDaEJULFNBQVNDLE1Ba0RULFNBQVNqSSxHQUFJNkUsRUFBUWYsR0FDbkIsSUFBSTlELEVBQU0sSUFBSWlJLEdBR2QsR0FBSXBELGFBQWtCb0QsR0FBS3BELEVBQU92RixLQUFLLFNBQVM3QixFQUFPekUsR0FBT2dILEVBQUlrSSxJQUFJbFAsRUFBS3lFLFVBR3RFLEdBQUlqRyxNQUFNMlEsUUFBUXRELEdBQVMsQ0FDOUIsSUFFSTNILEVBRkExSCxHQUFLLEVBQ0xpRixFQUFJb0ssRUFBT3BOLE9BR2YsR0FBUyxNQUFMcU0sRUFBVyxPQUFTdE8sRUFBSWlGLEdBQUd1RixFQUFJa0ksSUFBSTFTLEVBQUdxUCxFQUFPclAsU0FDNUMsT0FBU0EsRUFBSWlGLEdBQUd1RixFQUFJa0ksSUFBSXBFLEVBQUU1RyxFQUFJMkgsRUFBT3JQLEdBQUlBLEVBQUdxUCxHQUFTM0gsUUFJdkQsR0FBSTJILEVBQVEsSUFBSyxJQUFJN0wsS0FBTzZMLEVBQVE3RSxFQUFJa0ksSUFBSWxQLEVBQUs2TCxFQUFPN0wsSUFFN0QsT0FBT2dILEVBbkVUaUksR0FBSWpRLFVBQVlnSSxHQUFJaEksV0FDbEJDLFlBQWFnUSxHQUNiRyxJQUFLLFNBQVNwUCxHQUNaLE1BUGdCLElBT0NBLEtBQVEvQyxNQUUzQm9TLElBQUssU0FBU3JQLEdBQ1osT0FBTy9DLEtBVlMsSUFVSytDLElBRXZCa1AsSUFBSyxTQUFTbFAsRUFBS3lFLEdBRWpCLE9BREF4SCxLQWJnQixJQWFGK0MsR0FBT3lFLEVBQ2R4SCxNQUVUMkUsT0FBUSxTQUFTNUIsR0FDZixJQUFJK0ksRUFqQlksSUFpQlEvSSxFQUN4QixPQUFPK0ksS0FBWTlMLGFBQWVBLEtBQUs4TCxJQUV6Q3VHLE1BQU8sV0FDTCxJQUFLLElBQUl2RyxLQUFZOUwsS0FyQkwsTUFxQmU4TCxFQUFTLFdBQXNCOUwsS0FBSzhMLElBRXJFd0csS0FBTSxXQUNKLElBQUlBLEtBQ0osSUFBSyxJQUFJeEcsS0FBWTlMLEtBekJMLE1BeUJlOEwsRUFBUyxJQUFld0csRUFBSzFOLEtBQUtrSCxFQUFTck0sTUFBTSxJQUNoRixPQUFPNlMsR0FFVFQsT0FBUSxXQUNOLElBQUlBLEtBQ0osSUFBSyxJQUFJL0YsS0FBWTlMLEtBOUJMLE1BOEJlOEwsRUFBUyxJQUFlK0YsRUFBT2pOLEtBQUs1RSxLQUFLOEwsSUFDeEUsT0FBTytGLEdBRVRVLFFBQVMsV0FDUCxJQUFJQSxLQUNKLElBQUssSUFBSXpHLEtBQVk5TCxLQW5DTCxNQW1DZThMLEVBQVMsSUFBZXlHLEVBQVEzTixNQUFNN0IsSUFBSytJLEVBQVNyTSxNQUFNLEdBQUkrSCxNQUFPeEgsS0FBSzhMLEtBQ3pHLE9BQU95RyxHQUVUbkosS0FBTSxXQUNKLElBQUlBLEVBQU8sRUFDWCxJQUFLLElBQUkwQyxLQUFZOUwsS0F4Q0wsTUF3Q2U4TCxFQUFTLE1BQWlCMUMsRUFDekQsT0FBT0EsR0FFVHpJLE1BQU8sV0FDTCxJQUFLLElBQUltTCxLQUFZOUwsS0FBTSxHQTVDWCxNQTRDZThMLEVBQVMsR0FBZSxPQUFPLEVBQzlELE9BQU8sR0FFVHpDLEtBQU0sU0FBU3dFLEdBQ2IsSUFBSyxJQUFJL0IsS0FBWTlMLEtBaERMLE1BZ0RlOEwsRUFBUyxJQUFlK0IsRUFBRTdOLEtBQUs4TCxHQUFXQSxFQUFTck0sTUFBTSxHQUFJTyxRQzlDaEcsT0FBZSxXQUNiLElBRUl3UyxFQUNBQyxFQUNBQyxFQUpBSixLQUNBSyxLQUtKLFNBQVN4SCxFQUFNeUgsRUFBT0MsRUFBT0MsRUFBY0MsR0FDekMsR0FBSUYsR0FBU1AsRUFBSzlRLE9BRWhCLE9BRGtCLE1BQWRnUixHQUFvQkksRUFBTWhJLEtBQUs0SCxHQUNsQixNQUFWQyxFQUFpQkEsRUFBT0csR0FBU0EsRUFZMUMsSUFUQSxJQUdJNVAsRUFDQXdFLEVBRUFxSyxFQU5BdFMsR0FBSyxFQUNMaUYsRUFBSW9PLEVBQU1wUixPQUNWdUIsRUFBTXVQLEVBQUtPLEtBR1hHLEVBQWNqSixLQUVka0osRUFBU0gsTUFFSnZULEVBQUlpRixJQUNQcU4sRUFBU21CLEVBQVlaLElBQUlwUCxFQUFXRCxFQUFJeUUsRUFBUW9MLEVBQU1yVCxJQUFNLEtBQzlEc1MsRUFBT2pOLEtBQUs0QyxHQUVad0wsRUFBWWYsSUFBSWpQLEdBQVd3RSxJQVEvQixPQUpBd0wsRUFBWTNKLEtBQUssU0FBU3dJLEVBQVE5TyxHQUNoQ2dRLEVBQVVFLEVBQVFsUSxFQUFLb0ksRUFBTTBHLEVBQVFnQixFQUFPQyxFQUFjQyxNQUdyREUsRUFXVCxPQUFPUCxHQUNMOUQsT0FBUSxTQUFTZ0UsR0FBUyxPQUFPekgsRUFBTXlILEVBQU8sRUFBR00sR0FBY0MsS0FDL0RwSixJQUFLLFNBQVM2SSxHQUFTLE9BQU96SCxFQUFNeUgsRUFBTyxFQUFHUSxHQUFXQyxLQUN6RGQsUUFBUyxTQUFTSyxHQUFTLE9BWDdCLFNBQVNMLEVBQVF4SSxFQUFLOEksR0FDcEIsS0FBTUEsRUFBUVAsRUFBSzlRLE9BQVEsT0FBT3VJLEVBQ2xDLElBQUk2SSxFQUFPVSxFQUFVWCxFQUFTRSxFQUFRLEdBR3RDLE9BRmMsTUFBVkosR0FBa0JJLEdBQVNQLEVBQUs5USxPQUFRb1IsRUFBUTdJLEVBQUl3SSxXQUNuREssS0FBWTdJLEVBQUlWLEtBQUssU0FBU29DLEVBQUc4SCxHQUFLWCxFQUFNaE8sTUFBTTdCLElBQUt3USxFQUFHMUIsT0FBUVUsRUFBUTlHLEVBQUdvSCxRQUNoRSxNQUFYUyxFQUFrQlYsRUFBTWhJLEtBQUssU0FBU3hILEVBQUdDLEdBQUssT0FBT2lRLEVBQVFsUSxFQUFFTCxJQUFLTSxFQUFFTixPQUFXNlAsRUFNdERMLENBQVFwSCxFQUFNeUgsRUFBTyxFQUFHUSxHQUFXQyxJQUFTLElBQzlFdFEsSUFBSyxTQUFTMkUsR0FBbUIsT0FBZDRLLEVBQUsxTixLQUFLOEMsR0FBV2dMLEdBQ3hDQyxTQUFVLFNBQVNoSSxHQUE0QyxPQUFuQ2dJLEVBQVNMLEVBQUs5USxPQUFTLEdBQUttSixFQUFjK0gsR0FDdEVGLFdBQVksU0FBUzdILEdBQTZCLE9BQXBCNkgsRUFBYTdILEVBQWMrSCxHQUN6REQsT0FBUSxTQUFTNUUsR0FBaUIsT0FBWjRFLEVBQVM1RSxFQUFVNkUsS0FJN0MsU0FBU1EsS0FDUCxTQUdGLFNBQVNDLEdBQVV2RSxFQUFRN0wsRUFBS3lFLEdBQzlCb0gsRUFBTzdMLEdBQU95RSxFQUdoQixTQUFTNEwsS0FDUCxPQUFPckosS0FHVCxTQUFTc0osR0FBT3RKLEVBQUtoSCxFQUFLeUUsR0FDeEJ1QyxFQUFJa0ksSUFBSWxQLEVBQUt5RSxHQ3ZFZixJQUFJb0wsR0FBUXJSLE1BQU1RLFVBRVBnSSxHQUFNNkksR0FBTTdJLElBQ1p0SyxHQUFRbVQsR0FBTW5ULE1DQWQrVCxJQUFZblUsS0FBTSxZQ0FkLFNBQVNvVSxLQUN0QixJQUlJL0MsRUFDQWdELEVBTEFDLEVEQ04sU0FBd0JDLEVBQVEvQyxHQUM5QixJQUFJdkssRUFBUXlELEtBQ1I4SixLQUNBQyxFQUFVTixHQUlkLFNBQVNHLEVBQU1qTSxHQUNiLElBQUkzRSxFQUFNMkUsRUFBSSxHQUFJbkksRUFBSStHLEVBQU04TCxJQUFJclAsR0FDaEMsSUFBS3hELEVBQUcsQ0FDTixHQUFJdVUsSUFBWU4sR0FBVSxPQUFPTSxFQUNqQ3hOLEVBQU0yTCxJQUFJbFAsRUFBS3hELEVBQUlzVSxFQUFPalAsS0FBSzhDLElBRWpDLE9BQU9tSixHQUFPdFIsRUFBSSxHQUFLc1IsRUFBTXJQLFFBMEIvQixPQWxDQXFQLEVBQWlCLE1BQVRBLEtBQXFCcFIsR0FBTTRCLEtBQUt3UCxHQVd4QzhDLEVBQU1FLE9BQVMsU0FBU0UsR0FDdEIsSUFBSzdJLFVBQVUxSixPQUFRLE9BQU9xUyxFQUFPcFUsUUFDckNvVSxLQUFhdk4sRUFBUXlELEtBRXJCLElBREEsSUFBMEJyQyxFQUFHM0UsRUFBekJ4RCxHQUFLLEVBQUdpRixFQUFJdVAsRUFBRXZTLFNBQ1RqQyxFQUFJaUYsR0FBUThCLEVBQU02TCxJQUFJcFAsR0FBTzJFLEVBQUlxTSxFQUFFeFUsSUFBTSxLQUFLK0csRUFBTTJMLElBQUlsUCxFQUFLOFEsRUFBT2pQLEtBQUs4QyxJQUNsRixPQUFPaU0sR0FHVEEsRUFBTTlDLE1BQVEsU0FBU2tELEdBQ3JCLE9BQU83SSxVQUFVMUosUUFBVXFQLEVBQVFwUixHQUFNNEIsS0FBSzBTLEdBQUlKLEdBQVM5QyxFQUFNcFIsU0FHbkVrVSxFQUFNRyxRQUFVLFNBQVNDLEdBQ3ZCLE9BQU83SSxVQUFVMUosUUFBVXNTLEVBQVVDLEVBQUdKLEdBQVNHLEdBR25ESCxFQUFNSyxLQUFPLFdBQ1gsT0FBT0osSUFDRkMsT0FBT0EsR0FDUGhELE1BQU1BLEdBQ05pRCxRQUFRQSxJQUdSSCxFQ3hDS0MsR0FBVUUsYUFBUUcsR0FDMUJKLEVBQVNGLEVBQU1FLE9BQ2ZLLEVBQWVQLEVBQU05QyxNQUNyQkEsR0FBUyxFQUFHLEdBR1pzRCxHQUFRLEVBQ1JDLEVBQWUsRUFDZkMsRUFBZSxFQUNmQyxFQUFRLEdBSVosU0FBU0MsSUFDUCxJQUFJL1AsRUFBSXFQLElBQVNyUyxPQUNiMlAsRUFBVU4sRUFBTSxHQUFLQSxFQUFNLEdBQzNCTCxFQUFRSyxFQUFNTSxFQUFVLEdBQ3hCVixFQUFPSSxFQUFNLEVBQUlNLEdBQ3JCVCxHQUFRRCxFQUFPRCxHQUFTbEcsS0FBS3FHLElBQUksRUFBR25NLEVBQUk0UCxFQUE4QixFQUFmQyxHQUNuREYsSUFBT3pELEVBQU9wRyxLQUFLaUgsTUFBTWIsSUFDN0JGLElBQVVDLEVBQU9ELEVBQVFFLEdBQVFsTSxFQUFJNFAsSUFBaUJFLEVBQ3REWixFQUFZaEQsR0FBUSxFQUFJMEQsR0FDcEJELElBQU8zRCxFQUFRbEcsS0FBSzZKLE1BQU0zRCxHQUFRa0QsRUFBWXBKLEtBQUs2SixNQUFNVCxJQUM3RCxJQUFJN0IsRUFBUzJDLEdBQVNoUSxHQUFHdUYsSUFBSSxTQUFTeEssR0FBSyxPQUFPaVIsRUFBUUUsRUFBT25SLElBQ2pFLE9BQU8yVSxFQUFhL0MsRUFBVVUsRUFBT1YsVUFBWVUsR0FxRG5ELGNBbEVPOEIsRUFBTUcsUUFnQmJILEVBQU1FLE9BQVMsU0FBU0UsR0FDdEIsT0FBTzdJLFVBQVUxSixRQUFVcVMsRUFBT0UsR0FBSVEsS0FBYVYsS0FHckRGLEVBQU05QyxNQUFRLFNBQVNrRCxHQUNyQixPQUFPN0ksVUFBVTFKLFFBQVVxUCxJQUFVa0QsRUFBRSxJQUFLQSxFQUFFLElBQUtRLEtBQWExRCxFQUFNcFIsU0FHeEVrVSxFQUFNYyxXQUFhLFNBQVNWLEdBQzFCLE9BQU9sRCxJQUFVa0QsRUFBRSxJQUFLQSxFQUFFLElBQUtJLEdBQVEsRUFBTUksS0FHL0NaLEVBQU1ELFVBQVksV0FDaEIsT0FBT0EsR0FHVEMsRUFBTWpELEtBQU8sV0FDWCxPQUFPQSxHQUdUaUQsRUFBTVEsTUFBUSxTQUFTSixHQUNyQixPQUFPN0ksVUFBVTFKLFFBQVUyUyxJQUFVSixFQUFHUSxLQUFhSixHQUd2RFIsRUFBTWUsUUFBVSxTQUFTWCxHQUN2QixPQUFPN0ksVUFBVTFKLFFBQVU0UyxFQUFlQyxFQUFlL0osS0FBS3FHLElBQUksRUFBR3JHLEtBQUtDLElBQUksRUFBR3dKLElBQUtRLEtBQWFILEdBR3JHVCxFQUFNUyxhQUFlLFNBQVNMLEdBQzVCLE9BQU83SSxVQUFVMUosUUFBVTRTLEVBQWU5SixLQUFLcUcsSUFBSSxFQUFHckcsS0FBS0MsSUFBSSxFQUFHd0osSUFBS1EsS0FBYUgsR0FHdEZULEVBQU1VLGFBQWUsU0FBU04sR0FDNUIsT0FBTzdJLFVBQVUxSixRQUFVNlMsRUFBZS9KLEtBQUtxRyxJQUFJLEVBQUdyRyxLQUFLQyxJQUFJLEVBQUd3SixJQUFLUSxLQUFhRixHQUd0RlYsRUFBTVcsTUFBUSxTQUFTUCxHQUNyQixPQUFPN0ksVUFBVTFKLFFBQVU4UyxFQUFRaEssS0FBS3FHLElBQUksRUFBR3JHLEtBQUtDLElBQUksRUFBR3dKLElBQUtRLEtBQWFELEdBRy9FWCxFQUFNSyxLQUFPLFdBQ1gsT0FBT1AsS0FDRkksT0FBT0EsS0FDUGhELE1BQU1BLEdBQ05zRCxNQUFNQSxHQUNOQyxhQUFhQSxHQUNiQyxhQUFhQSxHQUNiQyxNQUFNQSxJQUdOQyxJQ2pGVCxPQUFlLFNBQVN2UyxFQUFhMlMsRUFBUzVTLEdBQzVDQyxFQUFZRCxVQUFZNFMsRUFBUTVTLFVBQVlBLEVBQzVDQSxFQUFVQyxZQUFjQSxHQUcxQixTQUFnQjRTLEdBQU9sVCxFQUFRbVQsR0FDN0IsSUFBSTlTLEVBQVlpTixPQUFPN0MsT0FBT3pLLEVBQU9LLFdBQ3JDLElBQUssSUFBSWdCLEtBQU84UixFQUFZOVMsRUFBVWdCLEdBQU84UixFQUFXOVIsR0FDeEQsT0FBT2hCLEVDTkYsU0FBUytTLE1BRWhCLElBR0lDLEdBQU0sc0JBQ05DLEdBQU0sZ0RBQ05DLEdBQU0saURBQ05DLEdBQVMsbUJBQ1RDLEdBQVMsbUJBQ1RDLEdBQWUsSUFBSTNILE9BQU8sV0FBYXNILEdBQUtBLEdBQUtBLElBQU8sUUFDeERNLEdBQWUsSUFBSTVILE9BQU8sV0FBYXdILEdBQUtBLEdBQUtBLElBQU8sUUFDeERLLEdBQWdCLElBQUk3SCxPQUFPLFlBQWNzSCxHQUFLQSxHQUFLQSxHQUFLQyxJQUFPLFFBQy9ETyxHQUFnQixJQUFJOUgsT0FBTyxZQUFjd0gsR0FBS0EsR0FBS0EsR0FBS0QsSUFBTyxRQUMvRFEsR0FBZSxJQUFJL0gsT0FBTyxXQUFhdUgsR0FBS0MsR0FBS0EsSUFBTyxRQUN4RFEsR0FBZ0IsSUFBSWhJLE9BQU8sWUFBY3VILEdBQUtDLEdBQUtBLEdBQUtELElBQU8sUUFFL0RVLElBQ0ZDLFVBQVcsU0FDWEMsYUFBYyxTQUNkQyxLQUFNLE1BQ05DLFdBQVksUUFDWkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsTUFBTyxFQUNQQyxlQUFnQixTQUNoQkMsS0FBTSxJQUNOQyxXQUFZLFFBQ1pDLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxVQUFXLFFBQ1hDLFdBQVksUUFDWkMsVUFBVyxTQUNYQyxNQUFPLFNBQ1BDLGVBQWdCLFFBQ2hCQyxTQUFVLFNBQ1ZDLFFBQVMsU0FDVEMsS0FBTSxNQUNOQyxTQUFVLElBQ1ZDLFNBQVUsTUFDVkMsY0FBZSxTQUNmQyxTQUFVLFNBQ1ZDLFVBQVcsTUFDWEMsU0FBVSxTQUNWQyxVQUFXLFNBQ1hDLFlBQWEsUUFDYkMsZUFBZ0IsUUFDaEJDLFdBQVksU0FDWkMsV0FBWSxTQUNaQyxRQUFTLFFBQ1RDLFdBQVksU0FDWkMsYUFBYyxRQUNkQyxjQUFlLFFBQ2ZDLGNBQWUsUUFDZkMsY0FBZSxRQUNmQyxjQUFlLE1BQ2ZDLFdBQVksUUFDWkMsU0FBVSxTQUNWQyxZQUFhLE1BQ2JDLFFBQVMsUUFDVEMsUUFBUyxRQUNUQyxXQUFZLFFBQ1pDLFVBQVcsU0FDWEMsWUFBYSxTQUNiQyxZQUFhLFFBQ2JDLFFBQVMsU0FDVEMsVUFBVyxTQUNYQyxXQUFZLFNBQ1pDLEtBQU0sU0FDTkMsVUFBVyxTQUNYQyxLQUFNLFFBQ05DLE1BQU8sTUFDUEMsWUFBYSxTQUNiQyxLQUFNLFFBQ05DLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLE9BQVEsUUFDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFNBQVUsU0FDVkMsY0FBZSxTQUNmQyxVQUFXLFFBQ1hDLGFBQWMsU0FDZEMsVUFBVyxTQUNYQyxXQUFZLFNBQ1pDLFVBQVcsU0FDWEMscUJBQXNCLFNBQ3RCQyxVQUFXLFNBQ1hDLFdBQVksUUFDWkMsVUFBVyxTQUNYQyxVQUFXLFNBQ1hDLFlBQWEsU0FDYkMsY0FBZSxRQUNmQyxhQUFjLFFBQ2RDLGVBQWdCLFFBQ2hCQyxlQUFnQixRQUNoQkMsZUFBZ0IsU0FDaEJDLFlBQWEsU0FDYkMsS0FBTSxNQUNOQyxVQUFXLFFBQ1hDLE1BQU8sU0FDUEMsUUFBUyxTQUNUQyxPQUFRLFFBQ1JDLGlCQUFrQixRQUNsQkMsV0FBWSxJQUNaQyxhQUFjLFNBQ2RDLGFBQWMsUUFDZEMsZUFBZ0IsUUFDaEJDLGdCQUFpQixRQUNqQkMsa0JBQW1CLE1BQ25CQyxnQkFBaUIsUUFDakJDLGdCQUFpQixTQUNqQkMsYUFBYyxRQUNkQyxVQUFXLFNBQ1hDLFVBQVcsU0FDWEMsU0FBVSxTQUNWQyxZQUFhLFNBQ2JDLEtBQU0sSUFDTkMsUUFBUyxTQUNUQyxNQUFPLFFBQ1BDLFVBQVcsUUFDWEMsT0FBUSxTQUNSQyxVQUFXLFNBQ1hDLE9BQVEsU0FDUkMsY0FBZSxTQUNmQyxVQUFXLFNBQ1hDLGNBQWUsU0FDZkMsY0FBZSxTQUNmQyxXQUFZLFNBQ1pDLFVBQVcsU0FDWEMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsV0FBWSxTQUNaQyxPQUFRLFFBQ1JDLGNBQWUsUUFDZkMsSUFBSyxTQUNMQyxVQUFXLFNBQ1hDLFVBQVcsUUFDWEMsWUFBYSxRQUNiQyxPQUFRLFNBQ1JDLFdBQVksU0FDWkMsU0FBVSxRQUNWQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxRQUFTLFFBQ1RDLFVBQVcsUUFDWEMsVUFBVyxRQUNYQyxVQUFXLFFBQ1hDLEtBQU0sU0FDTkMsWUFBYSxNQUNiQyxVQUFXLFFBQ1hDLElBQUssU0FDTEMsS0FBTSxNQUNOQyxRQUFTLFNBQ1RDLE9BQVEsU0FDUkMsVUFBVyxRQUNYQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxXQUFZLFNBQ1pDLE9BQVEsU0FDUkMsWUFBYSxVQWVmLFNBQXdCQyxHQUFNalEsR0FDNUIsSUFBSTNILEVBRUosT0FEQTJILEdBQVVBLEVBQVMsSUFBSWhMLE9BQU9rYixlQUN0QjdYLEVBQUkrTixHQUFPK0osS0FBS25RLElBQW9DLElBQUlvUSxJQUE1Qi9YLEVBQUlnWSxTQUFTaFksRUFBRSxHQUFJLE1BQW1CLEVBQUksR0FBUUEsR0FBSyxFQUFJLElBQVNBLEdBQUssRUFBSSxHQUFZLElBQUpBLEdBQWlCLEdBQUpBLElBQVksRUFBVSxHQUFKQSxFQUFVLElBQzNKQSxFQUFJZ08sR0FBTzhKLEtBQUtuUSxJQUFXc1EsR0FBS0QsU0FBU2hZLEVBQUUsR0FBSSxNQUMvQ0EsRUFBSWlPLEdBQWE2SixLQUFLblEsSUFBVyxJQUFJb1EsR0FBSS9YLEVBQUUsR0FBSUEsRUFBRSxHQUFJQSxFQUFFLEdBQUksSUFDM0RBLEVBQUlrTyxHQUFhNEosS0FBS25RLElBQVcsSUFBSW9RLEdBQVcsSUFBUC9YLEVBQUUsR0FBVyxJQUFZLElBQVBBLEVBQUUsR0FBVyxJQUFZLElBQVBBLEVBQUUsR0FBVyxJQUFLLElBQy9GQSxFQUFJbU8sR0FBYzJKLEtBQUtuUSxJQUFXdVEsR0FBS2xZLEVBQUUsR0FBSUEsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsS0FDM0RBLEVBQUlvTyxHQUFjMEosS0FBS25RLElBQVd1USxHQUFZLElBQVBsWSxFQUFFLEdBQVcsSUFBWSxJQUFQQSxFQUFFLEdBQVcsSUFBWSxJQUFQQSxFQUFFLEdBQVcsSUFBS0EsRUFBRSxLQUMvRkEsRUFBSXFPLEdBQWF5SixLQUFLblEsSUFBV3dRLEdBQUtuWSxFQUFFLEdBQUlBLEVBQUUsR0FBSyxJQUFLQSxFQUFFLEdBQUssSUFBSyxJQUNwRUEsRUFBSXNPLEdBQWN3SixLQUFLblEsSUFBV3dRLEdBQUtuWSxFQUFFLEdBQUlBLEVBQUUsR0FBSyxJQUFLQSxFQUFFLEdBQUssSUFBS0EsRUFBRSxJQUN4RXVPLEdBQU0vVixlQUFlbVAsR0FBVXNRLEdBQUsxSixHQUFNNUcsSUFDL0IsZ0JBQVhBLEVBQTJCLElBQUlvUSxHQUFJNWIsSUFBS0EsSUFBS0EsSUFBSyxHQUNsRCxLQUdSLFNBQVM4YixHQUFLNWEsR0FDWixPQUFPLElBQUkwYSxHQUFJMWEsR0FBSyxHQUFLLElBQU1BLEdBQUssRUFBSSxJQUFVLElBQUpBLEVBQVUsR0FHMUQsU0FBUzZhLEdBQUtFLEVBQUdDLEVBQUduYyxFQUFHRCxHQUVyQixPQURJQSxHQUFLLElBQUdtYyxFQUFJQyxFQUFJbmMsRUFBSUMsS0FDakIsSUFBSTRiLEdBQUlLLEVBQUdDLEVBQUduYyxFQUFHRCxHQUcxQixTQUFnQnFjLEdBQVd4WSxHQUV6QixPQURNQSxhQUFhNk4sS0FBUTdOLEVBQUk4WCxHQUFNOVgsSUFDaENBLEVBRUUsSUFBSWlZLElBRFhqWSxFQUFJQSxFQUFFeVksT0FDV0gsRUFBR3RZLEVBQUV1WSxFQUFHdlksRUFBRTVELEVBQUc0RCxFQUFFMFksU0FGakIsSUFBSVQsR0FLckIsU0FBZ0JRLEdBQUlILEVBQUdDLEVBQUduYyxFQUFHc2MsR0FDM0IsT0FBNEIsSUFBckJ6VSxVQUFVMUosT0FBZWllLEdBQVdGLEdBQUssSUFBSUwsR0FBSUssRUFBR0MsRUFBR25jLEVBQWMsTUFBWHNjLEVBQWtCLEVBQUlBLEdBR3pGLFNBQWdCVCxHQUFJSyxFQUFHQyxFQUFHbmMsRUFBR3NjLEdBQzNCM2YsS0FBS3VmLEdBQUtBLEVBQ1Z2ZixLQUFLd2YsR0FBS0EsRUFDVnhmLEtBQUtxRCxHQUFLQSxFQUNWckQsS0FBSzJmLFNBQVdBLEVBa0NsQixTQUFTQyxHQUFJcFksR0FFWCxRQURBQSxFQUFROEMsS0FBS3FHLElBQUksRUFBR3JHLEtBQUtDLElBQUksSUFBS0QsS0FBSzZKLE1BQU0zTSxJQUFVLEtBQ3ZDLEdBQUssSUFBTSxJQUFNQSxFQUFNcVksU0FBUyxJQUdsRCxTQUFTUCxHQUFLUSxFQUFHQyxFQUFHQyxFQUFHNWMsR0FJckIsT0FISUEsR0FBSyxFQUFHMGMsRUFBSUMsRUFBSUMsRUFBSTFjLElBQ2YwYyxHQUFLLEdBQUtBLEdBQUssRUFBR0YsRUFBSUMsRUFBSXpjLElBQzFCeWMsR0FBSyxJQUFHRCxFQUFJeGMsS0FDZCxJQUFJMmMsR0FBSUgsRUFBR0MsRUFBR0MsRUFBRzVjLEdBaUMxQixTQUFTNmMsR0FBSUgsRUFBR0MsRUFBR0MsRUFBR0wsR0FDcEIzZixLQUFLOGYsR0FBS0EsRUFDVjlmLEtBQUsrZixHQUFLQSxFQUNWL2YsS0FBS2dnQixHQUFLQSxFQUNWaGdCLEtBQUsyZixTQUFXQSxFQWlDbEIsU0FBU08sR0FBUUosRUFBR3pWLEVBQUk4VixHQUN0QixPQUdZLEtBSEpMLEVBQUksR0FBS3pWLEdBQU04VixFQUFLOVYsR0FBTXlWLEVBQUksR0FDaENBLEVBQUksSUFBTUssRUFDVkwsRUFBSSxJQUFNelYsR0FBTThWLEVBQUs5VixJQUFPLElBQU15VixHQUFLLEdBQ3ZDelYsR0F6S1IrVixHQUFPdEwsR0FBT2lLLElBQ1pzQixZQUFhLFdBQ1gsT0FBT3JnQixLQUFLMGYsTUFBTVcsZUFFcEJULElBQUssV0FDSCxPQUFPNWYsS0FBSzBmLE1BQU1FLE9BRXBCQyxTQUFVLFdBQ1IsT0FBTzdmLEtBQUswZixNQUFRLE1BK0N4QlUsR0FBT2xCLEdBQUtRLEdBQUs5SyxHQUFPRSxJQUN0QndMLFNBQVUsU0FBUy9NLEdBRWpCLE9BREFBLEVBQVMsTUFBTEEsRUE5TmMsRUFERixHQStOV2pKLEtBQUtzSCxJQTlOZCxFQURGLEdBK044QjJCLEdBQ3ZDLElBQUkyTCxHQUFJbGYsS0FBS3VmLEVBQUloTSxFQUFHdlQsS0FBS3dmLEVBQUlqTSxFQUFHdlQsS0FBS3FELEVBQUlrUSxFQUFHdlQsS0FBSzJmLFVBRTFEWSxPQUFRLFNBQVNoTixHQUVmLE9BREFBLEVBQVMsTUFBTEEsRUFuT1ksR0FtT1NqSixLQUFLc0gsSUFuT2QsR0FtTzBCMkIsR0FDbkMsSUFBSTJMLEdBQUlsZixLQUFLdWYsRUFBSWhNLEVBQUd2VCxLQUFLd2YsRUFBSWpNLEVBQUd2VCxLQUFLcUQsRUFBSWtRLEVBQUd2VCxLQUFLMmYsVUFFMURELElBQUssV0FDSCxPQUFPMWYsTUFFVHFnQixZQUFhLFdBQ1gsT0FBUSxHQUFLcmdCLEtBQUt1ZixHQUFLdmYsS0FBS3VmLEdBQUssS0FDekIsR0FBS3ZmLEtBQUt3ZixHQUFLeGYsS0FBS3dmLEdBQUssS0FDekIsR0FBS3hmLEtBQUtxRCxHQUFLckQsS0FBS3FELEdBQUssS0FDekIsR0FBS3JELEtBQUsyZixTQUFXM2YsS0FBSzJmLFNBQVcsR0FFL0NDLElBQUssV0FDSCxNQUFPLElBQU1BLEdBQUk1ZixLQUFLdWYsR0FBS0ssR0FBSTVmLEtBQUt3ZixHQUFLSSxHQUFJNWYsS0FBS3FELElBRXBEd2MsU0FBVSxXQUNSLElBQUl6YyxFQUFJcEQsS0FBSzJmLFFBQ2IsT0FBYyxLQURRdmMsRUFBSW9kLE1BQU1wZCxHQUFLLEVBQUlrSCxLQUFLcUcsSUFBSSxFQUFHckcsS0FBS0MsSUFBSSxFQUFHbkgsS0FDL0MsT0FBUyxTQUNyQmtILEtBQUtxRyxJQUFJLEVBQUdyRyxLQUFLQyxJQUFJLElBQUtELEtBQUs2SixNQUFNblUsS0FBS3VmLElBQU0sSUFBTSxLQUN0RGpWLEtBQUtxRyxJQUFJLEVBQUdyRyxLQUFLQyxJQUFJLElBQUtELEtBQUs2SixNQUFNblUsS0FBS3dmLElBQU0sSUFBTSxLQUN0RGxWLEtBQUtxRyxJQUFJLEVBQUdyRyxLQUFLQyxJQUFJLElBQUtELEtBQUs2SixNQUFNblUsS0FBS3FELElBQU0sS0FDekMsSUFBTkQsRUFBVSxJQUFNLEtBQU9BLEVBQUksU0FxRHRDZ2QsR0FBT0gsR0FYUCxTQUFvQkgsRUFBR0MsRUFBR0MsRUFBR0wsR0FDM0IsT0FBNEIsSUFBckJ6VSxVQUFVMUosT0EzQm5CLFNBQTJCeUYsR0FDekIsR0FBSUEsYUFBYWdaLEdBQUssT0FBTyxJQUFJQSxHQUFJaFosRUFBRTZZLEVBQUc3WSxFQUFFOFksRUFBRzlZLEVBQUUrWSxFQUFHL1ksRUFBRTBZLFNBRXRELEdBRE0xWSxhQUFhNk4sS0FBUTdOLEVBQUk4WCxHQUFNOVgsS0FDaENBLEVBQUcsT0FBTyxJQUFJZ1osR0FDbkIsR0FBSWhaLGFBQWFnWixHQUFLLE9BQU9oWixFQUU3QixJQUFJc1ksR0FESnRZLEVBQUlBLEVBQUV5WSxPQUNJSCxFQUFJLElBQ1ZDLEVBQUl2WSxFQUFFdVksRUFBSSxJQUNWbmMsRUFBSTRELEVBQUU1RCxFQUFJLElBQ1ZrSCxFQUFNRCxLQUFLQyxJQUFJZ1YsRUFBR0MsRUFBR25jLEdBQ3JCc04sRUFBTXJHLEtBQUtxRyxJQUFJNE8sRUFBR0MsRUFBR25jLEdBQ3JCeWMsRUFBSXhjLElBQ0p5YyxFQUFJcFAsRUFBTXBHLEVBQ1Z5VixHQUFLclAsRUFBTXBHLEdBQU8sRUFVdEIsT0FUSXdWLEdBQ2FELEVBQVhQLElBQU01TyxHQUFVNk8sRUFBSW5jLEdBQUswYyxFQUFjLEdBQVRQLEVBQUluYyxHQUM3Qm1jLElBQU03TyxHQUFVdE4sRUFBSWtjLEdBQUtRLEVBQUksR0FDNUJSLEVBQUlDLEdBQUtPLEVBQUksRUFDdkJBLEdBQUtDLEVBQUksR0FBTXJQLEVBQU1wRyxFQUFNLEVBQUlvRyxFQUFNcEcsRUFDckN1VixHQUFLLElBRUxDLEVBQUlDLEVBQUksR0FBS0EsRUFBSSxFQUFJLEVBQUlGLEVBRXBCLElBQUlHLEdBQUlILEVBQUdDLEVBQUdDLEVBQUcvWSxFQUFFMFksU0FJTWMsQ0FBV1gsR0FBSyxJQUFJRyxHQUFJSCxFQUFHQyxFQUFHQyxFQUFjLE1BQVhMLEVBQWtCLEVBQUlBLElBVXhFL0ssR0FBT0UsSUFDdEJ3TCxTQUFVLFNBQVMvTSxHQUVqQixPQURBQSxFQUFTLE1BQUxBLEVBOVNjLEVBREYsR0ErU1dqSixLQUFLc0gsSUE5U2QsRUFERixHQStTOEIyQixHQUN2QyxJQUFJME0sR0FBSWpnQixLQUFLOGYsRUFBRzlmLEtBQUsrZixFQUFHL2YsS0FBS2dnQixFQUFJek0sRUFBR3ZULEtBQUsyZixVQUVsRFksT0FBUSxTQUFTaE4sR0FFZixPQURBQSxFQUFTLE1BQUxBLEVBblRZLEdBbVRTakosS0FBS3NILElBblRkLEdBbVQwQjJCLEdBQ25DLElBQUkwTSxHQUFJamdCLEtBQUs4ZixFQUFHOWYsS0FBSytmLEVBQUcvZixLQUFLZ2dCLEVBQUl6TSxFQUFHdlQsS0FBSzJmLFVBRWxERCxJQUFLLFdBQ0gsSUFBSUksRUFBSTlmLEtBQUs4ZixFQUFJLElBQXFCLEtBQWQ5ZixLQUFLOGYsRUFBSSxHQUM3QkMsRUFBSVMsTUFBTVYsSUFBTVUsTUFBTXhnQixLQUFLK2YsR0FBSyxFQUFJL2YsS0FBSytmLEVBQ3pDQyxFQUFJaGdCLEtBQUtnZ0IsRUFDVEcsRUFBS0gsR0FBS0EsRUFBSSxHQUFNQSxFQUFJLEVBQUlBLEdBQUtELEVBQ2pDMVYsRUFBSyxFQUFJMlYsRUFBSUcsRUFDakIsT0FBTyxJQUFJakIsR0FDVGdCLEdBQVFKLEdBQUssSUFBTUEsRUFBSSxJQUFNQSxFQUFJLElBQUt6VixFQUFJOFYsR0FDMUNELEdBQVFKLEVBQUd6VixFQUFJOFYsR0FDZkQsR0FBUUosRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQUksSUFBS3pWLEVBQUk4VixHQUN6Q25nQixLQUFLMmYsVUFHVFUsWUFBYSxXQUNYLE9BQVEsR0FBS3JnQixLQUFLK2YsR0FBSy9mLEtBQUsrZixHQUFLLEdBQUtTLE1BQU14Z0IsS0FBSytmLEtBQ3pDLEdBQUsvZixLQUFLZ2dCLEdBQUtoZ0IsS0FBS2dnQixHQUFLLEdBQ3pCLEdBQUtoZ0IsS0FBSzJmLFNBQVczZixLQUFLMmYsU0FBVyxNQzFVMUMsSUFBSWUsR0FBVXBXLEtBQUtxVyxHQUFLLElBQ3BCQyxHQUFVLElBQU10VyxLQUFLcVcsR0NLNUJFLEdBQUssT0FDTEMsR0FBSyxFQUNMQyxHQUFLLE9BQ0xDLEdBQUssRUFBSSxHQUNUQyxHQUFLLEVBQUksR0FDVEMsR0FBSyxFQUFJRCxHQUFLQSxHQUNkRSxHQUFLRixHQUFLQSxHQUFLQSxHQUVuQixTQUFTRyxHQUFXbmEsR0FDbEIsR0FBSUEsYUFBYW9hLEdBQUssT0FBTyxJQUFJQSxHQUFJcGEsRUFBRStZLEVBQUcvWSxFQUFFN0QsRUFBRzZELEVBQUU1RCxFQUFHNEQsRUFBRTBZLFNBQ3RELEdBQUkxWSxhQUFhcWEsR0FBSyxDQUNwQixHQUFJZCxNQUFNdlosRUFBRTZZLEdBQUksT0FBTyxJQUFJdUIsR0FBSXBhLEVBQUUrWSxFQUFHLEVBQUcsRUFBRy9ZLEVBQUUwWSxTQUM1QyxJQUFJRyxFQUFJN1ksRUFBRTZZLEVBQUlZLEdBQ2QsT0FBTyxJQUFJVyxHQUFJcGEsRUFBRStZLEVBQUcxVixLQUFLaVgsSUFBSXpCLEdBQUs3WSxFQUFFbUgsRUFBRzlELEtBQUtrWCxJQUFJMUIsR0FBSzdZLEVBQUVtSCxFQUFHbkgsRUFBRTBZLFNBRXhEMVksYUFBYWlZLEtBQU1qWSxFQUFJd1ksR0FBV3hZLElBQ3hDLElBR3VFcUMsRUFBR21ZLEVBSHRFbEMsRUFBSW1DLEdBQVN6YSxFQUFFc1ksR0FDZkMsRUFBSWtDLEdBQVN6YSxFQUFFdVksR0FDZm5jLEVBQUlxZSxHQUFTemEsRUFBRTVELEdBQ2ZzZSxFQUFJQyxJQUFTLFNBQVlyQyxFQUFJLFNBQVlDLEVBQUksU0FBWW5jLEdBQUt5ZCxJQUtsRSxPQUpJdkIsSUFBTUMsR0FBS0EsSUFBTW5jLEVBQUdpRyxFQUFJbVksRUFBSUUsR0FDOUJyWSxFQUFJc1ksSUFBUyxTQUFZckMsRUFBSSxTQUFZQyxFQUFJLFNBQVluYyxHQUFLd2QsSUFDOURZLEVBQUlHLElBQVMsU0FBWXJDLEVBQUksU0FBWUMsRUFBSSxTQUFZbmMsR0FBSzBkLEtBRXpELElBQUlNLEdBQUksSUFBTU0sRUFBSSxHQUFJLEtBQU9yWSxFQUFJcVksR0FBSSxLQUFPQSxFQUFJRixHQUFJeGEsRUFBRTBZLFNBVy9ELFNBQWdCMEIsR0FBSXJCLEVBQUc1YyxFQUFHQyxFQUFHc2MsR0FDM0IzZixLQUFLZ2dCLEdBQUtBLEVBQ1ZoZ0IsS0FBS29ELEdBQUtBLEVBQ1ZwRCxLQUFLcUQsR0FBS0EsRUFDVnJELEtBQUsyZixTQUFXQSxFQTBCbEIsU0FBU2lDLEdBQVFuVixHQUNmLE9BQU9BLEVBQUkwVSxHQUFLN1csS0FBS3NILElBQUluRixFQUFHLEVBQUksR0FBS0EsRUFBSXlVLEdBQUtGLEdBR2hELFNBQVNhLEdBQVFwVixHQUNmLE9BQU9BLEVBQUl3VSxHQUFLeFUsRUFBSUEsRUFBSUEsRUFBSXlVLElBQU16VSxFQUFJdVUsSUFHeEMsU0FBU2MsR0FBU3hZLEdBQ2hCLE9BQU8sS0FBT0EsR0FBSyxTQUFZLE1BQVFBLEVBQUksTUFBUWdCLEtBQUtzSCxJQUFJdEksRUFBRyxFQUFJLEtBQU8sTUFHNUUsU0FBU29ZLEdBQVNwWSxHQUNoQixPQUFRQSxHQUFLLE1BQVEsT0FBVUEsRUFBSSxNQUFRZ0IsS0FBS3NILEtBQUt0SSxFQUFJLE1BQVMsTUFBTyxLQW1CM0UsU0FBZ0JnWSxHQUFJeEIsRUFBRzFSLEVBQUc0UixFQUFHTCxHQUMzQjNmLEtBQUs4ZixHQUFLQSxFQUNWOWYsS0FBS29PLEdBQUtBLEVBQ1ZwTyxLQUFLZ2dCLEdBQUtBLEVBQ1ZoZ0IsS0FBSzJmLFNBQVdBLEVBM0RsQlMsR0FBT2lCLEdBWFAsU0FBNEJyQixFQUFHNWMsRUFBR0MsRUFBR3NjLEdBQ25DLE9BQTRCLElBQXJCelUsVUFBVTFKLE9BQWU0ZixHQUFXcEIsR0FBSyxJQUFJcUIsR0FBSXJCLEVBQUc1YyxFQUFHQyxFQUFjLE1BQVhzYyxFQUFrQixFQUFJQSxJQVV4RS9LLEdBQU9FLElBQ3RCd0wsU0FBVSxTQUFTL00sR0FDakIsT0FBTyxJQUFJOE4sR0FBSXJoQixLQUFLZ2dCLEVBN0NoQixJQTZDOEIsTUFBTHpNLEVBQVksRUFBSUEsR0FBSXZULEtBQUtvRCxFQUFHcEQsS0FBS3FELEVBQUdyRCxLQUFLMmYsVUFFeEVZLE9BQVEsU0FBU2hOLEdBQ2YsT0FBTyxJQUFJOE4sR0FBSXJoQixLQUFLZ2dCLEVBaERoQixJQWdEOEIsTUFBTHpNLEVBQVksRUFBSUEsR0FBSXZULEtBQUtvRCxFQUFHcEQsS0FBS3FELEVBQUdyRCxLQUFLMmYsVUFFeEVELElBQUssV0FDSCxJQUFJaUMsR0FBSzNoQixLQUFLZ2dCLEVBQUksSUFBTSxJQUNwQjFXLEVBQUlrWCxNQUFNeGdCLEtBQUtvRCxHQUFLdWUsRUFBSUEsRUFBSTNoQixLQUFLb0QsRUFBSSxJQUNyQ3FlLEVBQUlqQixNQUFNeGdCLEtBQUtxRCxHQUFLc2UsRUFBSUEsRUFBSTNoQixLQUFLcUQsRUFBSSxJQUl6QyxPQUFPLElBQUk2YixHQUNUNEMsR0FBVSxXQUpaeFksRUFBSXVYLEdBQUtnQixHQUFRdlksSUFJVyxXQUg1QnFZLEVBQUliLEdBQUtlLEdBQVFGLElBRzJCLFVBRjVDRixFQUFJVixHQUFLYyxHQUFRSixLQUdmSyxJQUFVLFNBQVl4WSxFQUFJLFVBQVlxWSxFQUFJLFFBQVlGLEdBQ3RESyxHQUFVLFNBQVl4WSxFQUFJLFNBQVlxWSxFQUFJLFVBQVlGLEdBQ3REemhCLEtBQUsyZixhQTRDWFMsR0FBT2tCLEdBWFAsU0FBb0J4QixFQUFHMVIsRUFBRzRSLEVBQUdMLEdBQzNCLE9BQTRCLElBQXJCelUsVUFBVTFKLE9BYm5CLFNBQW9CeUYsR0FDbEIsR0FBSUEsYUFBYXFhLEdBQUssT0FBTyxJQUFJQSxHQUFJcmEsRUFBRTZZLEVBQUc3WSxFQUFFbUgsRUFBR25ILEVBQUUrWSxFQUFHL1ksRUFBRTBZLFNBRXRELEdBRE0xWSxhQUFhb2EsS0FBTXBhLEVBQUltYSxHQUFXbmEsSUFDNUIsSUFBUkEsRUFBRTdELEdBQW1CLElBQVI2RCxFQUFFNUQsRUFBUyxPQUFPLElBQUlpZSxHQUFJaGUsSUFBSyxFQUFHMkQsRUFBRStZLEVBQUcvWSxFQUFFMFksU0FDMUQsSUFBSUcsRUFBSXhWLEtBQUt5WCxNQUFNOWEsRUFBRTVELEVBQUc0RCxFQUFFN0QsR0FBS3dkLEdBQy9CLE9BQU8sSUFBSVUsR0FBSXhCLEVBQUksRUFBSUEsRUFBSSxJQUFNQSxFQUFHeFYsS0FBS3lHLEtBQUs5SixFQUFFN0QsRUFBSTZELEVBQUU3RCxFQUFJNkQsRUFBRTVELEVBQUk0RCxFQUFFNUQsR0FBSTRELEVBQUUrWSxFQUFHL1ksRUFBRTBZLFNBUTdDcUMsQ0FBV2xDLEdBQUssSUFBSXdCLEdBQUl4QixFQUFHMVIsRUFBRzRSLEVBQWMsTUFBWEwsRUFBa0IsRUFBSUEsSUFVeEUvSyxHQUFPRSxJQUN0QndMLFNBQVUsU0FBUy9NLEdBQ2pCLE9BQU8sSUFBSStOLEdBQUl0aEIsS0FBSzhmLEVBQUc5ZixLQUFLb08sRUFBR3BPLEtBQUtnZ0IsRUEzR2hDLElBMkc4QyxNQUFMek0sRUFBWSxFQUFJQSxHQUFJdlQsS0FBSzJmLFVBRXhFWSxPQUFRLFNBQVNoTixHQUNmLE9BQU8sSUFBSStOLEdBQUl0aEIsS0FBSzhmLEVBQUc5ZixLQUFLb08sRUFBR3BPLEtBQUtnZ0IsRUE5R2hDLElBOEc4QyxNQUFMek0sRUFBWSxFQUFJQSxHQUFJdlQsS0FBSzJmLFVBRXhFRCxJQUFLLFdBQ0gsT0FBTzBCLEdBQVdwaEIsTUFBTTBmLFVDbEg1QixJQUFJdUMsSUFBSyxPQUNMQyxHQUFJLFFBQ0pDLElBQUssT0FDTEMsSUFBSyxPQUNMQyxHQUFJLFFBQ0pDLEdBQUtELEdBQUlELEdBQ1RHLEdBQUtGLEdBQUlILEdBQ1RNLEdBQVFOLEdBQUlDLEdBQUlDLEdBQUlILEdBZ0J4QixTQUF3QlEsR0FBVTNDLEVBQUdDLEVBQUdDLEVBQUdMLEdBQ3pDLE9BQTRCLElBQXJCelUsVUFBVTFKLE9BZm5CLFNBQTBCeUYsR0FDeEIsR0FBSUEsYUFBYXliLEdBQVcsT0FBTyxJQUFJQSxHQUFVemIsRUFBRTZZLEVBQUc3WSxFQUFFOFksRUFBRzlZLEVBQUUrWSxFQUFHL1ksRUFBRTBZLFNBQzVEMVksYUFBYWlZLEtBQU1qWSxFQUFJd1ksR0FBV3hZLElBQ3hDLElBQUlzWSxFQUFJdFksRUFBRXNZLEVBQUksSUFDVkMsRUFBSXZZLEVBQUV1WSxFQUFJLElBQ1ZuYyxFQUFJNEQsRUFBRTVELEVBQUksSUFDVjJjLEdBQUt3QyxHQUFRbmYsRUFBSWlmLEdBQUsvQyxFQUFJZ0QsR0FBSy9DLElBQU1nRCxHQUFRRixHQUFLQyxJQUNsREksRUFBS3RmLEVBQUkyYyxFQUNUek0sR0FBSzhPLElBQUs3QyxFQUFJUSxHQUFLbUMsR0FBSVEsR0FBTVAsR0FDN0JyQyxFQUFJelYsS0FBS3lHLEtBQUt3QyxFQUFJQSxFQUFJb1AsRUFBS0EsSUFBT04sR0FBSXJDLEdBQUssRUFBSUEsSUFDL0NGLEVBQUlDLEVBQUl6VixLQUFLeVgsTUFBTXhPLEVBQUdvUCxHQUFNL0IsR0FBVSxJQUFNdGQsSUFDaEQsT0FBTyxJQUFJb2YsR0FBVTVDLEVBQUksRUFBSUEsRUFBSSxJQUFNQSxFQUFHQyxFQUFHQyxFQUFHL1ksRUFBRTBZLFNBSWxCaUQsQ0FBaUI5QyxHQUFLLElBQUk0QyxHQUFVNUMsRUFBR0MsRUFBR0MsRUFBYyxNQUFYTCxFQUFrQixFQUFJQSxHQUdyRyxTQUFnQitDLEdBQVU1QyxFQUFHQyxFQUFHQyxFQUFHTCxHQUNqQzNmLEtBQUs4ZixHQUFLQSxFQUNWOWYsS0FBSytmLEdBQUtBLEVBQ1YvZixLQUFLZ2dCLEdBQUtBLEVBQ1ZoZ0IsS0FBSzJmLFNBQVdBLEVDbkNYLFNBQVNrRCxHQUFNNUIsRUFBSTZCLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ3BDLElBQUkvQixFQUFLRCxFQUFLQSxFQUFJRSxFQUFLRCxFQUFLRCxFQUM1QixRQUFTLEVBQUksRUFBSUEsRUFBSyxFQUFJQyxFQUFLQyxHQUFNMkIsR0FDOUIsRUFBSSxFQUFJNUIsRUFBSyxFQUFJQyxHQUFNNEIsR0FDdkIsRUFBSSxFQUFJOUIsRUFBSyxFQUFJQyxFQUFLLEVBQUlDLEdBQU02QixFQUNqQzdCLEVBQUs4QixHQUFNLEVEaUNuQjdDLEdBQU9zQyxHQUFXRCxHQUFXN04sR0FBT0UsSUFDbEN3TCxTQUFVLFNBQVMvTSxHQUVqQixPQURBQSxFQUFTLE1BQUxBLEVIbkNjLEVBREYsR0dvQ1dqSixLQUFLc0gsSUhuQ2QsRUFERixHR29DOEIyQixHQUN2QyxJQUFJbVAsR0FBVTFpQixLQUFLOGYsRUFBRzlmLEtBQUsrZixFQUFHL2YsS0FBS2dnQixFQUFJek0sRUFBR3ZULEtBQUsyZixVQUV4RFksT0FBUSxTQUFTaE4sR0FFZixPQURBQSxFQUFTLE1BQUxBLEVIeENZLEdHd0NTakosS0FBS3NILElIeENkLEdHd0MwQjJCLEdBQ25DLElBQUltUCxHQUFVMWlCLEtBQUs4ZixFQUFHOWYsS0FBSytmLEVBQUcvZixLQUFLZ2dCLEVBQUl6TSxFQUFHdlQsS0FBSzJmLFVBRXhERCxJQUFLLFdBQ0gsSUFBSUksRUFBSVUsTUFBTXhnQixLQUFLOGYsR0FBSyxHQUFLOWYsS0FBSzhmLEVBQUksS0FBT1ksR0FDekNWLEdBQUtoZ0IsS0FBS2dnQixFQUNWNWMsRUFBSW9kLE1BQU14Z0IsS0FBSytmLEdBQUssRUFBSS9mLEtBQUsrZixFQUFJQyxHQUFLLEVBQUlBLEdBQzFDa0QsRUFBTzVZLEtBQUtpWCxJQUFJekIsR0FDaEJxRCxFQUFPN1ksS0FBS2tYLElBQUkxQixHQUNwQixPQUFPLElBQUlaLEdBQ1QsS0FBT2MsRUFBSTVjLEdBQUs2ZSxHQUFJaUIsRUFBT2hCLEdBQUlpQixJQUMvQixLQUFPbkQsRUFBSTVjLEdBQUsrZSxHQUFJZSxFQUFPZCxHQUFJZSxJQUMvQixLQUFPbkQsRUFBSTVjLEdBQUtpZixHQUFJYSxJQUNwQmxqQixLQUFLMmYsYUNqRFgsT0NSZSxTQUFTclcsR0FDdEIsT0FBTyxXQUNMLE9BQU9BLElDQVgsU0FBUzhaLEdBQU9oZ0IsRUFBR3NFLEdBQ2pCLE9BQU8sU0FBUytFLEdBQ2QsT0FBT3JKLEVBQUlxSixFQUFJL0UsR0FlbkIsU0FBZ0IyYixHQUFNMUIsR0FDcEIsT0FBb0IsSUFBWkEsR0FBS0EsR0FBVzJCLEdBQVUsU0FBU2xnQixFQUFHQyxHQUM1QyxPQUFPQSxFQUFJRCxFQWJmLFNBQXFCQSxFQUFHQyxFQUFHc2UsR0FDekIsT0FBT3ZlLEVBQUlrSCxLQUFLc0gsSUFBSXhPLEVBQUd1ZSxHQUFJdGUsRUFBSWlILEtBQUtzSCxJQUFJdk8sRUFBR3NlLEdBQUt2ZSxFQUFHdWUsRUFBSSxFQUFJQSxFQUFHLFNBQVNsVixHQUNyRSxPQUFPbkMsS0FBS3NILElBQUl4TyxFQUFJcUosRUFBSXBKLEVBQUdzZSxJQVdaNEIsQ0FBWW5nQixFQUFHQyxFQUFHc2UsR0FBSzZCLEdBQVNoRCxNQUFNcGQsR0FBS0MsRUFBSUQsSUFJbEUsU0FBd0JrZ0IsR0FBUWxnQixFQUFHQyxHQUNqQyxJQUFJcUUsRUFBSXJFLEVBQUlELEVBQ1osT0FBT3NFLEVBQUkwYixHQUFPaGdCLEVBQUdzRSxHQUFLOGIsR0FBU2hELE1BQU1wZCxHQUFLQyxFQUFJRCxHQ3RCcEQsT0FBZSxTQUFVcWdCLEVBQVM5QixHQUNoQyxJQUFJNUMsRUFBUXNFLEdBQU0xQixHQUVsQixTQUFTakMsRUFBSWxQLEVBQU9rVCxHQUNsQixJQUFJbkUsRUFBSVIsR0FBT3ZPLEVBQVFtVCxHQUFTblQsSUFBUStPLEdBQUltRSxFQUFNQyxHQUFTRCxJQUFNbkUsR0FDN0RDLEVBQUlULEVBQU12TyxFQUFNZ1AsRUFBR2tFLEVBQUlsRSxHQUN2Qm5jLEVBQUkwYixFQUFNdk8sRUFBTW5OLEVBQUdxZ0IsRUFBSXJnQixHQUN2QnNjLEVBQVUyRCxHQUFROVMsRUFBTW1QLFFBQVMrRCxFQUFJL0QsU0FDekMsT0FBTyxTQUFTbFQsR0FLZCxPQUpBK0QsRUFBTStPLEVBQUlBLEVBQUU5UyxHQUNaK0QsRUFBTWdQLEVBQUlBLEVBQUUvUyxHQUNaK0QsRUFBTW5OLEVBQUlBLEVBQUVvSixHQUNaK0QsRUFBTW1QLFFBQVVBLEVBQVFsVCxHQUNqQitELEVBQVEsSUFNbkIsT0FGQWtQLEVBQUkyRCxNQUFRSSxFQUVML0QsRUFuQk0sQ0FvQlosR0FFSCxTQUFTa0UsR0FBVUMsR0FDakIsT0FBTyxTQUFTQyxHQUNkLElBSUl2a0IsRUFBR3dmLEVBSkh2YSxFQUFJc2YsRUFBT3RpQixPQUNYK2QsRUFBSSxJQUFJaGUsTUFBTWlELEdBQ2RnYixFQUFJLElBQUlqZSxNQUFNaUQsR0FDZG5CLEVBQUksSUFBSTlCLE1BQU1pRCxHQUVsQixJQUFLakYsRUFBSSxFQUFHQSxFQUFJaUYsSUFBS2pGLEVBQ25Cd2YsRUFBUTRFLEdBQVNHLEVBQU92a0IsSUFDeEJnZ0IsRUFBRWhnQixHQUFLd2YsRUFBTVEsR0FBSyxFQUNsQkMsRUFBRWpnQixHQUFLd2YsRUFBTVMsR0FBSyxFQUNsQm5jLEVBQUU5RCxHQUFLd2YsRUFBTTFiLEdBQUssRUFNcEIsT0FKQWtjLEVBQUlzRSxFQUFPdEUsR0FDWEMsRUFBSXFFLEVBQU9yRSxHQUNYbmMsRUFBSXdnQixFQUFPeGdCLEdBQ1gwYixFQUFNWSxRQUFVLEVBQ1QsU0FBU2xULEdBSWQsT0FIQXNTLEVBQU1RLEVBQUlBLEVBQUU5UyxHQUNac1MsRUFBTVMsRUFBSUEsRUFBRS9TLEdBQ1pzUyxFQUFNMWIsRUFBSUEsRUFBRW9KLEdBQ0xzUyxFQUFRLEtBS3JCLElBQVdnRixHQUFXSCxHSDdDUCxTQUFTL1IsR0FDdEIsSUFBSXJOLEVBQUlxTixFQUFPclEsT0FBUyxFQUN4QixPQUFPLFNBQVNpTCxHQUNkLElBQUlsTixFQUFJa04sR0FBSyxFQUFLQSxFQUFJLEVBQUtBLEdBQUssR0FBS0EsRUFBSSxFQUFHakksRUFBSSxHQUFLOEYsS0FBS2lILE1BQU05RSxFQUFJakksR0FDaEV1ZSxFQUFLbFIsRUFBT3RTLEdBQ1p5akIsRUFBS25SLEVBQU90UyxFQUFJLEdBQ2hCdWpCLEVBQUt2akIsRUFBSSxFQUFJc1MsRUFBT3RTLEVBQUksR0FBSyxFQUFJd2pCLEVBQUtDLEVBQ3RDQyxFQUFLMWpCLEVBQUlpRixFQUFJLEVBQUlxTixFQUFPdFMsRUFBSSxHQUFLLEVBQUl5akIsRUFBS0QsRUFDOUMsT0FBT0YsSUFBT3BXLEVBQUlsTixFQUFJaUYsR0FBS0EsRUFBR3NlLEVBQUlDLEVBQUlDLEVBQUlDLFVHc0NsQlcsR0NwRGIsU0FBUy9SLEdBQ3RCLElBQUlyTixFQUFJcU4sRUFBT3JRLE9BQ2YsT0FBTyxTQUFTaUwsR0FDZCxJQUFJbE4sRUFBSStLLEtBQUtpSCxRQUFROUUsR0FBSyxHQUFLLElBQU1BLEVBQUlBLEdBQUtqSSxHQUMxQ3NlLEVBQUtqUixHQUFRdFMsRUFBSWlGLEVBQUksR0FBS0EsR0FDMUJ1ZSxFQUFLbFIsRUFBT3RTLEVBQUlpRixHQUNoQndlLEVBQUtuUixHQUFRdFMsRUFBSSxHQUFLaUYsR0FDdEJ5ZSxFQUFLcFIsR0FBUXRTLEVBQUksR0FBS2lGLEdBQzFCLE9BQU9xZSxJQUFPcFcsRUFBSWxOLEVBQUlpRixHQUFLQSxFQUFHc2UsRUFBSUMsRUFBSUMsRUFBSUMsTUNWL0IsU0FBUzdmLEVBQUdDLEdBQ3pCLE9BQWVBLEdBQVJELEdBQUtBLEVBQVcsU0FBU3FKLEdBQzlCLE9BQU9ySixFQUFJQyxFQUFJb0osS0NBZnVYLEdBQU0sOENBQ05DLEdBQU0sSUFBSXhXLE9BQU91VyxHQUFJRSxPQUFRLEtBY2pDLElDZklDLEdBQ0FDLEdBQ0FDLEdBQ0FDLE1EWVcsU0FBU2xoQixFQUFHQyxHQUN6QixJQUNJa2hCLEVBQ0FDLEVBQ0FDLEVBSEFDLEVBQUtWLEdBQUlXLFVBQVlWLEdBQUlVLFVBQVksRUFJckNwbEIsR0FBSyxFQUNMd2dCLEtBQ0E2RSxLQU1KLElBSEF4aEIsR0FBUSxHQUFJQyxHQUFRLElBR1praEIsRUFBS1AsR0FBSS9FLEtBQUs3YixNQUNkb2hCLEVBQUtQLEdBQUloRixLQUFLNWIsTUFDZm9oQixFQUFLRCxFQUFHbGUsT0FBU29lLElBQ3BCRCxFQUFLcGhCLEVBQUU1RCxNQUFNaWxCLEVBQUlELEdBQ2IxRSxFQUFFeGdCLEdBQUl3Z0IsRUFBRXhnQixJQUFNa2xCLEVBQ2IxRSxJQUFJeGdCLEdBQUtrbEIsSUFFWEYsRUFBS0EsRUFBRyxPQUFTQyxFQUFLQSxFQUFHLElBQ3hCekUsRUFBRXhnQixHQUFJd2dCLEVBQUV4Z0IsSUFBTWlsQixFQUNiekUsSUFBSXhnQixHQUFLaWxCLEdBRWR6RSxJQUFJeGdCLEdBQUssS0FDVHFsQixFQUFFaGdCLE1BQU1yRixFQUFHQSxFQUFHK0osRUFBR3ViLEdBQU9OLEVBQUlDLE1BRTlCRSxFQUFLVCxHQUFJVSxVQVlYLE9BUklELEVBQUtyaEIsRUFBRTdCLFNBQ1RpakIsRUFBS3BoQixFQUFFNUQsTUFBTWlsQixHQUNUM0UsRUFBRXhnQixHQUFJd2dCLEVBQUV4Z0IsSUFBTWtsQixFQUNiMUUsSUFBSXhnQixHQUFLa2xCLEdBS1QxRSxFQUFFdmUsT0FBUyxFQUFLb2pCLEVBQUUsR0E3QzNCLFNBQWF2aEIsR0FDWCxPQUFPLFNBQVNvSixHQUNkLE9BQU9wSixFQUFFb0osR0FBSyxJQTRDVnFZLENBQUlGLEVBQUUsR0FBR3RiLEdBcERqQixTQUFjakcsR0FDWixPQUFPLFdBQ0wsT0FBT0EsR0FtREgwaEIsQ0FBSzFoQixJQUNKQSxFQUFJdWhCLEVBQUVwakIsT0FBUSxTQUFTaUwsR0FDdEIsSUFBSyxJQUFXeEYsRUFBUDFILEVBQUksRUFBTUEsRUFBSThELElBQUs5RCxFQUFHd2dCLEdBQUc5WSxFQUFJMmQsRUFBRXJsQixJQUFJQSxHQUFLMEgsRUFBRXFDLEVBQUVtRCxHQUNyRCxPQUFPc1QsRUFBRWpiLEtBQUssVUVwRFQsU0FBUzFCLEVBQUdDLEdBQ3pCLElBQWtCK0ssRUFBZDNCLFNBQVdwSixFQUNmLE9BQVksTUFBTEEsR0FBbUIsWUFBTm9KLEVBQWtCK1csR0FBU25nQixJQUNsQyxXQUFOb0osRUFBaUJvWSxHQUNaLFdBQU5wWSxHQUFtQjJCLEVBQUkyUSxHQUFNMWIsS0FBT0EsRUFBSStLLEVBQUdzUixJQUFPN2IsR0FDbERSLGFBQWEwYixHQUFRVyxHQUNyQnJjLGFBQWEyaEIsS0NmTixTQUFTNWhCLEVBQUdDLEdBQ3pCLElBQUlxRSxFQUFJLElBQUlzZCxLQUNaLE9BQWUzaEIsR0FBUkQsR0FBS0EsRUFBVyxTQUFTcUosR0FDOUIsT0FBTy9FLEVBQUV1ZCxRQUFRN2hCLEVBQUlDLEVBQUlvSixHQUFJL0UsSURhekJuRyxNQUFNMlEsUUFBUTdPLEdFZFAsU0FBU0QsRUFBR0MsR0FDekIsSUFJSTlELEVBSkEybEIsRUFBSzdoQixFQUFJQSxFQUFFN0IsT0FBUyxFQUNwQjJqQixFQUFLL2hCLEVBQUlrSCxLQUFLQyxJQUFJMmEsRUFBSTloQixFQUFFNUIsUUFBVSxFQUNsQzhILEVBQUksSUFBSS9ILE1BQU00akIsR0FDZC9XLEVBQUksSUFBSTdNLE1BQU0yakIsR0FHbEIsSUFBSzNsQixFQUFJLEVBQUdBLEVBQUk0bEIsSUFBTTVsQixFQUFHK0osRUFBRS9KLEdBQUtpSSxHQUFNcEUsRUFBRTdELEdBQUk4RCxFQUFFOUQsSUFDOUMsS0FBT0EsRUFBSTJsQixJQUFNM2xCLEVBQUc2TyxFQUFFN08sR0FBSzhELEVBQUU5RCxHQUU3QixPQUFPLFNBQVNrTixHQUNkLElBQUtsTixFQUFJLEVBQUdBLEVBQUk0bEIsSUFBTTVsQixFQUFHNk8sRUFBRTdPLEdBQUsrSixFQUFFL0osR0FBR2tOLEdBQ3JDLE9BQU8yQixJRkdrQixtQkFBZC9LLEVBQUUraEIsU0FBZ0QsbUJBQWYvaEIsRUFBRXdjLFVBQTJCVyxNQUFNbmQsR0dmdEUsU0FBU0QsRUFBR0MsR0FDekIsSUFFSWtRLEVBRkFoVSxLQUNBNk8sS0FNSixJQUFLbUYsS0FISyxPQUFOblEsR0FBMkIsaUJBQU5BLElBQWdCQSxNQUMvQixPQUFOQyxHQUEyQixpQkFBTkEsSUFBZ0JBLE1BRS9CQSxFQUNKa1EsS0FBS25RLEVBQ1A3RCxFQUFFZ1UsR0FBSy9MLEdBQU1wRSxFQUFFbVEsR0FBSWxRLEVBQUVrUSxJQUVyQm5GLEVBQUVtRixHQUFLbFEsRUFBRWtRLEdBSWIsT0FBTyxTQUFTOUcsR0FDZCxJQUFLOEcsS0FBS2hVLEVBQUc2TyxFQUFFbUYsR0FBS2hVLEVBQUVnVSxHQUFHOUcsR0FDekIsT0FBTzJCLElIRkh5VyxJQUFRemhCLEVBQUdDLE9JbEJKLFNBQVNELEVBQUdDLEdBQ3pCLE9BQWVBLEdBQVJELEdBQUtBLEVBQVcsU0FBU3FKLEdBQzlCLE9BQU9uQyxLQUFLNkosTUFBTS9RLEVBQUlDLEVBQUlvSixLQ0YxQjRZLEdBQVUsSUFBTS9hLEtBQUtxVyxHQUVkMkUsSUFDVEMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLE9BQVEsRUFDUkMsTUFBTyxFQUNQQyxPQUFRLEVBQ1JDLE9BQVEsTUFHSyxTQUFTeGlCLEVBQUdDLEVBQUcrSyxFQUFHMUcsRUFBR21lLEVBQUdoWSxHQUNyQyxJQUFJOFgsRUFBUUMsRUFBUUYsRUFLcEIsT0FKSUMsRUFBU3JiLEtBQUt5RyxLQUFLM04sRUFBSUEsRUFBSUMsRUFBSUEsTUFBSUQsR0FBS3VpQixFQUFRdGlCLEdBQUtzaUIsSUFDckRELEVBQVF0aUIsRUFBSWdMLEVBQUkvSyxFQUFJcUUsS0FBRzBHLEdBQUtoTCxFQUFJc2lCLEVBQU9oZSxHQUFLckUsRUFBSXFpQixJQUNoREUsRUFBU3RiLEtBQUt5RyxLQUFLM0MsRUFBSUEsRUFBSTFHLEVBQUlBLE1BQUkwRyxHQUFLd1gsRUFBUWxlLEdBQUtrZSxFQUFRRixHQUFTRSxHQUN0RXhpQixFQUFJc0UsRUFBSXJFLEVBQUkrSyxJQUFHaEwsR0FBS0EsRUFBR0MsR0FBS0EsRUFBR3FpQixHQUFTQSxFQUFPQyxHQUFVQSxJQUUzREosV0FBWU0sRUFDWkwsV0FBWTNYLEVBQ1o0WCxPQUFRbmIsS0FBS3lYLE1BQU0xZSxFQUFHRCxHQUFLaWlCLEdBQzNCSyxNQUFPcGIsS0FBS3diLEtBQUtKLEdBQVNMLEdBQzFCTSxPQUFRQSxFQUNSQyxPQUFRQSxJQ3BCWixTQUFTRyxHQUFxQnJYLEVBQU9zWCxFQUFTQyxFQUFTQyxHQUVyRCxTQUFTQyxFQUFJcEcsR0FDWCxPQUFPQSxFQUFFdmUsT0FBU3VlLEVBQUVvRyxNQUFRLElBQU0sR0FzQ3BDLE9BQU8sU0FBUy9pQixFQUFHQyxHQUNqQixJQUFJMGMsS0FDQTZFLEtBT0osT0FOQXhoQixFQUFJc0wsRUFBTXRMLEdBQUlDLEVBQUlxTCxFQUFNckwsR0F0QzFCLFNBQW1CK2lCLEVBQUlDLEVBQUlDLEVBQUlDLEVBQUl4RyxFQUFHNkUsR0FDcEMsR0FBSXdCLElBQU9FLEdBQU1ELElBQU9FLEVBQUksQ0FDMUIsSUFBSWhuQixFQUFJd2dCLEVBQUVuYixLQUFLLGFBQWMsS0FBTW9oQixFQUFTLEtBQU1DLEdBQ2xEckIsRUFBRWhnQixNQUFNckYsRUFBR0EsRUFBSSxFQUFHK0osRUFBR3ViLEdBQU91QixFQUFJRSxLQUFPL21CLEVBQUdBLEVBQUksRUFBRytKLEVBQUd1YixHQUFPd0IsRUFBSUUsVUFDdERELEdBQU1DLElBQ2Z4RyxFQUFFbmIsS0FBSyxhQUFlMGhCLEVBQUtOLEVBQVVPLEVBQUtOLEdBa0M1Q08sQ0FBVXBqQixFQUFFbWlCLFdBQVluaUIsRUFBRW9pQixXQUFZbmlCLEVBQUVraUIsV0FBWWxpQixFQUFFbWlCLFdBQVl6RixFQUFHNkUsR0E5QnZFLFNBQWdCeGhCLEVBQUdDLEVBQUcwYyxFQUFHNkUsR0FDbkJ4aEIsSUFBTUMsR0FDSkQsRUFBSUMsRUFBSSxJQUFLQSxHQUFLLElBQWNBLEVBQUlELEVBQUksTUFBS0EsR0FBSyxLQUN0RHdoQixFQUFFaGdCLE1BQU1yRixFQUFHd2dCLEVBQUVuYixLQUFLdWhCLEVBQUlwRyxHQUFLLFVBQVcsS0FBTW1HLEdBQVksRUFBRzVjLEVBQUd1YixHQUFPemhCLEVBQUdDLE1BQy9EQSxHQUNUMGMsRUFBRW5iLEtBQUt1aEIsRUFBSXBHLEdBQUssVUFBWTFjLEVBQUk2aUIsR0EwQmxDVCxDQUFPcmlCLEVBQUVxaUIsT0FBUXBpQixFQUFFb2lCLE9BQVExRixFQUFHNkUsR0F0QmhDLFNBQWV4aEIsRUFBR0MsRUFBRzBjLEVBQUc2RSxHQUNsQnhoQixJQUFNQyxFQUNSdWhCLEVBQUVoZ0IsTUFBTXJGLEVBQUd3Z0IsRUFBRW5iLEtBQUt1aEIsRUFBSXBHLEdBQUssU0FBVSxLQUFNbUcsR0FBWSxFQUFHNWMsRUFBR3ViLEdBQU96aEIsRUFBR0MsS0FDOURBLEdBQ1QwYyxFQUFFbmIsS0FBS3VoQixFQUFJcEcsR0FBSyxTQUFXMWMsRUFBSTZpQixHQW1CakNSLENBQU10aUIsRUFBRXNpQixNQUFPcmlCLEVBQUVxaUIsTUFBTzNGLEVBQUc2RSxHQWY3QixTQUFld0IsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSXhHLEVBQUc2RSxHQUNoQyxHQUFJd0IsSUFBT0UsR0FBTUQsSUFBT0UsRUFBSSxDQUMxQixJQUFJaG5CLEVBQUl3Z0IsRUFBRW5iLEtBQUt1aEIsRUFBSXBHLEdBQUssU0FBVSxLQUFNLElBQUssS0FBTSxLQUNuRDZFLEVBQUVoZ0IsTUFBTXJGLEVBQUdBLEVBQUksRUFBRytKLEVBQUd1YixHQUFPdUIsRUFBSUUsS0FBTy9tQixFQUFHQSxFQUFJLEVBQUcrSixFQUFHdWIsR0FBT3dCLEVBQUlFLFVBQy9DLElBQVBELEdBQW1CLElBQVBDLEdBQ3JCeEcsRUFBRW5iLEtBQUt1aEIsRUFBSXBHLEdBQUssU0FBV3VHLEVBQUssSUFBTUMsRUFBSyxLQVc3QzVTLENBQU12USxFQUFFdWlCLE9BQVF2aUIsRUFBRXdpQixPQUFRdmlCLEVBQUVzaUIsT0FBUXRpQixFQUFFdWlCLE9BQVE3RixFQUFHNkUsR0FDakR4aEIsRUFBSUMsRUFBSSxLQUNELFNBQVNvSixHQUVkLElBREEsSUFBMEJ4RixFQUF0QjFILEdBQUssRUFBR2lGLEVBQUlvZ0IsRUFBRXBqQixTQUNUakMsRUFBSWlGLEdBQUd1YixHQUFHOVksRUFBSTJkLEVBQUVybEIsSUFBSUEsR0FBSzBILEVBQUVxQyxFQUFFbUQsR0FDdEMsT0FBT3NULEVBQUVqYixLQUFLLE1BS3BCLElBQVcyaEIsR0FBMEJWLEdQdERyQyxTQUF5QnZlLEdBQ3ZCLE1BQWMsU0FBVkEsRUFBeUI4ZCxJQUN4Qm5CLEtBQVNBLEdBQVVoa0IsU0FBU0ksY0FBYyxPQUFRNmpCLEdBQVVqa0IsU0FBU0csZ0JBQWlCK2pCLEdBQVVsa0IsU0FBU29ELGFBQzlHNGdCLEdBQVExZ0IsTUFBTWlqQixVQUFZbGYsRUFDMUJBLEVBQVE2YyxHQUFRMWdCLGlCQUFpQnlnQixHQUFRbmlCLFlBQVlraUIsSUFBVSxNQUFNemdCLGlCQUFpQixhQUN0RjBnQixHQUFReGUsWUFBWXVlLElBQ3BCM2MsRUFBUUEsRUFBTS9ILE1BQU0sR0FBSSxHQUFHc0UsTUFBTSxLQUMxQjRpQixJQUFXbmYsRUFBTSxJQUFLQSxFQUFNLElBQUtBLEVBQU0sSUFBS0EsRUFBTSxJQUFLQSxFQUFNLElBQUtBLEVBQU0sTU8rQ2IsT0FBUSxNQUFPLFFBQ3hFb2YsR0FBMEJiLEdQN0NyQyxTQUF5QnZlLEdBQ3ZCLE9BQWEsTUFBVEEsRUFBc0I4ZCxJQUNyQmhCLEtBQVNBLEdBQVVua0IsU0FBU0QsZ0JBQWdCLDZCQUE4QixNQUMvRW9rQixHQUFRemYsYUFBYSxZQUFhMkMsSUFDNUJBLEVBQVE4YyxHQUFRb0MsVUFBVUcsUUFBUUMsZ0JBQ3hDdGYsRUFBUUEsRUFBTXVmLE9BQ1BKLEdBQVVuZixFQUFNcEUsRUFBR29FLEVBQU1uRSxFQUFHbUUsRUFBTTRHLEVBQUc1RyxFQUFNRSxFQUFHRixFQUFNcWUsRUFBR3JlLEVBQU1xRyxJQUZMeVgsS095Q0csS0FBTSxJQUFLLEtDM0QvRSxTQUFTN0MsR0FBVXVFLEdBQ2pCLE9BQU8sU0FBVUMsRUFBZXRGLEdBRzlCLFNBQVNjLEVBQVVqUyxFQUFPa1QsR0FDeEIsSUFBSTVELEVBQUlrSCxHQUFLeFcsRUFBUTBXLEdBQWUxVyxJQUFRc1AsR0FBSTRELEVBQU13RCxHQUFleEQsSUFBTTVELEdBQ3ZFQyxFQUFJaEIsR0FBTXZPLEVBQU11UCxFQUFHMkQsRUFBSTNELEdBQ3ZCQyxFQUFJakIsR0FBTXZPLEVBQU13UCxFQUFHMEQsRUFBSTFELEdBQ3ZCTCxFQUFVWixHQUFNdk8sRUFBTW1QLFFBQVMrRCxFQUFJL0QsU0FDdkMsT0FBTyxTQUFTbFQsR0FLZCxPQUpBK0QsRUFBTXNQLEVBQUlBLEVBQUVyVCxHQUNaK0QsRUFBTXVQLEVBQUlBLEVBQUV0VCxHQUNaK0QsRUFBTXdQLEVBQUlBLEVBQUUxVixLQUFLc0gsSUFBSW5GLEVBQUdrVixJQUN4Qm5SLEVBQU1tUCxRQUFVQSxFQUFRbFQsR0FDakIrRCxFQUFRLElBTW5CLE9BbEJBbVIsR0FBS0EsRUFnQkxjLEVBQVVZLE1BQVE0RCxFQUVYeEUsRUFuQkYsQ0FvQkosR0FHTDBFLEdiYkEsU0FBb0IvakIsRUFBR0MsR0FDckIsSUFBSXFFLEVBQUlyRSxFQUFJRCxFQUNaLE9BQU9zRSxFQUFJMGIsR0FBT2hnQixFQUFHc0UsRUFBSSxLQUFPQSxHQUFLLElBQU1BLEVBQUksSUFBTTRDLEtBQUs2SixNQUFNek0sRUFBSSxLQUFPQSxHQUFLOGIsR0FBU2hELE1BQU1wZCxHQUFLQyxFQUFJRCxLYVkxRyxJQUFXZ2tCLEdBQWdCM0UsR0FBVTFELE9DNUJ0QixTQUFTelYsR0FDdEIsT0FBTyxXQUNMLE9BQU9BLE9DRkksU0FBU0EsR0FDdEIsT0FBUUEsR0NLTitkLElBQVEsRUFBRyxHQUVmLFNBQWdCQyxHQUFvQmxrQixFQUFHQyxHQUNyQyxPQUFRQSxHQUFNRCxHQUFLQSxHQUNiLFNBQVNrRyxHQUFLLE9BQVFBLEVBQUlsRyxHQUFLQyxHQUMvQm1nQixHQUFTbmdCLEdBaUJqQixTQUFTa2tCLEdBQU0xVCxFQUFRaEQsRUFBTzJXLEVBQWVDLEdBQzNDLElBQUlDLEVBQUs3VCxFQUFPLEdBQUk4VCxFQUFLOVQsRUFBTyxHQUFJK1QsRUFBSy9XLEVBQU0sR0FBSWdYLEVBQUtoWCxFQUFNLEdBRzlELE9BRkk4VyxFQUFLRCxHQUFJQSxFQUFLRixFQUFjRyxFQUFJRCxHQUFLRSxFQUFLSCxFQUFjSSxFQUFJRCxLQUMzREYsRUFBS0YsRUFBY0UsRUFBSUMsR0FBS0MsRUFBS0gsRUFBY0csRUFBSUMsSUFDakQsU0FBU3ZlLEdBQUssT0FBT3NlLEVBQUdGLEVBQUdwZSxLQUdwQyxTQUFTd2UsR0FBUWpVLEVBQVFoRCxFQUFPMlcsRUFBZUMsR0FDN0MsSUFBSXZnQixFQUFJb0QsS0FBS0MsSUFBSXNKLEVBQU9yUyxPQUFRcVAsRUFBTXJQLFFBQVUsRUFDNUNrRyxFQUFJLElBQUluRyxNQUFNMkYsR0FDZHFZLEVBQUksSUFBSWhlLE1BQU0yRixHQUNkM0gsR0FBSyxFQVFULElBTElzVSxFQUFPM00sR0FBSzJNLEVBQU8sS0FDckJBLEVBQVNBLEVBQU9wVSxRQUFRMFIsVUFDeEJOLEVBQVFBLEVBQU1wUixRQUFRMFIsYUFHZjVSLEVBQUkySCxHQUNYUSxFQUFFbkksR0FBS2lvQixFQUFjM1QsRUFBT3RVLEdBQUlzVSxFQUFPdFUsRUFBSSxJQUMzQ2dnQixFQUFFaGdCLEdBQUtrb0IsRUFBYzVXLEVBQU10UixHQUFJc1IsRUFBTXRSLEVBQUksSUFHM0MsT0FBTyxTQUFTK0osR0FDZCxJQUFJL0osRUFBSXdvQixHQUFPbFUsRUFBUXZLLEVBQUcsRUFBR3BDLEdBQUssRUFDbEMsT0FBT3FZLEVBQUVoZ0IsR0FBR21JLEVBQUVuSSxHQUFHK0osS0NuRHJCLE9BQWUsU0FBU0EsRUFBRzBlLEdBQ3pCLElBQUt6b0IsR0FBSytKLEVBQUkwZSxFQUFJMWUsRUFBRTJlLGNBQWNELEVBQUksR0FBSzFlLEVBQUUyZSxpQkFBaUJ6b0IsUUFBUSxNQUFRLEVBQUcsT0FBTyxLQUN4RixJQUFJRCxFQUFHMm9CLEVBQWM1ZSxFQUFFN0osTUFBTSxFQUFHRixHQUloQyxPQUNFMm9CLEVBQVkxbUIsT0FBUyxFQUFJMG1CLEVBQVksR0FBS0EsRUFBWXpvQixNQUFNLEdBQUt5b0IsR0FDaEU1ZSxFQUFFN0osTUFBTUYsRUFBSSxRQ1RGLFNBQVMrSixHQUN0QixPQUFPQSxFQUFJNmUsR0FBYzdkLEtBQUs4ZCxJQUFJOWUsS0FBU0EsRUFBRSxHQUFLaEcsS0NGaEQra0IsR0FBSywyRUFFVCxTQUF3QkMsR0FBZ0JDLEdBQ3RDLE9BQU8sSUFBSUMsR0FBZ0JELEdBSzdCLFNBQVNDLEdBQWdCRCxHQUN2QixLQUFNcGYsRUFBUWtmLEdBQUdwSixLQUFLc0osSUFBYSxNQUFNLElBQUk3WSxNQUFNLG1CQUFxQjZZLEdBQ3hFLElBQUlwZixFQUNKbkosS0FBS3lvQixLQUFPdGYsRUFBTSxJQUFNLElBQ3hCbkosS0FBS3NVLE1BQVFuTCxFQUFNLElBQU0sSUFDekJuSixLQUFLMG9CLEtBQU92ZixFQUFNLElBQU0sSUFDeEJuSixLQUFLMm9CLE9BQVN4ZixFQUFNLElBQU0sR0FDMUJuSixLQUFLK2tCLE9BQVM1YixFQUFNLEdBQ3BCbkosS0FBSzRvQixNQUFRemYsRUFBTSxLQUFPQSxFQUFNLEdBQ2hDbkosS0FBSzZvQixRQUFVMWYsRUFBTSxHQUNyQm5KLEtBQUs4b0IsVUFBWTNmLEVBQU0sS0FBT0EsRUFBTSxHQUFHMUosTUFBTSxHQUM3Q08sS0FBSzhELE9BQVNxRixFQUFNLEdBQ3BCbkosS0FBS29ILEtBQU8rQixFQUFNLEtBQU8sR0FkM0JtZixHQUFnQnZtQixVQUFZeW1CLEdBQWdCem1CLFVBaUI1Q3ltQixHQUFnQnptQixVQUFVOGQsU0FBVyxXQUNuQyxPQUFPN2YsS0FBS3lvQixLQUNOem9CLEtBQUtzVSxNQUNMdFUsS0FBSzBvQixLQUNMMW9CLEtBQUsyb0IsUUFDSjNvQixLQUFLK2tCLEtBQU8sSUFBTSxLQUNKLE1BQWQva0IsS0FBSzRvQixNQUFnQixHQUFLdGUsS0FBS3FHLElBQUksRUFBZ0IsRUFBYjNRLEtBQUs0b0IsU0FDM0M1b0IsS0FBSzZvQixNQUFRLElBQU0sS0FDRCxNQUFsQjdvQixLQUFLOG9CLFVBQW9CLEdBQUssSUFBTXhlLEtBQUtxRyxJQUFJLEVBQW9CLEVBQWpCM1EsS0FBSzhvQixhQUNyRDlvQixLQUFLOEQsS0FBTyxJQUFNLElBQ25COUQsS0FBS29ILE1DakNiLElDQ1cyaEIsR0NBUEMsR0FDT2xhLEdBQ0FtYSxNRkhJLFNBQVNsSixHQUN0Qm1KLEVBQUssSUFBSyxJQUFrQ3RmLEVBQTlCcEYsRUFBSXViLEVBQUV2ZSxPQUFRakMsRUFBSSxFQUFHb0ssR0FBTSxFQUFPcEssRUFBSWlGLElBQUtqRixFQUN2RCxPQUFRd2dCLEVBQUV4Z0IsSUFDUixJQUFLLElBQUtvSyxFQUFLQyxFQUFLckssRUFBRyxNQUN2QixJQUFLLElBQWdCLElBQVBvSyxJQUFVQSxFQUFLcEssR0FBR3FLLEVBQUtySyxFQUFHLE1BQ3hDLFFBQVMsR0FBSW9LLEVBQUssRUFBRyxDQUFFLEtBQU1vVyxFQUFFeGdCLEdBQUksTUFBTTJwQixFQUFLdmYsRUFBSyxHQUd2RCxPQUFPQSxFQUFLLEVBQUlvVyxFQUFFdGdCLE1BQU0sRUFBR2tLLEdBQU1vVyxFQUFFdGdCLE1BQU1tSyxFQUFLLEdBQUttVyxNR1B0QyxTQUFTelcsRUFBRzBlLEdBQ3pCLElBQUl0Z0IsRUFBSXlnQixHQUFjN2UsRUFBRzBlLEdBQ3pCLElBQUt0Z0IsRUFBRyxPQUFPNEIsRUFBSSxHQUNuQixJQUFJNGUsRUFBY3hnQixFQUFFLEdBQ2hCeWhCLEVBQVd6aEIsRUFBRSxHQUNqQixPQUFPeWhCLEVBQVcsRUFBSSxLQUFPLElBQUk1bkIsT0FBTzRuQixHQUFVcmtCLEtBQUssS0FBT29qQixFQUN4REEsRUFBWTFtQixPQUFTMm5CLEVBQVcsRUFBSWpCLEVBQVl6b0IsTUFBTSxFQUFHMHBCLEVBQVcsR0FBSyxJQUFNakIsRUFBWXpvQixNQUFNMHBCLEVBQVcsR0FDNUdqQixFQUFjLElBQUkzbUIsTUFBTTRuQixFQUFXakIsRUFBWTFtQixPQUFTLEdBQUdzRCxLQUFLLFVDTHRFc2tCLElBQUssU0FBUzlmLEVBQUcwZSxHQUFLLE9BQVksSUFBSjFlLEdBQVMrZixRQUFRckIsSUFDL0Mza0IsRUFBSyxTQUFTaUcsR0FBSyxPQUFPZ0IsS0FBSzZKLE1BQU03SyxHQUFHdVcsU0FBUyxJQUNqRHpSLEVBQUssU0FBUzlFLEdBQUssT0FBT0EsRUFBSSxJQUM5QjVCLEVBQUssU0FBUzRCLEdBQUssT0FBT2dCLEtBQUs2SixNQUFNN0ssR0FBR3VXLFNBQVMsS0FDakRnRyxFQUFLLFNBQVN2YyxFQUFHMGUsR0FBSyxPQUFPMWUsRUFBRTJlLGNBQWNELElBQzdDbmEsRUFBSyxTQUFTdkUsRUFBRzBlLEdBQUssT0FBTzFlLEVBQUUrZixRQUFRckIsSUFDdkN4SSxFQUFLLFNBQVNsVyxFQUFHMGUsR0FBSyxPQUFPMWUsRUFBRWdnQixZQUFZdEIsSUFDM0MvZ0IsRUFBSyxTQUFTcUMsR0FBSyxPQUFPZ0IsS0FBSzZKLE1BQU03SyxHQUFHdVcsU0FBUyxJQUNqRG1JLEVBQUssU0FBUzFlLEVBQUcwZSxHQUFLLE9BQU91QixHQUFrQixJQUFKamdCLEVBQVMwZSxJQUNwRHpJLEVBQUtnSyxHQUNMeEosRUhWYSxTQUFTelcsRUFBRzBlLEdBQ3pCLElBQUl0Z0IsRUFBSXlnQixHQUFjN2UsRUFBRzBlLEdBQ3pCLElBQUt0Z0IsRUFBRyxPQUFPNEIsRUFBSSxHQUNuQixJQUFJNGUsRUFBY3hnQixFQUFFLEdBQ2hCeWhCLEVBQVd6aEIsRUFBRSxHQUNibkksRUFBSTRwQixHQUFZSixHQUF1RSxFQUF0RHplLEtBQUtxRyxLQUFLLEVBQUdyRyxLQUFLQyxJQUFJLEVBQUdELEtBQUtpSCxNQUFNNFgsRUFBVyxNQUFZLEVBQzVGM2tCLEVBQUkwakIsRUFBWTFtQixPQUNwQixPQUFPakMsSUFBTWlGLEVBQUkwakIsRUFDWDNvQixFQUFJaUYsRUFBSTBqQixFQUFjLElBQUkzbUIsTUFBTWhDLEVBQUlpRixFQUFJLEdBQUdNLEtBQUssS0FDaER2RixFQUFJLEVBQUkyb0IsRUFBWXpvQixNQUFNLEVBQUdGLEdBQUssSUFBTTJvQixFQUFZem9CLE1BQU1GLEdBQzFELEtBQU8sSUFBSWdDLE1BQU0sRUFBSWhDLEdBQUd1RixLQUFLLEtBQU9xakIsR0FBYzdlLEVBQUdnQixLQUFLcUcsSUFBSSxFQUFHcVgsRUFBSXpvQixFQUFJLElBQUksSUdDbkZpcUIsRUFBSyxTQUFTbGdCLEdBQUssT0FBT2dCLEtBQUs2SixNQUFNN0ssR0FBR3VXLFNBQVMsSUFBSTRKLGVBQ3JEbmdCLEVBQUssU0FBU0EsR0FBSyxPQUFPZ0IsS0FBSzZKLE1BQU03SyxHQUFHdVcsU0FBUyxTQ2hCcEMsU0FBU3ZXLEdBQ3RCLE9BQU9BLEdDUUxvZ0IsSUFBWSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtKSzdFVixHSUhhLFNBQVNBLEdBQ3RCLElDWnNCVyxFQUFVQyxFRFk1QnJuQixFQUFReW1CLEVBQU9XLFVBQVlYLEVBQU9ZLFdDWmhCRCxFRFl3Q1gsRUFBT1csU0NackNDLEVEWStDWixFQUFPWSxVQ1gvRSxTQUFTcGlCLEVBQU9vaEIsR0FPckIsSUFOQSxJQUFJcnBCLEVBQUlpSSxFQUFNaEcsT0FDVmlMLEtBQ0F2RixFQUFJLEVBQ0pzWSxFQUFJbUssRUFBUyxHQUNibm9CLEVBQVMsRUFFTmpDLEVBQUksR0FBS2lnQixFQUFJLElBQ2RoZSxFQUFTZ2UsRUFBSSxFQUFJb0osSUFBT3BKLEVBQUlsVixLQUFLcUcsSUFBSSxFQUFHaVksRUFBUXBuQixJQUNwRGlMLEVBQUU3SCxLQUFLNEMsRUFBTXFpQixVQUFVdHFCLEdBQUtpZ0IsRUFBR2pnQixFQUFJaWdCLE9BQzlCaGUsR0FBVWdlLEVBQUksR0FBS29KLEtBQ3hCcEosRUFBSW1LLEVBQVN6aUIsR0FBS0EsRUFBSSxHQUFLeWlCLEVBQVNub0IsUUFHdEMsT0FBT2lMLEVBQUUwRSxVQUFVck0sS0FBSzhrQixLREh5RXRFLEdBQy9Gd0UsRUFBV2QsRUFBT2MsU0FDbEJDLEVBQVVmLEVBQU9lLFFBQ2pCQyxFQUFXaEIsRUFBT2dCLFNFZlQsU0FBU0EsR0FDdEIsT0FBTyxTQUFTeGlCLEdBQ2QsT0FBT0EsRUFBTTZHLFFBQVEsU0FBVSxTQUFTOU8sR0FDdEMsT0FBT3lxQixHQUFVenFCLE1GWVkwcUIsQ0FBZWpCLEVBQU9nQixVQUFZMUUsR0FDL0Q0RSxFQUFVbEIsRUFBT2tCLFNBQVcsSUFFaEMsU0FBU0MsRUFBVTVCLEdBR2pCLElBQUlFLEdBRkpGLEVBQVlELEdBQWdCQyxJQUVQRSxLQUNqQm5VLEVBQVFpVSxFQUFValUsTUFDbEJvVSxFQUFPSCxFQUFVRyxLQUNqQkMsRUFBU0osRUFBVUksT0FDbkI1RCxFQUFPd0QsRUFBVXhELEtBQ2pCNkQsRUFBUUwsRUFBVUssTUFDbEJDLEVBQVFOLEVBQVVNLE1BQ2xCQyxFQUFZUCxFQUFVTyxVQUN0QmhsQixFQUFPeWtCLEVBQVV6a0IsS0FDakJzRCxFQUFPbWhCLEVBQVVuaEIsS0FHUixNQUFUQSxHQUFjeWhCLEdBQVEsRUFBTXpoQixFQUFPLEtBRzdCZ2pCLEdBQVloakIsS0FBb0IsTUFBYjBoQixJQUFzQkEsRUFBWSxJQUFLaGxCLEdBQU8sRUFBTXNELEVBQU8sTUFHcEYyZCxHQUFrQixNQUFUMEQsR0FBMEIsTUFBVm5VLEtBQWdCeVEsR0FBTyxFQUFNMEQsRUFBTyxJQUFLblUsRUFBUSxLQUk5RSxJQUFJaFYsRUFBb0IsTUFBWHFwQixFQUFpQm1CLEVBQVMsR0FBZ0IsTUFBWG5CLEdBQWtCLFNBQVNsYSxLQUFLckgsR0FBUSxJQUFNQSxFQUFLNFgsY0FBZ0IsR0FDM0dxTCxFQUFvQixNQUFYMUIsRUFBaUJtQixFQUFTLEdBQUssT0FBT3JiLEtBQUtySCxHQUFROGlCLEVBQVUsR0FLdEVJLEVBQWFGLEdBQVloakIsR0FDekJtakIsRUFBYyxhQUFhOWIsS0FBS3JILEdBVXBDLFNBQVMwSCxFQUFPdEgsR0FDZCxJQUVJakksRUFBR2lGLEVBQUc0SixFQUZOb2MsRUFBY2xyQixFQUNkbXJCLEVBQWNKLEVBR2xCLEdBQWEsTUFBVGpqQixFQUNGcWpCLEVBQWNILEVBQVc5aUIsR0FBU2lqQixFQUNsQ2pqQixFQUFRLE9BQ0gsQ0FJTCxJQUFJa2pCLEdBSEpsakIsR0FBU0EsR0FHbUIsRUFlNUIsR0FkQUEsRUFBUThpQixFQUFXaGdCLEtBQUs4ZCxJQUFJNWdCLEdBQVFzaEIsR0FHaENobEIsSUFBTTBELEVBQVFtakIsR0FBV25qQixJQUd6QmtqQixHQUE0QixJQUFWbGpCLElBQWFrakIsR0FBZ0IsR0FHbkRGLEdBQWVFLEVBQTBCLE1BQVRoQyxFQUFlQSxFQUFPLElBQWdCLE1BQVRBLEdBQXlCLE1BQVRBLEVBQWUsR0FBS0EsR0FBUThCLEVBQ3pHQyxHQUF3QixNQUFUcmpCLEVBQWVzaUIsR0FBUyxFQUFJWCxHQUFpQixHQUFLLElBQU0wQixHQUFlQyxHQUEwQixNQUFUaEMsRUFBZSxJQUFNLElBSXhINkIsRUFFRixJQURBaHJCLEdBQUssRUFBR2lGLEVBQUlnRCxFQUFNaEcsU0FDVGpDLEVBQUlpRixHQUNYLEdBQTZCLElBQXpCNEosRUFBSTVHLEVBQU1tRyxXQUFXcE8sS0FBYzZPLEVBQUksR0FBSSxDQUM3Q3FjLEdBQXFCLEtBQU5yYyxFQUFXMmIsRUFBVXZpQixFQUFNL0gsTUFBTUYsRUFBSSxHQUFLaUksRUFBTS9ILE1BQU1GLElBQU1rckIsRUFDM0VqakIsRUFBUUEsRUFBTS9ILE1BQU0sRUFBR0YsR0FDdkIsT0FPSnNwQixJQUFVOUQsSUFBTXZkLEVBQVFqRixFQUFNaUYsRUFBT29qQixFQUFBQSxJQUd6QyxJQUFJcHBCLEVBQVNncEIsRUFBWWhwQixPQUFTZ0csRUFBTWhHLE9BQVNpcEIsRUFBWWpwQixPQUN6RGtULEVBQVVsVCxFQUFTb25CLEVBQVEsSUFBSXJuQixNQUFNcW5CLEVBQVFwbkIsRUFBUyxHQUFHc0QsS0FBSzJqQixHQUFRLEdBTTFFLE9BSElJLEdBQVM5RCxJQUFNdmQsRUFBUWpGLEVBQU1tUyxFQUFVbE4sRUFBT2tOLEVBQVFsVCxPQUFTb25CLEVBQVE2QixFQUFZanBCLE9BQVNvcEIsRUFBQUEsR0FBV2xXLEVBQVUsSUFHN0dKLEdBQ04sSUFBSyxJQUFLOU0sRUFBUWdqQixFQUFjaGpCLEVBQVFpakIsRUFBYy9WLEVBQVMsTUFDL0QsSUFBSyxJQUFLbE4sRUFBUWdqQixFQUFjOVYsRUFBVWxOLEVBQVFpakIsRUFBYSxNQUMvRCxJQUFLLElBQUtqakIsRUFBUWtOLEVBQVFqVixNQUFNLEVBQUcrQixFQUFTa1QsRUFBUWxULFFBQVUsR0FBS2dwQixFQUFjaGpCLEVBQVFpakIsRUFBYy9WLEVBQVFqVixNQUFNK0IsR0FBUyxNQUM5SCxRQUFTZ0csRUFBUWtOLEVBQVU4VixFQUFjaGpCLEVBQVFpakIsRUFHbkQsT0FBT1QsRUFBU3hpQixHQU9sQixPQXBFQXNoQixFQUF5QixNQUFiQSxFQUFvQixFQUMxQixTQUFTcmEsS0FBS3JILEdBQVFrRCxLQUFLcUcsSUFBSSxFQUFHckcsS0FBS0MsSUFBSSxHQUFJdWUsSUFDL0N4ZSxLQUFLcUcsSUFBSSxFQUFHckcsS0FBS0MsSUFBSSxHQUFJdWUsSUE4RC9CaGEsRUFBTytRLFNBQVcsV0FDaEIsT0FBTzBJLEVBQVksSUFHZHpaLEVBYVQsT0FDRUEsT0FBUXFiLEVBQ1JsQixhQVpGLFNBQXNCVixFQUFXL2dCLEdBQy9CLElBQUlxRyxFQUFJc2MsSUFBVzVCLEVBQVlELEdBQWdCQyxJQUFzQm5oQixLQUFPLElBQUttaEIsSUFDN0UxQyxFQUFpRSxFQUE3RHZiLEtBQUtxRyxLQUFLLEVBQUdyRyxLQUFLQyxJQUFJLEVBQUdELEtBQUtpSCxNQUFNNFgsR0FBUzNoQixHQUFTLEtBQzFEK0wsRUFBSWpKLEtBQUtzSCxJQUFJLElBQUtpVSxHQUNsQnZtQixFQUFTb3FCLEdBQVMsRUFBSTdELEVBQUksR0FDOUIsT0FBTyxTQUFTcmUsR0FDZCxPQUFPcUcsRUFBRTBGLEVBQUkvTCxHQUFTbEksS0p2SGpCdXJCLEVBUFRkLFFBQVMsSUFDVEgsVUFBVyxJQUNYRCxVQUFXLEdBQ1hHLFVBQVcsSUFBSyxNQUtoQmhiLEdBQVNrYSxHQUFPbGEsT0FDaEJtYSxHQUFlRCxHQUFPQyxhT2R4QixPQ0NlLFNBQVNwVixFQUFRM0MsRUFBT3FYLEdBQ3JDLElBR0lPLEVBSEF0WSxFQUFRcUQsRUFBTyxHQUNmcEQsRUFBT29ELEVBQU9BLEVBQU9yUyxPQUFTLEdBQzlCa1AsRTlDb0NOLFNBQXlCRixFQUFPQyxFQUFNUyxHQUNwQyxJQUFJNFosRUFBUXhnQixLQUFLOGQsSUFBSTNYLEVBQU9ELEdBQVNsRyxLQUFLcUcsSUFBSSxFQUFHTyxHQUM3QzZaLEVBQVF6Z0IsS0FBS3NILElBQUksR0FBSXRILEtBQUtpSCxNQUFNakgsS0FBS21ILElBQUlxWixHQUFTeGdCLEtBQUtvSCxPQUN2REMsRUFBUW1aLEVBQVFDLEVBSXBCLE9BSElwWixHQUFTYixHQUFLaWEsR0FBUyxHQUNsQnBaLEdBQVNYLEdBQUkrWixHQUFTLEVBQ3RCcFosR0FBU1YsS0FBSThaLEdBQVMsR0FDeEJ0YSxFQUFPRCxHQUFTdWEsRUFBUUEsRThDM0NwQkMsQ0FBU3hhLEVBQU9DLEVBQWUsTUFBVFMsRUFBZ0IsR0FBS0EsR0FHdEQsUUFEQXFYLEVBQVlELEdBQTZCLE1BQWJDLEVBQW9CLEtBQU9BLElBQ3JDbmhCLE1BQ2hCLElBQUssSUFDSCxJQUFJSSxFQUFROEMsS0FBS3FHLElBQUlyRyxLQUFLOGQsSUFBSTVYLEdBQVFsRyxLQUFLOGQsSUFBSTNYLElBRS9DLE9BRDJCLE1BQXZCOFgsRUFBVU8sV0FBc0J0SSxNQUFNc0ksRUNWakMsU0FBU3BZLEVBQU1sSixHQUM1QixPQUFPOEMsS0FBS3FHLElBQUksRUFBZ0UsRUFBN0RyRyxLQUFLcUcsS0FBSyxFQUFHckcsS0FBS0MsSUFBSSxFQUFHRCxLQUFLaUgsTUFBTTRYLEdBQVMzaEIsR0FBUyxLQUFXMmhCLEdBQVM3ZSxLQUFLOGQsSUFBSTFYLEtEUzVDdWEsQ0FBZ0J2YSxFQUFNbEosTUFBUytnQixFQUFVTyxVQUFZQSxHQUNwR0csR0FBYVYsRUFBVy9nQixHQUVqQyxJQUFLLEdBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUN3QixNQUF2QitnQixFQUFVTyxXQUFzQnRJLE1BQU1zSSxFRWxCakMsU0FBU3BZLEVBQU1DLEdBRTVCLE9BREFELEVBQU9wRyxLQUFLOGQsSUFBSTFYLEdBQU9DLEVBQU1yRyxLQUFLOGQsSUFBSXpYLEdBQU9ELEVBQ3RDcEcsS0FBS3FHLElBQUksRUFBR3dZLEdBQVN4WSxHQUFPd1ksR0FBU3pZLElBQVMsRUZnQkt3YSxDQUFleGEsRUFBTXBHLEtBQUtxRyxJQUFJckcsS0FBSzhkLElBQUk1WCxHQUFRbEcsS0FBSzhkLElBQUkzWCxRQUFVOFgsRUFBVU8sVUFBWUEsR0FBZ0MsTUFBbkJQLEVBQVVuaEIsT0FDckssTUFFRixJQUFLLElBQ0wsSUFBSyxJQUN3QixNQUF2Qm1oQixFQUFVTyxXQUFzQnRJLE1BQU1zSSxFRHZCakMsU0FBU3BZLEdBQ3RCLE9BQU9wRyxLQUFLcUcsSUFBSSxHQUFJd1ksR0FBUzdlLEtBQUs4ZCxJQUFJMVgsS0NzQm9CeWEsQ0FBZXphLE1BQVE2WCxFQUFVTyxVQUFZQSxFQUF1QyxHQUFQLE1BQW5CUCxFQUFVbmhCLE9BSTlILE9BQU8wSCxHQUFPeVosSUd4QlQsU0FBUzZDLEdBQVV6WCxHQUN4QixJQUFJRSxFQUFTRixFQUFNRSxPQW1EbkIsT0FqREFGLEVBQU12QyxNQUFRLFNBQVNGLEdBQ3JCLElBQUl4SixFQUFJbU0sSUFDUixPQUFPekMsR0FBTTFKLEVBQUUsR0FBSUEsRUFBRUEsRUFBRWxHLE9BQVMsR0FBYSxNQUFUMFAsRUFBZ0IsR0FBS0EsSUFHM0R5QyxFQUFNMFgsV0FBYSxTQUFTbmEsRUFBT3FYLEdBQ2pDLE9BQU84QyxHQUFXeFgsSUFBVTNDLEVBQU9xWCxJQUdyQzVVLEVBQU0yWCxLQUFPLFNBQVNwYSxHQUNQLE1BQVRBLElBQWVBLEVBQVEsSUFFM0IsSUFLSVIsRUFMQWhKLEVBQUltTSxJQUNKbEssRUFBSyxFQUNMQyxFQUFLbEMsRUFBRWxHLE9BQVMsRUFDaEJnUCxFQUFROUksRUFBRWlDLEdBQ1Y4RyxFQUFPL0ksRUFBRWtDLEdBOEJiLE9BM0JJNkcsRUFBT0QsSUFDVEUsRUFBT0YsRUFBT0EsRUFBUUMsRUFBTUEsRUFBT0MsRUFDbkNBLEVBQU8vRyxFQUFJQSxFQUFLQyxFQUFJQSxFQUFLOEcsSUFHM0JBLEVBQU9XLEdBQWNiLEVBQU9DLEVBQU1TLElBRXZCLEVBR1RSLEVBQU9XLEdBRlBiLEVBQVFsRyxLQUFLaUgsTUFBTWYsRUFBUUUsR0FBUUEsRUFDbkNELEVBQU9uRyxLQUFLc0csS0FBS0gsRUFBT0MsR0FBUUEsRUFDRVEsR0FDekJSLEVBQU8sSUFHaEJBLEVBQU9XLEdBRlBiLEVBQVFsRyxLQUFLc0csS0FBS0osRUFBUUUsR0FBUUEsRUFDbENELEVBQU9uRyxLQUFLaUgsTUFBTWQsRUFBT0MsR0FBUUEsRUFDQ1EsSUFHaENSLEVBQU8sR0FDVGhKLEVBQUVpQyxHQUFNVyxLQUFLaUgsTUFBTWYsRUFBUUUsR0FBUUEsRUFDbkNoSixFQUFFa0MsR0FBTVUsS0FBS3NHLEtBQUtILEVBQU9DLEdBQVFBLEVBQ2pDbUQsRUFBT25NLElBQ0VnSixFQUFPLElBQ2hCaEosRUFBRWlDLEdBQU1XLEtBQUtzRyxLQUFLSixFQUFRRSxHQUFRQSxFQUNsQ2hKLEVBQUVrQyxHQUFNVSxLQUFLaUgsTUFBTWQsRUFBT0MsR0FBUUEsRUFDbENtRCxFQUFPbk0sSUFHRmlNLEdBR0ZBLEVBR1QsU0FBd0J5UCxLQUN0QixJQUFJelAsRWpCT04sU0FBbUM2VCxFQUFlQyxHQUNoRCxJQUlJOEQsRUFDQUMsRUFDQTFiLEVBTkErRCxFQUFTd1QsR0FDVHhXLEVBQVF3VyxHQUNSb0UsRUFBY0MsR0FDZEMsR0FBUSxFQUtaLFNBQVNwWCxJQUdQLE9BRkFnWCxFQUFZamhCLEtBQUtDLElBQUlzSixFQUFPclMsT0FBUXFQLEVBQU1yUCxRQUFVLEVBQUlzbUIsR0FBVVAsR0FDbEVpRSxFQUFTMWIsRUFBUSxLQUNWNkQsRUFHVCxTQUFTQSxFQUFNckssR0FDYixPQUFRa2lCLElBQVdBLEVBQVNELEVBQVUxWCxFQUFRaEQsRUFBTzhhLEVBdEV6RCxTQUE0Qm5FLEdBQzFCLE9BQU8sU0FBU3BrQixFQUFHQyxHQUNqQixJQUFJcUUsRUFBSThmLEVBQWNwa0IsR0FBS0EsRUFBR0MsR0FBS0EsR0FDbkMsT0FBTyxTQUFTaUcsR0FBSyxPQUFPQSxHQUFLbEcsRUFBSSxFQUFJa0csR0FBS2pHLEVBQUksRUFBSXFFLEVBQUU0QixLQW1FS3NpQixDQUFtQnBFLEdBQWlCQSxFQUFlaUUsTUFBZ0JuaUIsR0EyQmxJLE9BeEJBcUssRUFBTWtZLE9BQVMsU0FBU2xLLEdBQ3RCLE9BQVE3UixJQUFVQSxFQUFReWIsRUFBVTFhLEVBQU9nRCxFQUFReVQsR0FBcUJxRSxFQW5FNUUsU0FBNEJsRSxHQUMxQixPQUFPLFNBQVNya0IsRUFBR0MsR0FDakIsSUFBSWtjLEVBQUlrSSxFQUFjcmtCLEdBQUtBLEVBQUdDLEdBQUtBLEdBQ25DLE9BQU8sU0FBU29KLEdBQUssT0FBT0EsR0FBSyxFQUFJckosRUFBSXFKLEdBQUssRUFBSXBKLEVBQUlrYyxFQUFFOVMsS0FnRXdCcWYsQ0FBbUJyRSxHQUFpQkEsTUFBa0I5RixJQUd4SWhPLEVBQU1FLE9BQVMsU0FBU0UsR0FDdEIsT0FBTzdJLFVBQVUxSixRQUFVcVMsRUFBUzlKLEdBQUkxSSxLQUFLMFMsRUFBRzhRLElBQVN0USxLQUFhVixFQUFPcFUsU0FHL0VrVSxFQUFNOUMsTUFBUSxTQUFTa0QsR0FDckIsT0FBTzdJLFVBQVUxSixRQUFVcVAsRUFBUXBSLEdBQU00QixLQUFLMFMsR0FBSVEsS0FBYTFELEVBQU1wUixTQUd2RWtVLEVBQU1jLFdBQWEsU0FBU1YsR0FDMUIsT0FBT2xELEVBQVFwUixHQUFNNEIsS0FBSzBTLEdBQUkwWCxFQUFjTSxHQUFrQnhYLEtBR2hFWixFQUFNZ1ksTUFBUSxTQUFTNVgsR0FDckIsT0FBTzdJLFVBQVUxSixRQUFVbXFCLElBQVU1WCxFQUFHUSxLQUFhb1gsR0FHdkRoWSxFQUFNOFgsWUFBYyxTQUFTMVgsR0FDM0IsT0FBTzdJLFVBQVUxSixRQUFVaXFCLEVBQWMxWCxFQUFHUSxLQUFha1gsR0FHcERsWCxJaUJsREt5WCxDQUFXeEUsR0FBZUMsSUFNdEMsT0FKQTlULEVBQU1LLEtBQU8sV0FDWCxPakJOaUJrUSxFaUJNTHZRLEVBQU95UCxLakJKaEJ2UCxPQUFPcVEsRUFBT3JRLFVBQ2RoRCxNQUFNcVQsRUFBT3JULFNBQ2I0YSxZQUFZdkgsRUFBT3VILGVBQ25CRSxNQUFNekgsRUFBT3lILFNBTHBCLElBQXFCekgsR2lCU1prSCxHQUFVelgsR0NuRW5CLElBQUlxTixHQUFLLElBQUlnRSxLQUNUL0QsR0FBSyxJQUFJK0QsS0FFYixTQUF3QmlILEdBQVlDLEVBQVFDLEVBQVNqYixFQUFPa2IsR0FFMUQsU0FBU0MsRUFBU0MsR0FDaEIsT0FBT0osRUFBT0ksRUFBTyxJQUFJdEgsTUFBTXNILElBQVFBLEVBNER6QyxPQXpEQUQsRUFBUzlhLE1BQVE4YSxFQUVqQkEsRUFBU3piLEtBQU8sU0FBUzBiLEdBQ3ZCLE9BQU9KLEVBQU9JLEVBQU8sSUFBSXRILEtBQUtzSCxFQUFPLElBQUtILEVBQVFHLEVBQU0sR0FBSUosRUFBT0ksR0FBT0EsR0FHNUVELEVBQVNsWSxNQUFRLFNBQVNtWSxHQUN4QixJQUFJNUUsRUFBSzJFLEVBQVNDLEdBQ2QzRSxFQUFLMEUsRUFBU3piLEtBQUswYixHQUN2QixPQUFPQSxFQUFPNUUsRUFBS0MsRUFBSzJFLEVBQU81RSxFQUFLQyxHQUd0QzBFLEVBQVNFLE9BQVMsU0FBU0QsRUFBTTViLEdBQy9CLE9BQU95YixFQUFRRyxFQUFPLElBQUl0SCxNQUFNc0gsR0FBZSxNQUFSNWIsRUFBZSxFQUFJcEcsS0FBS2lILE1BQU1iLElBQVE0YixHQUcvRUQsRUFBU3hiLE1BQVEsU0FBU0wsRUFBT0MsRUFBTUMsR0FDckMsSUFBZ0JoSCxFQUFabUgsS0FHSixHQUZBTCxFQUFRNmIsRUFBU3piLEtBQUtKLEdBQ3RCRSxFQUFlLE1BQVJBLEVBQWUsRUFBSXBHLEtBQUtpSCxNQUFNYixLQUMvQkYsRUFBUUMsR0FBV0MsRUFBTyxHQUFJLE9BQU9HLEVBQzNDLEdBQUdBLEVBQU1qTSxLQUFLOEUsRUFBVyxJQUFJc2IsTUFBTXhVLElBQVMyYixFQUFRM2IsRUFBT0UsR0FBT3diLEVBQU8xYixTQUNsRTlHLEVBQVc4RyxHQUFTQSxFQUFRQyxHQUNuQyxPQUFPSSxHQUdUd2IsRUFBU25qQixPQUFTLFNBQVN1RixHQUN6QixPQUFPd2QsR0FBWSxTQUFTSyxHQUMxQixHQUFJQSxHQUFRQSxFQUFNLEtBQU9KLEVBQU9JLElBQVE3ZCxFQUFLNmQsSUFBT0EsRUFBS3JILFFBQVFxSCxFQUFPLElBQ3ZFLFNBQVNBLEVBQU01YixHQUNoQixHQUFJNGIsR0FBUUEsRUFDVixHQUFJNWIsRUFBTyxFQUFHLE9BQVNBLEdBQVEsR0FDN0IsS0FBT3liLEVBQVFHLEdBQU8sSUFBSzdkLEVBQUs2ZCxVQUMzQixPQUFTNWIsR0FBUSxHQUN0QixLQUFPeWIsRUFBUUcsRUFBTSxJQUFNN2QsRUFBSzZkLFNBTXBDcGIsSUFDRm1iLEVBQVNuYixNQUFRLFNBQVNWLEVBQU9rVCxHQUcvQixPQUZBMUMsR0FBR2lFLFNBQVN6VSxHQUFReVEsR0FBR2dFLFNBQVN2QixHQUNoQ3dJLEVBQU9sTCxJQUFLa0wsRUFBT2pMLElBQ1ozVyxLQUFLaUgsTUFBTUwsRUFBTThQLEdBQUlDLE1BRzlCb0wsRUFBU0csTUFBUSxTQUFTOWIsR0FFeEIsT0FEQUEsRUFBT3BHLEtBQUtpSCxNQUFNYixHQUNWWSxTQUFTWixJQUFXQSxFQUFPLEVBQzNCQSxFQUFPLEVBQ1QyYixFQUFTbmpCLE9BQU9rakIsRUFDWixTQUFTMWtCLEdBQUssT0FBTzBrQixFQUFNMWtCLEdBQUtnSixHQUFTLEdBQ3pDLFNBQVNoSixHQUFLLE9BQU8ya0IsRUFBU25iLE1BQU0sRUFBR3hKLEdBQUtnSixHQUFTLElBSDNDMmIsRUFEb0IsT0FRckNBLEVDaEVULElBQUlJLEdBQWNKLEdBQVMsYUFFeEIsU0FBU0MsRUFBTTViLEdBQ2hCNGIsRUFBS3JILFNBQVNxSCxFQUFPNWIsSUFDcEIsU0FBU0YsRUFBT2tULEdBQ2pCLE9BQU9BLEVBQU1sVCxJQUlmaWMsR0FBWUQsTUFBUSxTQUFTalosR0FFM0IsT0FEQUEsRUFBSWpKLEtBQUtpSCxNQUFNZ0MsR0FDVmpDLFNBQVNpQyxJQUFRQSxFQUFJLEVBQ3BCQSxFQUFJLEVBQ0g4WSxHQUFTLFNBQVNDLEdBQ3ZCQSxFQUFLckgsUUFBUTNhLEtBQUtpSCxNQUFNK2EsRUFBTy9ZLEdBQUtBLElBQ25DLFNBQVMrWSxFQUFNNWIsR0FDaEI0YixFQUFLckgsU0FBU3FILEVBQU81YixFQUFPNkMsSUFDM0IsU0FBUy9DLEVBQU9rVCxHQUNqQixPQUFRQSxFQUFNbFQsR0FBUytDLElBTkprWixHQURnQixNQ2JoQyxJQUNJQyxHQUFpQixJQUdqQkMsR0FBZSxPQ0R0QkMsSUNBU1AsR0FBUyxTQUFTQyxHQUM3QkEsRUFBS3JILFFGSnFCLElFSWIzYSxLQUFLaUgsTUFBTSthLEVGSkUsT0VLekIsU0FBU0EsRUFBTTViLEdBQ2hCNGIsRUFBS3JILFNBQVNxSCxFRk5ZLElFTUw1YixJQUNwQixTQUFTRixFQUFPa1QsR0FDakIsT0FBUUEsRUFBTWxULEdGUlksS0VTekIsU0FBUzhiLEdBQ1YsT0FBT0EsRUFBS08sa0JDUERSLEdBQVMsU0FBU0MsR0FDN0JBLEVBQUtySCxRQUFRM2EsS0FBS2lILE1BQU0rYSxFQUFPSSxJQUFrQkEsS0FDaEQsU0FBU0osRUFBTTViLEdBQ2hCNGIsRUFBS3JILFNBQVNxSCxFQUFPNWIsRUFBT2djLEtBQzNCLFNBQVNsYyxFQUFPa1QsR0FDakIsT0FBUUEsRUFBTWxULEdBQVNrYyxJQUN0QixTQUFTSixHQUNWLE9BQU9BLEVBQUtRLGVDUEhULEdBQVMsU0FBU0MsR0FDM0IsSUFBSUMsRUFBU0QsRUFBS1Msb0JBQXNCTCxHSkZoQixLSUdwQkgsRUFBUyxJQUFHQSxHSkhRLE1JSXhCRCxFQUFLckgsUUpKbUIsS0lJWDNhLEtBQUtpSCxRQUFRK2EsRUFBT0MsR0pKVCxNSUlrREEsSUFDekUsU0FBU0QsRUFBTTViLEdBQ2hCNGIsRUFBS3JILFNBQVNxSCxFSk5VLEtJTUg1YixJQUNwQixTQUFTRixFQUFPa1QsR0FDakIsT0FBUUEsRUFBTWxULEdKUlUsTUlTdkIsU0FBUzhiLEdBQ1YsT0FBT0EsRUFBS1UsYUhUSlgsR0FBUyxTQUFTQyxHQUMxQkEsRUFBS1csU0FBUyxFQUFHLEVBQUcsRUFBRyxJQUN0QixTQUFTWCxFQUFNNWIsR0FDaEI0YixFQUFLWSxRQUFRWixFQUFLYSxVQUFZemMsSUFDN0IsU0FBU0YsRUFBT2tULEdBQ2pCLE9BQVFBLEVBQU1sVCxHQUFTa1QsRUFBSXFKLG9CQUFzQnZjLEVBQU11YyxxQkFBdUJMLElETHZELE9DTXRCLFNBQVNKLEdBQ1YsT0FBT0EsRUFBS2EsVUFBWSxLSVAxQixTQUFTQyxHQUFRN3RCLEdBQ2YsT0FBTzhzQixHQUFTLFNBQVNDLEdBQ3ZCQSxFQUFLWSxRQUFRWixFQUFLYSxXQUFhYixFQUFLZSxTQUFXLEVBQUk5dEIsR0FBSyxHQUN4RCtzQixFQUFLVyxTQUFTLEVBQUcsRUFBRyxFQUFHLElBQ3RCLFNBQVNYLEVBQU01YixHQUNoQjRiLEVBQUtZLFFBQVFaLEVBQUthLFVBQW1CLEVBQVB6YyxJQUM3QixTQUFTRixFQUFPa1QsR0FDakIsT0FBUUEsRUFBTWxULEdBQVNrVCxFQUFJcUosb0JBQXNCdmMsRUFBTXVjLHFCQUF1QkwsSUFBa0JDLEtBSXBHLElBQVdXLEdBQVNGLEdBQVEsR0FDakJHLEdBQVNILEdBQVEsR0FHakJJLElBRlVKLEdBQVEsR0FDTkEsR0FBUSxHQUNUQSxHQUFRLElDaEIxQkssSURpQmdCTCxHQUFRLEdBQ05BLEdBQVEsR0VsQmxCZixHQUFTLFNBQVNDLEdBQzVCQSxFQUFLWSxRQUFRLEdBQ2JaLEVBQUtXLFNBQVMsRUFBRyxFQUFHLEVBQUcsSUFDdEIsU0FBU1gsRUFBTTViLEdBQ2hCNGIsRUFBS29CLFNBQVNwQixFQUFLcUIsV0FBYWpkLElBQy9CLFNBQVNGLEVBQU9rVCxHQUNqQixPQUFPQSxFQUFJaUssV0FBYW5kLEVBQU1tZCxXQUF5RCxJQUEzQ2pLLEVBQUlrSyxjQUFnQnBkLEVBQU1vZCxnQkFDckUsU0FBU3RCLEdBQ1YsT0FBT0EsRUFBS3FCLGFEUkh0QixHQUFTLFNBQVNDLEdBQzNCQSxFQUFLb0IsU0FBUyxFQUFHLEdBQ2pCcEIsRUFBS1csU0FBUyxFQUFHLEVBQUcsRUFBRyxJQUN0QixTQUFTWCxFQUFNNWIsR0FDaEI0YixFQUFLdUIsWUFBWXZCLEVBQUtzQixjQUFnQmxkLElBQ3JDLFNBQVNGLEVBQU9rVCxHQUNqQixPQUFPQSxFQUFJa0ssY0FBZ0JwZCxFQUFNb2QsZUFDaEMsU0FBU3RCLEdBQ1YsT0FBT0EsRUFBS3NCLGlCQUlkSCxHQUFLakIsTUFBUSxTQUFTalosR0FDcEIsT0FBUWpDLFNBQVNpQyxFQUFJakosS0FBS2lILE1BQU1nQyxLQUFTQSxFQUFJLEVBQVk4WSxHQUFTLFNBQVNDLEdBQ3pFQSxFQUFLdUIsWUFBWXZqQixLQUFLaUgsTUFBTSthLEVBQUtzQixjQUFnQnJhLEdBQUtBLEdBQ3REK1ksRUFBS29CLFNBQVMsRUFBRyxHQUNqQnBCLEVBQUtXLFNBQVMsRUFBRyxFQUFHLEVBQUcsSUFDdEIsU0FBU1gsRUFBTTViLEdBQ2hCNGIsRUFBS3VCLFlBQVl2QixFQUFLc0IsY0FBZ0JsZCxFQUFPNkMsS0FMRyxNRVpwQzhZLEdBQVMsU0FBU0MsR0FDaENBLEVBQUt3QixjQUFjLEVBQUcsSUFDckIsU0FBU3hCLEVBQU01YixHQUNoQjRiLEVBQUtySCxTQUFTcUgsRUFBTzViLEVBQU9nYyxLQUMzQixTQUFTbGMsRUFBT2tULEdBQ2pCLE9BQVFBLEVBQU1sVCxHQUFTa2MsSUFDdEIsU0FBU0osR0FDVixPQUFPQSxFQUFLeUIsa0JDUEExQixHQUFTLFNBQVNDLEdBQzlCQSxFQUFLMEIsY0FBYyxFQUFHLEVBQUcsSUFDeEIsU0FBUzFCLEVBQU01YixHQUNoQjRiLEVBQUtySCxTQUFTcUgsRVRKVSxLU0lINWIsSUFDcEIsU0FBU0YsRUFBT2tULEdBQ2pCLE9BQVFBLEVBQU1sVCxHVE5VLE1TT3ZCLFNBQVM4YixHQUNWLE9BQU9BLEVBQUsyQixnQkRQZCxJRUFJQyxHQUFTN0IsR0FBUyxTQUFTQyxHQUM3QkEsRUFBSzZCLFlBQVksRUFBRyxFQUFHLEVBQUcsSUFDekIsU0FBUzdCLEVBQU01YixHQUNoQjRiLEVBQUs4QixXQUFXOUIsRUFBSytCLGFBQWUzZCxJQUNuQyxTQUFTRixFQUFPa1QsR0FDakIsT0FBUUEsRUFBTWxULEdWTFMsT1VNdEIsU0FBUzhiLEdBQ1YsT0FBT0EsRUFBSytCLGFBQWUsSUNQN0IsU0FBU0MsR0FBVy91QixHQUNsQixPQUFPOHNCLEdBQVMsU0FBU0MsR0FDdkJBLEVBQUs4QixXQUFXOUIsRUFBSytCLGNBQWdCL0IsRUFBS2lDLFlBQWMsRUFBSWh2QixHQUFLLEdBQ2pFK3NCLEVBQUs2QixZQUFZLEVBQUcsRUFBRyxFQUFHLElBQ3pCLFNBQVM3QixFQUFNNWIsR0FDaEI0YixFQUFLOEIsV0FBVzlCLEVBQUsrQixhQUFzQixFQUFQM2QsSUFDbkMsU0FBU0YsRUFBT2tULEdBQ2pCLE9BQVFBLEVBQU1sVCxHQUFTbWMsS0FJM0IsSUFBVzZCLEdBQVlGLEdBQVcsR0FDdkJHLEdBQVlILEdBQVcsR0FHdkJJLElBRmFKLEdBQVcsR0FDVEEsR0FBVyxHQUNaQSxHQUFXLElDaEJoQ0ssSURpQm1CTCxHQUFXLEdBQ1RBLEdBQVcsR0VsQnJCakMsR0FBUyxTQUFTQyxHQUMvQkEsRUFBSzhCLFdBQVcsR0FDaEI5QixFQUFLNkIsWUFBWSxFQUFHLEVBQUcsRUFBRyxJQUN6QixTQUFTN0IsRUFBTTViLEdBQ2hCNGIsRUFBS3NDLFlBQVl0QyxFQUFLdUMsY0FBZ0JuZSxJQUNyQyxTQUFTRixFQUFPa1QsR0FDakIsT0FBT0EsRUFBSW1MLGNBQWdCcmUsRUFBTXFlLGNBQWtFLElBQWpEbkwsRUFBSW9MLGlCQUFtQnRlLEVBQU1zZSxtQkFDOUUsU0FBU3hDLEdBQ1YsT0FBT0EsRUFBS3VDLGdCRFJBeEMsR0FBUyxTQUFTQyxHQUM5QkEsRUFBS3NDLFlBQVksRUFBRyxHQUNwQnRDLEVBQUs2QixZQUFZLEVBQUcsRUFBRyxFQUFHLElBQ3pCLFNBQVM3QixFQUFNNWIsR0FDaEI0YixFQUFLeUMsZUFBZXpDLEVBQUt3QyxpQkFBbUJwZSxJQUMzQyxTQUFTRixFQUFPa1QsR0FDakIsT0FBT0EsRUFBSW9MLGlCQUFtQnRlLEVBQU1zZSxrQkFDbkMsU0FBU3hDLEdBQ1YsT0FBT0EsRUFBS3dDLG9CRUdkLFNBQVNFLEdBQVV0bkIsR0FDakIsR0FBSSxHQUFLQSxFQUFFaWEsR0FBS2phLEVBQUVpYSxFQUFJLElBQUssQ0FDekIsSUFBSTJLLEVBQU8sSUFBSXRILE1BQU0sRUFBR3RkLEVBQUVQLEVBQUdPLEVBQUVBLEVBQUdBLEVBQUV1bkIsRUFBR3ZuQixFQUFFd25CLEVBQUd4bkIsRUFBRXluQixFQUFHem5CLEVBQUUwbkIsR0FFbkQsT0FEQTlDLEVBQUt1QixZQUFZbm1CLEVBQUVpYSxHQUNaMkssRUFFVCxPQUFPLElBQUl0SCxLQUFLdGQsRUFBRWlhLEVBQUdqYSxFQUFFUCxFQUFHTyxFQUFFQSxFQUFHQSxFQUFFdW5CLEVBQUd2bkIsRUFBRXduQixFQUFHeG5CLEVBQUV5bkIsRUFBR3puQixFQUFFMG5CLEdBR2xELFNBQVNDLEdBQVEzbkIsR0FDZixHQUFJLEdBQUtBLEVBQUVpYSxHQUFLamEsRUFBRWlhLEVBQUksSUFBSyxDQUN6QixJQUFJMkssRUFBTyxJQUFJdEgsS0FBS0EsS0FBS3NLLEtBQUssRUFBRzVuQixFQUFFUCxFQUFHTyxFQUFFQSxFQUFHQSxFQUFFdW5CLEVBQUd2bkIsRUFBRXduQixFQUFHeG5CLEVBQUV5bkIsRUFBR3puQixFQUFFMG5CLElBRTVELE9BREE5QyxFQUFLeUMsZUFBZXJuQixFQUFFaWEsR0FDZjJLLEVBRVQsT0FBTyxJQUFJdEgsS0FBS0EsS0FBS3NLLElBQUk1bkIsRUFBRWlhLEVBQUdqYSxFQUFFUCxFQUFHTyxFQUFFQSxFQUFHQSxFQUFFdW5CLEVBQUd2bkIsRUFBRXduQixFQUFHeG5CLEVBQUV5bkIsRUFBR3puQixFQUFFMG5CLElBRzNELFNBQVNHLEdBQVE1TixHQUNmLE9BQVFBLEVBQUdBLEVBQUd4YSxFQUFHLEVBQUdPLEVBQUcsRUFBR3VuQixFQUFHLEVBQUdDLEVBQUcsRUFBR0MsRUFBRyxFQUFHQyxFQUFHLEdGbEJqRFQsR0FBUW5DLE1BQVEsU0FBU2paLEdBQ3ZCLE9BQVFqQyxTQUFTaUMsRUFBSWpKLEtBQUtpSCxNQUFNZ0MsS0FBU0EsRUFBSSxFQUFZOFksR0FBUyxTQUFTQyxHQUN6RUEsRUFBS3lDLGVBQWV6a0IsS0FBS2lILE1BQU0rYSxFQUFLd0MsaUJBQW1CdmIsR0FBS0EsR0FDNUQrWSxFQUFLc0MsWUFBWSxFQUFHLEdBQ3BCdEMsRUFBSzZCLFlBQVksRUFBRyxFQUFHLEVBQUcsSUFDekIsU0FBUzdCLEVBQU01YixHQUNoQjRiLEVBQUt5QyxlQUFlekMsRUFBS3dDLGlCQUFtQnBlLEVBQU82QyxLQUxILE1FNFZwRCxJQ3pXSXlWLEdBR093RyxHQUNBQyxHRHFXUEMsSUFBUUMsSUFBSyxHQUFJNWIsRUFBSyxJQUFLNmIsRUFBSyxLQUNoQ0MsR0FBVyxVQUNYQyxHQUFZLEtBQ1pDLEdBQVksc0JBRWhCLFNBQVNDLEdBQUl4b0IsRUFBT2loQixFQUFNRyxHQUN4QixJQUFJRixFQUFPbGhCLEVBQVEsRUFBSSxJQUFNLEdBQ3pCM0QsR0FBVTZrQixHQUFRbGhCLEVBQVFBLEdBQVMsR0FDbkNoRyxFQUFTcUMsRUFBT3JDLE9BQ3BCLE9BQU9rbkIsR0FBUWxuQixFQUFTb25CLEVBQVEsSUFBSXJuQixNQUFNcW5CLEVBQVFwbkIsRUFBUyxHQUFHc0QsS0FBSzJqQixHQUFRNWtCLEVBQVNBLEdBR3RGLFNBQVNvc0IsR0FBUWxRLEdBQ2YsT0FBT0EsRUFBRTFSLFFBQVEwaEIsR0FBVyxRQUc5QixTQUFTRyxHQUFTNXJCLEdBQ2hCLE9BQU8sSUFBSW1KLE9BQU8sT0FBU25KLEVBQU15RixJQUFJa21CLElBQVNuckIsS0FBSyxLQUFPLElBQUssS0FHakUsU0FBU3FyQixHQUFhN3JCLEdBRXBCLElBREEsSUFBSXlGLEtBQVV4SyxHQUFLLEVBQUdpRixFQUFJRixFQUFNOUMsU0FDdkJqQyxFQUFJaUYsR0FBR3VGLEVBQUl6RixFQUFNL0UsR0FBR3lmLGVBQWlCemYsRUFDOUMsT0FBT3dLLEVBR1QsU0FBU3FtQixHQUF5QjFvQixFQUFHN0QsRUFBUXRFLEdBQzNDLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lGLEdBQUtrRCxFQUFFMm9CLEdBQUs3ckIsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBUzh1QixHQUF5QjVvQixFQUFHN0QsRUFBUXRFLEdBQzNDLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lGLEdBQUtrRCxFQUFFNm9CLEdBQUsvckIsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBU2d2QixHQUFzQjlvQixFQUFHN0QsRUFBUXRFLEdBQ3hDLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lGLEdBQUtrRCxFQUFFK29CLEdBQUtqc0IsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBU2t2QixHQUFtQmhwQixFQUFHN0QsRUFBUXRFLEdBQ3JDLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lGLEdBQUtrRCxFQUFFaXBCLEdBQUtuc0IsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBU292QixHQUFzQmxwQixFQUFHN0QsRUFBUXRFLEdBQ3hDLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lGLEdBQUtrRCxFQUFFbXBCLEdBQUtyc0IsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBU3N2QixHQUFjcHBCLEVBQUc3RCxFQUFRdEUsR0FDaEMsSUFBSWlGLEVBQUlxckIsR0FBUzVRLEtBQUtwYixFQUFPcEUsTUFBTUYsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUYsR0FBS2tELEVBQUVpYSxHQUFLbmQsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBU3V2QixHQUFVcnBCLEVBQUc3RCxFQUFRdEUsR0FDNUIsSUFBSWlGLEVBQUlxckIsR0FBUzVRLEtBQUtwYixFQUFPcEUsTUFBTUYsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUYsR0FBS2tELEVBQUVpYSxHQUFLbmQsRUFBRSxLQUFPQSxFQUFFLEdBQUssR0FBSyxLQUFPLEtBQU9qRixFQUFJaUYsRUFBRSxHQUFHaEQsU0FBVyxFQUc1RSxTQUFTd3ZCLEdBQVV0cEIsRUFBRzdELEVBQVF0RSxHQUM1QixJQUFJaUYsRUFBSSwrQkFBK0J5YSxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDaEUsT0FBT2lGLEdBQUtrRCxFQUFFdXBCLEVBQUl6c0IsRUFBRSxHQUFLLElBQU1BLEVBQUUsSUFBTUEsRUFBRSxJQUFNLE9BQVFqRixFQUFJaUYsRUFBRSxHQUFHaEQsU0FBVyxFQUc3RSxTQUFTMHZCLEdBQWlCeHBCLEVBQUc3RCxFQUFRdEUsR0FDbkMsSUFBSWlGLEVBQUlxckIsR0FBUzVRLEtBQUtwYixFQUFPcEUsTUFBTUYsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUYsR0FBS2tELEVBQUVQLEVBQUkzQyxFQUFFLEdBQUssRUFBR2pGLEVBQUlpRixFQUFFLEdBQUdoRCxTQUFXLEVBR2xELFNBQVMydkIsR0FBZ0J6cEIsRUFBRzdELEVBQVF0RSxHQUNsQyxJQUFJaUYsRUFBSXFyQixHQUFTNVEsS0FBS3BiLEVBQU9wRSxNQUFNRixFQUFHQSxFQUFJLElBQzFDLE9BQU9pRixHQUFLa0QsRUFBRUEsR0FBS2xELEVBQUUsR0FBSWpGLEVBQUlpRixFQUFFLEdBQUdoRCxTQUFXLEVBRy9DLFNBQVM0dkIsR0FBZTFwQixFQUFHN0QsRUFBUXRFLEdBQ2pDLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lGLEdBQUtrRCxFQUFFUCxFQUFJLEVBQUdPLEVBQUVBLEdBQUtsRCxFQUFFLEdBQUlqRixFQUFJaUYsRUFBRSxHQUFHaEQsU0FBVyxFQUd4RCxTQUFTNnZCLEdBQVkzcEIsRUFBRzdELEVBQVF0RSxHQUM5QixJQUFJaUYsRUFBSXFyQixHQUFTNVEsS0FBS3BiLEVBQU9wRSxNQUFNRixFQUFHQSxFQUFJLElBQzFDLE9BQU9pRixHQUFLa0QsRUFBRXVuQixHQUFLenFCLEVBQUUsR0FBSWpGLEVBQUlpRixFQUFFLEdBQUdoRCxTQUFXLEVBRy9DLFNBQVM4dkIsR0FBYTVwQixFQUFHN0QsRUFBUXRFLEdBQy9CLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDMUMsT0FBT2lGLEdBQUtrRCxFQUFFd25CLEdBQUsxcUIsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBUyt2QixHQUFhN3BCLEVBQUc3RCxFQUFRdEUsR0FDL0IsSUFBSWlGLEVBQUlxckIsR0FBUzVRLEtBQUtwYixFQUFPcEUsTUFBTUYsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUYsR0FBS2tELEVBQUV5bkIsR0FBSzNxQixFQUFFLEdBQUlqRixFQUFJaUYsRUFBRSxHQUFHaEQsU0FBVyxFQUcvQyxTQUFTZ3dCLEdBQWtCOXBCLEVBQUc3RCxFQUFRdEUsR0FDcEMsSUFBSWlGLEVBQUlxckIsR0FBUzVRLEtBQUtwYixFQUFPcEUsTUFBTUYsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUYsR0FBS2tELEVBQUUwbkIsR0FBSzVxQixFQUFFLEdBQUlqRixFQUFJaUYsRUFBRSxHQUFHaEQsU0FBVyxFQUcvQyxTQUFTaXdCLEdBQWtCL3BCLEVBQUc3RCxFQUFRdEUsR0FDcEMsSUFBSWlGLEVBQUlxckIsR0FBUzVRLEtBQUtwYixFQUFPcEUsTUFBTUYsRUFBR0EsRUFBSSxJQUMxQyxPQUFPaUYsR0FBS2tELEVBQUUwbkIsRUFBSTlrQixLQUFLaUgsTUFBTS9NLEVBQUUsR0FBSyxLQUFPakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHakUsU0FBU2t3QixHQUFvQmhxQixFQUFHN0QsRUFBUXRFLEdBQ3RDLElBQUlpRixFQUFJc3JCLEdBQVU3USxLQUFLcGIsRUFBT3BFLE1BQU1GLEVBQUdBLEVBQUksSUFDM0MsT0FBT2lGLEVBQUlqRixFQUFJaUYsRUFBRSxHQUFHaEQsUUFBVSxFQUdoQyxTQUFTbXdCLEdBQW1CanFCLEVBQUc3RCxFQUFRdEUsR0FDckMsSUFBSWlGLEVBQUlxckIsR0FBUzVRLEtBQUtwYixFQUFPcEUsTUFBTUYsSUFDbkMsT0FBT2lGLEdBQUtrRCxFQUFFa3FCLEdBQUtwdEIsRUFBRSxHQUFJakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHL0MsU0FBU3F3QixHQUEwQm5xQixFQUFHN0QsRUFBUXRFLEdBQzVDLElBQUlpRixFQUFJcXJCLEdBQVM1USxLQUFLcGIsRUFBT3BFLE1BQU1GLElBQ25DLE9BQU9pRixHQUFLa0QsRUFBRWtxQixFQUFjLEtBQVJwdEIsRUFBRSxHQUFZakYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsRUFHeEQsU0FBU3N3QixHQUFpQnBxQixFQUFHc2dCLEdBQzNCLE9BQU9nSSxHQUFJdG9CLEVBQUV5bEIsVUFBV25GLEVBQUcsR0FHN0IsU0FBUytKLEdBQWFycUIsRUFBR3NnQixHQUN2QixPQUFPZ0ksR0FBSXRvQixFQUFFc2xCLFdBQVloRixFQUFHLEdBRzlCLFNBQVNnSyxHQUFhdHFCLEVBQUdzZ0IsR0FDdkIsT0FBT2dJLEdBQUl0b0IsRUFBRXNsQixXQUFhLElBQU0sR0FBSWhGLEVBQUcsR0FHekMsU0FBU2lLLEdBQWdCdnFCLEVBQUdzZ0IsR0FDMUIsT0FBT2dJLEdBQUksRUFBSWtDLEdBQVFoaEIsTUFBTWloQixHQUFTenFCLEdBQUlBLEdBQUlzZ0IsRUFBRyxHQUduRCxTQUFTb0ssR0FBbUIxcUIsRUFBR3NnQixHQUM3QixPQUFPZ0ksR0FBSXRvQixFQUFFMnFCLGtCQUFtQnJLLEVBQUcsR0FHckMsU0FBU3NLLEdBQW1CNXFCLEVBQUdzZ0IsR0FDN0IsT0FBT29LLEdBQW1CMXFCLEVBQUdzZ0IsR0FBSyxNQUdwQyxTQUFTdUssR0FBa0I3cUIsRUFBR3NnQixHQUM1QixPQUFPZ0ksR0FBSXRvQixFQUFFaW1CLFdBQWEsRUFBRzNGLEVBQUcsR0FHbEMsU0FBU3dLLEdBQWM5cUIsRUFBR3NnQixHQUN4QixPQUFPZ0ksR0FBSXRvQixFQUFFb2xCLGFBQWM5RSxFQUFHLEdBR2hDLFNBQVN5SyxHQUFjL3FCLEVBQUdzZ0IsR0FDeEIsT0FBT2dJLEdBQUl0b0IsRUFBRWdyQixhQUFjMUssRUFBRyxHQUdoQyxTQUFTMkssR0FBMEJqckIsR0FDakMsSUFBSWtsQixFQUFNbGxCLEVBQUUybEIsU0FDWixPQUFlLElBQVJULEVBQVksRUFBSUEsRUFHekIsU0FBU2dHLEdBQXVCbHJCLEVBQUdzZ0IsR0FDakMsT0FBT2dJLEdBQUk2QyxHQUFXM2hCLE1BQU1paEIsR0FBU3pxQixHQUFJQSxHQUFJc2dCLEVBQUcsR0FHbEQsU0FBUzhLLEdBQW9CcHJCLEVBQUdzZ0IsR0FDOUIsSUFBSTRFLEVBQU1sbEIsRUFBRTJsQixTQUVaLE9BREEzbEIsRUFBS2tsQixHQUFPLEdBQWEsSUFBUkEsRUFBYW1HLEdBQWFyckIsR0FBS3FyQixHQUFhbmlCLEtBQUtsSixHQUMzRHNvQixHQUFJK0MsR0FBYTdoQixNQUFNaWhCLEdBQVN6cUIsR0FBSUEsSUFBK0IsSUFBekJ5cUIsR0FBU3pxQixHQUFHMmxCLFVBQWlCckYsRUFBRyxHQUduRixTQUFTZ0wsR0FBMEJ0ckIsR0FDakMsT0FBT0EsRUFBRTJsQixTQUdYLFNBQVM0RixHQUF1QnZyQixFQUFHc2dCLEdBQ2pDLE9BQU9nSSxHQUFJa0QsR0FBV2hpQixNQUFNaWhCLEdBQVN6cUIsR0FBSUEsR0FBSXNnQixFQUFHLEdBR2xELFNBQVNtTCxHQUFXenJCLEVBQUdzZ0IsR0FDckIsT0FBT2dJLEdBQUl0b0IsRUFBRWttQixjQUFnQixJQUFLNUYsRUFBRyxHQUd2QyxTQUFTb0wsR0FBZTFyQixFQUFHc2dCLEdBQ3pCLE9BQU9nSSxHQUFJdG9CLEVBQUVrbUIsY0FBZ0IsSUFBTzVGLEVBQUcsR0FHekMsU0FBU3FMLEdBQVczckIsR0FDbEIsSUFBSStaLEVBQUkvWixFQUFFcWxCLG9CQUNWLE9BQVF0TCxFQUFJLEVBQUksS0FBT0EsSUFBTSxFQUFHLE1BQzFCdU8sR0FBSXZPLEVBQUksR0FBSyxFQUFHLElBQUssR0FDckJ1TyxHQUFJdk8sRUFBSSxHQUFJLElBQUssR0FHekIsU0FBUzZSLEdBQW9CNXJCLEVBQUdzZ0IsR0FDOUIsT0FBT2dJLEdBQUl0b0IsRUFBRTJtQixhQUFjckcsRUFBRyxHQUdoQyxTQUFTdUwsR0FBZ0I3ckIsRUFBR3NnQixHQUMxQixPQUFPZ0ksR0FBSXRvQixFQUFFdW1CLGNBQWVqRyxFQUFHLEdBR2pDLFNBQVN3TCxHQUFnQjlyQixFQUFHc2dCLEdBQzFCLE9BQU9nSSxHQUFJdG9CLEVBQUV1bUIsY0FBZ0IsSUFBTSxHQUFJakcsRUFBRyxHQUc1QyxTQUFTeUwsR0FBbUIvckIsRUFBR3NnQixHQUM3QixPQUFPZ0ksR0FBSSxFQUFJOUIsR0FBT2hkLE1BQU15ZCxHQUFRam5CLEdBQUlBLEdBQUlzZ0IsRUFBRyxHQUdqRCxTQUFTMEwsR0FBc0Joc0IsRUFBR3NnQixHQUNoQyxPQUFPZ0ksR0FBSXRvQixFQUFFaXNCLHFCQUFzQjNMLEVBQUcsR0FHeEMsU0FBUzRMLEdBQXNCbHNCLEVBQUdzZ0IsR0FDaEMsT0FBTzBMLEdBQXNCaHNCLEVBQUdzZ0IsR0FBSyxNQUd2QyxTQUFTNkwsR0FBcUJuc0IsRUFBR3NnQixHQUMvQixPQUFPZ0ksR0FBSXRvQixFQUFFbW5CLGNBQWdCLEVBQUc3RyxFQUFHLEdBR3JDLFNBQVM4TCxHQUFpQnBzQixFQUFHc2dCLEdBQzNCLE9BQU9nSSxHQUFJdG9CLEVBQUVxbUIsZ0JBQWlCL0YsRUFBRyxHQUduQyxTQUFTK0wsR0FBaUJyc0IsRUFBR3NnQixHQUMzQixPQUFPZ0ksR0FBSXRvQixFQUFFbWxCLGdCQUFpQjdFLEVBQUcsR0FHbkMsU0FBU2dNLEdBQTZCdHNCLEdBQ3BDLElBQUl1c0IsRUFBTXZzQixFQUFFNm1CLFlBQ1osT0FBZSxJQUFSMEYsRUFBWSxFQUFJQSxFQUd6QixTQUFTQyxHQUEwQnhzQixFQUFHc2dCLEdBQ3BDLE9BQU9nSSxHQUFJeEIsR0FBVXRkLE1BQU15ZCxHQUFRam5CLEdBQUlBLEdBQUlzZ0IsRUFBRyxHQUdoRCxTQUFTbU0sR0FBdUJ6c0IsRUFBR3NnQixHQUNqQyxJQUFJNEUsRUFBTWxsQixFQUFFNm1CLFlBRVosT0FEQTdtQixFQUFLa2xCLEdBQU8sR0FBYSxJQUFSQSxFQUFhOEIsR0FBWWhuQixHQUFLZ25CLEdBQVk5ZCxLQUFLbEosR0FDekRzb0IsR0FBSXRCLEdBQVl4ZCxNQUFNeWQsR0FBUWpuQixHQUFJQSxJQUFpQyxJQUEzQmluQixHQUFRam5CLEdBQUc2bUIsYUFBb0J2RyxFQUFHLEdBR25GLFNBQVNvTSxHQUE2QjFzQixHQUNwQyxPQUFPQSxFQUFFNm1CLFlBR1gsU0FBUzhGLEdBQTBCM3NCLEVBQUdzZ0IsR0FDcEMsT0FBT2dJLEdBQUl2QixHQUFVdmQsTUFBTXlkLEdBQVFqbkIsR0FBSUEsR0FBSXNnQixFQUFHLEdBR2hELFNBQVNzTSxHQUFjNXNCLEVBQUdzZ0IsR0FDeEIsT0FBT2dJLEdBQUl0b0IsRUFBRW9uQixpQkFBbUIsSUFBSzlHLEVBQUcsR0FHMUMsU0FBU3VNLEdBQWtCN3NCLEVBQUdzZ0IsR0FDNUIsT0FBT2dJLEdBQUl0b0IsRUFBRW9uQixpQkFBbUIsSUFBTzlHLEVBQUcsR0FHNUMsU0FBU3dNLEtBQ1AsTUFBTyxRQUdULFNBQVNDLEtBQ1AsTUFBTyxJQUdULFNBQVNDLEdBQW9CaHRCLEdBQzNCLE9BQVFBLEVBR1YsU0FBU2l0QixHQUEyQmp0QixHQUNsQyxPQUFPNEMsS0FBS2lILE9BQU83SixFQUFJLE1DM21CekIsU0FBc0NtTixHQUNwQ21VLEdEZUYsU0FBcUNBLEdBQ25DLElBQUk0TCxFQUFrQjVMLEVBQU82TCxTQUN6QkMsRUFBYzlMLEVBQU9zRCxLQUNyQnlJLEVBQWMvTCxFQUFPZ00sS0FDckJDLEVBQWlCak0sRUFBT2tNLFFBQ3hCQyxFQUFrQm5NLEVBQU9vTSxLQUN6QkMsRUFBdUJyTSxFQUFPc00sVUFDOUJDLEVBQWdCdk0sRUFBT3dNLE9BQ3ZCQyxFQUFxQnpNLEVBQU8wTSxZQUU1QkMsRUFBV3pGLEdBQVMrRSxHQUNwQlcsRUFBZXpGLEdBQWE4RSxHQUM1QlksRUFBWTNGLEdBQVNpRixHQUNyQlcsRUFBZ0IzRixHQUFhZ0YsR0FDN0JZLEVBQWlCN0YsR0FBU21GLEdBQzFCVyxFQUFxQjdGLEdBQWFrRixHQUNsQ1ksRUFBVS9GLEdBQVNxRixHQUNuQlcsRUFBYy9GLEdBQWFvRixHQUMzQlksRUFBZWpHLEdBQVN1RixHQUN4QlcsRUFBbUJqRyxHQUFhc0YsR0FFaENZLEdBQ0ZqekIsRUFrUEYsU0FBNEJzRSxHQUMxQixPQUFPMnRCLEVBQXFCM3RCLEVBQUUybEIsV0FsUDlCcEwsRUFxUEYsU0FBdUJ2YSxHQUNyQixPQUFPeXRCLEVBQWdCenRCLEVBQUUybEIsV0FyUHpCaHFCLEVBd1BGLFNBQTBCcUUsR0FDeEIsT0FBTyt0QixFQUFtQi90QixFQUFFaW1CLGFBeFA1QnpMLEVBMlBGLFNBQXFCeGEsR0FDbkIsT0FBTzZ0QixFQUFjN3RCLEVBQUVpbUIsYUEzUHZCdmYsRUFBSyxLQUNMMUcsRUFBS29xQixHQUNMak0sRUFBS2lNLEdBQ0xqa0IsRUFBS3lrQixHQUNMckQsRUFBSzhDLEdBQ0wvakIsRUFBS2drQixHQUNMOXFCLEVBQUsrcUIsR0FDTDdDLEVBQUtnRCxHQUNManJCLEVBQUtvckIsR0FDTHJELEVBQUtzRCxHQUNMeEssRUFvUEYsU0FBc0J0Z0IsR0FDcEIsT0FBT3V0QixJQUFpQnZ0QixFQUFFc2xCLFlBQWMsTUFwUHhDNEUsRUFBSzhDLEdBQ0wzVSxFQUFLNFUsR0FDTHhGLEVBQUtzRCxHQUNMbEMsRUFBS29DLEdBQ0xsQyxFQUFLbUMsR0FDTGpDLEVBQUttQyxHQUNMekMsRUFBSzJDLEdBQ0xuQyxFQUFLb0MsR0FDTDNwQixFQUFLLEtBQ0xrZ0IsRUFBSyxLQUNMN0gsRUFBS3dSLEdBQ0xtRCxFQUFLbEQsR0FDTG5DLEVBQUtvQyxHQUNMakssSUFBS3FMLElBR0g4QixHQUNGbnpCLEVBc09GLFNBQStCc0UsR0FDN0IsT0FBTzJ0QixFQUFxQjN0QixFQUFFNm1CLGNBdE85QnRNLEVBeU9GLFNBQTBCdmEsR0FDeEIsT0FBT3l0QixFQUFnQnp0QixFQUFFNm1CLGNBek96QmxyQixFQTRPRixTQUE2QnFFLEdBQzNCLE9BQU8rdEIsRUFBbUIvdEIsRUFBRW1uQixnQkE1TzVCM00sRUErT0YsU0FBd0J4YSxHQUN0QixPQUFPNnRCLEVBQWM3dEIsRUFBRW1uQixnQkEvT3ZCemdCLEVBQUssS0FDTDFHLEVBQUs0ckIsR0FDTHpOLEVBQUt5TixHQUNMemxCLEVBQUsrbEIsR0FDTDNFLEVBQUtzRSxHQUNMdmxCLEVBQUt3bEIsR0FDTHRzQixFQUFLdXNCLEdBQ0xyRSxFQUFLc0UsR0FDTHZzQixFQUFLMHNCLEdBQ0wzRSxFQUFLNEUsR0FDTDlMLEVBd09GLFNBQXlCdGdCLEdBQ3ZCLE9BQU91dEIsSUFBaUJ2dEIsRUFBRXVtQixlQUFpQixNQXhPM0MyRCxFQUFLOEMsR0FDTDNVLEVBQUs0VSxHQUNMeEYsRUFBSzRFLEdBQ0x4RCxFQUFLeUQsR0FDTHZELEVBQUt5RCxHQUNMdkQsRUFBS3dELEdBQ0w5RCxFQUFLK0QsR0FDTHZELEVBQUt3RCxHQUNML3FCLEVBQUssS0FDTGtnQixFQUFLLEtBQ0w3SCxFQUFLMlMsR0FDTGdDLEVBQUsvQixHQUNMdEQsRUFBS3VELEdBQ0xwTCxJQUFLcUwsSUFHSCtCLEdBQ0ZwekIsRUFrSkYsU0FBMkJzRSxFQUFHN0QsRUFBUXRFLEdBQ3BDLElBQUlpRixFQUFJdXhCLEVBQWU5VyxLQUFLcGIsRUFBT3BFLE1BQU1GLElBQ3pDLE9BQU9pRixHQUFLa0QsRUFBRTJvQixFQUFJMkYsRUFBbUJ4eEIsRUFBRSxHQUFHd2EsZUFBZ0J6ZixFQUFJaUYsRUFBRSxHQUFHaEQsU0FBVyxHQW5KOUV5Z0IsRUFzSkYsU0FBc0J2YSxFQUFHN0QsRUFBUXRFLEdBQy9CLElBQUlpRixFQUFJcXhCLEVBQVU1VyxLQUFLcGIsRUFBT3BFLE1BQU1GLElBQ3BDLE9BQU9pRixHQUFLa0QsRUFBRTJvQixFQUFJeUYsRUFBY3R4QixFQUFFLEdBQUd3YSxlQUFnQnpmLEVBQUlpRixFQUFFLEdBQUdoRCxTQUFXLEdBdkp6RTZCLEVBMEpGLFNBQXlCcUUsRUFBRzdELEVBQVF0RSxHQUNsQyxJQUFJaUYsRUFBSTJ4QixFQUFhbFgsS0FBS3BiLEVBQU9wRSxNQUFNRixJQUN2QyxPQUFPaUYsR0FBS2tELEVBQUVQLEVBQUlpdkIsRUFBaUI1eEIsRUFBRSxHQUFHd2EsZUFBZ0J6ZixFQUFJaUYsRUFBRSxHQUFHaEQsU0FBVyxHQTNKNUUwZ0IsRUE4SkYsU0FBb0J4YSxFQUFHN0QsRUFBUXRFLEdBQzdCLElBQUlpRixFQUFJeXhCLEVBQVFoWCxLQUFLcGIsRUFBT3BFLE1BQU1GLElBQ2xDLE9BQU9pRixHQUFLa0QsRUFBRVAsRUFBSSt1QixFQUFZMXhCLEVBQUUsR0FBR3dhLGVBQWdCemYsRUFBSWlGLEVBQUUsR0FBR2hELFNBQVcsR0EvSnZFNE0sRUFrS0YsU0FBNkIxRyxFQUFHN0QsRUFBUXRFLEdBQ3RDLE9BQU9rM0IsRUFBZS91QixFQUFHa3RCLEVBQWlCL3dCLEVBQVF0RSxJQWxLbERtSSxFQUFLeXBCLEdBQ0x0TCxFQUFLc0wsR0FDTHRqQixFQUFLNGpCLEdBQ0x4QyxFQUFLb0MsR0FDTHJqQixFQUFLcWpCLEdBQ0xucUIsRUFBS2txQixHQUNMaEMsRUFBS29DLEdBQ0xycUIsRUFBSytwQixHQUNMaEMsRUFBS29DLEdBQ0x0SixFQStIRixTQUFxQnRnQixFQUFHN0QsRUFBUXRFLEdBQzlCLElBQUlpRixFQUFJbXhCLEVBQVMxVyxLQUFLcGIsRUFBT3BFLE1BQU1GLElBQ25DLE9BQU9pRixHQUFLa0QsRUFBRXNnQixFQUFJNE4sRUFBYXB4QixFQUFFLEdBQUd3YSxlQUFnQnpmLEVBQUlpRixFQUFFLEdBQUdoRCxTQUFXLEdBaEl4RW93QixFQUFLRCxHQUNMNVIsRUFBSzhSLEdBQ0wxQyxFQUFLb0MsR0FDTGhCLEVBQUtELEdBQ0xHLEVBQUtELEdBQ0xHLEVBQUtELEdBQ0xMLEVBQUtELEdBQ0xTLEVBQUtELEdBQ0x0bkIsRUFtSkYsU0FBeUI1QixFQUFHN0QsRUFBUXRFLEdBQ2xDLE9BQU9rM0IsRUFBZS91QixFQUFHb3RCLEVBQWFqeEIsRUFBUXRFLElBbko5Q2lxQixFQXNKRixTQUF5QjloQixFQUFHN0QsRUFBUXRFLEdBQ2xDLE9BQU9rM0IsRUFBZS91QixFQUFHcXRCLEVBQWFseEIsRUFBUXRFLElBdEo5Q29pQixFQUFLb1AsR0FDTHVGLEVBQUt4RixHQUNMRyxFQUFLRCxHQUNMNUgsSUFBS3NJLElBV1AsU0FBU3ZILEVBQVU1QixFQUFXOE4sR0FDNUIsT0FBTyxTQUFTL0osR0FDZCxJQUlJbGUsRUFDQTRoQixFQUNBbGhCLEVBTkFqTCxLQUNBdEUsR0FBSyxFQUNMMkgsRUFBSSxFQUNKMUMsRUFBSStqQixFQUFVL21CLE9BT2xCLElBRk04cUIsYUFBZ0J0SCxPQUFPc0gsRUFBTyxJQUFJdEgsTUFBTXNILE1BRXJDL3NCLEVBQUlpRixHQUNxQixLQUE1QitqQixFQUFVNWEsV0FBV3BPLEtBQ3ZCc0UsRUFBT2UsS0FBSzJqQixFQUFVOW9CLE1BQU15SCxFQUFHM0gsSUFDZ0IsT0FBMUN5d0IsRUFBTU4sR0FBS3RoQixFQUFJbWEsRUFBVW1PLFNBQVNuM0IsS0FBYzZPLEVBQUltYSxFQUFVbU8sU0FBU24zQixHQUN2RXl3QixFQUFZLE1BQU41aEIsRUFBWSxJQUFNLEtBQ3pCVSxFQUFTdW5CLEVBQVFqb0IsTUFBSUEsRUFBSVUsRUFBT3dkLEVBQU0wRCxJQUMxQ25zQixFQUFPZSxLQUFLd0osR0FDWmxILEVBQUkzSCxFQUFJLEdBS1osT0FEQXNFLEVBQU9lLEtBQUsyakIsRUFBVTlvQixNQUFNeUgsRUFBRzNILElBQ3hCc0UsRUFBT2lCLEtBQUssS0FJdkIsU0FBUzZ4QixFQUFTcE8sRUFBV3FPLEdBQzNCLE9BQU8sU0FBUy95QixHQUNkLElBRUlnekIsRUFBTWpLLEVBRk5sbEIsRUFBSTZuQixHQUFRLE1BR2hCLEdBRlFrSCxFQUFlL3VCLEVBQUc2Z0IsRUFBVzFrQixHQUFVLEdBQUksSUFFMUNBLEVBQU9yQyxPQUFRLE9BQU8sS0FHL0IsR0FBSSxNQUFPa0csRUFBRyxPQUFPLElBQUlzZCxLQUFLdGQsRUFBRWtxQixHQU1oQyxHQUhJLE1BQU9scUIsSUFBR0EsRUFBRXVuQixFQUFJdm5CLEVBQUV1bkIsRUFBSSxHQUFXLEdBQU52bkIsRUFBRXNnQixHQUc3QixNQUFPdGdCLEVBQUcsQ0FDWixHQUFJQSxFQUFFaXBCLEVBQUksR0FBS2pwQixFQUFFaXBCLEVBQUksR0FBSSxPQUFPLEtBQzFCLE1BQU9qcEIsSUFBSUEsRUFBRTJvQixFQUFJLEdBQ25CLE1BQU8zb0IsR0FFVG12QixHQUQ4QmpLLEdBQTlCaUssRUFBT3hILEdBQVFFLEdBQVE3bkIsRUFBRWlhLEtBQWdCNE0sYUFDNUIsR0FBYSxJQUFSM0IsRUFBWTZCLEdBQVU3ZCxLQUFLaW1CLEdBQVFwSSxHQUFVb0ksR0FDL0RBLEVBQU8zSSxHQUFPM0IsT0FBT3NLLEVBQWtCLEdBQVhudkIsRUFBRWlwQixFQUFJLElBQ2xDanBCLEVBQUVpYSxFQUFJa1YsRUFBSy9ILGlCQUNYcG5CLEVBQUVQLEVBQUkwdkIsRUFBS2hJLGNBQ1hubkIsRUFBRUEsRUFBSW12QixFQUFLeEksY0FBZ0IzbUIsRUFBRTJvQixFQUFJLEdBQUssSUFHdEN3RyxHQUQ4QmpLLEdBQTlCaUssRUFBT0QsRUFBUXJILEdBQVE3bkIsRUFBRWlhLEtBQWdCMEwsVUFDNUIsR0FBYSxJQUFSVCxFQUFZc0csR0FBV3RpQixLQUFLaW1CLEdBQVEzRCxHQUFXMkQsR0FDakVBLEVBQU8zRSxHQUFRM0YsT0FBT3NLLEVBQWtCLEdBQVhudkIsRUFBRWlwQixFQUFJLElBQ25DanBCLEVBQUVpYSxFQUFJa1YsRUFBS2pKLGNBQ1hsbUIsRUFBRVAsRUFBSTB2QixFQUFLbEosV0FDWGptQixFQUFFQSxFQUFJbXZCLEVBQUsxSixXQUFhemxCLEVBQUUyb0IsRUFBSSxHQUFLLFFBRTVCLE1BQU8zb0IsR0FBSyxNQUFPQSxLQUN0QixNQUFPQSxJQUFJQSxFQUFFMm9CLEVBQUksTUFBTzNvQixFQUFJQSxFQUFFNm9CLEVBQUksRUFBSSxNQUFPN29CLEVBQUksRUFBSSxHQUMzRGtsQixFQUFNLE1BQU9sbEIsRUFBSTJuQixHQUFRRSxHQUFRN25CLEVBQUVpYSxJQUFJNE0sWUFBY3FJLEVBQVFySCxHQUFRN25CLEVBQUVpYSxJQUFJMEwsU0FDM0UzbEIsRUFBRVAsRUFBSSxFQUNOTyxFQUFFQSxFQUFJLE1BQU9BLEdBQUtBLEVBQUUyb0IsRUFBSSxHQUFLLEVBQVUsRUFBTjNvQixFQUFFbXBCLEdBQVNqRSxFQUFNLEdBQUssRUFBSWxsQixFQUFFMm9CLEVBQVUsRUFBTjNvQixFQUFFK29CLEdBQVM3RCxFQUFNLEdBQUssR0FLekYsTUFBSSxNQUFPbGxCLEdBQ1RBLEVBQUV1bkIsR0FBS3ZuQixFQUFFdXBCLEVBQUksSUFBTSxFQUNuQnZwQixFQUFFd25CLEdBQUt4bkIsRUFBRXVwQixFQUFJLElBQ041QixHQUFRM25CLElBSVZrdkIsRUFBUWx2QixJQUluQixTQUFTK3VCLEVBQWUvdUIsRUFBRzZnQixFQUFXMWtCLEVBQVFxRCxHQU81QyxJQU5BLElBR0lrSCxFQUNBTSxFQUpBblAsRUFBSSxFQUNKaUYsRUFBSStqQixFQUFVL21CLE9BQ2QyRixFQUFJdEQsRUFBT3JDLE9BSVJqQyxFQUFJaUYsR0FBRyxDQUNaLEdBQUkwQyxHQUFLQyxFQUFHLE9BQVEsRUFFcEIsR0FBVSxNQURWaUgsRUFBSW1hLEVBQVU1YSxXQUFXcE8sT0FJdkIsR0FGQTZPLEVBQUltYSxFQUFVbU8sT0FBT24zQixPQUNyQm1QLEVBQVE4bkIsRUFBT3BvQixLQUFLc2hCLEdBQU9uSCxFQUFVbU8sT0FBT24zQixLQUFPNk8sTUFDbkNsSCxFQUFJd0gsRUFBTWhILEVBQUc3RCxFQUFRcUQsSUFBTSxFQUFJLE9BQVEsT0FDbEQsR0FBSWtILEdBQUt2SyxFQUFPOEosV0FBV3pHLEtBQ2hDLE9BQVEsRUFJWixPQUFPQSxFQWdGVCxPQTFMQW12QixFQUFRL3NCLEVBQUk2Z0IsRUFBVTJLLEVBQWF1QixHQUNuQ0EsRUFBUTdNLEVBQUlXLEVBQVU0SyxFQUFhc0IsR0FDbkNBLEVBQVFqb0IsRUFBSStiLEVBQVV5SyxFQUFpQnlCLEdBQ3ZDRSxFQUFXanRCLEVBQUk2Z0IsRUFBVTJLLEVBQWF5QixHQUN0Q0EsRUFBVy9NLEVBQUlXLEVBQVU0SyxFQUFhd0IsR0FDdENBLEVBQVdub0IsRUFBSStiLEVBQVV5SyxFQUFpQjJCLElBc0x4Q3puQixPQUFRLFNBQVN5WixHQUNmLElBQUkxYSxFQUFJc2MsRUFBVTVCLEdBQWEsR0FBSThOLEdBRW5DLE9BREF4b0IsRUFBRWdTLFNBQVcsV0FBYSxPQUFPMEksR0FDMUIxYSxHQUVUYSxNQUFPLFNBQVM2WixHQUNkLElBQUlQLEVBQUkyTyxFQUFTcE8sR0FBYSxHQUFJeUcsSUFFbEMsT0FEQWhILEVBQUVuSSxTQUFXLFdBQWEsT0FBTzBJLEdBQzFCUCxHQUVUd0gsVUFBVyxTQUFTakgsR0FDbEIsSUFBSTFhLEVBQUlzYyxFQUFVNUIsR0FBYSxHQUFJZ08sR0FFbkMsT0FEQTFvQixFQUFFZ1MsU0FBVyxXQUFhLE9BQU8wSSxHQUMxQjFhLEdBRVQ0aEIsU0FBVSxTQUFTbEgsR0FDakIsSUFBSVAsRUFBSTJPLEVBQVNwTyxFQUFXOEcsSUFFNUIsT0FEQXJILEVBQUVuSSxTQUFXLFdBQWEsT0FBTzBJLEdBQzFCUCxJQ2xWRjZDLENBQWFoVyxHQUN0QjJhLEdBRVl4RyxHQUFPd0csVUFDbkJDLEdBQVd6RyxHQUFPeUcsU0FoQnBCcUgsRUFDRWpDLFNBQVUsU0FDVnZJLEtBQU0sYUFDTjBJLEtBQU0sZUFDTkUsU0FBVSxLQUFNLE1BQ2hCRSxNQUFPLFNBQVUsU0FBVSxVQUFXLFlBQWEsV0FBWSxTQUFVLFlBQ3pFRSxXQUFZLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3RERSxRQUFTLFVBQVcsV0FBWSxRQUFTLFFBQVMsTUFBTyxPQUFRLE9BQVEsU0FBVSxZQUFhLFVBQVcsV0FBWSxZQUN2SEUsYUFBYyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sU0NSN0UxUSxLQUFLampCLFVBQVVnMUIsYUFFekJ2SCxHQVJvQiwwQkNNVixJQUFJeEssS0FBSyw2QkFFbkJ5SyxHRFJvQix5QkVtSTFCLFNBQWdCdUgsR0FBZ0JubkIsR0FDNUIsTUFBTXhFLEVBQU8seUJBQ2IsSUFBSXdFLEVBQUtsUSxlQUFlMEwsR0FFcEIsTUFEQTRyQixRQUFRdGxCLE1BQU05QixHQUNSLG9EQUFzRHhFLEVBTWhFLE9BSEMsUUFBUyxPQUFPNEQsUUFBU3ZILElBQ3RCLElBQUttSSxFQUFLeEUsR0FBTSxHQUFHMUwsZUFBZStILEdBQUksS0FBTSxvREFBc0RBLElBRS9GbUksRUFBS3hFLEdBQU10QixJQUFLckMsSUFDbkJBLEVBQUV3dkIsV0FBYXh2QixFQUFFOEksTUFDakI5SSxFQUFFeXZCLFNBQVd6dkIsRUFBRWdjLElBQ1JoYyxJQ2xKZixPQUFlLFNBQVM2Z0IsR0FFdEIsSUFEQSxJQUFJL2pCLEVBQUkrakIsRUFBVS9tQixPQUFTLEVBQUksRUFBR3NpQixFQUFTLElBQUl2aUIsTUFBTWlELEdBQUlqRixFQUFJLEVBQ3REQSxFQUFJaUYsR0FBR3NmLEVBQU92a0IsR0FBSyxJQUFNZ3BCLEVBQVU5b0IsTUFBVSxFQUFKRixFQUFhLElBQUpBLEdBQ3pELE9BQU91a0IsR0NETUEsR0FBTyxnRUNBUEEsR0FBTyxvRENBUEEsR0FBTyxvRENBUEEsR0FBTyw0RUNBUEEsR0FBTywwRENBUEEsR0FBTyxvRENBUEEsR0FBTywwRENBUEEsR0FBTyxvRENBUEEsR0FBTyw0RUNBdEIsT0FBZSxTQUFTc1QsR0FDdEIsT0FBT0MsR0FBb0JELEVBQU9BLEVBQU81MUIsT0FBUyxLQ1lwRDgxQixHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDRU53VCxHQVpvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLHlEQUNBLCtEQUNBLHNFQUNBckYsSUFBSStaLEtDVkMsT0FVUXdULEdBVkssSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixLQ0VOd1QsR0FWb0IsSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixLQ0VOd1QsR0FWb0IsSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixLQ1JDLE9BVVF3VCxHQVZLLElBQUkvMUIsTUFBTSxHQUFHNk4sT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0FyRixJQUFJK1osS0NFTndULEdBVm9CLElBQUkvMUIsTUFBTSxHQUFHNk4sT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0FyRixJQUFJK1osS0NSQyxPQVVRd1QsR0FWSyxJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLDBEQUNBckYsSUFBSStaLEtDRU53VCxHQVZvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLDBEQUNBckYsSUFBSStaLEtDRU53VCxHQVZvQixJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLDBEQUNBckYsSUFBSStaLEtDUkMsT0FVUXdULEdBVkssSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixLQ0VOd1QsR0FWb0IsSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixLQ0VOd1QsR0FWb0IsSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixLQ0VOd1QsR0FWb0IsSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixLQ1JDLE9BVVF3VCxHQVZLLElBQUkvMUIsTUFBTSxHQUFHNk4sT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0FyRixJQUFJK1osUUNFU3dULEdBVkssSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixRQ0VTd1QsR0FWSyxJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLDBEQUNBckYsSUFBSStaLFFDRVN3VCxHQVZLLElBQUkvMUIsTUFBTSxHQUFHNk4sT0FDL0IscUJBQ0EsMkJBQ0EsaUNBQ0EsdUNBQ0EsNkNBQ0EsbURBQ0EsMERBQ0FyRixJQUFJK1osUUNFU3dULEdBVkssSUFBSS8xQixNQUFNLEdBQUc2TixPQUMvQixxQkFDQSwyQkFDQSxpQ0FDQSx1Q0FDQSw2Q0FDQSxtREFDQSwwREFDQXJGLElBQUkrWixRQ0VTd1QsR0FWSyxJQUFJLzFCLE1BQU0sR0FBRzZOLE9BQy9CLHFCQUNBLDJCQUNBLGlDQUNBLHVDQUNBLDZDQUNBLG1EQUNBLDBEQUNBckYsSUFBSStaLEtDUlN5VCxHQUF5QjlVLEdBQVUsSUFBSyxHQUFLLEdBQU1BLElBQVcsSUFBSyxHQUFLLElDQXJFOFUsR0FBeUI5VSxJQUFXLElBQUssSUFBTSxLQUFPQSxHQUFVLEdBQUksSUFBTSxLQUUxRThVLEdBQXlCOVUsR0FBVSxJQUFLLElBQU0sS0FBT0EsR0FBVSxHQUFJLElBQU0sS0FFbkZBLEtDTEEvQyxLQ0FSLFNBQVM0WCxHQUFLem1CLEdBQ1osSUFBSXJNLEVBQUlxTSxFQUFNclAsT0FDZCxPQUFPLFNBQVNpTCxHQUNkLE9BQU9vRSxFQUFNdkcsS0FBS3FHLElBQUksRUFBR3JHLEtBQUtDLElBQUkvRixFQUFJLEVBQUc4RixLQUFLaUgsTUFBTTlFLEVBQUlqSSxPQUk1RGd6QixHQUFvQjFULEdBQU8scWdEQUVSd1QsR0FBS3hULEdBQU8scWdEQUVWd1QsR0FBS3hULEdBQU8scWdEQUVid1QsR0FBS3hULEdBQU8scWdEQzJIaEMsU0FBZ0IyVCxHQUFjLzBCLEVBQU1vaEIsRUFBTyxTQUFVNFQsRUFBTyxHQUV4RCxJQUFJQyxFQUFPaG5CLEdBQUlqTyxHQUNmLE1BQU1pUixFQzNJSyxTQUFTaWtCLEVBQVdDLEdBQ2pDLElBQUlDLEVBQUssRUFDTEMsRUFBSyxFQUNMQyxFQUFNLEVBQ05yTSxHQUFRLEVBRVosU0FBU2hZLEVBQU1ySyxHQUNiLElBQUltRCxHQUFLbkQsRUFBSXd1QixHQUFNRSxFQUNuQixPQUFPSCxFQUFhbE0sRUFBUXJoQixLQUFLcUcsSUFBSSxFQUFHckcsS0FBS0MsSUFBSSxFQUFHa0MsSUFBTUEsR0FtQjVELE9BaEJBa0gsRUFBTUUsT0FBUyxTQUFTRSxHQUN0QixPQUFPN0ksVUFBVTFKLFFBQVVzMkIsR0FBTS9qQixFQUFFLEdBQUlna0IsR0FBTWhrQixFQUFFLEdBQUlpa0IsRUFBTUYsSUFBT0MsRUFBSyxFQUFJLEdBQUtBLEVBQUtELEdBQUtua0IsSUFBVW1rQixFQUFJQyxJQUd4R3BrQixFQUFNZ1ksTUFBUSxTQUFTNVgsR0FDckIsT0FBTzdJLFVBQVUxSixRQUFVbXFCLElBQVU1WCxFQUFHSixHQUFTZ1ksR0FHbkRoWSxFQUFNa2tCLGFBQWUsU0FBUzlqQixHQUM1QixPQUFPN0ksVUFBVTFKLFFBQVVxMkIsRUFBZTlqQixFQUFHSixHQUFTa2tCLEdBR3hEbGtCLEVBQU1LLEtBQU8sV0FDWCxPQUFPNGpCLEVBQVdDLEdBQWNoa0IsUUFBUWlrQixFQUFJQyxJQUFLcE0sTUFBTUEsSUFHbERQLEdBQVV6WCxHRGdIRHNrQixDQWxDbEIsU0FBcUM1NEIsR0FFakMsTUFBTTY0QixHQUNGQyxLQUFNQyxHQUNOQyxLQUFNQyxHQUNOQyxLQUFNQyxHQUNOQyxPQUFRQyxHQUNSQyxNQUFPQyxHQUNQQyxRQUFTQyxHQUNUQyxPQUFRQyxHQUNSQyxRQUFTQyxHQUNUQyxLQUFNQyxHQUNOQyxNQUFPQyxHQUNQQyxNQUFPRCxJQUVYLElBQUtwQixFQUFjdjRCLGVBQWVOLEdBQU8sQ0FDckMsTUFBTW02QixFQUFNLDRCQUE4Qm42QixFQUUxQyxNQURBNDNCLFFBQVF0bEIsTUFBTTZuQixLQUdsQixPQUFPdEIsRUFBYzc0QixHQWNTbzZCLENBQXFCM1YsSUFFbkQsT0FEQW5RLEVBQU1FLFFBQVE2akIsRUFBTUMsSUFDYmhrQixFQWNYLFNBQWdCK2xCLEdBQWdCQyxFQUFPQyxFQUFLam1CLEVBQU9rbUIsRUFBUUMsRUFBUTFvQixFQUFNLEdBQUkyb0IsRUFBSyxHQUFJQyxHQUFNbGEsRUFBRSxHQUFJdVEsRUFBRSxJQUFLNEosRUFBWSxLQUVqSCxNQUFNdjNCLEdBQVEsR0FBRzBNLE9BQU91RSxFQUFNdkMsTUFBTUEsR0FBTzNSLE1BQU0sSUFPM0MrZixFQUhVb2EsRUFBSTF0QixPQUFPLEtBQUtiLEtBQUsseUJBQTBCd3VCLEVBQU92d0IsTUFBTXV3QixFQUFPbFksTUFDbEUzWSxVQUFVLFdBQVd0RyxLQUFLQSxHQUV6QkYsUUFBUTBKLE9BQU8sS0FBS0gsUUFBUSxVQUFVLEdBRXJDLEtBQWZrdUIsR0FFQUwsRUFBSTF0QixPQUFPLFFBQ05iLEtBQUssUUFBUyxnQkFDZFcsS0FBSzJ0QixHQUNMdHVCLEtBQUssS0FBTSxJQUNYQSxLQUFLLGNBQWUsT0FDcEJBLEtBQUssSUFBSzJ1QixFQUFLbGEsR0FDZnpVLEtBQUsseUJBQTBCd3VCLEVBQU92d0IsTUFBTXV3QixFQUFPbFksTUFHeERuQyxFQUFFdFQsT0FBTyxRQUNKYixLQUFLLElBQUssQ0FBQzNELEVBQUduSSxJQUFNeTZCLEVBQUszSixFQUFFOXdCLEdBQzNCOEwsS0FBSyxJQUFLLEdBQ1ZBLEtBQUssUUFBUzJ1QixFQUFLM0osR0FDbkJobEIsS0FBSyxTQUFVMnVCLEVBQUtsYSxHQUNwQnJjLE1BQU0sT0FBUWtRLEdBRW5CNkwsRUFBRXRULE9BQU8sUUFDSmIsS0FBSyxRQUFTLGdCQUNkVyxLQUFNdEUsR0FBTW95QixHQUFReHZCLEtBQUtzSCxJQUFJbW9CLEVBQU1yeUIsR0FBRyxHQUFHNGhCLFlBQVksR0FBRzVoQixFQUFFNGhCLFlBQVksSUFDdEVqZSxLQUFLLElBQUssQ0FBQzNELEVBQUduSSxJQUFNeTZCLEVBQUszSixFQUFJOXdCLEdBQzdCOEwsS0FBSyxJQUFLLEtBR2Z1dUIsRUFBSTF0QixPQUFPLFFBQ05iLEtBQUssUUFBUyxnQkFDZFcsS0FBSzJ0QixHQUNMdHVCLEtBQUssSUFBSyxHQUNWQSxLQUFLLGNBQWUsU0FDcEJBLEtBQUssSUFBSyxHQUNWQSxLQUFLLHlCQUEwQnd1QixFQUFPdndCLE1BQU11d0IsRUFBT2xZLEVBQUlxWSxFQUFLbGEsRUFBSXBkLEVBQUtsQixxQkFFMUVnZSxFQUFFdFQsT0FBTyxRQUNKYixLQUFLLElBQUssR0FDVkEsS0FBSyxJQUFLLENBQUMzRCxFQUFHbkksSUFBTXk2QixFQUFLbGEsRUFBRXZnQixHQUMzQjhMLEtBQUssUUFBUzJ1QixFQUFLM0osR0FDbkJobEIsS0FBSyxTQUFVMnVCLEVBQUtsYSxHQUNwQnJjLE1BQU0sT0FBUWtRLEdBRW5CNkwsRUFBRXRULE9BQU8sUUFDSmIsS0FBSyxRQUFTLGdCQUNkVyxLQUFNdEUsR0FBTW95QixHQUFReHZCLEtBQUtzSCxJQUFJbW9CLEVBQU1yeUIsR0FBRyxHQUFHNGhCLFlBQVksR0FBRzVoQixFQUFFNGhCLFlBQVksSUFDdEVqZSxLQUFLLElBQUssSUFDVkEsS0FBSyxJQUFLLENBQUMzRCxFQUFHbkksSUFBTXk2QixFQUFLbGEsRUFBSXZnQixFQUFLeTZCLEVBQUtsYSxFQUFFLFVFNU1qQ29hLEdBU2pCQyxZQUFZQyxFQUFNdHlCLE9BQU91eUIsV0FBWUMsRUFBVyxJQUFLQyxFQUFVLElBQUtDLEdBQVFDLElBQUksR0FBSWxxQixNQUFNLElBQUttcUIsT0FBTyxJQUFLdnFCLEtBQUssSUFBS3dxQixFQUFNLEdBQUlDLEVBQU8sSUFDbEk1NkIsS0FBS3c2QixPQUFTQSxFQUNkeDZCLEtBQUtvNkIsTUFBUUEsRUFFYnA2QixLQUFLNjZCLGVBQ0R2eEIsRUFBR2t4QixFQUFPcnFCLEtBQ1Z3UixFQUFHNlksRUFBT0MsSUFBTUYsRUFDaEJ6YSxPQUFHN0wsRUFDSG9jLEVBQUdpSyxFQUFhTSxFQUNoQkUsR0FBSSxZQUdSOTZCLEtBQUtnNkIsTUFDRDNKLE9BQUdwYyxFQUNINkwsRUFBRzZhLEdBR1AzNkIsS0FBSys2QixjQUNEenhCLEVBQUdreEIsRUFBT3JxQixLQUFPbXFCLEVBQ2pCM1ksRUFBRzZZLEVBQU9DLElBQ1YzYSxFQUFHeWEsRUFBWUssRUFDZnZLLEVBQUdyd0IsS0FBS282QixPQUFTSSxFQUFPcnFCLEtBQU9tcUIsRUFBYUUsRUFBT2pxQixPQUNuRHVxQixHQUFJLFdBR1I5NkIsS0FBS2c3QixjQUNEMXhCLEVBQUdreEIsRUFBT3JxQixLQUFPbXFCLEVBQ2pCM1ksRUFBRzZZLEVBQU9DLElBQU1GLEVBQ2hCemEsRUFBRzlmLEtBQUs2NkIsY0FBYy9hLEVBQ3RCdVEsRUFBR3J3QixLQUFLKzZCLGFBQWExSyxFQUNyQnlLLEdBQUksV0FHUjk2QixLQUFLaTdCLGFBQ0QzeEIsRUFBR2t4QixFQUFPcnFCLEtBQU9tcUIsRUFDakIzWSxFQUFHLEVBQ0g3QixFQUFHMGEsRUFBT0MsSUFBSSxFQUNkcEssRUFBR3J3QixLQUFLKzZCLGFBQWExSyxFQUNyQjJKLE1BQU8zSixFQUFHLElBQ1Z5SyxHQUFJLFVBTVpYLE1BQ0ksT0FDSUssT0FBUXg2QixLQUFLdzZCLE9BQ2JSLEtBQU1oNkIsS0FBS2c2QixLQUNYM0osRUFBR3J3QixLQUFLbzZCLE1BQ1J0YSxFQUFHOWYsS0FBS3c2QixPQUFPQyxJQUFNejZCLEtBQUsrNkIsYUFBYWpiLEVBQUk5ZixLQUFLaTdCLFlBQVluYixFQUFJOWYsS0FBS3c2QixPQUFPRSxPQUM1RVEsUUFDSVQsSUFBS3o2QixLQUFLKzZCLGFBQ1Y1cUIsS0FBTW5RLEtBQUs2NkIsY0FDWE0sS0FBTW43QixLQUFLZzdCLGFBQ1hJLE9BQVFwN0IsS0FBS2k3QixlQ3hFN0IsU0FBUy9wQixHQUFNdk8sR0FDYixJQUFJb1AsRUFBTSxFQUNOc3BCLEVBQVcxNEIsRUFBSzA0QixTQUNoQjk3QixFQUFJODdCLEdBQVlBLEVBQVM3NUIsT0FDN0IsR0FBS2pDLEVBQ0EsT0FBU0EsR0FBSyxHQUFHd1MsR0FBT3NwQixFQUFTOTdCLEdBQUdpSSxXQURqQ3VLLEVBQU0sRUFFZHBQLEVBQUs2RSxNQUFRdUssRUNNQSxTQUFTdXBCLEdBQVU1NEIsRUFBTTI0QixHQUN0QyxJQUVJMTRCLEVBRUFULEVBQ0FxNUIsRUFDQWg4QixFQUNBaUYsRUFQQTZELEVBQU8sSUFBSW16QixHQUFLOTRCLEdBQ2hCKzRCLEdBQVUvNEIsRUFBSzhFLFFBQVVhLEVBQUtiLE1BQVE5RSxFQUFLOEUsT0FFM0M0RCxHQUFTL0MsR0FRYixJQUZnQixNQUFaZ3pCLElBQWtCQSxFQUFXSyxJQUUxQi80QixFQUFPeUksRUFBTSthLE9BRWxCLEdBRElzVixJQUFROTRCLEVBQUs2RSxPQUFTN0UsRUFBS0QsS0FBSzhFLFFBQy9CK3pCLEVBQVNGLEVBQVMxNEIsRUFBS0QsU0FBVzhCLEVBQUkrMkIsRUFBTy81QixRQUVoRCxJQURBbUIsRUFBSzA0QixTQUFXLElBQUk5NUIsTUFBTWlELEdBQ3JCakYsRUFBSWlGLEVBQUksRUFBR2pGLEdBQUssSUFBS0EsRUFDeEI2TCxFQUFNeEcsS0FBSzFDLEVBQVFTLEVBQUswNEIsU0FBUzk3QixHQUFLLElBQUlpOEIsR0FBS0QsRUFBT2g4QixLQUN0RDJDLEVBQU1SLE9BQVNpQixFQUNmVCxFQUFNMlEsTUFBUWxRLEVBQUtrUSxNQUFRLEVBS2pDLE9BQU94SyxFQUFLc3pCLFdBQVdDLElBT3pCLFNBQVNGLEdBQWdCaDBCLEdBQ3ZCLE9BQU9BLEVBQUUyekIsU0FHWCxTQUFTUSxHQUFTbDVCLEdBQ2hCQSxFQUFLRCxLQUFPQyxFQUFLRCxLQUFLQSxLQUd4QixTQUFnQms1QixHQUFjajVCLEdBQzVCLElBQUltNUIsRUFBUyxFQUNiLEdBQUduNUIsRUFBS201QixPQUFTQSxTQUNUbjVCLEVBQU9BLEVBQUtqQixTQUFZaUIsRUFBS201QixTQUFXQSxHQUdsRCxTQUFnQk4sR0FBSzk0QixHQUNuQjFDLEtBQUswQyxLQUFPQSxFQUNaMUMsS0FBSzZTLE1BQ0w3UyxLQUFLODdCLE9BQVMsRUFDZDk3QixLQUFLMEIsT0FBUyxLQUdoQjg1QixHQUFLejVCLFVBQVl1NUIsR0FBVXY1QixXQUN6QkMsWUFBYXc1QixHQUNidHFCLE1EekRhLFdBQ2IsT0FBT2xSLEtBQUsrN0IsVUFBVTdxQixLQ3lEdEI3SCxLQ25FYSxTQUFTNEIsR0FDdEIsSUFBaUIrd0IsRUFBd0JYLEVBQVU5N0IsRUFBR2lGLEVBQWxEN0IsRUFBTzNDLEtBQWVvQyxHQUFRTyxHQUNsQyxHQUVFLElBREFxNUIsRUFBVTU1QixFQUFLK08sVUFBVy9PLEtBQ25CTyxFQUFPcTVCLEVBQVE3VixPQUVwQixHQURBbGIsRUFBU3RJLEdBQU8wNEIsRUFBVzE0QixFQUFLMDRCLFNBQ2xCLElBQUs5N0IsRUFBSSxFQUFHaUYsRUFBSTYyQixFQUFTNzVCLE9BQVFqQyxFQUFJaUYsSUFBS2pGLEVBQ3RENkMsRUFBS3dDLEtBQUt5MkIsRUFBUzk3QixVQUdoQjZDLEVBQUtaLFFBQ2QsT0FBT3hCLE1EeURQKzdCLFVFcEVhLFNBQVM5d0IsR0FFdEIsSUFEQSxJQUE0Q293QixFQUFVOTdCLEVBQUdpRixFQUFyRDdCLEVBQU8zQyxLQUFNb0wsR0FBU3pJLEdBQU9QLEtBQzFCTyxFQUFPeUksRUFBTSthLE9BRWxCLEdBREEvakIsRUFBS3dDLEtBQUtqQyxHQUFPMDRCLEVBQVcxNEIsRUFBSzA0QixTQUNuQixJQUFLOTdCLEVBQUksRUFBR2lGLEVBQUk2MkIsRUFBUzc1QixPQUFRakMsRUFBSWlGLElBQUtqRixFQUN0RDZMLEVBQU14RyxLQUFLeTJCLEVBQVM5N0IsSUFHeEIsS0FBT29ELEVBQU9QLEVBQUsrakIsT0FDakJsYixFQUFTdEksR0FFWCxPQUFPM0MsTUYwRFAyN0IsV0dyRWEsU0FBUzF3QixHQUV0QixJQURBLElBQWlDb3dCLEVBQVU5N0IsRUFBdkNvRCxFQUFPM0MsS0FBTW9MLEdBQVN6SSxHQUNuQkEsRUFBT3lJLEVBQU0rYSxPQUVsQixHQURBbGIsRUFBU3RJLEdBQU8wNEIsRUFBVzE0QixFQUFLMDRCLFNBQ2xCLElBQUs5N0IsRUFBSTg3QixFQUFTNzVCLE9BQVMsRUFBR2pDLEdBQUssSUFBS0EsRUFDcEQ2TCxFQUFNeEcsS0FBS3kyQixFQUFTOTdCLElBR3hCLE9BQU9TLE1IOERQK1IsSUl0RWEsU0FBU3ZLLEdBQ3RCLE9BQU94SCxLQUFLKzdCLFVBQVUsU0FBU3A1QixHQUk3QixJQUhBLElBQUlvUCxHQUFPdkssRUFBTTdFLEVBQUtELE9BQVMsRUFDM0IyNEIsRUFBVzE0QixFQUFLMDRCLFNBQ2hCOTdCLEVBQUk4N0IsR0FBWUEsRUFBUzc1QixTQUNwQmpDLEdBQUssR0FBR3dTLEdBQU9zcEIsRUFBUzk3QixHQUFHaUksTUFDcEM3RSxFQUFLNkUsTUFBUXVLLEtKaUVmbkgsS0t2RWEsU0FBU0MsR0FDdEIsT0FBTzdLLEtBQUsyN0IsV0FBVyxTQUFTaDVCLEdBQzFCQSxFQUFLMDRCLFVBQ1AxNEIsRUFBSzA0QixTQUFTendCLEtBQUtDLE1McUV2Qm94QixLTXhFYSxTQUFTdlksR0FJdEIsSUFIQSxJQUFJbFQsRUFBUXhRLEtBQ1JrOEIsRUFjTixTQUE2Qjk0QixFQUFHQyxHQUM5QixHQUFJRCxJQUFNQyxFQUFHLE9BQU9ELEVBQ3BCLElBQUkrNEIsRUFBUy80QixFQUFFZzVCLFlBQ1hDLEVBQVNoNUIsRUFBRSs0QixZQUNYaHVCLEVBQUksS0FHUixJQUZBaEwsRUFBSSs0QixFQUFPaFcsTUFDWDlpQixFQUFJZzVCLEVBQU9sVyxNQUNKL2lCLElBQU1DLEdBQ1grSyxFQUFJaEwsRUFDSkEsRUFBSSs0QixFQUFPaFcsTUFDWDlpQixFQUFJZzVCLEVBQU9sVyxNQUViLE9BQU8vWCxFQTFCUWt1QixDQUFvQjlyQixFQUFPa1QsR0FDdEN0WSxHQUFTb0YsR0FDTkEsSUFBVTByQixHQUNmMXJCLEVBQVFBLEVBQU05TyxPQUNkMEosRUFBTXhHLEtBQUs0TCxHQUdiLElBREEsSUFBSStDLEVBQUluSSxFQUFNNUosT0FDUGtpQixJQUFRd1ksR0FDYjl3QixFQUFNckcsT0FBT3dPLEVBQUcsRUFBR21RLEdBQ25CQSxFQUFNQSxFQUFJaGlCLE9BRVosT0FBTzBKLEdONERQZ3hCLFVPekVhLFdBRWIsSUFEQSxJQUFJejVCLEVBQU8zQyxLQUFNb0wsR0FBU3pJLEdBQ25CQSxFQUFPQSxFQUFLakIsUUFDakIwSixFQUFNeEcsS0FBS2pDLEdBRWIsT0FBT3lJLEdQcUVQbXhCLFlRMUVhLFdBQ2IsSUFBSW54QixLQUlKLE9BSEFwTCxLQUFLcUosS0FBSyxTQUFTMUcsR0FDakJ5SSxFQUFNeEcsS0FBS2pDLEtBRU55SSxHUnNFUG94QixPUzNFYSxXQUNiLElBQUlBLEtBTUosT0FMQXg4QixLQUFLMjdCLFdBQVcsU0FBU2g1QixHQUNsQkEsRUFBSzA0QixVQUNSbUIsRUFBTzUzQixLQUFLakMsS0FHVDY1QixHVHFFUEMsTVU1RWEsV0FDYixJQUFJcDBCLEVBQU9ySSxLQUFNeThCLEtBTWpCLE9BTEFwMEIsRUFBS2dCLEtBQUssU0FBUzFHLEdBQ2JBLElBQVMwRixHQUNYbzBCLEVBQU03M0IsTUFBTXNmLE9BQVF2aEIsRUFBS2pCLE9BQVFnN0IsT0FBUS81QixNQUd0Qzg1QixHVnNFUHpvQixLQXRDRixXQUNFLE9BQU9zbkIsR0FBVXQ3QixNQUFNMjdCLFdBQVdFLE1XeEM3QixJQUFJcDhCLEdBQVE4QixNQUFNUSxVQUFVdEMsU0NBcEIsU0FBUzZKLEdBQ3RCLE9BQU9BLEdDRUxteEIsR0FBTSxFQUNObHFCLEdBQVEsRUFDUm1xQixHQUFTLEVBQ1R2cUIsR0FBTyxFQUNQd3NCLEdBQVUsS0FFZCxTQUFTcFgsR0FBV2pjLEdBQ2xCLE1BQU8sY0FBZ0JBLEVBQUksSUFBTyxNQUdwQyxTQUFTa2MsR0FBVzdELEdBQ2xCLE1BQU8sZ0JBQWtCQSxFQUFJLElBQU8sSUFpQnRDLFNBQVNpYixLQUNQLE9BQVE1OEIsS0FBSzY4QixPQUdmLFNBQVNDLEdBQUtDLEVBQVFwcEIsR0FDcEIsSUFBSXFwQixLQUNBQyxFQUFhLEtBQ2I1UixFQUFhLEtBQ2I2UixFQUFnQixFQUNoQkMsRUFBZ0IsRUFDaEJDLEVBQWMsRUFDZDdwQixFQUFJd3BCLElBQVd0QyxJQUFPc0MsSUFBVzVzQixJQUFRLEVBQUksRUFDN0M3RyxFQUFJeXpCLElBQVc1c0IsSUFBUTRzQixJQUFXeHNCLEdBQVEsSUFBTSxJQUNoRG1XLEVBQVlxVyxJQUFXdEMsSUFBT3NDLElBQVdyQyxHQUFTblYsR0FBYUMsR0FFbkUsU0FBU3NYLEVBQUtPLEdBQ1osSUFBSXhyQixFQUF1QixNQUFkb3JCLEVBQXNCdHBCLEVBQU12QyxNQUFRdUMsRUFBTXZDLE1BQU1qRyxNQUFNd0ksRUFBT3FwQixHQUFpQnJwQixFQUFNRSxTQUFZb3BCLEVBQ3pHbnVCLEVBQXVCLE1BQWR1YyxFQUFzQjFYLEVBQU0wWCxXQUFhMVgsRUFBTTBYLFdBQVdsZ0IsTUFBTXdJLEVBQU9xcEIsR0FBaUIxWCxHQUFZK0YsRUFDN0dpUyxFQUFVaHpCLEtBQUtxRyxJQUFJdXNCLEVBQWUsR0FBS0UsRUFDdkN2c0IsRUFBUThDLEVBQU05QyxRQUNkMHNCLEdBQVUxc0IsRUFBTSxHQUFLLEdBQ3JCMnNCLEdBQVUzc0IsRUFBTUEsRUFBTXJQLE9BQVMsR0FBSyxHQUNwQ2k4QixHQUFZOXBCLEVBQU1ELFVBOUIxQixTQUFnQkMsR0FDZCxJQUFJNFksRUFBU2ppQixLQUFLcUcsSUFBSSxFQUFHZ0QsRUFBTUQsWUFBYyxHQUFLLEVBRWxELE9BRElDLEVBQU1RLFVBQVNvWSxFQUFTamlCLEtBQUs2SixNQUFNb1ksSUFDaEMsU0FBUzdrQixHQUNkLE9BQVFpTSxFQUFNak0sR0FBSzZrQixJQVZ2QixTQUFnQjVZLEdBQ2QsT0FBTyxTQUFTak0sR0FDZCxPQUFRaU0sRUFBTWpNLE1Ba0NxQ2lNLEVBQU1LLFFBQ3JEckwsRUFBWTAwQixFQUFRMTBCLFVBQVkwMEIsRUFBUTEwQixZQUFjMDBCLEVBQ3REcEIsRUFBT3R6QixFQUFVSyxVQUFVLFdBQVd0RyxNQUFNLE9BQzVDZzdCLEVBQU8vMEIsRUFBVUssVUFBVSxTQUFTdEcsS0FBS21QLEVBQVE4QixHQUFPaEosUUFDeERnekIsRUFBV0QsRUFBS2o3QixPQUNoQm03QixFQUFZRixFQUFLbDdCLFFBQVEwSixPQUFPLEtBQUtiLEtBQUssUUFBUyxRQUNuRHd5QixFQUFPSCxFQUFLOTBCLE9BQU8sUUFDbkJvRCxFQUFPMHhCLEVBQUs5MEIsT0FBTyxRQUV2QnF6QixFQUFPQSxFQUFLaHlCLE1BQU1neUIsRUFBS3o1QixRQUFRNkosT0FBTyxPQUFRLFNBQ3pDaEIsS0FBSyxRQUFTLFVBQ2RBLEtBQUssU0FBVSxpQkFFcEJxeUIsRUFBT0EsRUFBS3p6QixNQUFNMnpCLEdBRWxCQyxFQUFPQSxFQUFLNXpCLE1BQU0yekIsRUFBVTF4QixPQUFPLFFBQzlCYixLQUFLLFNBQVUsZ0JBQ2ZBLEtBQUsvQixFQUFJLElBQUtpSyxFQUFJMnBCLElBRXZCbHhCLEVBQU9BLEVBQUsvQixNQUFNMnpCLEVBQVUxeEIsT0FBTyxRQUM5QmIsS0FBSyxPQUFRLGdCQUNiQSxLQUFLL0IsRUFBR2lLLEVBQUkrcEIsR0FDWmp5QixLQUFLLEtBQU0weEIsSUFBV3RDLEdBQU0sTUFBUXNDLElBQVdyQyxHQUFTLFNBQVcsV0FFcEUyQyxJQUFZMTBCLElBQ2RzekIsRUFBT0EsRUFBSzZCLFdBQVdULEdBQ3ZCSyxFQUFPQSxFQUFLSSxXQUFXVCxHQUN2QlEsRUFBT0EsRUFBS0MsV0FBV1QsR0FDdkJyeEIsRUFBT0EsRUFBSzh4QixXQUFXVCxHQUV2Qk0sRUFBV0EsRUFBU0csV0FBV1QsR0FDMUJoeUIsS0FBSyxVQUFXc3hCLElBQ2hCdHhCLEtBQUssWUFBYSxTQUFTM0QsR0FBSyxPQUFPNEosU0FBUzVKLEVBQUkrMUIsRUFBUy8xQixJQUFNZ2YsRUFBVWhmLEdBQUsxSCxLQUFLb0UsYUFBYSxlQUV6R3c1QixFQUNLdnlCLEtBQUssVUFBV3N4QixJQUNoQnR4QixLQUFLLFlBQWEsU0FBUzNELEdBQUssSUFBSXNnQixFQUFJaG9CLEtBQUt1RixXQUFXczNCLE9BQVEsT0FBT25XLEVBQVVzQixHQUFLMVcsU0FBUzBXLEVBQUlBLEVBQUV0Z0IsSUFBTXNnQixFQUFJeVYsRUFBUy8xQixPQUcvSGkyQixFQUFTaDVCLFNBRVRzM0IsRUFDSzV3QixLQUFLLElBQUsweEIsSUFBVzVzQixJQUFRNHNCLEdBQVV4c0IsR0FDakM0c0IsRUFBZ0IsSUFBTTVwQixFQUFJNHBCLEVBQWdCLElBQU1JLEVBQVMsUUFBVUMsRUFBUyxJQUFNanFCLEVBQUk0cEIsRUFBZ0IsUUFBVUksRUFBUyxJQUFNQyxFQUMvSEwsRUFBZ0IsSUFBTUksRUFBUyxJQUFNaHFCLEVBQUk0cEIsRUFBZ0IsUUFBVUssRUFBUyxJQUFNanFCLEVBQUk0cEIsRUFBZ0IsSUFBTUksRUFBUyxRQUFVQyxHQUUxSUUsRUFDS3J5QixLQUFLLFVBQVcsR0FDaEJBLEtBQUssWUFBYSxTQUFTM0QsR0FBSyxPQUFPZ2YsRUFBVStXLEVBQVMvMUIsTUFFL0RtMkIsRUFDS3h5QixLQUFLL0IsRUFBSSxJQUFLaUssRUFBSTJwQixHQUV2Qmx4QixFQUNLWCxLQUFLL0IsRUFBR2lLLEVBQUkrcEIsR0FDWnR4QixLQUFLOEMsR0FFVm5HLEVBQVVPLE9BQU8wekIsSUFDWnZ4QixLQUFLLE9BQVEsUUFDYkEsS0FBSyxZQUFhLElBQ2xCQSxLQUFLLGNBQWUsY0FDcEJBLEtBQUssY0FBZTB4QixJQUFXeHNCLEdBQVEsUUFBVXdzQixJQUFXNXNCLEdBQU8sTUFBUSxVQUVoRnhILEVBQ0tVLEtBQUssV0FBYXJKLEtBQUs2OEIsT0FBU1ksSUF1Q3ZDLE9BcENBWCxFQUFLbnBCLE1BQVEsU0FBU0ksR0FDcEIsT0FBTzdJLFVBQVUxSixRQUFVbVMsRUFBUUksRUFBRytvQixHQUFRbnBCLEdBR2hEbXBCLEVBQUsxckIsTUFBUSxXQUNYLE9BQU80ckIsRUFBZ0J2OUIsR0FBTTRCLEtBQUs2SixXQUFZNHhCLEdBR2hEQSxFQUFLRSxjQUFnQixTQUFTanBCLEdBQzVCLE9BQU83SSxVQUFVMUosUUFBVXc3QixFQUFxQixNQUFManBCLEtBQWlCdFUsR0FBTTRCLEtBQUswUyxHQUFJK29CLEdBQVFFLEVBQWN2OUIsU0FHbkdxOUIsRUFBS0csV0FBYSxTQUFTbHBCLEdBQ3pCLE9BQU83SSxVQUFVMUosUUFBVXk3QixFQUFrQixNQUFMbHBCLEVBQVksS0FBT3RVLEdBQU00QixLQUFLMFMsR0FBSStvQixHQUFRRyxHQUFjQSxFQUFXeDlCLFNBRzdHcTlCLEVBQUt6UixXQUFhLFNBQVN0WCxHQUN6QixPQUFPN0ksVUFBVTFKLFFBQVU2cEIsRUFBYXRYLEVBQUcrb0IsR0FBUXpSLEdBR3JEeVIsRUFBS2lCLFNBQVcsU0FBU2hxQixHQUN2QixPQUFPN0ksVUFBVTFKLFFBQVUwN0IsRUFBZ0JDLEdBQWlCcHBCLEVBQUcrb0IsR0FBUUksR0FHekVKLEVBQUtJLGNBQWdCLFNBQVNucEIsR0FDNUIsT0FBTzdJLFVBQVUxSixRQUFVMDdCLEdBQWlCbnBCLEVBQUcrb0IsR0FBUUksR0FHekRKLEVBQUtLLGNBQWdCLFNBQVNwcEIsR0FDNUIsT0FBTzdJLFVBQVUxSixRQUFVMjdCLEdBQWlCcHBCLEVBQUcrb0IsR0FBUUssR0FHekRMLEVBQUtNLFlBQWMsU0FBU3JwQixHQUMxQixPQUFPN0ksVUFBVTFKLFFBQVU0N0IsR0FBZXJwQixFQUFHK29CLEdBQVFNLEdBR2hETixFQ3JIVCxNQUtNa0IsSUFBVSxRQUNLQyxHQUNqQjlELFlBQVkrRCxFQUFRakUsRUFBWSxLQUM1Qmo2QixLQUFLaytCLE9BQVNBLEVBQ2RsK0IsS0FBS2k2QixZQUFjQSxFQUNuQmo2QixLQUFLbStCLGFBQ0xuK0IsS0FBS3FJLEtBQU9pekIsR0NoRHBCLFNBQTRCdmIsR0FJeEIsSUFIQSxJQUFJcWMsS0FDQWdDLEtBQ0FDLEVBQVN0ZSxFQUFFaGMsTUFBTSx1QkFDWnhFLEVBQUUsRUFBR0EsRUFBRTgrQixFQUFPNzhCLE9BQVFqQyxJQUFLLENBQ2xDLElBQUk0TyxFQUFRa3dCLEVBQU85K0IsR0FDbkIsT0FBUTRPLEdBQ04sSUFBSyxJQUNILElBQUltd0IsS0FDSkYsRUFBS0csV0FBYUQsR0FDbEJsQyxFQUFVeDNCLEtBQUt3NUIsR0FDZkEsRUFBT0UsRUFDUCxNQUNGLElBQUssSUFDQ0EsS0FDSmxDLEVBQVVBLEVBQVU1NkIsT0FBTyxHQUFHKzhCLFVBQVUzNUIsS0FBSzA1QixHQUM3Q0YsRUFBT0UsRUFDUCxNQUNGLElBQUssSUFDSEYsRUFBT2hDLEVBQVVqVyxNQUNqQixNQUNGLElBQUssSUFDSCxNQUNGLFFBQ0UsSUFBSTdjLEVBQUkrMEIsRUFBTzkrQixFQUFFLEdBQ1IsS0FBTCtKLEdBQWlCLEtBQUxBLEdBQWlCLEtBQUxBLEVBQzFCODBCLEVBQUsvK0IsS0FBTzhPLEVBQ0UsS0FBTDdFLElBQ1Q4MEIsRUFBSzU4QixPQUFTZzlCLFdBQVdyd0IsS0FJakMsT0FBT2l3QixFRGdCbUJLLENBQVlQLEdBQVV4MkIsR0FBTUEsRUFBRTYyQixXQUMvQ3hzQixJQUFLckssR0FBSUEsRUFBRTYyQixVQUFVLEVBQUUsR0FDdkIzekIsS0FBSyxDQUFDeEgsRUFBRUMsSUFBSUQsRUFBRW9FLE1BQU1uRSxFQUFFbUUsT0FBT3BFLEVBQUVWLEtBQUtsQixPQUFPNkIsRUFBRVgsS0FBS2xCLFFBQ3ZEeEIsS0FBS3c4QixPQUFTeDhCLEtBQUtxSSxLQUFLbTBCLFNBQVM1eEIsS0FBSyxDQUFDeEgsRUFBR0MsSUFBT0QsRUFBRW9FLE1BQVFuRSxFQUFFbUUsT0FBVXJFLEdBQVVDLEVBQUVWLEtBQUtsQixPQUFRNkIsRUFBRVgsS0FBS2xCLFNBQ3ZHeEIsS0FBSzRvQixXQUFRM1UsRUFDYmpVLEtBQUs4N0IsWUFBUzduQixFQUNkalUsS0FBSzArQixZQUFTenFCLEVBQ2RqVSxLQUFLMitCLFlBQVMxcUIsRUFHbEJrbUIsS0FBS1AsRUFBS2hSLEVBQU9rVCxHQUNiOTdCLEtBQUs0b0IsTUFBUUEsRUFDYjVvQixLQUFLODdCLE9BQVNBLEVBQ2Q5N0IsS0FBSzQrQixhQUNMNStCLEtBQUs2K0IsYUFDRCxLQUFPNytCLEtBQUtpNkIsWUFBYWo2QixLQUFLOCtCLFdBQVdsRixHQUN4QzU1QixLQUFLKytCLFdBQVduRixHQUt6Qk8sV0FBV1AsR0FDUCxNQUFNb0YsRUFBUXI4QixTQUNZc1IsSUFBbEJ0UixFQUFLMDRCLFNBRUwxNEIsRUFBS2dmLEVBQUkzaEIsS0FBSzIrQixPQUFPaDhCLEVBQUtELEtBQUtyRCxNQUkvQnNELEVBQUtnZixFQUFJaGYsRUFBSzA0QixTQUFTNEQsT0FBTyxDQUFDbHRCLEVBQUtySyxJQUFJcUssRUFBSXJLLEVBQUVpYSxFQUFHLEdBQUdoZixFQUFLMDRCLFNBQVM3NUIsUUFHcEUwOUIsRUFBUXY4QixJQUNWQSxFQUFLMkcsRUFBSXRKLEtBQUswK0IsT0FBTzErQixLQUFLbS9CLHVCQUF1Qng4QixLQUkvQ3lJLEVBQVFwTCxLQUFLby9CLG9CQUNuQmgwQixFQUFNNkQsUUFBU3RNLElBQ1h1OEIsRUFBS3Y4QixHQUNMcThCLEVBQUtyOEIsS0FHVGkzQixFQUFJNXdCLFVBQVUsV0FDVHRHLEtBQUswSSxHQUNMNUksUUFBUTBKLE9BQU8sUUFDZmIsS0FBSyxLQUFPM0QsR0FBTUEsRUFBRTRCLEdBQ3BCK0IsS0FBSyxLQUFPM0QsR0FBTUEsRUFBRWhGLEtBQUtsQixPQUFPa0csRUFBRTRCLEVBQUl0SixLQUFLMCtCLE9BQU9oM0IsRUFBRWhGLEtBQUtsQixRQUFRa0csRUFBRTRCLEdBQ25FK0IsS0FBSyxLQUFPM0QsR0FBTUEsRUFBRWlhLEVBQUkzaEIsS0FBSzIrQixPQUFPanJCLFlBQVksR0FDaERySSxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFaWEsRUFBSTNoQixLQUFLMitCLE9BQU9qckIsWUFBWSxHQUNoRHJJLEtBQUssU0FBVSxRQUNmQSxLQUFLLGVBQWdCLEdBRzFCLE1BQU1nMEIsRUFBU3IvQixLQUFLcUksS0FBS2swQixjQUFjcnpCLE9BQVF4QixHQUFJQSxFQUFFbzBCLFFBQVFseEIsS0FBSyxDQUFDeEgsRUFBRUMsSUFBSUEsRUFBRXk0QixPQUFPMTRCLEVBQUUwNEIsUUQrRDVGLElBQTJCbm9CLEVDOURuQmltQixFQUFJNXdCLFVBQVUsUUFDVHRHLEtBQUsyOEIsR0FDTDc4QixRQUFRMEosT0FBTyxRQUNmYixLQUFLLEtBQU8zRCxHQUFNQSxFQUFFNEIsR0FDcEIrQixLQUFLLEtBQU8zRCxHQUFNQSxFQUFFNEIsR0FDcEIrQixLQUFLLEtBQU8zRCxHQUFNQSxFQUFFMnpCLFNBQVMsR0FBRzFaLEVBQUkzaEIsS0FBSzIrQixPQUFPanJCLFlBQVksR0FDNURySSxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFMnpCLFNBQVMsR0FBRzFaLEVBQUkzaEIsS0FBSzIrQixPQUFPanJCLFlBQVksR0FDNURySSxLQUFLLFNBQVUsUUFDZkEsS0FBSyxlQUFnQixHQUUxQnV1QixFQUFJNXdCLFVBQVUsU0FDVHRHLEtBQUsyOEIsR0FDTDc4QixRQUFRMEosT0FBTyxVQUNmYixLQUFLLEtBQU8zRCxHQUFNQSxFQUFFNEIsR0FDcEIrQixLQUFLLEtBQU8zRCxHQUFNQSxFQUFFaWEsRUFBSTNoQixLQUFLMitCLE9BQU9qckIsWUFBWSxHQUNoRHJJLEtBQUssSUFBSyxHQUNWQSxLQUFLLE9BQVEsUUFDYkEsS0FBSyxVQUFXLElBQ2hCQSxLQUFLLFFBQVMsbUJBQ2R0RSxHQUFHLFlBQWEsU0FBU1csR0FDdEI0M0IsR0FBRzEyQixPQUFPNUksTUFBTXFMLEtBQUssSUFBSyxHQUMxQjRyQixRQUFReGxCLElBQUkvSixFQUFFODBCLFlBRWpCejFCLEdBQUcsV0FBWSxTQUFTVyxHQUNyQjQzQixHQUFHMTJCLE9BQU81SSxNQUFNcUwsS0FBSyxJQUFLLEtBS2xDdXVCLEVBQUkxdEIsT0FBTyxLQUNOYixLQUFLLFFBQVMsbUJBQ2RBLEtBQUssWUFBYSxlQUFpQnJMLEtBQUs4N0IsT0FBUyxLQUNqRHo2QixNRDhCY3NTLEVDN0JBM1QsS0FBSzArQixPRDhCdkI1QixHQUFLcEMsR0FBUS9tQixJQzdCRHZDLE1BQU0sSUFLdkIrb0Isb0JBRUksT0FBT242QixLQUFLcUksS0FBS2swQixjQUFjM3hCLEtBQUssQ0FBQ3hILEVBQUdDLElBQU9ELEVBQUUwNEIsT0FBU3o0QixFQUFFeTRCLFFBQVczNEIsR0FBVUMsRUFBRVYsS0FBS2xCLE9BQVE2QixFQUFFWCxLQUFLbEIsU0FHM0cyNEIsV0FBV1AsR0FDUCxNQUFNc0YsRUFBUXY4QixTQUNZc1IsSUFBbEJ0UixFQUFLMDRCLFNBRUwxNEIsRUFBSzJHLEVBQUl0SixLQUFLMCtCLE9BQU8vN0IsRUFBS0QsS0FBS3JELE1BSS9Cc0QsRUFBSzJHLEVBQUkzRyxFQUFLMDRCLFNBQVM0RCxPQUFPLENBQUNsdEIsRUFBS3JLLElBQUlxSyxFQUFJckssRUFBRTRCLEVBQUcsR0FBRzNHLEVBQUswNEIsU0FBUzc1QixRQUdwRXc5QixFQUFRcjhCLElBQ1ZBLEVBQUtnZixFQUFJM2hCLEtBQUsyK0IsT0FBTzMrQixLQUFLbS9CLHVCQUF1Qng4QixLQUcvQ3lJLEVBQVFwTCxLQUFLby9CLG9CQUNuQmgwQixFQUFNNkQsUUFBU3RNLElBQ1h1OEIsRUFBS3Y4QixHQUNMcThCLEVBQUtyOEIsS0FFVGkzQixFQUFJNXdCLFVBQVUsV0FDVHRHLEtBQUswSSxHQUNMNUksUUFBUTBKLE9BQU8sUUFDZmIsS0FBSyxLQUFPM0QsR0FBTUEsRUFBRWlhLEdBQ3BCdFcsS0FBSyxLQUFPM0QsR0FBTUEsRUFBRWhGLEtBQUtsQixPQUFPa0csRUFBRWlhLEVBQUkzaEIsS0FBSzIrQixPQUFPajNCLEVBQUVoRixLQUFLbEIsUUFBUWtHLEVBQUVpYSxHQUNuRXRXLEtBQUssS0FBTzNELEdBQU1BLEVBQUU0QixFQUFJdEosS0FBSzArQixPQUFPaHJCLFlBQVksR0FDaERySSxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFNEIsRUFBSXRKLEtBQUswK0IsT0FBT2hyQixZQUFZLEdBQ2hEckksS0FBSyxTQUFVLFFBQ2ZBLEtBQUssZUFBZ0IsR0FHMUIsTUFBTWcwQixFQUFTci9CLEtBQUtxSSxLQUFLazBCLGNBQWNyekIsT0FBUXhCLEdBQUlBLEVBQUVvMEIsUUFBUWx4QixLQUFLLENBQUN4SCxFQUFFQyxJQUFJQSxFQUFFeTRCLE9BQU8xNEIsRUFBRTA0QixRRFQ1RixJQUF5Qm5vQixFQ1VqQmltQixFQUFJNXdCLFVBQVUsUUFDVHRHLEtBQUsyOEIsR0FDTDc4QixRQUFRMEosT0FBTyxRQUNmYixLQUFLLEtBQU8zRCxHQUFNQSxFQUFFaWEsR0FDcEJ0VyxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFaWEsR0FDcEJ0VyxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFMnpCLFNBQVMsR0FBRy94QixFQUFJdEosS0FBSzArQixPQUFPaHJCLFlBQVksR0FDNURySSxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFMnpCLFNBQVMsR0FBRy94QixFQUFJdEosS0FBSzArQixPQUFPaHJCLFlBQVksR0FDNURySSxLQUFLLFNBQVUsUUFDZkEsS0FBSyxlQUFnQixHQUUxQnV1QixFQUFJNXdCLFVBQVUsU0FDVHRHLEtBQUsyOEIsR0FDTDc4QixRQUFRMEosT0FBTyxVQUNmYixLQUFLLEtBQU8zRCxHQUFNQSxFQUFFNEIsRUFBSXRKLEtBQUswK0IsT0FBT2hyQixZQUFZLEdBQ2hEckksS0FBSyxLQUFPM0QsR0FBTUEsRUFBRWlhLEdBQ3BCdFcsS0FBSyxJQUFLLEdBQ1ZBLEtBQUssT0FBUSxRQUNiQSxLQUFLLFVBQVcsSUFDaEJBLEtBQUssUUFBUyxtQkFDZHRFLEdBQUcsWUFBYSxTQUFTVyxHQUN0QjQzQixHQUFHMTJCLE9BQU81SSxNQUFNcUwsS0FBSyxJQUFLLEdBQzFCNHJCLFFBQVF4bEIsSUFBSS9KLEVBQUU4MEIsWUFFakJ6MUIsR0FBRyxXQUFZLFNBQVNXLEdBQ3JCNDNCLEdBQUcxMkIsT0FBTzVJLE1BQU1xTCxLQUFLLElBQUssS0FLbEN1dUIsRUFBSTF0QixPQUFPLEtBRU5iLEtBQUssUUFBUyxtQkFDZGhLLE1EMUNZc1MsRUMyQ0EzVCxLQUFLMitCLE9EMUNyQjdCLEdBQUszc0IsR0FBTXdELElDMkNDdkMsTUFBTSxJQU12QitvQix1QkFBdUJ4M0IsR0FFbkIsT0FBT0EsRUFBS3M1QixLQUFLajhCLEtBQUtxSSxNQUNqQjQyQixPQUFPLENBQUNsdEIsRUFBS3JLLElBQU1BLEVBQUVoRixLQUFLbEIsT0FBT3VRLEVBQUlySyxFQUFFaEYsS0FBS2xCLE9BQU91USxFQUFLLEdBR2pFb29CLHNCQUVJLElBQUl4M0IsRUFBTzNDLEtBQUt3OEIsT0FBTyxHQUN2QixPQUFPeDhCLEtBQUttL0IsdUJBQXVCeDhCLEdBR3ZDdzNCLGlCQUFpQngzQixHQUViLFlBQXFCc1IsSUFBbEJ0UixFQUFLMDRCLGNBRUpyN0IsS0FBS20rQixVQUFVdjVCLEtBQUtqQyxJQUdwQjNDLEtBQUt1L0IsaUJBQWlCNThCLEVBQUswNEIsU0FBUyxTQUNwQ3I3QixLQUFLdS9CLGlCQUFpQjU4QixFQUFLMDRCLFNBQVMsS0FLNUNsQixhQUNRLEtBQU9uNkIsS0FBS2k2QixZQUNaajZCLEtBQUswK0IsT0FBU2MsS0FDVDNyQixRQUFRLEVBQUc3VCxLQUFLeS9CLHdCQUNoQjV1QixPQUFPLEVBQUc3USxLQUFLNG9CLFNBRXBCNW9CLEtBQUt1L0IsaUJBQWlCdi9CLEtBQUtxSSxNQUN2QjIxQixJQUFTL0csUUFBUXhsQixJQUFJelIsS0FBS20rQixXQUM5Qm4rQixLQUFLMCtCLE9BQVNnQixLQUNUN3JCLE9BQU83VCxLQUFLbStCLFVBQVVwMEIsSUFBS3JDLEdBQU1BLEVBQUVoRixLQUFLckQsT0FDeEN3UixPQUFPLEVBQUc3USxLQUFLNG9CLFFBQ2ZsVSxRQUFRLE1BSXJCeWxCLGFBQ1EsS0FBT242QixLQUFLaTZCLGFBQ1pqNkIsS0FBS3UvQixpQkFBaUJ2L0IsS0FBS3FJLE1BQ3ZCMjFCLElBQVMvRyxRQUFReGxCLElBQUl6UixLQUFLbStCLFdBQzlCbitCLEtBQUsyK0IsT0FBU2UsS0FDVDdyQixPQUFPN1QsS0FBS20rQixVQUFVcDBCLElBQUtyQyxHQUFNQSxFQUFFaEYsS0FBS3JELE9BQ3hDd1IsT0FBTyxFQUFHN1EsS0FBSzg3QixTQUNmcG5CLFFBQVEsTUFFYjFVLEtBQUsyK0IsT0FBU2EsS0FDVDNyQixRQUFRLEVBQUc3VCxLQUFLeS9CLHdCQUNoQjV1QixPQUFPLEVBQUc3USxLQUFLODdCLFVFaFJoQyxJQUFJNkQsSUFBUW40QixNQUFPLGNBRW5CLFNBQVNvRixLQUNQLElBQUssSUFBeUNILEVBQXJDbE4sRUFBSSxFQUFHaUYsRUFBSTBHLFVBQVUxSixPQUFRdVMsS0FBV3hVLEVBQUlpRixJQUFLakYsRUFBRyxDQUMzRCxLQUFNa04sRUFBSXZCLFVBQVUzTCxHQUFLLEtBQVFrTixLQUFLc0gsRUFBSSxNQUFNLElBQUlyRSxNQUFNLGlCQUFtQmpELEdBQzdFc0gsRUFBRXRILE1BRUosT0FBTyxJQUFJbXpCLEdBQVM3ckIsR0FHdEIsU0FBUzZyQixHQUFTN3JCLEdBQ2hCL1QsS0FBSytULEVBQUlBLEVBcURYLFNBQVMzQixHQUFJaEwsRUFBTS9ILEdBQ2pCLElBQUssSUFBNEIrTyxFQUF4QjdPLEVBQUksRUFBR2lGLEVBQUk0QyxFQUFLNUYsT0FBV2pDLEVBQUlpRixJQUFLakYsRUFDM0MsSUFBSzZPLEVBQUloSCxFQUFLN0gsSUFBSUYsT0FBU0EsRUFDekIsT0FBTytPLEVBQUU1RyxNQUtmLFNBQVN5SyxHQUFJN0ssRUFBTS9ILEVBQU00TCxHQUN2QixJQUFLLElBQUkxTCxFQUFJLEVBQUdpRixFQUFJNEMsRUFBSzVGLE9BQVFqQyxFQUFJaUYsSUFBS2pGLEVBQ3hDLEdBQUk2SCxFQUFLN0gsR0FBR0YsT0FBU0EsRUFBTSxDQUN6QitILEVBQUs3SCxHQUFLb2dDLEdBQU12NEIsRUFBT0EsRUFBSzNILE1BQU0sRUFBR0YsR0FBRzZQLE9BQU9oSSxFQUFLM0gsTUFBTUYsRUFBSSxJQUM5RCxNQUlKLE9BRGdCLE1BQVowTCxHQUFrQjdELEVBQUt4QyxNQUFNdkYsS0FBTUEsRUFBTW1JLE1BQU95RCxJQUM3QzdELEVBekRUdzRCLEdBQVM3OUIsVUFBWTZLLEdBQVM3SyxXQUM1QkMsWUFBYTQ5QixHQUNiNzRCLEdBQUksU0FBU0QsRUFBVW1FLEdBQ3JCLElBRUl3QixFQWQyQm96QixFQVkzQjlyQixFQUFJL1QsS0FBSytULEVBQ1QrckIsR0FiMkJELEVBYU85ckIsR0FBZmpOLEVBQVcsSUFabkJoRCxPQUFPQyxNQUFNLFNBQVNnRyxJQUFJLFNBQVMwQyxHQUNsRCxJQUFJcE4sRUFBTyxHQUFJRSxFQUFJa04sRUFBRWpOLFFBQVEsS0FFN0IsR0FESUQsR0FBSyxJQUFHRixFQUFPb04sRUFBRWhOLE1BQU1GLEVBQUksR0FBSWtOLEVBQUlBLEVBQUVoTixNQUFNLEVBQUdGLElBQzlDa04sSUFBTW96QixFQUFNbGdDLGVBQWU4TSxHQUFJLE1BQU0sSUFBSWlELE1BQU0saUJBQW1CakQsR0FDdEUsT0FBUXJGLEtBQU1xRixFQUFHcE4sS0FBTUEsTUFVbkJFLEdBQUssRUFDTGlGLEVBQUlzN0IsRUFBRXQrQixPQUdWLEtBQUkwSixVQUFVMUosT0FBUyxHQUF2QixDQU9BLEdBQWdCLE1BQVp5SixHQUF3QyxtQkFBYkEsRUFBeUIsTUFBTSxJQUFJeUUsTUFBTSxxQkFBdUJ6RSxHQUMvRixPQUFTMUwsRUFBSWlGLEdBQ1gsR0FBSWlJLEdBQUszRixFQUFXZzVCLEVBQUV2Z0MsSUFBSTZILEtBQU0yTSxFQUFFdEgsR0FBS3dGLEdBQUk4QixFQUFFdEgsR0FBSTNGLEVBQVN6SCxLQUFNNEwsUUFDM0QsR0FBZ0IsTUFBWkEsRUFBa0IsSUFBS3dCLEtBQUtzSCxFQUFHQSxFQUFFdEgsR0FBS3dGLEdBQUk4QixFQUFFdEgsR0FBSTNGLEVBQVN6SCxLQUFNLE1BRzFFLE9BQU9XLEtBWkwsT0FBU1QsRUFBSWlGLEdBQUcsSUFBS2lJLEdBQUszRixFQUFXZzVCLEVBQUV2Z0MsSUFBSTZILFFBQVVxRixFQUFJMkYsR0FBSTJCLEVBQUV0SCxHQUFJM0YsRUFBU3pILE9BQVEsT0FBT29OLEdBYy9GdUgsS0FBTSxXQUNKLElBQUlBLEtBQVdELEVBQUkvVCxLQUFLK1QsRUFDeEIsSUFBSyxJQUFJdEgsS0FBS3NILEVBQUdDLEVBQUt2SCxHQUFLc0gsRUFBRXRILEdBQUdoTixRQUNoQyxPQUFPLElBQUltZ0MsR0FBUzVyQixJQUV0QjNTLEtBQU0sU0FBUytGLEVBQU0yNEIsR0FDbkIsSUFBS3Y3QixFQUFJMEcsVUFBVTFKLE9BQVMsR0FBSyxFQUFHLElBQUssSUFBZ0NnRCxFQUFHaUksRUFBL0J1ekIsRUFBTyxJQUFJeitCLE1BQU1pRCxHQUFJakYsRUFBSSxFQUFTQSxFQUFJaUYsSUFBS2pGLEVBQUd5Z0MsRUFBS3pnQyxHQUFLMkwsVUFBVTNMLEVBQUksR0FDbkgsSUFBS1MsS0FBSytULEVBQUVwVSxlQUFleUgsR0FBTyxNQUFNLElBQUlzSSxNQUFNLGlCQUFtQnRJLEdBQ3JFLElBQXVCN0gsRUFBSSxFQUFHaUYsR0FBekJpSSxFQUFJek0sS0FBSytULEVBQUUzTSxJQUFvQjVGLE9BQVFqQyxFQUFJaUYsSUFBS2pGLEVBQUdrTixFQUFFbE4sR0FBR2lJLE1BQU0yRCxNQUFNNDBCLEVBQU1DLElBRWpGNzBCLE1BQU8sU0FBUy9ELEVBQU0yNEIsRUFBTUMsR0FDMUIsSUFBS2hnQyxLQUFLK1QsRUFBRXBVLGVBQWV5SCxHQUFPLE1BQU0sSUFBSXNJLE1BQU0saUJBQW1CdEksR0FDckUsSUFBSyxJQUFJcUYsRUFBSXpNLEtBQUsrVCxFQUFFM00sR0FBTzdILEVBQUksRUFBR2lGLEVBQUlpSSxFQUFFakwsT0FBUWpDLEVBQUlpRixJQUFLakYsRUFBR2tOLEVBQUVsTixHQUFHaUksTUFBTTJELE1BQU00MEIsRUFBTUMsS0M1RHZGLElBSUlDLEdBQ0FDLEdBTEFDLEdBQVEsRUFDUkMsR0FBVSxFQUNWL1QsR0FBVyxFQUNYZ1UsR0FBWSxJQUdaQyxHQUFZLEVBQ1pDLEdBQVcsRUFDWEMsR0FBWSxFQUNaQyxHQUErQixpQkFBaEJDLGFBQTRCQSxZQUFZQyxJQUFNRCxZQUFjMWIsS0FDM0U0YixHQUE2QixpQkFBWDk0QixRQUF1QkEsT0FBTys0QixzQkFBd0IvNEIsT0FBTys0QixzQkFBc0J0M0IsS0FBS3pCLFFBQVUsU0FBUytGLEdBQUtpekIsV0FBV2p6QixFQUFHLEtBRXBKLFNBQWdCOHlCLEtBQ2QsT0FBT0osS0FBYUssR0FBU0csSUFBV1IsR0FBV0UsR0FBTUUsTUFBUUgsSUFHbkUsU0FBU08sS0FDUFIsR0FBVyxFQUdiLFNBQWdCUyxLQUNkaGhDLEtBQUtpaEMsTUFDTGpoQyxLQUFLa2hDLE1BQ0xsaEMsS0FBSzRCLE1BQVEsS0EwQmYsU0FBZ0J1L0IsR0FBTWwyQixFQUFVbTJCLEVBQU9wTSxHQUNyQyxJQUFJdm9CLEVBQUksSUFBSXUwQixHQUVaLE9BREF2MEIsRUFBRTQwQixRQUFRcDJCLEVBQVVtMkIsRUFBT3BNLEdBQ3BCdm9CLEVBY1QsU0FBUzYwQixLQUNQZixJQUFZRCxHQUFZRyxHQUFNRSxPQUFTSCxHQUN2Q0wsR0FBUUMsR0FBVSxFQUNsQixLQWRGLFdBQ0VPLE9BQ0VSLEdBRUYsSUFEQSxJQUFrQnRhLEVBQWRwWixFQUFJd3pCLEdBQ0R4ekIsSUFDQW9aLEVBQUkwYSxHQUFXOXpCLEVBQUV5MEIsUUFBVSxHQUFHejBCLEVBQUV3MEIsTUFBTTUvQixLQUFLLEtBQU13a0IsR0FDdERwWixFQUFJQSxFQUFFN0ssUUFFTnUrQixHQU9Bb0IsV0FFQXBCLEdBQVEsRUFXWixXQUNFLElBQUluZixFQUFtQkUsRUFBZkQsRUFBS2dmLEdBQWNqTCxFQUFPcEssRUFBQUEsRUFDbEMsS0FBTzNKLEdBQ0RBLEVBQUdnZ0IsT0FDRGpNLEVBQU8vVCxFQUFHaWdCLFFBQU9sTSxFQUFPL1QsRUFBR2lnQixPQUMvQmxnQixFQUFLQyxFQUFJQSxFQUFLQSxFQUFHcmYsUUFFakJzZixFQUFLRCxFQUFHcmYsTUFBT3FmLEVBQUdyZixNQUFRLEtBQzFCcWYsRUFBS0QsRUFBS0EsRUFBR3BmLE1BQVFzZixFQUFLK2UsR0FBVy9lLEdBR3pDZ2YsR0FBV2xmLEVBQ1h3Z0IsR0FBTXhNLEdBdEJKeU0sR0FDQWxCLEdBQVcsR0FJZixTQUFTbUIsS0FDUCxJQUFJZixFQUFNRixHQUFNRSxNQUFPUyxFQUFRVCxFQUFNTCxHQUNqQ2MsRUFBUWYsS0FBV0csSUFBYVksRUFBT2QsR0FBWUssR0FrQnpELFNBQVNhLEdBQU14TSxHQUNUbUwsS0FDQUMsS0FBU0EsR0FBVXVCLGFBQWF2QixLQUN4QnBMLEVBQU91TCxHQUNQLElBQ052TCxFQUFPcEssRUFBQUEsSUFBVXdWLEdBQVVVLFdBQVdRLEdBQU10TSxFQUFPeUwsR0FBTUUsTUFBUUgsS0FDakVuVSxLQUFVQSxHQUFXdVYsY0FBY3ZWLE9BRWxDQSxLQUFVaVUsR0FBWUcsR0FBTUUsTUFBT3RVLEdBQVd3VixZQUFZSCxHQUFNckIsS0FDckVGLEdBQVEsRUFBR1MsR0FBU1UsTUFqRnhCTixHQUFNai9CLFVBQVlvL0IsR0FBTXAvQixXQUN0QkMsWUFBYWcvQixHQUNiSyxRQUFTLFNBQVNwMkIsRUFBVW0yQixFQUFPcE0sR0FDakMsR0FBd0IsbUJBQWIvcEIsRUFBeUIsTUFBTSxJQUFJNjJCLFVBQVUsOEJBQ3hEOU0sR0FBZ0IsTUFBUkEsRUFBZTJMLE1BQVMzTCxJQUFrQixNQUFUb00sRUFBZ0IsR0FBS0EsR0FDekRwaEMsS0FBSzRCLE9BQVNzK0IsS0FBYWxnQyxPQUMxQmtnQyxHQUFVQSxHQUFTdCtCLE1BQVE1QixLQUMxQmlnQyxHQUFXamdDLEtBQ2hCa2dDLEdBQVdsZ0MsTUFFYkEsS0FBS2loQyxNQUFRaDJCLEVBQ2JqTCxLQUFLa2hDLE1BQVFsTSxFQUNid00sTUFFRi93QixLQUFNLFdBQ0F6USxLQUFLaWhDLFFBQ1BqaEMsS0FBS2loQyxNQUFRLEtBQ2JqaEMsS0FBS2toQyxNQUFRdFcsRUFBQUEsRUFDYjRXLFFDMUNOLE9BQWUsU0FBU3YyQixFQUFVbTJCLEVBQU9wTSxHQUN2QyxJQUFJdm9CLEVBQUksSUFBSXUwQixHQU1aLE9BTEFJLEVBQWlCLE1BQVRBLEVBQWdCLEdBQUtBLEVBQzdCMzBCLEVBQUU0MEIsUUFBUSxTQUFTVSxHQUNqQnQxQixFQUFFZ0UsT0FDRnhGLEVBQVM4MkIsRUFBVVgsSUFDbEJBLEVBQU9wTSxHQUNIdm9CLEdDTkx1MUIsR0FBVXAxQixHQUFTLFFBQVMsTUFBTyxhQUNuQ3ExQixNQUVPQyxHQUFVLEVBQ1ZDLEdBQVksRUFDWkMsR0FBVyxFQUNYQyxHQUFVLEVBQ1ZDLEdBQVUsRUFDVkMsR0FBUyxFQUNUQyxHQUFRLEtBRUosU0FBUzcvQixFQUFNdEQsRUFBTXk3QixFQUFJeDBCLEVBQU8vRCxFQUFPa2dDLEdBQ3BELElBQUlDLEVBQVkvL0IsRUFBS2dnQyxhQUNyQixHQUFLRCxHQUNBLEdBQUk1SCxLQUFNNEgsRUFBVyxZQURWLy9CLEVBQUtnZ0MsaUJBbUN2QixTQUFnQmhnQyxFQUFNbTRCLEVBQUk4SCxHQUN4QixJQUNJQyxFQURBSCxFQUFZLy9CLEVBQUtnZ0MsYUFnQnJCLFNBQVNueUIsRUFBTXV4QixHQUNiLElBQUl4aUMsRUFBRzJILEVBQUcxQyxFQUFHeUMsRUFHYixHQUFJMjdCLEVBQUtFLFFBQVVYLEdBQVcsT0FBTzF4QixJQUVyQyxJQUFLbFIsS0FBS21qQyxFQUVSLElBREF6N0IsRUFBSXk3QixFQUFVbmpDLElBQ1JGLE9BQVN1akMsRUFBS3ZqQyxLQUFwQixDQUtBLEdBQUk0SCxFQUFFNjdCLFFBQVVULEdBQVMsT0FBT2pDLEdBQVE1dkIsR0FJcEN2SixFQUFFNjdCLFFBQVVSLElBQ2RyN0IsRUFBRTY3QixNQUFRTixHQUNWdjdCLEVBQUVrNkIsTUFBTTF3QixPQUNSeEosRUFBRUYsR0FBRzFGLEtBQUssWUFBYXNCLEVBQU1BLEVBQUtiLFNBQVVtRixFQUFFWCxNQUFPVyxFQUFFMUUsY0FDaERtZ0MsRUFBVW5qQyxLQU1UQSxFQUFJdTdCLElBQ1o3ekIsRUFBRTY3QixNQUFRTixHQUNWdjdCLEVBQUVrNkIsTUFBTTF3QixjQUNEaXlCLEVBQVVuakMsSUFvQnJCLEdBWkE2Z0MsR0FBUSxXQUNGd0MsRUFBS0UsUUFBVVQsS0FDakJPLEVBQUtFLE1BQVFSLEdBQ2JNLEVBQUt6QixNQUFNRSxRQUFRM0QsRUFBTWtGLEVBQUt4QixNQUFPd0IsRUFBSzVOLE1BQzFDMEksRUFBS3FFLE1BTVRhLEVBQUtFLE1BQVFWLEdBQ2JRLEVBQUs3N0IsR0FBRzFGLEtBQUssUUFBU3NCLEVBQU1BLEVBQUtiLFNBQVU4Z0MsRUFBS3Q4QixNQUFPczhCLEVBQUtyZ0MsT0FDeERxZ0MsRUFBS0UsUUFBVVYsR0FBbkIsQ0FLQSxJQUpBUSxFQUFLRSxNQUFRVCxHQUdiUSxFQUFRLElBQUl0aEMsTUFBTWlELEVBQUlvK0IsRUFBS0MsTUFBTXJoQyxRQUM1QmpDLEVBQUksRUFBRzJILEdBQUssRUFBRzNILEVBQUlpRixJQUFLakYsR0FDdkIwSCxFQUFJMjdCLEVBQUtDLE1BQU10akMsR0FBR2lJLE1BQU1uRyxLQUFLc0IsRUFBTUEsRUFBS2IsU0FBVThnQyxFQUFLdDhCLE1BQU9zOEIsRUFBS3JnQyxVQUNyRXNnQyxJQUFRMzdCLEdBQUtELEdBR2pCNDdCLEVBQU1yaEMsT0FBUzBGLEVBQUksR0FHckIsU0FBU3cyQixFQUFLcUUsR0FLWixJQUpBLElBQUl0MUIsRUFBSXMxQixFQUFVYSxFQUFLRyxTQUFXSCxFQUFLSSxLQUFLM2hDLEtBQUssS0FBTTBnQyxFQUFVYSxFQUFLRyxXQUFhSCxFQUFLekIsTUFBTUUsUUFBUTV3QixHQUFPbXlCLEVBQUtFLE1BQVFQLEdBQVEsR0FDOUhoakMsR0FBSyxFQUNMaUYsRUFBSXErQixFQUFNcmhDLFNBRUxqQyxFQUFJaUYsR0FDWHErQixFQUFNdGpDLEdBQUc4QixLQUFLLEtBQU1vTCxHQUlsQm0yQixFQUFLRSxRQUFVUCxLQUNqQkssRUFBSzc3QixHQUFHMUYsS0FBSyxNQUFPc0IsRUFBTUEsRUFBS2IsU0FBVThnQyxFQUFLdDhCLE1BQU9zOEIsRUFBS3JnQyxPQUMxRGtPLEtBSUosU0FBU0EsSUFJUCxJQUFLLElBQUlsUixLQUhUcWpDLEVBQUtFLE1BQVFOLEdBQ2JJLEVBQUt6QixNQUFNMXdCLGNBQ0ppeUIsRUFBVTVILEdBQ0g0SCxFQUFXLGNBQ2xCLy9CLEVBQUtnZ0MsYUEvRmRELEVBQVU1SCxHQUFNOEgsRUFDaEJBLEVBQUt6QixNQUFRQSxHQUViLFNBQWtCWSxHQUNoQmEsRUFBS0UsTUFBUVgsR0FDYlMsRUFBS3pCLE1BQU1FLFFBQVE3d0IsRUFBT295QixFQUFLeEIsTUFBT3dCLEVBQUs1TixNQUd2QzROLEVBQUt4QixPQUFTVyxHQUFTdnhCLEVBQU11eEIsRUFBVWEsRUFBS3hCLFFBUHJCLEVBQUd3QixFQUFLNU4sTUF4Q3JDN29CLENBQU94SixFQUFNbTRCLEdBQ1h6N0IsS0FBTUEsRUFDTmlILE1BQU9BLEVBQ1AvRCxNQUFPQSxFQUNQd0UsR0FBSWk3QixHQUNKYSxNQUFPWixHQUNQak4sS0FBTXlOLEVBQU96TixLQUNib00sTUFBT3FCLEVBQU9yQixNQUNkMkIsU0FBVU4sRUFBT00sU0FDakJDLEtBQU1QLEVBQU9PLEtBQ2I3QixNQUFPLEtBQ1AyQixNQUFPWixNQUlYLFNBQWdCbnlCLEdBQUtwTixFQUFNbTRCLEdBQ3pCLElBQUltSSxFQUFXN3dCLEdBQUl6UCxFQUFNbTRCLEdBQ3pCLEdBQUltSSxFQUFTSCxNQUFRWixHQUFTLE1BQU0sSUFBSXh5QixNQUFNLCtCQUM5QyxPQUFPdXpCLEVBR1QsU0FBZ0JoeEIsR0FBSXRQLEVBQU1tNEIsR0FDeEIsSUFBSW1JLEVBQVc3d0IsR0FBSXpQLEVBQU1tNEIsR0FDekIsR0FBSW1JLEVBQVNILE1BQVFWLEdBQVUsTUFBTSxJQUFJMXlCLE1BQU0sNkJBQy9DLE9BQU91ekIsRUFHVCxTQUFnQjd3QixHQUFJelAsRUFBTW00QixHQUN4QixJQUFJbUksRUFBV3RnQyxFQUFLZ2dDLGFBQ3BCLElBQUtNLEtBQWNBLEVBQVdBLEVBQVNuSSxJQUFNLE1BQU0sSUFBSXByQixNQUFNLHdCQUM3RCxPQUFPdXpCLEVDcUJULFNBQWdCQyxHQUFXcEYsRUFBWXorQixFQUFNbUksR0FDM0MsSUFBSXN6QixFQUFLZ0QsRUFBV3FGLElBT3BCLE9BTEFyRixFQUFXejBCLEtBQUssV0FDZCxJQUFJNDVCLEVBQVdoeEIsR0FBSWpTLEtBQU04NkIsSUFDeEJtSSxFQUFTejdCLFFBQVV5N0IsRUFBU3o3QixXQUFhbkksR0FBUW1JLEVBQU0yRCxNQUFNbkwsS0FBTWtMLGFBRy9ELFNBQVN2SSxHQUNkLE9BQU95UCxHQUFJelAsRUFBTW00QixHQUFJdHpCLE1BQU1uSSxJQzNFL0IsT0FBZSxTQUFTK0QsRUFBR0MsR0FDekIsSUFBSStLLEVBQ0osT0FBcUIsaUJBQU4vSyxFQUFpQisvQixHQUMxQi8vQixhQUFhMGIsR0FBUXNrQixJQUNwQmoxQixFQUFJMlEsR0FBTTFiLEtBQU9BLEVBQUkrSyxFQUFHaTFCLElBQ3pCQyxJQUFtQmxnQyxFQUFHQyxJQ0E5QixJQ05JaUYsR0FBWUssRUFBVTVHLFVBQVVDLFlDYXBDLElDSUk4NEIsR0FBSyxFQUVULFNBQWdCeUksR0FBV2g3QixFQUFRQyxFQUFTbkosRUFBTXk3QixHQUNoRDk2QixLQUFLeUksUUFBVUYsRUFDZnZJLEtBQUswSSxTQUFXRixFQUNoQnhJLEtBQUt3akMsTUFBUW5rQyxFQUNiVyxLQUFLbWpDLElBQU1ySSxFQU9iLFNBQWdCMkksS0FDZCxRQUFTM0ksR0FHWCxJQUFJNEksR0FBc0IvNkIsRUFBVTVHLFVBRXBDd2hDLEdBQVd4aEMsVUFWWCxTQUFtQzFDLEdBQ2pDLE9BQU9zSixJQUFZbTFCLFdBQVd6K0IsSUFTRTBDLFdBQ2hDQyxZQUFhdWhDLEdBQ2IzNkIsT0NwQ2EsU0FBU0EsR0FDdEIsSUFBSXZKLEVBQU9XLEtBQUt3akMsTUFDWjFJLEVBQUs5NkIsS0FBS21qQyxJQUVRLG1CQUFYdjZCLElBQXVCQSxFQUFTbkksRUFBU21JLElBRXBELElBQUssSUFBSUwsRUFBU3ZJLEtBQUt5SSxRQUFTdEIsRUFBSW9CLEVBQU8vRyxPQUFRcUgsRUFBWSxJQUFJdEgsTUFBTTRGLEdBQUlELEVBQUksRUFBR0EsRUFBSUMsSUFBS0QsRUFDM0YsSUFBSyxJQUFpRnZFLEVBQU1tRyxFQUFuRnZHLEVBQVFnRyxFQUFPckIsR0FBSTFDLEVBQUlqQyxFQUFNZixPQUFRdUgsRUFBV0YsRUFBVTNCLEdBQUssSUFBSTNGLE1BQU1pRCxHQUFtQmpGLEVBQUksRUFBR0EsRUFBSWlGLElBQUtqRixHQUM5R29ELEVBQU9KLEVBQU1oRCxNQUFRdUosRUFBVUYsRUFBT3ZILEtBQUtzQixFQUFNQSxFQUFLYixTQUFVdkMsRUFBR2dELE1BQ2xFLGFBQWNJLElBQU1tRyxFQUFRaEgsU0FBV2EsRUFBS2IsVUFDaERpSCxFQUFTeEosR0FBS3VKLEVBQ2RtNkIsR0FBU2w2QixFQUFTeEosR0FBSUYsRUFBTXk3QixFQUFJdjdCLEVBQUd3SixFQUFVcUosR0FBSXpQLEVBQU1tNEIsS0FLN0QsT0FBTyxJQUFJeUksR0FBVzE2QixFQUFXN0ksS0FBSzBJLFNBQVVySixFQUFNeTdCLElEcUJ0RDl4QixVRXJDYSxTQUFTSixHQUN0QixJQUFJdkosRUFBT1csS0FBS3dqQyxNQUNaMUksRUFBSzk2QixLQUFLbWpDLElBRVEsbUJBQVh2NkIsSUFBdUJBLEVBQVNLLEVBQVlMLElBRXZELElBQUssSUFBSUwsRUFBU3ZJLEtBQUt5SSxRQUFTdEIsRUFBSW9CLEVBQU8vRyxPQUFRcUgsS0FBZ0JMLEtBQWN0QixFQUFJLEVBQUdBLEVBQUlDLElBQUtELEVBQy9GLElBQUssSUFBeUN2RSxFQUFyQ0osRUFBUWdHLEVBQU9yQixHQUFJMUMsRUFBSWpDLEVBQU1mLE9BQWNqQyxFQUFJLEVBQUdBLEVBQUlpRixJQUFLakYsRUFDbEUsR0FBSW9ELEVBQU9KLEVBQU1oRCxHQUFJLENBQ25CLElBQUssSUFBMkQyQyxFQUF2RG01QixFQUFXenlCLEVBQU92SCxLQUFLc0IsRUFBTUEsRUFBS2IsU0FBVXZDLEVBQUdnRCxHQUFlb2hDLEVBQVV2eEIsR0FBSXpQLEVBQU1tNEIsR0FBS3ZuQixFQUFJLEVBQUd5TSxFQUFJcWIsRUFBUzc1QixPQUFRK1IsRUFBSXlNLElBQUt6TSxHQUMvSHJSLEVBQVFtNUIsRUFBUzluQixLQUNuQjB2QixHQUFTL2dDLEVBQU83QyxFQUFNeTdCLEVBQUl2bkIsRUFBRzhuQixFQUFVc0ksR0FHM0M5NkIsRUFBVWpFLEtBQUt5MkIsR0FDZjd5QixFQUFRNUQsS0FBS2pDLEdBS25CLE9BQU8sSUFBSTRnQyxHQUFXMTZCLEVBQVdMLEVBQVNuSixFQUFNeTdCLElGa0JoRDV4QixPR3ZDYSxTQUFTQyxHQUNELG1CQUFWQSxJQUFzQkEsRUFBUXRJLEVBQVFzSSxJQUVqRCxJQUFLLElBQUlaLEVBQVN2SSxLQUFLeUksUUFBU3RCLEVBQUlvQixFQUFPL0csT0FBUXFILEVBQVksSUFBSXRILE1BQU00RixHQUFJRCxFQUFJLEVBQUdBLEVBQUlDLElBQUtELEVBQzNGLElBQUssSUFBdUV2RSxFQUFuRUosRUFBUWdHLEVBQU9yQixHQUFJMUMsRUFBSWpDLEVBQU1mLE9BQVF1SCxFQUFXRixFQUFVM0IsTUFBZTNILEVBQUksRUFBR0EsRUFBSWlGLElBQUtqRixHQUMzRm9ELEVBQU9KLEVBQU1oRCxLQUFPNEosRUFBTTlILEtBQUtzQixFQUFNQSxFQUFLYixTQUFVdkMsRUFBR2dELElBQzFEd0csRUFBU25FLEtBQUtqQyxHQUtwQixPQUFPLElBQUk0Z0MsR0FBVzE2QixFQUFXN0ksS0FBSzBJLFNBQVUxSSxLQUFLd2pDLE1BQU94akMsS0FBS21qQyxNSDZCakVsNUIsTUl6Q2EsU0FBUzZ6QixHQUN0QixHQUFJQSxFQUFXcUYsTUFBUW5qQyxLQUFLbWpDLElBQUssTUFBTSxJQUFJenpCLE1BRTNDLElBQUssSUFBSXhGLEVBQVVsSyxLQUFLeUksUUFBUzBCLEVBQVUyekIsRUFBV3IxQixRQUFTMkIsRUFBS0YsRUFBUTFJLE9BQVE2SSxFQUFLRixFQUFRM0ksT0FBUTJGLEVBQUltRCxLQUFLQyxJQUFJSCxFQUFJQyxHQUFLRyxFQUFTLElBQUlqSixNQUFNNkksR0FBS2xELEVBQUksRUFBR0EsRUFBSUMsSUFBS0QsRUFDckssSUFBSyxJQUFtR3ZFLEVBQS9GOEgsRUFBU1AsRUFBUWhELEdBQUl3RCxFQUFTUCxFQUFRakQsR0FBSTFDLEVBQUlpRyxFQUFPakosT0FBUXlJLEVBQVFPLEVBQU90RCxHQUFLLElBQUkzRixNQUFNaUQsR0FBVWpGLEVBQUksRUFBR0EsRUFBSWlGLElBQUtqRixHQUN4SG9ELEVBQU84SCxFQUFPbEwsSUFBTW1MLEVBQU9uTCxNQUM3QjBLLEVBQU0xSyxHQUFLb0QsR0FLakIsS0FBT3VFLEVBQUlrRCxJQUFNbEQsRUFDZnNELEVBQU90RCxHQUFLZ0QsRUFBUWhELEdBR3RCLE9BQU8sSUFBSXE4QixHQUFXLzRCLEVBQVF4SyxLQUFLMEksU0FBVTFJLEtBQUt3akMsTUFBT3hqQyxLQUFLbWpDLE1KMkI5RHg2QixVRnhDYSxXQUNiLE9BQU8sSUFBSUwsR0FBVXRJLEtBQUt5SSxRQUFTekksS0FBSzBJLFdFd0N4Q28xQixXSzFDYSxXQUtiLElBSkEsSUFBSXorQixFQUFPVyxLQUFLd2pDLE1BQ1pJLEVBQU01akMsS0FBS21qQyxJQUNYVSxFQUFNSixLQUVEbDdCLEVBQVN2SSxLQUFLeUksUUFBU3RCLEVBQUlvQixFQUFPL0csT0FBUTBGLEVBQUksRUFBR0EsRUFBSUMsSUFBS0QsRUFDakUsSUFBSyxJQUF5Q3ZFLEVBQXJDSixFQUFRZ0csRUFBT3JCLEdBQUkxQyxFQUFJakMsRUFBTWYsT0FBY2pDLEVBQUksRUFBR0EsRUFBSWlGLElBQUtqRixFQUNsRSxHQUFJb0QsRUFBT0osRUFBTWhELEdBQUksQ0FDbkIsSUFBSW9rQyxFQUFVdnhCLEdBQUl6UCxFQUFNaWhDLEdBQ3hCWCxHQUFTdGdDLEVBQU10RCxFQUFNd2tDLEVBQUt0a0MsRUFBR2dELEdBQzNCeXlCLEtBQU0yTyxFQUFRM08sS0FBTzJPLEVBQVF2QyxNQUFRdUMsRUFBUVosU0FDN0MzQixNQUFPLEVBQ1AyQixTQUFVWSxFQUFRWixTQUNsQkMsS0FBTVcsRUFBUVgsT0FNdEIsT0FBTyxJQUFJTyxHQUFXaDdCLEVBQVF2SSxLQUFLMEksU0FBVXJKLEVBQU13a0MsSUx3Qm5EeGlDLEtBQU1xaUMsR0FBb0JyaUMsS0FDMUIrSixNQUFPczRCLEdBQW9CdDRCLE1BQzNCekksS0FBTStnQyxHQUFvQi9nQyxLQUMxQnlHLEtBQU1zNkIsR0FBb0J0NkIsS0FDMUJ6SSxNQUFPK2lDLEdBQW9CL2lDLE1BQzNCMEksS0FBTXE2QixHQUFvQnI2QixLQUMxQnRDLEdNM0JhLFNBQVMxSCxFQUFNZ0gsR0FDNUIsSUFBSXkwQixFQUFLOTZCLEtBQUttakMsSUFFZCxPQUFPajRCLFVBQVUxSixPQUFTLEVBQ3BCNFEsR0FBSXBTLEtBQUsyQyxPQUFRbTRCLEdBQUkvekIsR0FBR0EsR0FBRzFILEdBQzNCVyxLQUFLcUosS0FwQmIsU0FBb0J5eEIsRUFBSXo3QixFQUFNZ0gsR0FDNUIsSUFBSXk5QixFQUFLQyxFQUFLQyxFQVRoQixTQUFlM2tDLEdBQ2IsT0FBUUEsRUFBTyxJQUFJeUUsT0FBT0MsTUFBTSxTQUFTeW9CLE1BQU0sU0FBUy9mLEdBQ3RELElBQUlsTixFQUFJa04sRUFBRWpOLFFBQVEsS0FFbEIsT0FESUQsR0FBSyxJQUFHa04sRUFBSUEsRUFBRWhOLE1BQU0sRUFBR0YsS0FDbkJrTixHQUFXLFVBQU5BLElBS0srRCxDQUFNblIsR0FBUTBRLEdBQU9rQyxHQUN6QyxPQUFPLFdBQ0wsSUFBSWd4QixFQUFXZSxFQUFJaGtDLEtBQU04NkIsR0FDckIvekIsRUFBS2s4QixFQUFTbDhCLEdBS2RBLElBQU8rOEIsSUFBTUMsR0FBT0QsRUFBTS84QixHQUFJaU4sUUFBUWpOLEdBQUcxSCxFQUFNZ0gsR0FFbkQ0OEIsRUFBU2w4QixHQUFLZzlCLEdBU0FFLENBQVduSixFQUFJejdCLEVBQU1nSCxLTnVCckNnRixLT2NhLFNBQVNoTSxFQUFNbUksR0FDNUIsSUFBSTFILEVBQVdDLEVBQVVWLEdBQU9FLEVBQWlCLGNBQWJPLEVBQTJCaW1CLEdBQXVCMEYsR0FDdEYsT0FBT3pyQixLQUFLa2tDLFVBQVU3a0MsRUFBdUIsbUJBQVZtSSxHQUM1QjFILEVBQVNELE1BakJsQixTQUF3QkMsRUFBVTJyQixFQUFhamtCLEdBQzdDLElBQUkyOEIsRUFDQUMsRUFDQUMsRUFDSixPQUFPLFdBQ0wsSUFBSUMsRUFBUUMsRUFBUy84QixFQUFNeEgsTUFDM0IsR0FBYyxNQUFWdWtDLEVBRUosT0FEQUQsRUFBU3RrQyxLQUFLc0wsZUFBZXhMLEVBQVNGLE1BQU9FLEVBQVNELFVBQ3BDMGtDLEVBQVMsS0FDckJELElBQVdILEdBQVdJLElBQVdILEVBQVVDLEVBQzNDQSxFQUFlNVksRUFBWTBZLEVBQVVHLEVBQVFGLEVBQVVHLEdBSjdCdmtDLEtBQUt1TCxrQkFBa0J6TCxFQUFTRixNQUFPRSxFQUFTRCxTQXBCcEYsU0FBc0JSLEVBQU1vc0IsRUFBYWprQixHQUN2QyxJQUFJMjhCLEVBQ0FDLEVBQ0FDLEVBQ0osT0FBTyxXQUNMLElBQUlDLEVBQVFDLEVBQVMvOEIsRUFBTXhILE1BQzNCLEdBQWMsTUFBVnVrQyxFQUVKLE9BREFELEVBQVN0a0MsS0FBS29FLGFBQWEvRSxNQUNUa2xDLEVBQVMsS0FDckJELElBQVdILEdBQVdJLElBQVdILEVBQVVDLEVBQzNDQSxFQUFlNVksRUFBWTBZLEVBQVVHLEVBQVFGLEVBQVVHLEdBSjdCdmtDLEtBQUt3TCxnQkFBZ0JuTSxNQXlCQVMsRUFBVVAsRUFBRzJqQyxHQUFXbGpDLEtBQU0sUUFBVVgsRUFBTW1JLElBQ3RGLE1BQVRBLEdBQWlCMUgsRUFBU0QsTUE1RGxDLFNBQXNCQyxHQUNwQixPQUFPLFdBQ0xFLEtBQUt1TCxrQkFBa0J6TCxFQUFTRixNQUFPRSxFQUFTRCxTQVJwRCxTQUFvQlIsR0FDbEIsT0FBTyxXQUNMVyxLQUFLd0wsZ0JBQWdCbk0sTUFnRTRDUyxJQUM1REEsRUFBU0QsTUE1Q2xCLFNBQXdCQyxFQUFVMnJCLEVBQWE4WSxHQUM3QyxJQUFJSixFQUNBRSxFQUNKLE9BQU8sV0FDTCxJQUFJQyxFQUFTdGtDLEtBQUtzTCxlQUFleEwsRUFBU0YsTUFBT0UsRUFBU0QsT0FDMUQsT0FBT3lrQyxJQUFXQyxFQUFTLEtBQ3JCRCxJQUFXSCxFQUFVRSxFQUNyQkEsRUFBZTVZLEVBQVkwWSxFQUFVRyxFQUFRQyxLQWxCdkQsU0FBc0JsbEMsRUFBTW9zQixFQUFhOFksR0FDdkMsSUFBSUosRUFDQUUsRUFDSixPQUFPLFdBQ0wsSUFBSUMsRUFBU3RrQyxLQUFLb0UsYUFBYS9FLEdBQy9CLE9BQU9pbEMsSUFBV0MsRUFBUyxLQUNyQkQsSUFBV0gsRUFBVUUsRUFDckJBLEVBQWU1WSxFQUFZMFksRUFBVUcsRUFBUUMsTUFnREV6a0MsRUFBVVAsRUFBR2lJLEVBQVEsTVBsQjVFMDhCLFVROUJhLFNBQVM3a0MsRUFBTW1JLEdBQzVCLElBQUl6RSxFQUFNLFFBQVUxRCxFQUNwQixHQUFJNkwsVUFBVTFKLE9BQVMsRUFBRyxPQUFRdUIsRUFBTS9DLEtBQUs2aUMsTUFBTTkvQixLQUFTQSxFQUFJeWhDLE9BQ2hFLEdBQWEsTUFBVGg5QixFQUFlLE9BQU94SCxLQUFLNmlDLE1BQU05L0IsRUFBSyxNQUMxQyxHQUFxQixtQkFBVnlFLEVBQXNCLE1BQU0sSUFBSWtJLE1BQzNDLElBQUk1UCxFQUFXQyxFQUFVVixHQUN6QixPQUFPVyxLQUFLNmlDLE1BQU05L0IsR0FBTWpELEVBQVNELE1BNUJuQyxTQUFxQkMsRUFBVTBILEdBQzdCLFNBQVNxN0IsSUFDUCxJQUFJbGdDLEVBQU8zQyxLQUFNVCxFQUFJaUksRUFBTTJELE1BQU14SSxFQUFNdUksV0FDdkMsT0FBTzNMLEdBQUssU0FBU2tOLEdBQ25COUosRUFBSytJLGVBQWU1TCxFQUFTRixNQUFPRSxFQUFTRCxNQUFPTixFQUFFa04sS0FJMUQsT0FEQW8yQixFQUFNMkIsT0FBU2g5QixFQUNScTdCLEdBR1QsU0FBbUJ4akMsRUFBTW1JLEdBQ3ZCLFNBQVNxN0IsSUFDUCxJQUFJbGdDLEVBQU8zQyxLQUFNVCxFQUFJaUksRUFBTTJELE1BQU14SSxFQUFNdUksV0FDdkMsT0FBTzNMLEdBQUssU0FBU2tOLEdBQ25COUosRUFBS2tDLGFBQWF4RixFQUFNRSxFQUFFa04sS0FJOUIsT0FEQW8yQixFQUFNMkIsT0FBU2g5QixFQUNScTdCLElBUzJEL2lDLEVBQVUwSCxLUnlCNUUvRCxNU05hLFNBQVNwRSxFQUFNbUksRUFBT21FLEdBQ25DLElBQUlwTSxFQUFxQixjQUFoQkYsR0FBUSxJQUFzQjBtQixHQUF1QjBGLEdBQzlELE9BQWdCLE1BQVRqa0IsRUFBZ0J4SCxLQUNkeWtDLFdBQVdwbEMsRUEvQ3RCLFNBQXFCQSxFQUFNb3NCLEdBQ3pCLElBQUkwWSxFQUNBQyxFQUNBQyxFQUNKLE9BQU8sV0FDTCxJQUFJQyxFQUFTN2dDLEVBQU16RCxLQUFNWCxHQUNyQmtsQyxHQUFVdmtDLEtBQUt5RCxNQUFNbUksZUFBZXZNLEdBQU9vRSxFQUFNekQsS0FBTVgsSUFDM0QsT0FBT2lsQyxJQUFXQyxFQUFTLEtBQ3JCRCxJQUFXSCxHQUFXSSxJQUFXSCxFQUFVQyxFQUMzQ0EsRUFBZTVZLEVBQVkwWSxFQUFVRyxFQUFRRixFQUFVRyxJQXNDckNHLENBQVlybEMsRUFBTUUsSUFDbkN3SCxHQUFHLGFBQWUxSCxFQW5DN0IsU0FBd0JBLEdBQ3RCLE9BQU8sV0FDTFcsS0FBS3lELE1BQU1tSSxlQUFldk0sSUFpQ0tzbEMsQ0FBZXRsQyxJQUMxQ1csS0FBS3lrQyxXQUFXcGxDLEVBQXVCLG1CQUFWbUksRUFuQnJDLFNBQXVCbkksRUFBTW9zQixFQUFhamtCLEdBQ3hDLElBQUkyOEIsRUFDQUMsRUFDQUMsRUFDSixPQUFPLFdBQ0wsSUFBSUMsRUFBUzdnQyxFQUFNekQsS0FBTVgsR0FDckJrbEMsRUFBUy84QixFQUFNeEgsTUFFbkIsT0FEYyxNQUFWdWtDLElBQTBCdmtDLEtBQUt5RCxNQUFNbUksZUFBZXZNLEdBQXBDa2xDLEVBQTJDOWdDLEVBQU16RCxLQUFNWCxJQUNwRWlsQyxJQUFXQyxFQUFTLEtBQ3JCRCxJQUFXSCxHQUFXSSxJQUFXSCxFQUFVQyxFQUMzQ0EsRUFBZTVZLEVBQVkwWSxFQUFVRyxFQUFRRixFQUFVRyxJQVVyREssQ0FBY3ZsQyxFQUFNRSxFQUFHMmpDLEdBQVdsakMsS0FBTSxTQUFXWCxFQUFNbUksSUEvQnJFLFNBQXVCbkksRUFBTW9zQixFQUFhOFksR0FDeEMsSUFBSUosRUFDQUUsRUFDSixPQUFPLFdBQ0wsSUFBSUMsRUFBUzdnQyxFQUFNekQsS0FBTVgsR0FDekIsT0FBT2lsQyxJQUFXQyxFQUFTLEtBQ3JCRCxJQUFXSCxFQUFVRSxFQUNyQkEsRUFBZTVZLEVBQVkwWSxFQUFVRyxFQUFRQyxJQXlCM0NNLENBQWN4bEMsRUFBTUUsRUFBR2lJLEVBQVEsSUFBS21FLElUQTlDODRCLFdVN0NhLFNBQVNwbEMsRUFBTW1JLEVBQU9tRSxHQUNuQyxJQUFJNUksRUFBTSxVQUFZMUQsR0FBUSxJQUM5QixHQUFJNkwsVUFBVTFKLE9BQVMsRUFBRyxPQUFRdUIsRUFBTS9DLEtBQUs2aUMsTUFBTTkvQixLQUFTQSxFQUFJeWhDLE9BQ2hFLEdBQWEsTUFBVGg5QixFQUFlLE9BQU94SCxLQUFLNmlDLE1BQU05L0IsRUFBSyxNQUMxQyxHQUFxQixtQkFBVnlFLEVBQXNCLE1BQU0sSUFBSWtJLE1BQzNDLE9BQU8xUCxLQUFLNmlDLE1BQU05L0IsRUFoQnBCLFNBQW9CMUQsRUFBTW1JLEVBQU9tRSxHQUMvQixTQUFTazNCLElBQ1AsSUFBSWxnQyxFQUFPM0MsS0FBTVQsRUFBSWlJLEVBQU0yRCxNQUFNeEksRUFBTXVJLFdBQ3ZDLE9BQU8zTCxHQUFLLFNBQVNrTixHQUNuQjlKLEVBQUtjLE1BQU1vSSxZQUFZeE0sRUFBTUUsRUFBRWtOLEdBQUlkLElBSXZDLE9BREFrM0IsRUFBTTJCLE9BQVNoOUIsRUFDUnE3QixFQVFnQjRCLENBQVdwbEMsRUFBTW1JLEVBQW1CLE1BQVptRSxFQUFtQixHQUFLQSxLVnlDdkVLLEtEMUNhLFNBQVN4RSxHQUN0QixPQUFPeEgsS0FBSzZpQyxNQUFNLE9BQXlCLG1CQUFWcjdCLEVBUm5DLFNBQXNCQSxHQUNwQixPQUFPLFdBQ0wsSUFBSSs4QixFQUFTLzhCLEVBQU14SCxNQUNuQkEsS0FBS2tGLFlBQXdCLE1BQVZxL0IsRUFBaUIsR0FBS0EsR0FNckNPLENBQWE1QixHQUFXbGpDLEtBQU0sT0FBUXdILElBZjlDLFNBQXNCQSxHQUNwQixPQUFPLFdBQ0x4SCxLQUFLa0YsWUFBY3NDLEdBY2Z1OUIsQ0FBc0IsTUFBVHY5QixFQUFnQixHQUFLQSxFQUFRLE1Dd0NoRDdDLE9IbERhLFdBQ2IsT0FBTzNFLEtBQUsrRyxHQUFHLGNBVE8rekIsRUFTc0I5NkIsS0FBS21qQyxJQVIxQyxXQUNMLElBQUl6aEMsRUFBUzFCLEtBQUt1RixXQUNsQixJQUFLLElBQUloRyxLQUFLUyxLQUFLMmlDLGFBQWMsSUFBS3BqQyxJQUFNdTdCLEVBQUksT0FDNUNwNUIsR0FBUUEsRUFBT2tFLFlBQVk1RixTQUpuQyxJQUF3Qjg2QixHRzJEdEIrSCxNTFJhLFNBQVN4akMsRUFBTW1JLEdBQzVCLElBQUlzekIsRUFBSzk2QixLQUFLbWpDLElBSWQsR0FGQTlqQyxHQUFRLEdBRUo2TCxVQUFVMUosT0FBUyxFQUFHLENBRXhCLElBREEsSUFDa0NpTCxFQUQ5Qm8yQixFQUFRendCLEdBQUlwUyxLQUFLMkMsT0FBUW00QixHQUFJK0gsTUFDeEJ0akMsRUFBSSxFQUFHaUYsRUFBSXErQixFQUFNcmhDLE9BQVdqQyxFQUFJaUYsSUFBS2pGLEVBQzVDLElBQUtrTixFQUFJbzJCLEVBQU10akMsSUFBSUYsT0FBU0EsRUFDMUIsT0FBT29OLEVBQUVqRixNQUdiLE9BQU8sS0FHVCxPQUFPeEgsS0FBS3FKLE1BQWUsTUFBVDdCLEVBaEVwQixTQUFxQnN6QixFQUFJejdCLEdBQ3ZCLElBQUkybEMsRUFBUUMsRUFDWixPQUFPLFdBQ0wsSUFBSWhDLEVBQVdoeEIsR0FBSWpTLEtBQU04NkIsR0FDckIrSCxFQUFRSSxFQUFTSixNQUtyQixHQUFJQSxJQUFVbUMsRUFFWixJQUFLLElBQUl6bEMsRUFBSSxFQUFHaUYsR0FEaEJ5Z0MsRUFBU0QsRUFBU25DLEdBQ1NyaEMsT0FBUWpDLEVBQUlpRixJQUFLakYsRUFDMUMsR0FBSTBsQyxFQUFPMWxDLEdBQUdGLE9BQVNBLEVBQU0sRUFDM0I0bEMsRUFBU0EsRUFBT3hsQyxTQUNUc0YsT0FBT3hGLEVBQUcsR0FDakIsTUFLTjBqQyxFQUFTSixNQUFRb0MsSUFJckIsU0FBdUJuSyxFQUFJejdCLEVBQU1tSSxHQUMvQixJQUFJdzlCLEVBQVFDLEVBQ1osR0FBcUIsbUJBQVZ6OUIsRUFBc0IsTUFBTSxJQUFJa0ksTUFDM0MsT0FBTyxXQUNMLElBQUl1ekIsRUFBV2h4QixHQUFJalMsS0FBTTg2QixHQUNyQitILEVBQVFJLEVBQVNKLE1BS3JCLEdBQUlBLElBQVVtQyxFQUFRLENBQ3BCQyxHQUFVRCxFQUFTbkMsR0FBT3BqQyxRQUMxQixJQUFLLElBQUlnTixHQUFLcE4sS0FBTUEsRUFBTW1JLE1BQU9BLEdBQVFqSSxFQUFJLEVBQUdpRixFQUFJeWdDLEVBQU96akMsT0FBUWpDLEVBQUlpRixJQUFLakYsRUFDMUUsR0FBSTBsQyxFQUFPMWxDLEdBQUdGLE9BQVNBLEVBQU0sQ0FDM0I0bEMsRUFBTzFsQyxHQUFLa04sRUFDWixNQUdBbE4sSUFBTWlGLEdBQUd5Z0MsRUFBT3JnQyxLQUFLNkgsR0FHM0J3MkIsRUFBU0osTUFBUW9DLEtBbUI0Q25LLEVBQUl6N0IsRUFBTW1JLEtLTnpFNDVCLE1XOUNhLFNBQVM1NUIsR0FDdEIsSUFBSXN6QixFQUFLOTZCLEtBQUttakMsSUFFZCxPQUFPajRCLFVBQVUxSixPQUNYeEIsS0FBS3FKLE1BQXVCLG1CQUFWN0IsRUFoQjFCLFNBQXVCc3pCLEVBQUl0ekIsR0FDekIsT0FBTyxXQUNMdUksR0FBSy9QLEtBQU04NkIsR0FBSXNHLE9BQVM1NUIsRUFBTTJELE1BQU1uTCxLQUFNa0wsYUFJOUMsU0FBdUI0dkIsRUFBSXR6QixHQUN6QixPQUFPQSxHQUFTQSxFQUFPLFdBQ3JCdUksR0FBSy9QLEtBQU04NkIsR0FBSXNHLE1BQVE1NUIsS0FVQXN6QixFQUFJdHpCLElBQ3ZCNEssR0FBSXBTLEtBQUsyQyxPQUFRbTRCLEdBQUlzRyxPWHdDM0IyQixTWS9DYSxTQUFTdjdCLEdBQ3RCLElBQUlzekIsRUFBSzk2QixLQUFLbWpDLElBRWQsT0FBT2o0QixVQUFVMUosT0FDWHhCLEtBQUtxSixNQUF1QixtQkFBVjdCLEVBaEIxQixTQUEwQnN6QixFQUFJdHpCLEdBQzVCLE9BQU8sV0FDTHlLLEdBQUlqUyxLQUFNODZCLEdBQUlpSSxVQUFZdjdCLEVBQU0yRCxNQUFNbkwsS0FBTWtMLGFBSWhELFNBQTBCNHZCLEVBQUl0ekIsR0FDNUIsT0FBT0EsR0FBU0EsRUFBTyxXQUNyQnlLLEdBQUlqUyxLQUFNODZCLEdBQUlpSSxTQUFXdjdCLEtBVUNzekIsRUFBSXR6QixJQUMxQjRLLEdBQUlwUyxLQUFLMkMsT0FBUW00QixHQUFJaUksVVp5QzNCQyxLYXJEYSxTQUFTeDdCLEdBQ3RCLElBQUlzekIsRUFBSzk2QixLQUFLbWpDLElBRWQsT0FBT2o0QixVQUFVMUosT0FDWHhCLEtBQUtxSixLQVhiLFNBQXNCeXhCLEVBQUl0ekIsR0FDeEIsR0FBcUIsbUJBQVZBLEVBQXNCLE1BQU0sSUFBSWtJLE1BQzNDLE9BQU8sV0FDTHVDLEdBQUlqUyxLQUFNODZCLEdBQUlrSSxLQUFPeDdCLEdBUVAwOUIsQ0FBYXBLLEVBQUl0ekIsSUFDM0I0SyxHQUFJcFMsS0FBSzJDLE9BQVFtNEIsR0FBSWtJLE9DVDdCLElBQUltQyxJQUNGblEsS0FBTSxLQUNOb00sTUFBTyxFQUNQMkIsU0FBVSxJQUNWQyxLQ0RLLFNBQW9CdjJCLEdBQ3pCLFFBQVNBLEdBQUssSUFBTSxFQUFJQSxFQUFJQSxFQUFJQSxHQUFLQSxHQUFLLEdBQUtBLEVBQUlBLEVBQUksR0FBSyxJREc5RCxTQUFTazNCLEdBQVFoaEMsRUFBTW00QixHQUVyQixJQURBLElBQUkySCxJQUNLQSxFQUFTOS9CLEVBQUtnZ0MsaUJBQW1CRixFQUFTQSxFQUFPM0gsS0FDeEQsS0FBTW40QixFQUFPQSxFQUFLNEMsWUFDaEIsT0FBTzQvQixHQUFjblEsS0FBTzJMLEtBQU93RSxHQUd2QyxPQUFPMUMsRUVmVDk1QixFQUFVNUcsVUFBVXFqQyxVQ0ZMLFNBQVMvbEMsR0FDdEIsT0FBT1csS0FBS3FKLEtBQUssWUNESixTQUFTMUcsRUFBTXRELEdBQzVCLElBQ0k0akMsRUFDQW9DLEVBRUE5bEMsRUFKQW1qQyxFQUFZLy9CLEVBQUtnZ0MsYUFHakJoaUMsR0FBUSxFQUdaLEdBQUsraEMsRUFBTCxDQUlBLElBQUtuakMsS0FGTEYsRUFBZSxNQUFSQSxFQUFlLEtBQU9BLEVBQU8sR0FFMUJxakMsR0FDSE8sRUFBV1AsRUFBVW5qQyxJQUFJRixPQUFTQSxHQUN2Q2dtQyxFQUFTcEMsRUFBU0gsTUFBUVYsSUFBWWEsRUFBU0gsTUFBUVAsR0FDdkRVLEVBQVNILE1BQVFOLEdBQ2pCUyxFQUFTOUIsTUFBTTF3QixPQUNYNDBCLEdBQVFwQyxFQUFTbDhCLEdBQUcxRixLQUFLLFlBQWFzQixFQUFNQSxFQUFLYixTQUFVbWhDLEVBQVMzOEIsTUFBTzI4QixFQUFTMWdDLGNBQ2pGbWdDLEVBQVVuakMsSUFMOEJvQixHQUFRLEVBUXJEQSxVQUFjZ0MsRUFBS2dnQyxjRGxCckJ5QyxDQUFVcGxDLEtBQU1YLE1EQ3BCc0osRUFBVTVHLFVBQVUrN0IsV0ZpQkwsU0FBU3orQixHQUN0QixJQUFJeTdCLEVBQ0EySCxFQUVBcGpDLGFBQWdCa2tDLElBQ2xCekksRUFBS3o3QixFQUFLOGpDLElBQUs5akMsRUFBT0EsRUFBS21rQyxRQUUzQjFJLEVBQUsySSxNQUFVaEIsRUFBUzBDLElBQWVuUSxLQUFPMkwsS0FBT3RoQyxFQUFlLE1BQVJBLEVBQWUsS0FBT0EsRUFBTyxJQUczRixJQUFLLElBQUlrSixFQUFTdkksS0FBS3lJLFFBQVN0QixFQUFJb0IsRUFBTy9HLE9BQVEwRixFQUFJLEVBQUdBLEVBQUlDLElBQUtELEVBQ2pFLElBQUssSUFBeUN2RSxFQUFyQ0osRUFBUWdHLEVBQU9yQixHQUFJMUMsRUFBSWpDLEVBQU1mLE9BQWNqQyxFQUFJLEVBQUdBLEVBQUlpRixJQUFLakYsR0FDOURvRCxFQUFPSixFQUFNaEQsS0FDZjBqQyxHQUFTdGdDLEVBQU10RCxFQUFNeTdCLEVBQUl2N0IsRUFBR2dELEVBQU9rZ0MsR0FBVWtCLEdBQVFoaEMsRUFBTW00QixJQUtqRSxPQUFPLElBQUl5SSxHQUFXaDdCLEVBQVF2SSxLQUFLMEksU0FBVXJKLEVBQU15N0IsVUs1QmhDd0ssR0FDakJuTCxZQUFZb0wsRUFBT0MsRUFBbUJDLEdBQVMsR0FDM0NDLE1BQU1ILEtBQVNJLE9BR2YsTUFBTUMsRUFBYUgsRUFBUyxrQ0FBbUMseUJBQy9EemxDLEtBQUs2bEMsSUFBTUgsRUFBRSxVQUFVSSxTQUFTRixHQUFZRyxhQUFhUixLQUN6RHZsQyxLQUFLZ21DLFdBQ0xobUMsS0FBS3dsQyxRQUFVQSxFQVduQnJMLHdCQUF3QlcsRUFBSW1MLEVBQU9DLEVBQWFDLEVBQVNDLEVBQUssZUFDMUNwbUMsS0FBS3FtQyxhQUFhdkwsRUFBSXNMLEdBQ3RDeDlCLE1BQVdreUIsS0FDTi96QixHQUFHLFFBQVMsS0FDVC9HLEtBQUtzbUMsWUFBWUwsRUFBT0MsRUFBYUMsS0FFeENwL0IsR0FBRyxZQUFhLEtBQ2IvRyxLQUFLd2xDLFFBQVFHLEtBQUssY0FFckI1K0IsR0FBRyxXQUFZLEtBQ1ovRyxLQUFLd2xDLFFBQVFlLFNBSXpCcE0sa0JBQWtCVyxFQUFJN3ZCLEVBQVVtN0IsRUFBSyx3QkFDakJwbUMsS0FBS3FtQyxhQUFhdkwsRUFBSXNMLEdBQ3RDeDlCLE1BQVdreUIsS0FDTi96QixHQUFHLFFBQVNrRSxHQUNabEUsR0FBRyxZQUFhLEtBQ2IvRyxLQUFLd2xDLFFBQVFHLEtBQUssc0JBRXJCNStCLEdBQUcsV0FBWSxLQUNaL0csS0FBS3dsQyxRQUFRZSxTQVV6QnBNLGFBQWFXLEVBQUlzTCxFQUFLLGVBQ2xCLE1BQU1JLEVBQVVkLEVBQUUsUUFBUXI2QixLQUFLLEtBQU15dkIsR0FDaENnTCxTQUFTLG1CQUFtQkMsU0FBUy9sQyxLQUFLNmxDLEtBRy9DLE9BRkFILEVBQUUsUUFBUUksZUFBZU0sS0FBUUwsU0FBU1MsR0FDMUN4bUMsS0FBS2dtQyxRQUFRbEwsR0FBTTBMLEVBQ1pBLEVBT1hyTSxjQUFjcUwsR0FDVnhsQyxLQUFLd2xDLFFBQVVBLEVBVW5CckwsWUFBWThMLEVBQU9RLEVBQVVOLEdBRXpCLElBQUlPLEVBQVNoQixFQUFFQSxFQUFFQSxLQUFLLElBQUtPLE1BQVUsSUFDakNVLEVBQVdELEVBQU9uNkIsUUFDckJsQixLQUFLLFVBQVcsT0FDaEJBLEtBQUssUUFBUyw4QkFHWHU3QixFQzlCWixTQUFnQ2hOLEdBSTVCLElBSEEsSUFBSWlOLEVBQU8sR0FDUEMsRUFBUzNtQyxTQUFTNG1DLFlBRWJ4bkMsRUFBSSxFQUFHQSxFQUFJdW5DLEVBQU90bEMsT0FBUWpDLElBRS9CLElBQ0ksR0FBMEIsTUFBdEJ1bkMsRUFBT3ZuQyxHQUFHeW5DLFNBQWtCLFNBR2hDLElBRkEsSUFBSUMsRUFBUUgsRUFBT3ZuQyxHQUFHeW5DLFNBRWI5L0IsRUFBSSxFQUFHQSxFQUFJKy9CLEVBQU16bEMsT0FBUTBGLElBQUssQ0FDbkMsSUFBSWdnQyxFQUFPRCxFQUFNLy9CLEdBQ2pCLFFBQTBCLElBQWZnZ0MsRUFBVSxNQUFrQixDQUNuQyxJQUFJQyxFQUVKLElBQ0lBLEVBQVF6QixFQUFFOUwsR0FBS3dOLEtBQUtGLEVBQUtHLGNBQzNCLE1BQU94aEIsR0FDTHNoQixLQUdBQSxFQUFNM2xDLE9BQVMsSUFDZnFsQyxHQUFRSyxFQUFLRyxhQUFlLE1BQVFILEVBQUt6akMsTUFBTTZqQyxRQUFVLFVBSXZFLE1BQU96aEIsR0FJTCxHQUFlLGtCQUFYQSxFQUFFeG1CLEtBQTBCLE1BQU13bUIsRUFDdEMsU0FJUixJQUFJOUYsRUFBSTVmLFNBQVNJLGNBQWMsU0FJL0IsT0FIQXdmLEVBQUVsYixhQUFhLE9BQVEsWUFDdkJrYixFQUFFM2EsVUFBWSxjQUFnQnloQyxFQUFPLFFBRTlCOW1CLEVEVFV3bkIsQ0FBZWIsRUFBT3QwQixPQUNuQ3UwQixFQUFTYSxRQUFRWixHQUVqQmxCLEVBQUUsSUFBTVMsR0FBU2w2QixLQUFLLElBQUlzNkIsT0FDMUIsSUFBSWtCLEVBQVUvQixNQUFNUyxLQUFXajZCLE9BQU95NkIsR0FBVTE2QixPQUU1Q3k3QixFQUFVLElBQUlDLE1BQU1GLElBQVdyZ0MsS0FBTSxrQkFDekN3Z0MsT0FBT0YsRUFBU2pCLEdBR2hCZixNQUFNUyxLQUFXbDZCLEtBQUssSUFBSXM2QixjRWxHYnNCLEdBQ2pCMU4sWUFBWVcsRUFBSWtELEdBQVEsRUFBTzhKLEVBQVEsR0FBSUMsR0FBUSxHQUFLaEYsRUFBUyxLQUM3RC9pQyxLQUFLODZCLEdBQUtBLEVBQ1Y5NkIsS0FBS2crQixRQUFVQSxFQUNmaCtCLEtBQUs4bkMsUUFBVUEsRUFDZjluQyxLQUFLK25DLFFBQVVBLEVBQ2YvbkMsS0FBSytpQyxTQUFXQSxFQUdwQjVJLEtBQUs2TixHQUNFaG9DLEtBQUtnK0IsU0FBUy9HLFFBQVF4bEIsSUFBSXUyQixHQUM3QmhvQyxLQUFLaW9DLEtBQUtELEdBQ1Zob0MsS0FBS2tvQyxPQUNMdC9CLEVBQU8sSUFBTTVJLEtBQUs4NkIsSUFDYnIzQixNQUFNLFVBQVcsVUFDakJxNkIsYUFDQWlGLFNBQVMvaUMsS0FBSytpQyxVQUNkdC9CLE1BQU0sVUFBVyxHQUkxQjAyQixPQUNJdnhCLEVBQU8sSUFBTTVJLEtBQUs4NkIsSUFDYmdELGFBQ0FpRixTQUFTL2lDLEtBQUsraUMsVUFDZHQvQixNQUFNLFVBQVcsR0FDdEJ6RCxLQUFLaW9DLEtBQUssSUFHZDlOLEtBQUs3d0IsRUFBSXJELEVBQU1raUMsTUFBT3htQixFQUFJMWIsRUFBTW1pQyxPQUN4QnBvQyxLQUFLZytCLFVBQ0wvRyxRQUFReGxCLElBQUluSSxHQUNaMnRCLFFBQVF4bEIsSUFBSWtRLElBRWhCclksR0FBUXRKLEtBQUs4bkMsUUFDYm5tQixFQUFLQSxFQUFJM2hCLEtBQUsrbkMsUUFBUyxFQUFFLEdBQUdwbUIsRUFBRTNoQixLQUFLK25DLFFBQ3pCbi9CLEVBQU8sSUFBSTVJLEtBQUs4NkIsSUFDckJyM0IsTUFBTSxVQUFXNkYsT0FDakI3RixNQUFNLFNBQVVrZSxPQUd6QndZLEtBQUs2TixHQUNEcC9CLEVBQU8sSUFBTTVJLEtBQUs4NkIsSUFDYjd1QixLQUFLKzdCLFVDcENHSyxHQWNqQmxPLFlBQVl6M0IsRUFBTTRsQyxFQUFZLFNBQVV4TyxHQUFPLEVBQU1DLEVBQUssR0FBSXhhLEVBQUUsR0FDNUR2ZixLQUFLMEMsS0FBT0EsRUFDWjFDLEtBQUs4NUIsT0FBU0EsRUFDZDk1QixLQUFLKzVCLEtBQU9BLEVBQ1ovNUIsS0FBS3VvQyxVQUFZLFVBQ2pCdm9DLEtBQUt3b0MsZ0JBQWF2MEIsRUFDbEJqVSxLQUFLeW9DLFdBQVF4MEIsRUFDYmpVLEtBQUswb0MsV0FBUXowQixFQUNialUsS0FBSzArQixZQUFTenFCLEVBQ2RqVSxLQUFLMitCLFlBQVMxcUIsRUFDZGpVLEtBQUt1ZixFQUFJQSxFQUNUdmYsS0FBS3NvQyxZQUFjQSxFQUVuQnRvQyxLQUFLMm9DLGFBQVUxMEIsRUFDZmpVLEtBQUt3bEMsYUFBVXZ4QixFQVVuQmttQixjQUFjb0wsRUFBT0MsR0FFakIsT0FEQXhsQyxLQUFLMm9DLFFBQVUsSUFBSXJELEdBQVFDLEVBQU9DLEdBQzNCeGxDLEtBQUsyb0MsUUFRaEJ4TyxjQUFjb0wsR0FHVixPQUZBdmxDLEtBQUt3bEMsUUFBVSxJQUFJcUMsR0FBUXRDLEdBQzNCMzhCLE1BQVcyOEIsS0FBU3g1QixRQUFRLG1CQUFtQixHQUN4Qy9MLEtBQUt3bEMsUUFTaEJyTCxnQkFBZ0JQLEVBQUtnUCxHQUFjdC9CLEVBQUUsRUFBR3FZLEVBQUUsR0FBSXZRLEVBQU0sR0FDaERzb0IsR0FBZ0IxNUIsS0FBSzBDLEtBQUssR0FBRzJrQixNQUFNLFFBQVN1UyxFQUFLNTVCLEtBQUt3b0MsV0FBWUksRUFBYzVvQyxLQUFLODVCLE9BQVExb0IsRUFBT3BSLEtBQUsrNUIsTUFXN0dJLE9BQU9QLEVBQUs2TyxFQUFPQyxFQUFPRyxHQUFZeFksRUFBRSxJQUFNdlEsRUFBRSxLQUFPZ3BCLEVBQU0sSUFDekQ5b0MsS0FBSytvQyxVQUFVRixFQUFXeFksRUFBR29ZLEdBQzdCem9DLEtBQUtncEMsVUFBVUgsRUFBVy9vQixFQUFHNG9CLEdBQzdCMW9DLEtBQUtpcEMsS0FBS3JQLEVBQUtpUCxFQUFZQyxHQVcvQjNPLEtBQUtQLEVBQUtpUCxHQUFZeFksRUFBRSxJQUFNdlEsRUFBRSxLQUFNZ3BCLEVBQU0sR0FBSUksR0FBYSxRQUN0Q2oxQixJQUFmalUsS0FBS3lvQyxPQUFxQnpvQyxLQUFLK29DLFVBQVVGLEVBQVd4WSxRQUNyQ3BjLElBQWZqVSxLQUFLMG9DLE9BQXFCMW9DLEtBQUtncEMsVUFBVUgsRUFBVy9vQixRQUNoQzdMLElBQXBCalUsS0FBS3dvQyxhQUEwQnhvQyxLQUFLd29DLFdBQWEvUSxHQUFjejNCLEtBQUswQyxLQUFLcUgsSUFBS3JDLEdBQUlBLEVBQUVGLE9BQVF4SCxLQUFLc29DLGNBSXJHLE1BQU1hLEVBQVV2UCxFQUFJNXdCLFVBQVUsbUJBQ3pCdEcsS0FBSzFDLEtBQUt5b0MsT0FHVG5TLEVBQUl0MkIsS0FBSzIrQixPQUFPOXRCLFFBQVEsR0FBZ0MsRUFBMUI3USxLQUFLMitCLE9BQU9qckIsWUFFaER5MUIsRUFBUTk5QixLQUFLLFlBQWMzRCxJQUduQixtQkFGUTFILEtBQUswK0IsT0FBT2gzQixHQUZiLE1BR0M0dUIsYUFDK0J3UyxPQU0vQ0ssRUFBUTNtQyxRQUFRMEosT0FBTyxRQUNsQmIsS0FBSyxRQUFTLENBQUMzRCxFQUFHbkksdUJBQXlCQSxLQUMzQzhMLEtBQUssSUFBSyxHQUNWQSxLQUFLLElBQUssR0FDVjVILE1BQU0sY0FBZSxTQUNyQkEsTUFBTSxTQUFVLFdBQ2hCNEgsS0FBSyxZQUFjM0QsSUFHaEIsbUJBRlExSCxLQUFLMCtCLE9BQU9oM0IsR0FqQmIsTUFrQkM0dUIsYUFDK0J3UyxPQUUxQzcrQixNQUFNay9CLEdBQ05uOUIsS0FBTXRFLEdBQU1BLEdBR2pCeWhDLEVBQVExbUMsT0FBT2tDLFNBRUNpMUIsRUFBSTV3QixVQUFVLG1CQUN6QnRHLEtBQUsxQyxLQUFLMG9DLE9BQ1ZsbUMsUUFBUTBKLE9BQU8sUUFDZkYsS0FBTXRFLEdBQU1BLEdBQ1oyRCxLQUFLLElBQUtyTCxLQUFLMCtCLE9BQU83dEIsUUFBUSxHQUFLLEdBQ25DeEYsS0FBSyxJQUFNM0QsR0FBTTFILEtBQUsyK0IsT0FBT2ozQixHQUFLLElBQ2xDMkQsS0FBSyxRQUFTLENBQUMzRCxFQUFHbkksdUJBQXlCQSxLQUMzQ2tFLE1BQU0sY0FBZSxTQUNyQkEsTUFBTSxTQUFVLFdBQ2hCc0QsR0FBRyxRQUFVVyxJQUNWMGhDLFNBQVMxaEMscUNBRVpYLEdBQUcsWUFBYSxTQUFTVyxHQUN0QmtCLEVBQU81SSxNQUNGK0wsUUFBUSxVQUFVLEdBQ2xCQSxRQUFRLGVBQWUsS0FFL0JoRixHQUFHLFdBQVksU0FBU1csR0FDckJrQixFQUFPNUksTUFDRitMLFFBQVEsVUFBVSxHQUNsQkEsUUFBUSxlQUFlLEtBcEJwQyxNQTBCTXM5QixFQUFRelAsRUFBSTV3QixVQUFVLGlCQUN2QnRHLEtBQUsxQyxLQUFLMEMsS0FBT2dGLEdBQU1BLEVBQUVGLE9BRzlCNmhDLEVBQU1oK0IsS0FBSyxJQUFNM0QsR0FBTTFILEtBQUswK0IsT0FBT2gzQixFQUFFNEIsSUFDaEMrQixLQUFLLElBQU0zRCxHQUFNMUgsS0FBSzIrQixPQUFPajNCLEVBQUVpYSxJQUMvQnRXLEtBQUssTUFBUTNELE9BQVUxSCxLQUFLeW9DLE1BQU1qcEMsUUFBUWtJLEVBQUU0QixNQUM1QytCLEtBQUssTUFBUTNELE9BQVUxSCxLQUFLMG9DLE1BQU1scEMsUUFBUWtJLEVBQUVpYSxNQUdqRCxNQUNNaWhCLEVBQU81aUMsS0FDYnFwQyxFQUFNN21DLFFBQVEwSixPQUFPLFFBQ2hCYixLQUFLLE1BQVEzRCxPQUFVMUgsS0FBS3lvQyxNQUFNanBDLFFBQVFrSSxFQUFFNEIsTUFDNUMrQixLQUFLLE1BQVEzRCxPQUFVMUgsS0FBSzBvQyxNQUFNbHBDLFFBQVFrSSxFQUFFaWEsTUFFNUN0VyxLQUFLLElBQU0zRCxHQUFNMUgsS0FBSzArQixPQUFPaDNCLEVBQUU0QixJQUMvQitCLEtBQUssSUFBTTNELEdBQU0xSCxLQUFLMitCLE9BQU9qM0IsRUFBRWlhLElBQy9CdFcsS0FBSyxLQUFNckwsS0FBS3VmLEdBQ2hCbFUsS0FBSyxLQUFNckwsS0FBS3VmLEdBQ2hCbFUsS0FBSyxRQUFVM0QsR0FBTSxnQkFDckIyRCxLQUFLLFFBQVNyTCxLQUFLMCtCLE9BQU9ockIsYUFDMUJySSxLQUFLLFNBQVVyTCxLQUFLMitCLE9BQU9qckIsYUFDM0JqUSxNQUFNLE9BQVNpRSxHQUFNLFdBQ3JCWCxHQUFHLFlBQWEsU0FBU1csR0FDdEIsTUFBTTRoQyxFQUFXMWdDLEVBQU81SSxNQUN4QjRpQyxFQUFLMkcsY0FBY0QsS0FFdEJ2aUMsR0FBRyxXQUFZLFNBQVNXLEdBQ0prQixFQUFPNUksTUFDeEI0aUMsRUFBSzRHLGlCQUVSdi9CLE1BQU1vL0IsR0FHTjVsQyxNQUFNLE9BQVNpRSxHQUFNd2hDLEdBQStCLEdBQWpCeGhDLEVBQUUraEMsY0F6QnhCLFVBeUJtRHpwQyxLQUFLd29DLFdBQVc5Z0MsRUFBRUYsUUFHdkY2aEMsRUFBTTVtQyxPQUFPa0MsU0FHakJ3MUIsYUFBYXp5QixHQUNUc0IsRUFBVSxLQUFLK0MsUUFBUSxlQUFlLEdBRzFDb3VCLGNBQWVtUCxHQUNYLE1BQU1JLEVBQVdKLEVBQVNqK0IsS0FBSyxPQUN6QnMrQixFQUFXTCxFQUFTaitCLEtBQUssT0FDL0JyQyxFQUFVLG1CQUFtQkUsV0FBV3dnQyxLQUNuQzM5QixRQUFRLGVBQWUsR0FDNUIvQyxFQUFVLG1CQUFtQkUsV0FBV3lnQyxLQUNuQzU5QixRQUFRLGVBQWUsR0FDNUJ1OUIsRUFBU3Y5QixRQUFRLGVBQWUsR0FHcENvdUIsVUFBVXZSLEVBQU9naEIsR0FFVDVwQyxLQUFLeW9DLFdBRE14MEIsSUFBWjIxQixFQUNjQSxFQUdBbDNCLEtBQ1IzUCxJQUFLMkUsR0FBTUEsRUFBRTRCLEdBQ2JpSixRQUFRdlMsS0FBSzBDLE1BQ2JxSCxJQUFLckMsR0FBTUEsRUFBRTNFLEtBRXRCL0MsS0FBSzArQixPQUFTZ0IsS0FDVDdyQixPQUFPN1QsS0FBS3lvQyxPQUNaNTNCLE9BQU8sRUFBRytYLElBQ1ZsVSxRQUFRLEtBR2pCeWxCLFVBQVUyQixFQUFROE4sR0FFVjVwQyxLQUFLMG9DLFdBRE16MEIsSUFBWjIxQixFQUNjQSxFQUdEbDNCLEtBQ1gzUCxJQUFLMkUsR0FBTUEsRUFBRWlhLEdBQ2JwUCxRQUFRdlMsS0FBSzBDLE1BQ2JxSCxJQUFLckMsR0FBTUEsRUFBRTNFLEtBRWxCL0MsS0FBSzIrQixPQUFTZSxLQUNMN3JCLE9BQU83VCxLQUFLMG9DLE9BQ1o3M0IsT0FBTyxFQUFHaXJCLElBQ1ZwbkIsUUFBUSxZQzNPSm0xQixHQVlqQjFQLFlBQVkyUCxFQUFZQyxFQUFTQyxFQUFhanJCLEVBQU0sU0FBVVEsRUFBRSxFQUFHc2EsRUFBTyxJQUFJSyxHQUF1QkosR0FBTyxFQUFNQyxFQUFLLEdBQUlKLEVBQVEsSUFDL0gzNUIsS0FBSzY1QixPQUFTQSxFQUFPem5CLE1BRXJCMDNCLE9BQTBCNzFCLElBQWI2MUIsR0FBd0JBLEVBQVdHLFdBQVcsd0JBQW1CaDJCLEVBQVU2MUIsRUFDeEZDLE9BQW9COTFCLElBQVY4MUIsR0FBcUJBLEVBQVFFLFdBQVcsd0JBQW1CaDJCLEVBQVU4MUIsRUFFL0UvcEMsS0FBSzBDLE1BQ0RvbkMsV0FBWUEsRUFDWkMsUUFBU0EsRUFDVEcsUUFBU0YsRUFDVEcsY0FBVWwyQixHQUVkalUsS0FBS29xQyxTQUNETixnQkFBbUM3MUIsSUFBdkJqVSxLQUFLMEMsS0FBS29uQyxnQkFBd0I3MUIsRUFBVSxJQUFJZ3FCLEdBQVdqK0IsS0FBSzBDLEtBQUtvbkMsV0FBWSxLQUM3RkMsYUFBNkI5MUIsSUFBcEJqVSxLQUFLMEMsS0FBS3FuQyxhQUFvQjkxQixFQUFVLElBQUlncUIsR0FBV2orQixLQUFLMEMsS0FBS3FuQyxRQUFTLEtBQ25GRyxRQUFTLElBQUk3QixHQUFRcm9DLEtBQUswQyxLQUFLd25DLFFBQVNuckIsRUFBTythLEVBQVFDLEVBQU14YSxJQUVqRXZmLEtBQUtxcUMsa0JBQ0RwckMsU0FBS2dWLEVBQ0w2MUIsZ0JBQVk3MUIsRUFDWjgxQixhQUFTOTFCLEdBR2JqVSxLQUFLMjVCLE1BQVFBLEVBRWIzNUIsS0FBS3dsQyxhQUFVdnhCLEVBQ2ZqVSxLQUFLMm9DLGFBQVUxMEIsRUFVbkJrbUIsY0FBY29MLEVBQU9DLEdBRWpCLE9BREF4bEMsS0FBSzJvQyxRQUFVLElBQUlyRCxHQUFRQyxFQUFPQyxHQUMzQnhsQyxLQUFLMm9DLFFBUWhCeE8sY0FBY29MLEdBR1YsT0FGQXZsQyxLQUFLd2xDLFFBQVUsSUFBSXFDLEdBQVF0QyxHQUMzQjM4QixNQUFXMjhCLEtBQVN4NUIsUUFBUSxtQkFBbUIsR0FDeEMvTCxLQUFLd2xDLFFBWWhCckwsT0FBT29MLEVBQU9VLEVBQU9xRSxHQUFlLEVBQU1DLEdBQVksRUFBTUMsRUFBVSxNQUFPcDVCLEVBQU0sR0FDL0VwUixLQUFLeXFDLGNBQWNELEdBQ25CeHFDLEtBQUtxcUMsaUJBQWlCcHJDLElIaEU5QixTQUEwQjY3QixFQUFJbFMsRUFBT2tULEVBQVF0QixFQUFReUwsR0FFakQsWUFEWWh5QixJQUFSZ3lCLElBQW1CQSxLQUFTbkwsU0FDekJseUIsRUFBTyxJQUFJa3lCLEdBQUk1dUIsT0FBTyxPQUN4QmIsS0FBSyxRQUFTdWQsR0FDZHZkLEtBQUssU0FBVXl3QixHQUNmendCLEtBQUssS0FBTTQ2QixHQUNYLzVCLE9BQU8sS0FDUGIsS0FBSyx5QkFBMEJtdkIsRUFBT3JxQixTQUFTcXFCLEVBQU9DLFFHeUQzQmlRLENBQVVuRixFQUFPdmxDLEtBQUs2NUIsT0FBT3hKLEVBQUdyd0IsS0FBSzY1QixPQUFPL1osRUFBRzlmLEtBQUs2NUIsT0FBT1csT0FBUXlMLEdBRS9GLElBQUkwRSxPQUFRMTJCLEVBQ1IyMkIsT0FBUTMyQixFQUVScTJCLFFBQTRDcjJCLElBQTFCalUsS0FBS29xQyxRQUFRTixhQUMvQjlwQyxLQUFLcXFDLGlCQUFpQlAsV0FBYTlwQyxLQUFLNnFDLFlBQVksU0FBVTdxQyxLQUFLb3FDLFFBQVFOLFdBQVk5cEMsS0FBSzY1QixPQUFPcUIsT0FBT1QsS0FDMUdrUSxFQUFRM3FDLEtBQUtvcUMsUUFBUU4sV0FBV3BMLE9BQU83cUIsVUFFdkMwMkIsUUFBd0N0MkIsSUFBekJqVSxLQUFLb3FDLFFBQVFMLFVBQzVCL3BDLEtBQUtxcUMsaUJBQWlCTixRQUFVL3BDLEtBQUs2cUMsWUFBWSxNQUFPN3FDLEtBQUtvcUMsUUFBUUwsUUFBUy9wQyxLQUFLNjVCLE9BQU9xQixPQUFPL3FCLE1BQ2pHeTZCLEVBQVE1cUMsS0FBS29xQyxRQUFRTCxRQUFRcEwsT0FBTzlxQixVQUd0QixJQUFkN1QsS0FBSzI1QixRQUNMMUMsUUFBUXhsQixJQUFJelIsS0FBSzI1QixPQUNqQi93QixNQUFXMjhCLFNBQWFyNUIsT0FBTyxRQUMxQmIsS0FBSyxJQUFLLEdBQ1ZBLEtBQUssSUFBSyxJQUNWVyxLQUFLaE0sS0FBSzI1QixRQUduQjM1QixLQUFLOHFDLGVBQWU5cUMsS0FBS29xQyxRQUFRRixRQUFTUyxFQUFPQyxFQUFPeDVCLEdBVTVEK29CLFlBQVk0USxFQUFXM00sRUFBTXZFLEdBQ3pCLElBQUk1NkIsRUFBTWUsS0FBS3FxQyxpQkFBaUJwckMsSUFDaEMsTUFBTStyQyxFQUF3QixPQUFYRCxFQUFpQixrQkFBa0Isa0JBR2hEdnJCLEVBQUl2Z0IsRUFBSWlOLE9BQU8sS0FDaEJiLEtBQUssS0FBTXd1QixFQUFPaUIsSUFDbEJ6dkIsS0FBSyx5QkFBMEJ3dUIsRUFBT3Z3QixNQUFNdXdCLEVBQU9sWSxNQUN4RHljLEVBQUs2SyxLQUFLenBCLEVBQUdxYSxFQUFPeEosRUFBR3dKLEVBQU8vWixHQTBCOUIsT0FIQU4sRUFBRXhXLFVBQVUsb0JBQ1BqQyxHQUFHLFlBZFUsU0FBU1csR0FDdkJrQixFQUFPNUksTUFDRnFMLEtBQUssSUFBSyxHQUNWQSxLQUFLLE9BQVEsT0FDbEIsSUFBSTQvQixFQUFNdmpDLEVBQUU4MEIsU0FBU3p5QixJQUFLcEgsR0FBT0EsRUFBS0QsS0FBS3JELE1BQzNDSixFQUFJK0osVUFBVWdpQyxHQUNUOWhDLE9BQVFnaUMsR0FBUUQsRUFBSUUsU0FBU0QsSUFDN0JuL0IsUUFBUSxlQUFlLEdBQzVCOU0sRUFBSStKLFVBQVUsZUFDVEUsT0FBUWdpQyxHQUFRRCxFQUFJRSxTQUFTRCxJQUM3Qm4vQixRQUFRLGVBQWUsS0FLM0JoRixHQUFHLFdBdkJTLFdBQ2I2QixFQUFPNUksTUFDRnFMLEtBQUssSUFBSyxHQUNWQSxLQUFLLE9BQVEsUUFDbEJwTSxFQUFJK0osVUFBVWdpQyxHQUFZai9CLFFBQVEsZUFBZSxHQUNqRDlNLEVBQUkrSixVQUFVLGVBQWUrQyxRQUFRLGVBQWUsS0FtQmpEeVQsRUFXWDJhLGVBQWUrUCxFQUFTekIsRUFBT0MsRUFBT3QzQixFQUFNLEdBQ3hDLElBQUl3b0IsRUFBTTU1QixLQUFLcXFDLGlCQUFpQnByQyxJQUNoQyxNQUFNNDZCLEVBQVM3NUIsS0FBSzY1QixPQUFPcUIsT0FBT0MsS0FDNUIzYixFQUFJb2EsRUFBSTF0QixPQUFPLEtBQ2hCYixLQUFLLEtBQU13dUIsRUFBT2lCLElBQ2xCenZCLEtBQUsseUJBQTBCd3VCLEVBQU92d0IsTUFBTXV3QixFQUFPbFksTUFDeER1b0IsRUFBUWtCLE9BQU81ckIsRUFBR2lwQixFQUFPQyxHQUFRclksRUFBR3dKLEVBQU94SixFQUFHdlEsRUFBRytaLEVBQU8vWixJQUN4RG9xQixFQUFReFEsZ0JBQWdCRSxFQUFLNTVCLEtBQUs2NUIsT0FBT3FCLE9BQU9FLE9BQVFocUIsR0FRNUQrb0IsY0FBY3FRLEdBQ1YsTUFBTTE4QixPQUE4Qm1HLElBQXZCalUsS0FBS29xQyxRQUFRTCxRQUFvQixFQUFFL3BDLEtBQUtvcUMsUUFBUUwsUUFBUXZOLE9BQU9oN0IsT0FHNUV4QixLQUFLNjVCLE9BQU9xQixPQUFPL3FCLEtBQUsyUCxFQUFJOWYsS0FBSzY1QixPQUFPRyxLQUFLbGEsRUFBSWhTLEVBQUssR0FBRyxHQUFHOU4sS0FBSzY1QixPQUFPRyxLQUFLbGEsRUFBSWhTLEVBQ2pGOU4sS0FBSzY1QixPQUFPL1osR0FBSzlmLEtBQUs2NUIsT0FBT3FCLE9BQU8vcUIsS0FBSzJQLEVBQ3pDOWYsS0FBSzY1QixPQUFPcUIsT0FBT0MsS0FBS3JiLEVBQUk5ZixLQUFLNjVCLE9BQU9xQixPQUFPL3FCLEtBQUsyUCxFQUN0QyxVQUFYMHFCLElBQXFCeHFDLEtBQUs2NUIsT0FBT3FCLE9BQU9FLE9BQU96WixHQUFLM2hCLEtBQUs2NUIsT0FBT3FCLE9BQU9DLEtBQUtyYixFQUFJOWYsS0FBSzY1QixPQUFPcUIsT0FBT0MsS0FBSzd4QixFQUFJLEtDM0x2SCxJQUFJK2hDLEdBQUsvZ0MsS0FBS3FXLEdBQ1YycUIsR0FBTSxFQUFJRCxHQUVWRSxHQUFhRCxHQURILEtBR2QsU0FBU0UsS0FDUHhyQyxLQUFLeXJDLElBQU16ckMsS0FBSzByQyxJQUNoQjFyQyxLQUFLMnJDLElBQU0zckMsS0FBSzRyQyxJQUFNLEtBQ3RCNXJDLEtBQUsrVCxFQUFJLEdBR1gsU0FBU2tvQixLQUNQLE9BQU8sSUFBSXVQLEdBR2JBLEdBQUt6cEMsVUFBWWs2QixHQUFLbDZCLFdBQ3BCQyxZQUFhd3BDLEdBQ2JLLE9BQVEsU0FBU3ZpQyxFQUFHcVksR0FDbEIzaEIsS0FBSytULEdBQUssS0FBTy9ULEtBQUt5ckMsSUFBTXpyQyxLQUFLMnJDLEtBQU9yaUMsR0FBSyxLQUFPdEosS0FBSzByQyxJQUFNMXJDLEtBQUs0ckMsS0FBT2pxQixJQUU3RW1xQixVQUFXLFdBQ1EsT0FBYjlyQyxLQUFLMnJDLE1BQ1AzckMsS0FBSzJyQyxJQUFNM3JDLEtBQUt5ckMsSUFBS3pyQyxLQUFLNHJDLElBQU01ckMsS0FBSzByQyxJQUNyQzFyQyxLQUFLK1QsR0FBSyxNQUdkZzRCLE9BQVEsU0FBU3ppQyxFQUFHcVksR0FDbEIzaEIsS0FBSytULEdBQUssS0FBTy9ULEtBQUsyckMsS0FBT3JpQyxHQUFLLEtBQU90SixLQUFLNHJDLEtBQU9qcUIsSUFFdkRxcUIsaUJBQWtCLFNBQVNqVSxFQUFJa1UsRUFBSTNpQyxFQUFHcVksR0FDcEMzaEIsS0FBSytULEdBQUssTUFBUWdrQixFQUFNLE1BQVFrVSxFQUFNLEtBQU9qc0MsS0FBSzJyQyxLQUFPcmlDLEdBQUssS0FBT3RKLEtBQUs0ckMsS0FBT2pxQixJQUVuRnVxQixjQUFlLFNBQVNuVSxFQUFJa1UsRUFBSUUsRUFBSUMsRUFBSTlpQyxFQUFHcVksR0FDekMzaEIsS0FBSytULEdBQUssTUFBUWdrQixFQUFNLE1BQVFrVSxFQUFNLE1BQVFFLEVBQU0sTUFBUUMsRUFBTSxLQUFPcHNDLEtBQUsyckMsS0FBT3JpQyxHQUFLLEtBQU90SixLQUFLNHJDLEtBQU9qcUIsSUFFL0cwcUIsTUFBTyxTQUFTdFUsRUFBSWtVLEVBQUlFLEVBQUlDLEVBQUk3c0IsR0FDOUJ3WSxHQUFNQSxFQUFJa1UsR0FBTUEsRUFBSUUsR0FBTUEsRUFBSUMsR0FBTUEsRUFBSTdzQixHQUFLQSxFQUM3QyxJQUFJdVksRUFBSzkzQixLQUFLMnJDLElBQ1ZXLEVBQUt0c0MsS0FBSzRyQyxJQUNWVyxFQUFNSixFQUFLcFUsRUFDWHlVLEVBQU1KLEVBQUtILEVBQ1hRLEVBQU0zVSxFQUFLQyxFQUNYMlUsRUFBTUosRUFBS0wsRUFDWFUsRUFBUUYsRUFBTUEsRUFBTUMsRUFBTUEsRUFHOUIsR0FBSW50QixFQUFJLEVBQUcsTUFBTSxJQUFJN1AsTUFBTSxvQkFBc0I2UCxHQUdqRCxHQUFpQixPQUFidmYsS0FBSzJyQyxJQUNQM3JDLEtBQUsrVCxHQUFLLEtBQU8vVCxLQUFLMnJDLElBQU01VCxHQUFNLEtBQU8vM0IsS0FBSzRyQyxJQUFNSyxRQUlqRCxHQUFNVSxFQXBERCxLQXlETCxHQUFNcmlDLEtBQUs4ZCxJQUFJc2tCLEVBQU1ILEVBQU1DLEVBQU1DLEdBekQ1QixNQXlEZ0RsdEIsRUFLckQsQ0FDSCxJQUFJcXRCLEVBQU1ULEVBQUtyVSxFQUNYK1UsRUFBTVQsRUFBS0UsRUFDWFEsRUFBUVAsRUFBTUEsRUFBTUMsRUFBTUEsRUFDMUJPLEVBQVFILEVBQU1BLEVBQU1DLEVBQU1BLEVBQzFCRyxFQUFNMWlDLEtBQUt5RyxLQUFLKzdCLEdBQ2hCRyxFQUFNM2lDLEtBQUt5RyxLQUFLNDdCLEdBQ2hCM3NCLEVBQUlULEVBQUlqVixLQUFLOFQsS0FBS2l0QixHQUFLL2dDLEtBQUs0aUMsTUFBTUosRUFBUUgsRUFBUUksSUFBVSxFQUFJQyxFQUFNQyxLQUFTLEdBQy9FRSxFQUFNbnRCLEVBQUlpdEIsRUFDVkcsRUFBTXB0QixFQUFJZ3RCLEVBR1YxaUMsS0FBSzhkLElBQUkra0IsRUFBTSxHQTFFWCxPQTJFTm50QyxLQUFLK1QsR0FBSyxLQUFPZ2tCLEVBQUtvVixFQUFNVixHQUFPLEtBQU9SLEVBQUtrQixFQUFNVCxJQUd2RDFzQyxLQUFLK1QsR0FBSyxJQUFNd0wsRUFBSSxJQUFNQSxFQUFJLFdBQWFtdEIsRUFBTUUsRUFBTUgsRUFBTUksR0FBUSxLQUFPN3NDLEtBQUsyckMsSUFBTTVULEVBQUtxVixFQUFNYixHQUFPLEtBQU92c0MsS0FBSzRyQyxJQUFNSyxFQUFLbUIsRUFBTVosUUFwQnRJeHNDLEtBQUsrVCxHQUFLLEtBQU8vVCxLQUFLMnJDLElBQU01VCxHQUFNLEtBQU8vM0IsS0FBSzRyQyxJQUFNSyxVQXVCeERvQixJQUFLLFNBQVMvakMsRUFBR3FZLEVBQUdwQyxFQUFHK3RCLEVBQUlDLEVBQUlDLEdBQzdCbGtDLEdBQUtBLEVBQUdxWSxHQUFLQSxFQUNiLElBQUk4ckIsR0FEWWx1QixHQUFLQSxHQUNSalYsS0FBS2lYLElBQUkrckIsR0FDbEJJLEVBQUtudUIsRUFBSWpWLEtBQUtrWCxJQUFJOHJCLEdBQ2xCeFYsRUFBS3h1QixFQUFJbWtDLEVBQ1RuQixFQUFLM3FCLEVBQUkrckIsRUFDVEMsRUFBSyxFQUFJSCxFQUNUSSxFQUFLSixFQUFNRixFQUFLQyxFQUFLQSxFQUFLRCxFQUc5QixHQUFJL3RCLEVBQUksRUFBRyxNQUFNLElBQUk3UCxNQUFNLG9CQUFzQjZQLEdBR2hDLE9BQWJ2ZixLQUFLMnJDLElBQ1AzckMsS0FBSytULEdBQUssSUFBTStqQixFQUFLLElBQU13VSxHQUlwQmhpQyxLQUFLOGQsSUFBSXBvQixLQUFLMnJDLElBQU03VCxHQW5HbkIsTUFtR29DeHRCLEtBQUs4ZCxJQUFJcG9CLEtBQUs0ckMsSUFBTVUsR0FuR3hELFFBb0dSdHNDLEtBQUsrVCxHQUFLLElBQU0rakIsRUFBSyxJQUFNd1UsR0FJeEIvc0IsSUFHRHF1QixFQUFLLElBQUdBLEVBQUtBLEVBQUt0QyxHQUFNQSxJQUd4QnNDLEVBQUtyQyxHQUNQdnJDLEtBQUsrVCxHQUFLLElBQU13TCxFQUFJLElBQU1BLEVBQUksUUFBVW91QixFQUFLLEtBQU9ya0MsRUFBSW1rQyxHQUFNLEtBQU85ckIsRUFBSStyQixHQUFNLElBQU1udUIsRUFBSSxJQUFNQSxFQUFJLFFBQVVvdUIsRUFBSyxLQUFPM3RDLEtBQUsyckMsSUFBTTdULEdBQU0sS0FBTzkzQixLQUFLNHJDLElBQU1VLEdBSXJKc0IsRUFuSEMsT0FvSFI1dEMsS0FBSytULEdBQUssSUFBTXdMLEVBQUksSUFBTUEsRUFBSSxTQUFXcXVCLEdBQU12QyxJQUFPLElBQU1zQyxFQUFLLEtBQU8zdEMsS0FBSzJyQyxJQUFNcmlDLEVBQUlpVyxFQUFJalYsS0FBS2lYLElBQUlnc0IsSUFBTyxLQUFPdnRDLEtBQUs0ckMsSUFBTWpxQixFQUFJcEMsRUFBSWpWLEtBQUtrWCxJQUFJK3JCLE9BR2xKTSxLQUFNLFNBQVN2a0MsRUFBR3FZLEVBQUcwTyxFQUFHdlEsR0FDdEI5ZixLQUFLK1QsR0FBSyxLQUFPL1QsS0FBS3lyQyxJQUFNenJDLEtBQUsyckMsS0FBT3JpQyxHQUFLLEtBQU90SixLQUFLMHJDLElBQU0xckMsS0FBSzRyQyxLQUFPanFCLEdBQUssTUFBUTBPLEVBQUssTUFBUXZRLEVBQUssS0FBUXVRLEVBQUssS0FFekh4USxTQUFVLFdBQ1IsT0FBTzdmLEtBQUsrVCxJQzdIaEIsT0FBZSxTQUFTekssR0FDdEIsT0FBTyxXQUNMLE9BQU9BLElDRlgsU0FBU3drQyxHQUFPelEsR0FDZHI5QixLQUFLK3RDLFNBQVcxUSxFQUdsQnlRLEdBQU8vckMsV0FDTGlzQyxVQUFXLFdBQ1RodUMsS0FBS2l1QyxNQUFRLEdBRWZDLFFBQVMsV0FDUGx1QyxLQUFLaXVDLE1BQVEzcUMsS0FFZjZxQyxVQUFXLFdBQ1RudUMsS0FBS291QyxPQUFTLEdBRWhCQyxRQUFTLFlBQ0hydUMsS0FBS2l1QyxPQUF5QixJQUFmanVDLEtBQUtpdUMsT0FBK0IsSUFBaEJqdUMsS0FBS291QyxTQUFlcHVDLEtBQUsrdEMsU0FBU2pDLFlBQ3pFOXJDLEtBQUtpdUMsTUFBUSxFQUFJanVDLEtBQUtpdUMsT0FFeEJLLE1BQU8sU0FBU2hsQyxFQUFHcVksR0FFakIsT0FEQXJZLEdBQUtBLEVBQUdxWSxHQUFLQSxFQUNMM2hCLEtBQUtvdUMsUUFDWCxLQUFLLEVBQUdwdUMsS0FBS291QyxPQUFTLEVBQUdwdUMsS0FBS2l1QyxNQUFRanVDLEtBQUsrdEMsU0FBU2hDLE9BQU96aUMsRUFBR3FZLEdBQUszaEIsS0FBSyt0QyxTQUFTbEMsT0FBT3ZpQyxFQUFHcVksR0FBSSxNQUMvRixLQUFLLEVBQUczaEIsS0FBS291QyxPQUFTLEVBQ3RCLFFBQVNwdUMsS0FBSyt0QyxTQUFTaEMsT0FBT3ppQyxFQUFHcVksTUFLdkMsT0FBZSxTQUFTMGIsR0FDdEIsT0FBTyxJQUFJeVEsR0FBT3pRLElDN0JiLFNBQVMvekIsR0FBRTBlLEdBQ2hCLE9BQU9BLEVBQUUsR0FHWCxTQUFnQnJHLEdBQUVxRyxHQUNoQixPQUFPQSxFQUFFLEdDQVgsT0FBZSxXQUNiLElBQUkxZSxFQUFJaWxDLEdBQ0o1c0IsRUFBSTZzQixHQUNKQyxFQUFVanJCLElBQVMsR0FDbkI2WixFQUFVLEtBQ1ZxUixFQUFRQyxHQUNSbmpCLEVBQVMsS0FFYixTQUFTcVMsRUFBS243QixHQUNaLElBQUluRCxFQUVBbUksRUFFQWtuQyxFQUhBcHFDLEVBQUk5QixFQUFLbEIsT0FFVHF0QyxHQUFXLEVBS2YsSUFGZSxNQUFYeFIsSUFBaUI3UixFQUFTa2pCLEVBQU1FLEVBQVMzUyxPQUV4QzE4QixFQUFJLEVBQUdBLEdBQUtpRixJQUFLakYsSUFDZEEsRUFBSWlGLEdBQUtpcUMsRUFBUS9tQyxFQUFJaEYsRUFBS25ELEdBQUlBLEVBQUdtRCxNQUFXbXNDLEtBQzVDQSxHQUFZQSxHQUFVcmpCLEVBQU8yaUIsWUFDNUIzaUIsRUFBTzZpQixXQUVWUSxHQUFVcmpCLEVBQU84aUIsT0FBT2hsQyxFQUFFNUIsRUFBR25JLEVBQUdtRCxJQUFRaWYsRUFBRWphLEVBQUduSSxFQUFHbUQsSUFHdEQsR0FBSWtzQyxFQUFRLE9BQU9wakIsRUFBUyxLQUFNb2pCLEVBQVMsSUFBTSxLQXVCbkQsT0FwQkEvUSxFQUFLdjBCLEVBQUksU0FBU3lLLEdBQ2hCLE9BQU83SSxVQUFVMUosUUFBVThILEVBQWlCLG1CQUFOeUssRUFBbUJBLEVBQUl5UCxJQUFVelAsR0FBSThwQixHQUFRdjBCLEdBR3JGdTBCLEVBQUtsYyxFQUFJLFNBQVM1TixHQUNoQixPQUFPN0ksVUFBVTFKLFFBQVVtZ0IsRUFBaUIsbUJBQU41TixFQUFtQkEsRUFBSXlQLElBQVV6UCxHQUFJOHBCLEdBQVFsYyxHQUdyRmtjLEVBQUs0USxRQUFVLFNBQVMxNkIsR0FDdEIsT0FBTzdJLFVBQVUxSixRQUFVaXRDLEVBQXVCLG1CQUFOMTZCLEVBQW1CQSxFQUFJeVAsS0FBV3pQLEdBQUk4cEIsR0FBUTRRLEdBRzVGNVEsRUFBSzZRLE1BQVEsU0FBUzM2QixHQUNwQixPQUFPN0ksVUFBVTFKLFFBQVVrdEMsRUFBUTM2QixFQUFjLE1BQVhzcEIsSUFBb0I3UixFQUFTa2pCLEVBQU1yUixJQUFXUSxHQUFRNlEsR0FHOUY3USxFQUFLUixRQUFVLFNBQVN0cEIsR0FDdEIsT0FBTzdJLFVBQVUxSixRQUFlLE1BQUx1UyxFQUFZc3BCLEVBQVU3UixFQUFTLEtBQU9BLEVBQVNrakIsRUFBTXJSLEVBQVV0cEIsR0FBSThwQixHQUFRUixHQUdqR1EsR0NyREYsU0FBU3lRLEdBQU12TyxFQUFNejJCLEVBQUdxWSxHQUM3Qm9lLEVBQUtnTyxTQUFTN0IsY0FDWm5NLEVBQUs0TCxJQUFNNUwsRUFBSytPLElBQU0vTyxFQUFLZ1AsSUFBTWhQLEVBQUswTCxLQUN0QzFMLEVBQUs2TCxJQUFNN0wsRUFBSytPLElBQU0vTyxFQUFLaVAsSUFBTWpQLEVBQUsyTCxLQUN0QzNMLEVBQUtnUCxJQUFNaFAsRUFBSytPLElBQU0vTyxFQUFLNEwsSUFBTXJpQyxHQUNqQ3kyQixFQUFLaVAsSUFBTWpQLEVBQUsrTyxJQUFNL08sRUFBSzZMLElBQU1qcUIsR0FDakNvZSxFQUFLZ1AsSUFDTGhQLEVBQUtpUCxLQUlULFNBQWdCQyxHQUFTNVIsRUFBUzZSLEdBQ2hDbHZDLEtBQUsrdEMsU0FBVzFRLEVBQ2hCcjlCLEtBQUs4dUMsSUFBTSxFQUFJSSxHQUFXLEVBRzVCRCxHQUFTbHRDLFdBQ1Bpc0MsVUFBVyxXQUNUaHVDLEtBQUtpdUMsTUFBUSxHQUVmQyxRQUFTLFdBQ1BsdUMsS0FBS2l1QyxNQUFRM3FDLEtBRWY2cUMsVUFBVyxXQUNUbnVDLEtBQUt5ckMsSUFBTXpyQyxLQUFLMnJDLElBQU0zckMsS0FBSyt1QyxJQUMzQi91QyxLQUFLMHJDLElBQU0xckMsS0FBSzRyQyxJQUFNNXJDLEtBQUtndkMsSUFBTTFyQyxJQUNqQ3RELEtBQUtvdUMsT0FBUyxHQUVoQkMsUUFBUyxXQUNQLE9BQVFydUMsS0FBS291QyxRQUNYLEtBQUssRUFBR3B1QyxLQUFLK3RDLFNBQVNoQyxPQUFPL3JDLEtBQUsrdUMsSUFBSy91QyxLQUFLZ3ZDLEtBQU0sTUFDbEQsS0FBSyxFQUFHVixHQUFNdHVDLEtBQU1BLEtBQUsyckMsSUFBSzNyQyxLQUFLNHJDLE1BRWpDNXJDLEtBQUtpdUMsT0FBeUIsSUFBZmp1QyxLQUFLaXVDLE9BQStCLElBQWhCanVDLEtBQUtvdUMsU0FBZXB1QyxLQUFLK3RDLFNBQVNqQyxZQUN6RTlyQyxLQUFLaXVDLE1BQVEsRUFBSWp1QyxLQUFLaXVDLE9BRXhCSyxNQUFPLFNBQVNobEMsRUFBR3FZLEdBRWpCLE9BREFyWSxHQUFLQSxFQUFHcVksR0FBS0EsRUFDTDNoQixLQUFLb3VDLFFBQ1gsS0FBSyxFQUFHcHVDLEtBQUtvdUMsT0FBUyxFQUFHcHVDLEtBQUtpdUMsTUFBUWp1QyxLQUFLK3RDLFNBQVNoQyxPQUFPemlDLEVBQUdxWSxHQUFLM2hCLEtBQUsrdEMsU0FBU2xDLE9BQU92aUMsRUFBR3FZLEdBQUksTUFDL0YsS0FBSyxFQUFHM2hCLEtBQUtvdUMsT0FBUyxFQUFHcHVDLEtBQUsyckMsSUFBTXJpQyxFQUFHdEosS0FBSzRyQyxJQUFNanFCLEVBQUcsTUFDckQsS0FBSyxFQUFHM2hCLEtBQUtvdUMsT0FBUyxFQUN0QixRQUFTRSxHQUFNdHVDLEtBQU1zSixFQUFHcVksR0FFMUIzaEIsS0FBS3lyQyxJQUFNenJDLEtBQUsyckMsSUFBSzNyQyxLQUFLMnJDLElBQU0zckMsS0FBSyt1QyxJQUFLL3VDLEtBQUsrdUMsSUFBTXpsQyxFQUNyRHRKLEtBQUswckMsSUFBTTFyQyxLQUFLNHJDLElBQUs1ckMsS0FBSzRyQyxJQUFNNXJDLEtBQUtndkMsSUFBS2h2QyxLQUFLZ3ZDLElBQU1ydEIsSUFJekQsT0FBZSxTQUFVd3RCLEVBQU9ELEdBRTlCLFNBQVNFLEVBQVMvUixHQUNoQixPQUFPLElBQUk0UixHQUFTNVIsRUFBUzZSLEdBTy9CLE9BSkFFLEVBQVNGLFFBQVUsU0FBU0EsR0FDMUIsT0FBT0MsR0FBUUQsSUFHVkUsRUFWTSxDQVdaLEdDNURILFNBQVMxbUIsR0FBS3BmLEdBQ1osT0FBT0EsRUFBSSxHQUFLLEVBQUksRUFPdEIsU0FBUytsQyxHQUFPdFAsRUFBTW9NLEVBQUlDLEdBQ3hCLElBQUlrRCxFQUFLdlAsRUFBSzRMLElBQU01TCxFQUFLMEwsSUFDckI4RCxFQUFLcEQsRUFBS3BNLEVBQUs0TCxJQUNmNkQsR0FBTXpQLEVBQUs2TCxJQUFNN0wsRUFBSzJMLE1BQVE0RCxHQUFNQyxFQUFLLElBQU0sR0FDL0NFLEdBQU1yRCxFQUFLck0sRUFBSzZMLE1BQVEyRCxHQUFNRCxFQUFLLElBQU0sR0FDekN0bkIsR0FBS3duQixFQUFLRCxFQUFLRSxFQUFLSCxJQUFPQSxFQUFLQyxHQUNwQyxPQUFRN21CLEdBQUs4bUIsR0FBTTltQixHQUFLK21CLElBQU9ubEMsS0FBS0MsSUFBSUQsS0FBSzhkLElBQUlvbkIsR0FBS2xsQyxLQUFLOGQsSUFBSXFuQixHQUFLLEdBQU1ubEMsS0FBSzhkLElBQUlKLEtBQU8sRUFJNUYsU0FBUzBuQixHQUFPM1AsRUFBTXR6QixHQUNwQixJQUFJcVQsRUFBSWlnQixFQUFLNEwsSUFBTTVMLEVBQUswTCxJQUN4QixPQUFPM3JCLEdBQUssR0FBS2lnQixFQUFLNkwsSUFBTTdMLEVBQUsyTCxLQUFPNXJCLEVBQUlyVCxHQUFLLEVBQUlBLEVBTXZELFNBQVM2aEMsR0FBTXZPLEVBQU0vZSxFQUFJQyxHQUN2QixJQUFJNlcsRUFBS2lJLEVBQUswTCxJQUNWYSxFQUFLdk0sRUFBSzJMLElBQ1YzVCxFQUFLZ0ksRUFBSzRMLElBQ1ZNLEVBQUtsTSxFQUFLNkwsSUFDVjZCLEdBQU0xVixFQUFLRCxHQUFNLEVBQ3JCaUksRUFBS2dPLFNBQVM3QixjQUFjcFUsRUFBSzJWLEVBQUluQixFQUFLbUIsRUFBS3pzQixFQUFJK1csRUFBSzBWLEVBQUl4QixFQUFLd0IsRUFBS3hzQixFQUFJOFcsRUFBSWtVLEdBR2hGLFNBQVMwRCxHQUFVdFMsR0FDakJyOUIsS0FBSyt0QyxTQUFXMVEsRUFrRGxCLFNBQVN1UyxHQUFldlMsR0FDdEJyOUIsS0FBSyt0QyxTQUFXMVEsRUFoRGxCc1MsR0FBVTV0QyxXQUNSaXNDLFVBQVcsV0FDVGh1QyxLQUFLaXVDLE1BQVEsR0FFZkMsUUFBUyxXQUNQbHVDLEtBQUtpdUMsTUFBUTNxQyxLQUVmNnFDLFVBQVcsV0FDVG51QyxLQUFLeXJDLElBQU16ckMsS0FBSzJyQyxJQUNoQjNyQyxLQUFLMHJDLElBQU0xckMsS0FBSzRyQyxJQUNoQjVyQyxLQUFLNnZDLElBQU12c0MsSUFDWHRELEtBQUtvdUMsT0FBUyxHQUVoQkMsUUFBUyxXQUNQLE9BQVFydUMsS0FBS291QyxRQUNYLEtBQUssRUFBR3B1QyxLQUFLK3RDLFNBQVNoQyxPQUFPL3JDLEtBQUsyckMsSUFBSzNyQyxLQUFLNHJDLEtBQU0sTUFDbEQsS0FBSyxFQUFHMEMsR0FBTXR1QyxLQUFNQSxLQUFLNnZDLElBQUtILEdBQU8xdkMsS0FBTUEsS0FBSzZ2QyxPQUU5Qzd2QyxLQUFLaXVDLE9BQXlCLElBQWZqdUMsS0FBS2l1QyxPQUErQixJQUFoQmp1QyxLQUFLb3VDLFNBQWVwdUMsS0FBSyt0QyxTQUFTakMsWUFDekU5ckMsS0FBS2l1QyxNQUFRLEVBQUlqdUMsS0FBS2l1QyxPQUV4QkssTUFBTyxTQUFTaGxDLEVBQUdxWSxHQUNqQixJQUFJVixFQUFLM2QsSUFHVCxHQURRcWUsR0FBS0EsR0FBYnJZLEdBQUtBLEtBQ0t0SixLQUFLMnJDLEtBQU9ocUIsSUFBTTNoQixLQUFLNHJDLElBQWpDLENBQ0EsT0FBUTVyQyxLQUFLb3VDLFFBQ1gsS0FBSyxFQUFHcHVDLEtBQUtvdUMsT0FBUyxFQUFHcHVDLEtBQUtpdUMsTUFBUWp1QyxLQUFLK3RDLFNBQVNoQyxPQUFPemlDLEVBQUdxWSxHQUFLM2hCLEtBQUsrdEMsU0FBU2xDLE9BQU92aUMsRUFBR3FZLEdBQUksTUFDL0YsS0FBSyxFQUFHM2hCLEtBQUtvdUMsT0FBUyxFQUFHLE1BQ3pCLEtBQUssRUFBR3B1QyxLQUFLb3VDLE9BQVMsRUFBR0UsR0FBTXR1QyxLQUFNMHZDLEdBQU8xdkMsS0FBTWloQixFQUFLb3VCLEdBQU9ydkMsS0FBTXNKLEVBQUdxWSxJQUFLVixHQUFLLE1BQ2pGLFFBQVNxdEIsR0FBTXR1QyxLQUFNQSxLQUFLNnZDLElBQUs1dUIsRUFBS291QixHQUFPcnZDLEtBQU1zSixFQUFHcVksSUFHdEQzaEIsS0FBS3lyQyxJQUFNenJDLEtBQUsyckMsSUFBSzNyQyxLQUFLMnJDLElBQU1yaUMsRUFDaEN0SixLQUFLMHJDLElBQU0xckMsS0FBSzRyQyxJQUFLNXJDLEtBQUs0ckMsSUFBTWpxQixFQUNoQzNoQixLQUFLNnZDLElBQU01dUIsTUFJZixTQUFtQm9jLEdBQ2pCcjlCLEtBQUsrdEMsU0FBVyxJQUFJNkIsR0FBZXZTLElBRzFCdDdCLFVBQVlpTixPQUFPN0MsT0FBT3dqQyxHQUFVNXRDLFlBQVl1c0MsTUFBUSxTQUFTaGxDLEVBQUdxWSxHQUM3RWd1QixHQUFVNXRDLFVBQVV1c0MsTUFBTWp0QyxLQUFLckIsS0FBTTJoQixFQUFHclksSUFPMUNzbUMsR0FBZTd0QyxXQUNiOHBDLE9BQVEsU0FBU3ZpQyxFQUFHcVksR0FBSzNoQixLQUFLK3RDLFNBQVNsQyxPQUFPbHFCLEVBQUdyWSxJQUNqRHdpQyxVQUFXLFdBQWE5ckMsS0FBSyt0QyxTQUFTakMsYUFDdENDLE9BQVEsU0FBU3ppQyxFQUFHcVksR0FBSzNoQixLQUFLK3RDLFNBQVNoQyxPQUFPcHFCLEVBQUdyWSxJQUNqRDRpQyxjQUFlLFNBQVNuVSxFQUFJa1UsRUFBSUUsRUFBSUMsRUFBSTlpQyxFQUFHcVksR0FBSzNoQixLQUFLK3RDLFNBQVM3QixjQUFjRCxFQUFJbFUsRUFBSXFVLEVBQUlELEVBQUl4cUIsRUFBR3JZLFdDL0U1RXdtQyxHQWVqQjNWLFlBQWE0VixFQUFNQyxFQUFPQyxFQUFjQyxFQUFXQyxHQUFVLEVBQU9DLEVBQWdCLElBQU1DLEVBQWEsR0FDbkdyd0MsS0FBSyt2QyxLQUFPQSxFQUNaL3ZDLEtBQUtnd0MsTUFBUUEsRUFDVyxLQUFwQmh3QyxLQUFLK3ZDLEtBQUtPLE9BQWV0d0MsS0FBS2d3QyxNQUFNcGxDLEtBQUssQ0FBQ3hILEVBQUdDLElBQVlrdEMsT0FBT250QyxFQUFFb3RDLFlBQVlELE9BQU9sdEMsRUFBRW10QyxhQUN0Rnh3QyxLQUFLZ3dDLE1BQU1wbEMsS0FBSyxDQUFDeEgsRUFBR0MsSUFBWWt0QyxPQUFPbHRDLEVBQUVtdEMsWUFBWUQsT0FBT250QyxFQUFFb3RDLGFBQ25FeHdDLEtBQUtpd0MsYUFBZUEsRUFBYXJsQyxLQUFLLENBQUN4SCxFQUFHQyxJQUFZa3RDLE9BQU9udEMsRUFBRW90QyxZQUFZRCxPQUFPbHRDLEVBQUVtdEMsYUFDcEZ4d0MsS0FBS2t3QyxVQUFZQSxFQUFVdGxDLEtBQUssQ0FBQ3hILEVBQUVDLElBQzNCRCxFQUFFcXRDLFdBQWFwdEMsRUFBRW90QyxZQUFvQixFQUNyQ3J0QyxFQUFFcXRDLFdBQWFwdEMsRUFBRW90QyxXQUFtQixFQUNqQyxHQUVYendDLEtBQUttd0MsVUFBWUEsRUFDakJud0MsS0FBS293QyxnQkFBa0JBLEVBR3ZCcHdDLEtBQUswd0MsYUFBZSxFQUNwQjF3QyxLQUFLcXdDLGFBQWVBLEVBQ3BCcndDLEtBQUt1b0MsVUFBWSxVQUdyQnBPLGdCQUFnQlAsRUFBS3NSLEdBQ2pCdFIsRUFBSTV3QixVQUFVLGNBQWNnRCxLQUFLay9CLEdBV3JDL1EsUUFBUVAsRUFBSytXLEVBQU9DLEVBQU9DLEVBQVFDLFFBQ2pCNzhCLElBQVYwOEIsR0FDQS9XLEVBQUk1d0IsVUFBVSxTQUFTdkYsTUFBTSxPQUFTaUUsSUFDbEMsTUFBTStELEVBQUlrbEMsRUFBTXpuQyxPQUFRdVksR0FBSUEsRUFBRWd2QixZQUFZL29DLEVBQUUrb0MsWUFBWSxHQUNsRE0sRUFBa0IsR0FBVHRsQyxFQUFFakUsTUFBU3hILEtBQUt1b0MsVUFBVXNJLEVBQU9wbEMsRUFBRWpFLE9BRWxELE9BREFveUIsRUFBSTV3QixVQUFVLGVBQWVFLGVBQWdCeEIsRUFBRStvQyxjQUFlaHRDLE1BQU0sU0FBVXN0QyxHQUN2RUEsSUFJZm5YLEVBQUk1d0IsVUFBVSxpQkFBaUJ2RixNQUFNLE9BQVNpRSxJQUMxQyxNQUFNK0QsRUFBSW1sQyxFQUFNMW5DLE9BQVF1WSxHQUFJQSxFQUFFdXZCLFFBQVF0cEMsRUFBRXNwQyxRQUFRLEdBQ2hELFFBQVUvOEIsSUFBTnhJLEVBQWlCLFFBQVMvRCxFQUFFc3BDLHFCQUVoQyxPQUQwQixHQUFYdmxDLEVBQUVqRSxNQUFXeEgsS0FBS3VvQyxVQUFVdUksRUFBT3JsQyxFQUFFakUsU0FXNUQyeUIsT0FBT1AsRUFBS0MsR0FDUjc1QixLQUFLaXhDLFVBQVVwWCxFQUFPeEosR0FLdEIsTUFBTTZnQixFQUFRclgsRUFBTy9aLEVBQUUsRUFvQ3ZCLEdBbkNBOWYsS0FBS2d3QyxNQUFNL2dDLFFBQVEsQ0FBQ3ZILEVBQUduSSxLQUVmbUksRUFBRTRCLEVBREcsR0FBTC9KLEVBQ00sRUFFQVMsS0FBS2d3QyxNQUFNendDLEVBQUUsR0FBRytKLEVBQUl0SixLQUFLZ3dDLE1BQU16d0MsRUFBRSxHQUFHOHdCLEVBQUlyd0IsS0FBSzArQixPQUFPaDNCLEVBQUVncEMsYUFBYTF3QyxLQUFLb3dDLGdCQUFnQnB3QyxLQUFLb3dDLGdCQUFnQjFvQyxFQUFFZ3BDLGNBRXpIaHBDLEVBQUUyb0IsRUFBSXJ3QixLQUFLMCtCLE9BQU9oM0IsRUFBRWxHLFFBQVF4QixLQUFLcXdDLGFBQWFyd0MsS0FBS3F3QyxhQUFhcndDLEtBQUswK0IsT0FBT2gzQixFQUFFbEcsVUFJbEZ4QixLQUFLaXdDLGFBQWFoaEMsUUFBUSxDQUFDdkgsRUFBR25JLEtBSTFCLEdBREFtSSxFQUFFeXBDLFFBQVVueEMsS0FBS294QyxVQUFVMXBDLEVBQUV3dkIsYUFBYWwzQixLQUFLb3hDLFVBQVUxcEMsRUFBRXl2QixlQUN6Q2xqQixJQUFkdk0sRUFBRXlwQyxRQUFOLENBT0EsR0FBSVosT0FBTzdvQyxFQUFFeXBDLFFBQVFqYSxhQUFlcVosT0FBTzdvQyxFQUFFd3ZCLFlBQWF4dkIsRUFBRTRCLEVBQUk1QixFQUFFeXBDLFFBQVE3bkMsTUFDdEUsQ0FFQSxNQUFNK25DLEVBQU9kLE9BQU83b0MsRUFBRXd2QixZQUFjcVosT0FBTzdvQyxFQUFFeXBDLFFBQVFqYSxZQUFjLEVBQ25FeHZCLEVBQUU0QixFQUFJNUIsRUFBRXlwQyxRQUFRN25DLEVBQUl0SixLQUFLMCtCLE9BQU8yUyxRQUluQnA5QixJQUFidk0sRUFBRWxHLFNBQXNCa0csRUFBRWxHLE9BQVMrdUMsT0FBTzdvQyxFQUFFeXZCLFVBQVlvWixPQUFPN29DLEVBQUV3dkIsWUFBYyxHQUNuRnh2QixFQUFFMm9CLEVBQUlyd0IsS0FBSzArQixPQUFPaDNCLEVBQUVsRyxRQUFReEIsS0FBS3F3QyxhQUFhcndDLEtBQUtxd0MsYUFBYXJ3QyxLQUFLMCtCLE9BQU9oM0IsRUFBRWxHLGFBZDFFeTFCLFFBQVFxYSxRQUFRdHhDLEtBQUsrdkMsS0FBS3dCLGdCQUFnQjdwQyxFQUFFc3BDLHlDQW1CaERoeEMsS0FBS213QyxVQXFITCxDQUVtQnZXLEVBQUkxdEIsT0FBTyxRQUN6QmIsS0FBSyxLQUFNckwsS0FBS2l3QyxhQUFhLEdBQUczbUMsR0FDaEMrQixLQUFLLEtBQU1yTCxLQUFLaXdDLGFBQWFqd0MsS0FBS2l3QyxhQUFhenVDLE9BQU8sR0FBRzhILEdBQ3pEK0IsS0FBSyxLQUFNNmxDLE9BQ1g3bEMsS0FBSyxLQUFNNmxDLE9BQ1hubEMsUUFBUSxVQUFVLE9BNUhSLENBSWYvTCxLQUFLa3dDLFVBQVlsd0MsS0FBS2t3QyxVQUFVaG5DLE9BQVF4QixJQUVwQ0EsRUFBRThwQyxVQUFZeHhDLEtBQUtveEMsVUFBVTFwQyxFQUFFd3ZCLFlBQy9CeHZCLEVBQUUrcEMsUUFBVXp4QyxLQUFLb3hDLFVBQVUxcEMsRUFBRXl2QixlQUNObGpCLElBQWhCdk0sRUFBRThwQyxnQkFBeUN2OUIsSUFBZHZNLEVBQUUrcEMsVUFFMUN4YSxRQUFReGxCLElBQUl6UixLQUFLa3dDLFdBQ2pCbHdDLEtBQUtrd0MsVUFBVXRsQyxLQUFLLENBQUN4SCxFQUFFQyxLQUVkRCxFQUFFOHpCLFlBQWM3ekIsRUFBRTZ6QixZQUFvQixHQUN0Qzl6QixFQUFFOHpCLFlBQWM3ekIsRUFBRTZ6QixXQUFtQixHQUdyQzl6QixFQUFFK3pCLFVBQVk5ekIsRUFBRTh6QixVQUFrQixHQUNsQy96QixFQUFFK3pCLFVBQVk5ekIsRUFBRTh6QixTQUFpQixFQUMvQixHQUVYbjNCLEtBQUtrd0MsVUFBVWpoQyxRQUFRLENBQUN2SCxFQUFHbkksS0FHdkJtSSxFQUFFZ3FDLHdCQUEwQm55QyxFQUFFLElBVzlCLE1BQU04eEMsRUFBT2QsT0FBTzdvQyxFQUFFd3ZCLFlBQWNxWixPQUFPN29DLEVBQUU4cEMsVUFBVXRhLFlBQWMsRUFDL0R5YSxFQUFRcEIsT0FBTzdvQyxFQUFFeXZCLFVBQVlvWixPQUFPN29DLEVBQUUrcEMsUUFBUXZhLFlBQWMsRUFFbEV4dkIsRUFBRWtxQyxPQUFTbHFDLEVBQUU4cEMsVUFBVWxvQyxFQUFJdEosS0FBSzArQixPQUFPMlMsR0FDdkMzcEMsRUFBRW1xQyxLQUFPbnFDLEVBQUUrcEMsUUFBUW5vQyxFQUFJdEosS0FBSzArQixPQUFPaVQsR0FDbkNqcUMsRUFBRW9xQyxHQUFLcHFDLEVBQUVrcUMsUUFBVWxxQyxFQUFFbXFDLEtBQU9ucUMsRUFBRWtxQyxPQUFTLEdBQUcsRUFDMUNscUMsRUFBRXFxQyxHQUFLYixFQUFRLElBQU81bUMsS0FBSzhkLElBQUltb0IsT0FBTzdvQyxFQUFFK3BDLFFBQVFqQixZQUFjRCxPQUFPN29DLEVBQUU4cEMsVUFBVWhCLGFBQWUsSUFDNUY5b0MsRUFBRXFxQyxHQUFLLElBQUdycUMsRUFBRXFxQyxHQUFLLEtBTXpCLE1BQU1DLEVBQVNoeUMsS0FBS2t3QyxVQUFValIsT0FBTyxDQUFDMWYsRUFBRTdYLEtBQUs2WCxFQUFFN1gsRUFBRWdxQyxhQUFhLEVBQUVueUIsRUFBRTdYLEVBQUVncUMsY0FBYyxFQUFTbnlCLE9BQzNGdmYsS0FBS2t3QyxVQUFVamhDLFFBQVN2SCxJQUVqQnNxQyxFQUFPdHFDLEVBQUVncUMsYUFBZSxJQUV2QmhxQyxFQUFFcXFDLElBQW9CLEdBQWR6bkMsS0FBSzJuQyxZQUtyQixNQUFNdkQsRUFBUTdRLEtBQ1R2MEIsRUFBRzVCLEdBQU1BLEVBQUU0QixHQUNYcVksRUFBR2phLEdBQU1BLEVBQUVpYSxHQUNYK3NCLE1BQU13RCxJQUVYbHlDLEtBQUtrd0MsVUFBVWpoQyxRQUFRLENBQUN2SCxFQUFHbkksS0FDZnE2QixFQUFJMXRCLE9BQU8sUUFDVnZLLFFBQVEySCxFQUFFNUIsRUFBRWtxQyxPQUFRandCLEVBQUV1dkIsSUFBUzVuQyxFQUFFNUIsRUFBRW9xQyxHQUFJbndCLEVBQUVqYSxFQUFFcXFDLEtBQU16b0MsRUFBRTVCLEVBQUVtcUMsS0FBTWx3QixFQUFFdXZCLEtBQzdEN2xDLEtBQUssMEJBQTJCM0QsRUFBRStvQyxjQUNsQ3BsQyxLQUFLLElBQUtxakMsR0FDVmpyQyxNQUFNLFNBQVUsYUFJN0IsTUFBTTB1QyxFQUFXdlksRUFBSTV3QixVQUFVLFNBQzFCdEcsS0FBSzFDLEtBQUtrd0MsV0FHZmlDLEVBQVM5bUMsS0FBSyxLQUFPM0QsR0FBTUEsRUFBRW9xQyxJQUM3QkssRUFBUzltQyxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFcXFDLElBRzdCSSxFQUFTM3ZDLFFBQVEwSixPQUFPLFVBQ25CYixLQUFLLFFBQVUzRCxlQUFrQkEsRUFBRStvQyxjQUNuQ3BsQyxLQUFLLEtBQU8zRCxHQUFNQSxFQUFFb3FDLElBQ3BCem1DLEtBQUssS0FBTzNELEdBQU1BLEVBQUVxcUMsSUFDcEI5bkMsTUFBTWtvQyxHQUNOOW1DLEtBQUssSUFBSyxHQUNWNUgsTUFBTSxPQUFRLG9CQUduQixNQUFNMnVDLEVBQVl4WSxFQUFJNXdCLFVBQVUsU0FDL0J0RyxLQUFLMUMsS0FBS2d3QyxPQUdYb0MsRUFBVS9tQyxLQUFLLElBQU0zRCxHQUFNQSxFQUFFNEIsR0FDN0I4b0MsRUFBVS9tQyxLQUFLLElBQUs2bEMsR0FHcEJrQixFQUFVNXZDLFFBQVEwSixPQUFPLFFBQ3BCYixLQUFLLFFBQVUzRCxlQUFnQkEsRUFBRThvQyxjQUNqQ25sQyxLQUFLLElBQUs2bEMsR0FDVjdsQyxLQUFLLEtBQU0sR0FDWEEsS0FBSyxLQUFNLEdBQ1hBLEtBQUssUUFBVTNELEdBQU1BLEVBQUUyb0IsR0FDdkJobEIsS0FBSyxTQUFVLElBQ2ZBLEtBQUssSUFBTTNELEdBQU1BLEVBQUU0QixHQUNuQlcsTUFBTW1vQyxHQUNOM3VDLE1BQU0sU0FBVSxXQUdyQm0yQixFQUFJMXRCLE9BQU8sUUFDTmIsS0FBSyxLQUFNLGFBQ1g1SCxNQUFNLGNBQWUsT0FDckI0SCxLQUFLLElBQUtyTCxLQUFLMCtCLE9BQU8sSUFDdEJyekIsS0FBSyxJQUFLNmxDLEVBQU0sSUFDaEJ6dEMsTUFBTSxZQUFhLElBQ25CdUksS0FBSyxjQWFkLE1BQU1xbUMsRUFBYXpZLEVBQUk1d0IsVUFBVSxpQkFDNUJ0RyxLQUFLMUMsS0FBS2l3QyxjQUdmb0MsRUFBV2huQyxLQUFLLElBQU0zRCxHQUFNQSxFQUFFNEIsR0FDOUIrb0MsRUFBV2huQyxLQUFLLElBQUs2bEMsR0FHckJtQixFQUFXN3ZDLFFBQVEwSixPQUFPLFFBQ3JCYixLQUFLLFFBQVUzRCxHQUFJMUgsS0FBS213QyxVQUFVLDJDQUEyQ3pvQyxFQUFFOG9DLGNBQy9FbmxDLEtBQUssSUFBSzZsQyxHQUNWN2xDLEtBQUssUUFBVTNELEdBQU1BLEVBQUUyb0IsR0FDdkJobEIsS0FBSyxTQUFVLElBQ2ZBLEtBQUssSUFBTTNELEdBQU1BLEVBQUU0QixHQUNuQlcsTUFBTW9vQyxHQUNONXVDLE1BQU0sT0FBUSxRQUNkQSxNQUFNLFNBQVUsV0FJQyxRQUFsQm8yQixFQUFPeVksU0FBdUMsUUFBbEJ6WSxFQUFPeVksU0FDbkMxWSxFQUFJMXRCLE9BQU8sUUFDVmIsS0FBSyxLQUFNLGNBQ1g1SCxNQUFNLGNBQWUsT0FDckI0SCxLQUFLLElBQUtyTCxLQUFLMCtCLE9BQU83dEIsUUFBUSxHQUFLLEdBQ25DeEYsS0FBSyxJQUFLNmxDLEVBQVEsS0FDbEJ6dEMsTUFBTSxZQUFhLE9BQ25CdUksVUFBOEJpSSxJQUF6QmpVLEtBQUsrdkMsS0FBS3dCLGdCQUE0QnZ4QyxLQUFLK3ZDLEtBQUt3QyxhQUFhdnlDLEtBQUsrdkMsS0FBS3dCLGNBSTNELFNBQWxCMVgsRUFBT3lZLFNBQXdDLFFBQWxCelksRUFBT3lZLFNBQ3BDMVksRUFBSTF0QixPQUFPLFFBQ1ZiLEtBQUssS0FBTSxtQkFDWDVILE1BQU0sY0FBZSxTQUNyQjRILEtBQUssSUFBS3JMLEtBQUswK0IsT0FBTzd0QixRQUFRLEdBQUssSUFDbkN4RixLQUFLLElBQUs2bEMsRUFBUSxLQUNsQnp0QyxNQUFNLFlBQWEsT0FDbkJ1SSxVQUE4QmlJLElBQXpCalUsS0FBSyt2QyxLQUFLd0IsZ0JBQTRCdnhDLEtBQUsrdkMsS0FBS3dDLGFBQWF2eUMsS0FBSyt2QyxLQUFLd0IsY0FLckZwWCxVQUFVOUosR0FVTnJ3QixLQUFLZ3dDLE1BQU1wbEMsS0FBSyxDQUFDeEgsRUFBRUMsSUFDWGt0QyxPQUFPbnRDLEVBQUU4ekIsWUFBY3FaLE9BQU9sdEMsRUFBRTZ6QixhQUFxQixFQUNyRHFaLE9BQU9udEMsRUFBRTh6QixZQUFjcVosT0FBT2x0QyxFQUFFNnpCLFlBQW9CLEVBQ2pELEdBR1gsSUFBSW5sQixFQUFNLEVBQ1YvUixLQUFLZ3dDLE1BQU0vZ0MsUUFBUSxDQUFDdkgsRUFBR25JLEtBRW5CLEdBREFtSSxFQUFFbEcsT0FBUyt1QyxPQUFPN29DLEVBQUV5dkIsVUFBWW9aLE9BQU83b0MsRUFBRXd2QixZQUFjLEVBQzlDLEdBQUwzM0IsRUFFQXdTLEdBQU9ySyxFQUFFbEcsV0FDTixDQUNILElBQUkwakIsRUFBS2xsQixLQUFLZ3dDLE1BQU16d0MsRUFBRSxHQUN0Qm1JLEVBQUVncEMsYUFBZUgsT0FBTzdvQyxFQUFFd3ZCLFlBQWNxWixPQUFPcnJCLEVBQUdpUyxVQUFZLEVBQzlEcGxCLEdBQU9ySyxFQUFFbEcsUUFBVWtHLEVBQUVncEMsYUFBYTF3QyxLQUFLb3dDLGdCQUFnQnB3QyxLQUFLb3dDLGdCQUFnQjFvQyxFQUFFZ3BDLGlCQUl0RixNQUFNNzhCLEdBQVUsRUFBRzlCLEdBQ2JsQixHQUFTLEVBQUd3ZixHQUNsQnJ3QixLQUFLMCtCLE9BQVNjLEtBQ1QzckIsT0FBT0EsR0FDUGhELE1BQU1BLEdBR2ZzcEIsbUJBQW1COUosR0FVZnJ3QixLQUFLZ3dDLE1BQU0vZ0MsUUFBU3ZILElBQU9BLEVBQUVsRyxPQUFTK3VDLE9BQU83b0MsRUFBRXl2QixVQUFZb1osT0FBTzdvQyxFQUFFd3ZCLFlBQWMsSUFDbEYsTUFBTXNiLEVBQWdCN2hDLEdBQUkzUSxLQUFLZ3dDLE1BQVF0b0MsR0FBSUEsRUFBRWxHLFFBRXZDcVMsR0FBVSxFQUFHMitCLEVBQWN4eUMsS0FBS2d3QyxNQUFNeHVDLFFBQ3RDcVAsR0FBUyxFQUFHd2YsR0FDbEJyd0IsS0FBSzArQixPQUFTYyxLQUNUM3JCLE9BQU9BLEdBQ1BoRCxNQUFNQSxHQUdYLE1BQU00aEMsRUFBWXp5QyxLQUFLMCtCLE9BQU83UyxPQUFPN3JCLEtBQUtxd0MsY0FDcENxQyxFQUFrQjNnQyxHQUFJL1IsS0FBS2d3QyxNQUFRdG9DLEdBQUlBLEVBQUVsRyxPQUFPaXhDLEVBQVUvcUMsRUFBRWxHLE9BQU9peEMsR0FDekV6eUMsS0FBSzB3QyxjQUFnQjhCLEVBQWdCeHlDLEtBQUtnd0MsTUFBTXh1QyxPQUFTa3hDLElBQWtCMXlDLEtBQUtnd0MsTUFBTXh1QyxPQUFPLEdBUWpHMjRCLFVBQVV3WSxHQUNOQSxFQUFNcEMsT0FBT29DLEdBQ2IsTUFBTUMsRUFBVTV5QyxLQUFLZ3dDLE1BQU05bUMsT0FBUXhCLEdBQWM2b0MsT0FBTzdvQyxFQUFFd3ZCLFlBQWMsR0FBS3liLEdBQU9wQyxPQUFPN29DLEVBQUV5dkIsVUFBWSxHQUFLd2IsR0FDOUcsT0FBc0IsR0FBbEJDLEVBQVFweEMsT0FBb0JveEMsRUFBUSxHQUNkLEdBQWxCQSxFQUFRcHhDLFlBQ1p5MUIsUUFBUXFhLEtBQUssc0JBQXdCcUIsUUFJckMxYixRQUFRcWEsS0FBSyxrQ0FBb0NxQixVQ3pXeENFLEdBQ2pCMVksWUFBWTJZLEVBQVVDLEVBQWNDLEVBQVluWixHQUM1Qzc1QixLQUFLOHlDLFNBQVdBLEVBQ2hCOXlDLEtBQUsreUMsYUFBZUEsRUFDcEIveUMsS0FBS2d6QyxXQUFhQSxFQUNsQmh6QyxLQUFLaXpDLGVBQVloL0IsRUFDakJqVSxLQUFLNjVCLE9BQVNBLEVBQ2Q3NUIsS0FBS3VvQyxVQUFZLFVBR3JCcE8sU0FBU3ozQixFQUFNOGxDLEVBQVkwSyxFQUFVQyxFQUFXdm9DLEdBQUssR0FFakQsR0FBSUEsRUFBSyxDQUNMbEksRUFBS2tJLEtBQUssQ0FBQ3hILEVBQUVDLE1BQWNELEVBQUVxbUMsY0FBZ0JwbUMsRUFBRW9tQyxnQkFDL0MsTUFBTXdCLEVBQU12b0MsRUFBS3FILElBQUtyQyxHQUFJQSxFQUFFNnBDLGNBQzVCdnhDLEtBQUtvekMsV0FBV25JLEdBR3BCdm9DLEVBQUt1TSxRQUFTdkgsSUFDTTFILEtBQUtpekMsVUFBVXJxQyxXQUFXbEIsRUFBRTZwQyxhQUFhbGpDLFFBQVEsSUFBSyxRQUM5RHJGLFVBQVUsaUJBQ2J2RixNQUFNLE9BQWlCLEdBQVRpRSxFQUFFRixNQUFTeEgsS0FBS3VvQyxVQUFVQyxFQUFXOWdDLEVBQUVGLFVBSTlEeEgsS0FBS2l6QyxVQUFVcnFDLE9BQU8sa0JBQWtCakUsU0FDeEMsTUFBTTB1QyxFQUFnQnJ6QyxLQUFLaXpDLFVBQVUvbUMsT0FBTyxLQUN2Q0gsUUFBUSxpQkFBaUIsR0FDekJWLEtBQUssWUFBYSx1QkFLakJtVSxFQUhZNnpCLEVBQWNycUMsVUFBVSxhQUNyQ3RHLEtBQUtBLEdBRVVGLFFBQ2YwSixPQUFPLEtBQ1BILFFBQVEsWUFBWSxHNUMrR2pDLElBQXdCNEgsRTRDN0doQjZMLEVBQUV0VCxPQUFPLFFBQ0piLEtBQUssS0FBTSxHQUNYQSxLQUFLLEtBQU8zRCxHQUFJMUgsS0FBSzIrQixPQUFPajNCLEVBQUU2cEMsZUFDOUJsbUMsS0FBSyxLQUFPM0QsR0FBSTFILEtBQUsyK0IsT0FBT2ozQixFQUFFNnBDLGVBQzlCOXRDLE1BQU0sU0FBV2lFLEdBQWEsR0FBVEEsRUFBRUYsTUFBU3hILEtBQUt1b0MsVUFBVUMsRUFBVzlnQyxFQUFFRixRQUM1RC9ELE1BQU0sZUFBZ0IsR0FDdEJxNkIsYUFDQWlGLFNBQVMsS0FDVDEzQixLQUFLLEtBQU8zRCxHQUFhLEdBQVRBLEVBQUVGLE1BQVMsRUFBRTByQyxFQUFTeHJDLEVBQUVGLFFBRTdDZ1ksRUFBRXRULE9BQU8sVUFDSmIsS0FBSyxLQUFNLEdBQ1hBLEtBQUssS0FBTzNELEdBQUkxSCxLQUFLMitCLE9BQU9qM0IsRUFBRTZwQyxlQUM5QmxtQyxLQUFLLElBQUssR0FDVjVILE1BQU0sT0FBU2lFLEdBQWEsR0FBVEEsRUFBRUYsTUFBU3hILEtBQUt1b0MsVUFBVUMsRUFBVzlnQyxFQUFFRixRQUMxRHMyQixhQUNBaUYsU0FBUyxLQUNUMTNCLEtBQUssS0FBTzNELEdBQUl3ckMsRUFBU3hyQyxFQUFFRixRQUdoQzZyQyxFQUFjbm5DLE9BQU8sS0FDaEJiLEtBQUssUUFBUyxpQkFDZEEsS0FBSyw0QkFBNkJyTCxLQUFLMitCLE9BQU9qckIsWUFBWSxNQUMxRHJTLE01Q3NGV3NTLEU0Q3JGQXUvQixFNUNzRmZwVyxHQUFLckMsR0FBSzltQixJNENyRkV2QyxNQUFNLElBR25CaWlDLEVBQWNubkMsT0FBTyxRQUNoQmIsS0FBSyxLQUFNLGNBQ1hBLEtBQUssSUFBSyxHQUNWQSxLQUFLLEtBQU0sSUFDWDVILE1BQU0sY0FBZSxPQUNyQkEsTUFBTSxZQUFhLEdBQ25CdUksS0FBSyxjQUVWcW5DLEVBQWNubkMsT0FBTyxLQUNoQmIsS0FBSyxRQUFTLGlCQUNkQSxLQUFLLDRCQUE2QnJMLEtBQUsyK0IsT0FBT2pyQixZQUFZLE1BQzFEclMsSzVDMEViLFNBQTBCc1MsR0FDeEIsT0FBT21wQixHQUFLdnNCLEdBQU9vRCxHNEMxRUwyL0IsQ0FBVXR6QyxLQUFLMitCLFFBQ1oxQixnQkFJWG9XLEVBQWNubkMsT0FBTyxRQUNoQmIsS0FBSyxLQUFNLGNBQ1hBLEtBQUssSUFBSyxJQUNWQSxLQUFLLEtBQU0sSUFFWFcsOEJBQThCbW5DLEtBQzlCMXZDLE1BQU0sY0FBZSxTQUNyQkEsTUFBTSxZQUFhLFFBSzVCMDJCLFdBQVd5USxHQUNQNXFDLEtBQUt1ekMsVUFBVXZ6QyxLQUFLNjVCLE9BQU8vWixFQUFHOHFCLEdBQzlCNXFDLEtBQUt3ekMsUUFBTyxHQUdoQnJaLE9BQU9pUixHQUFPLEVBQU94UixFQUFlMFksRUFBUSxPQUFRdlAsRUFBUyxLQUN6RCxRQUFZOXVCLElBQVIybEIsUUFBd0MzbEIsSUFBbkJqVSxLQUFLaXpDLFVBQXlCLEtBQU0sK0NBQ2pEaC9CLElBQVIybEIsRUFBbUJBLEVBQU01NUIsS0FBS2l6QyxVQUM3Qmp6QyxLQUFLaXpDLFVBQVlyWixPQUVMM2xCLElBQWRqVSxLQUFLMitCLFFBQW9CMytCLEtBQUt1ekMsVUFBVXZ6QyxLQUFLNjVCLE9BQU8vWixHQUV2RCxNQUFNMnpCLEVBQVk3WixFQUFJNXdCLFVBQVUsYUFDM0J0RyxLQUFLMUMsS0FBSzh5QyxTQUFTL29DLElBQUtyQyxHQUFJQSxFQUFFNnBDLGVBR25Da0MsRUFBVTNWLGFBQ0xpRixTQUFTQSxHQUNUMTNCLEtBQUssWUFBYzNELG1CQUE2QjFILEtBQUsyK0IsT0FBT2ozQixPQUdqRStyQyxFQUFVanhDLFFBQ0wwSixPQUFPLEtBQ1BiLEtBQUssS0FBTzNELEdBQUtBLEVBQUUyRyxRQUFRLElBQUssTUFDaENoRCxLQUFLLFFBQVMsWUFDZEEsS0FBSyxZQUFjM0QsR0FBYSxtQkFHaENvMkIsYUFDQWlGLFNBQVNBLEVBQVMsR0FDbEIxM0IsS0FBSyxZQUFjM0QsbUJBQTZCMUgsS0FBSzIrQixPQUFPajNCLE9BRTdEMGpDLEdBRUpwckMsS0FBSzB6QyxjQUFjMXpDLEtBQUs2NUIsT0FBT3hKLEVBQUdpaUIsR0FJdENuWSxjQUFjOUosRUFBR2lpQixFQUFVLFFBQ3ZCdHlDLEtBQUs4eUMsU0FBUzdqQyxRQUFTMGtDLElBQ25CLE1BQU1DLEVBQVEsSUFBSTlELEdBQVU2RCxFQUFTM3pDLEtBQUtnekMsV0FBWWh6QyxLQUFLK3lDLGFBQWFZLEVBQVFwQyxrQkFBbUIsR0FDN0ZzQyxFQUFXanJDLE1BQVcrcUMsRUFBUXBDLGFBQWFsakMsUUFBUSxJQUFLLFFBQzlEdWxDLEVBQU1KLE9BQU9LLEdBQVd4akIsRUFBRUEsRUFBR3ZRLEVBQUc5ZixLQUFLMitCLE9BQU9qckIsWUFBYTQrQixRQUFTQSxNQUsxRW5ZLFVBQVVyYSxFQUFHOHFCLFFBQ0szMkIsSUFBVjIyQixJQUFxQkEsRUFBUTVxQyxLQUFLOHlDLFNBQVMvb0MsSUFBS3JDLEdBQUlBLEVBQUU2cEMsZUFDMUR2eEMsS0FBSzIrQixPQUFTZSxLQUNUN3JCLE9BQU8rMkIsR0FDUC81QixPQUFPLEVBQUdpUCxJQUNWcEwsUUFBUSxNQzhIckIsU0FBU28vQixHQUFrQkMsRUFBU0MsRUFBV0MsRUFBTUMsRUFBZ0JDLEVBQWVDLEVBQVdDLEVBQWNDLEVBQWNDLEVBQVVDLEdBQ2pJLE1BQU1DLEVBQVNSLEVBQUs1SixpQkFBaUJwckMsSUFDL0J5MUMsRUFBYVgsRUFBUTlVLE9BQU8sQ0FBQzBWLEVBQUtqdEMsS0FBS2l0QyxFQUFJanRDLEVBQUVrdEMsb0JBQXNCbHRDLEVBQVVpdEMsT0FHbkZGLEVBQU96ckMsVUFBVSxtQkFDWmdELEtBQU10RSxRQUFvQnVNLElBQWhCeWdDLEVBQVdodEMsR0FBZWd0QyxFQUFXaHRDLEdBQUdtdEMsaUJBQWlCbnRDLEdBQ25FakUsTUFBTSxTQUFVLFdBQ2hCNEgsS0FBSyxJQUFLNG9DLEVBQUs3SixRQUFRRixRQUFReEwsT0FBTzd0QixRQUFRLEdBQUssSUFHeEQ0akMsRUFBTzdyQyxPQUFPLFlBQVlJLFVBQVUsbUJBQy9CdEcsS0FBS3V4QyxFQUFLN0osUUFBUUYsUUFBUXZMLE9BQU85cUIsVUFDakNyUixRQUNBMEosT0FBTyxRQUNQYixLQUFLLElBQUs0b0MsRUFBSzdKLFFBQVFGLFFBQVF4TCxPQUFPN3RCLFFBQVEsR0FBSyxHQUNuRHhGLEtBQUssSUFBTTNELEdBQUl1c0MsRUFBSzdKLFFBQVFGLFFBQVF2TCxPQUFPajNCLElBQzNDMkQsS0FBSyxRQUFTLEdBQ2RBLEtBQUssU0FBVTRvQyxFQUFLN0osUUFBUUYsUUFBUXZMLE9BQU9qckIsYUFDM0MzSCxRQUFRLGtCQUFrQixHQUMxQnRJLE1BQU0sT0FBU2lFLE9BQVFndEMsRUFBV2h0QyxHQUFHb3RDLFlBRXRDYixFQUFLN0osUUFBUUYsUUFBUXhMLE9BQU83cUIsU0FBU3JTLE9BQVMsSUFFOUNpekMsRUFBTzdyQyxPQUFPLFlBQVlJLFVBQVUsZUFDL0J0RyxLQUFLdXhDLEVBQUs3SixRQUFRRixRQUFRdkwsT0FBTzlxQixVQUNqQ3JSLFFBQ0EwSixPQUFPLFFBQ1BiLEtBQUssSUFBSzRvQyxFQUFLN0osUUFBUUYsUUFBUXhMLE9BQU83dEIsUUFBUSxHQUFLLEdBQ25EeEYsS0FBSyxJQUFNM0QsR0FBTXVzQyxFQUFLN0osUUFBUUYsUUFBUXZMLE9BQU9qM0IsSUFDN0MyRCxLQUFLLFFBQVMsR0FDZEEsS0FBSyxTQUFVNG9DLEVBQUs3SixRQUFRRixRQUFRdkwsT0FBT2pyQixhQUMzQzNILFFBQVEsY0FBYyxHQUN0QnRJLE1BQU0sT0FBU2lFLE9BQVVndEMsRUFBV2h0QyxHQUFHb3RDLFlBSWhETCxFQUFPenJDLFVBQVUsbUJBQ1pqQyxHQUFHLFlBQWEsV0FDWjZCLEVBQU81SSxNQUNIK0wsUUFBUSxlQUFlLEtBRy9CaEYsR0FBRyxRQUFTLFNBQVNXLEdBQ2xCK3NDLEVBQU96ckMsVUFBVSxtQkFBbUIrQyxRQUFRLFdBQVcsR0FDdkRuRCxFQUFPNUksTUFBTStMLFFBQVEsV0FBVyxHQUNoQyxNQUFNZ3BDLEVBQVNydEMsRUFDZixJQUFJUixPQUNpQitNLElBQWpCcWdDLElBQTRCcHRDLEVBQUlvdEMsRUFBYXByQyxPQUFRaEMsR0FBSUEsRUFBRTB0QyxvQkFBb0JHLElBQ25GLE1BQU1DLEVBQUtULEVBQVNyckMsT0FBUTJjLEdBQUtBLEVBQUUrdUIsb0JBQW9CRyxHQUV2RGYsRUFBVWlCLFFBQVFSLEVBQU83ckMsT0FBTyxjQUFlMUIsRUFBRzh0QyxFQUFJYixFQUFlQyxHQUdyRSxNQUFNYyxFQUFjMVYsS0FDZjNyQixRQUFRdEosR0FBSWlxQyxFQUFZenFDLElBQUlyQyxHQUFHQSxFQUFFRixRQUFTbUosR0FBSTZqQyxFQUFZenFDLElBQUlyQyxHQUFHQSxFQUFFRixVQUNuRXFKLE9BQU8sR0FBSSxNQUNWc2tDLEVBQVVYLEVBQVl0ckMsT0FBUWtzQyxHQUFNQSxFQUFJUixvQkFBb0JHLEdBQ2xFYixFQUFlbUIsU0FBU0YsRUFBU2QsRUFBY2EsRUFBYVIsRUFBV0ssR0FBUUYsb0JBeU8zRixTQUFTUyxHQUFvQnZCLEVBQVNDLEVBQVdDLEdBQzdDLE1BQU1RLEVBQVNSLEVBQUs1SixpQkFBaUJwckMsSUFDL0J1bUMsRUFBVXlPLEVBQUt6TyxRQUNmb08sRUFBUWEsRUFBTzdyQyxPQUFPLGNBQ1RtckMsRUFBUTlVLE9BQU8sQ0FBQzBWLEVBQUtqdEMsS0FBS2l0QyxFQUFJanRDLEVBQUVrdEMsb0JBQXNCbHRDLEVBQVVpdEMsT0FFbkZGLEVBQU96ckMsVUFBVSxTQUNaakMsR0FBRyxZQUFhLFNBQVNXLEdBQ3RCc0IsVUFBa0J0QixFQUFFK29DLGNBQWMxa0MsUUFBUSxlQUFlLEdBQ3pEeTVCLEVBQVFHLFFBQVFqK0IsRUFBRWdxQyw0QkFBNEJocUMsRUFBRStvQyxlQUFlRixPQUFPN29DLEVBQUV5dkIsVUFBWW9aLE9BQU83b0MsRUFBRXd2QixZQUFjLFNBQzNHRCxRQUFReGxCLElBQUkvSixRQUVRdU0sSUFBaEJ2TSxFQUFFOHBDLFlBQ0ZvQyxFQUFNNXFDLFVBQVUsU0FBU0UsZUFBZXhCLEVBQUU4cEMsVUFBVWhCLGNBQWN6a0MsUUFBUSxlQUFlLEdBQ3pGNm5DLEVBQU01cUMsVUFBVSxTQUFTRSxlQUFleEIsRUFBRStwQyxRQUFRakIsY0FBY3prQyxRQUFRLGVBQWUsSUFJM0Y2bkMsRUFBTWhyQyxlQUFlbEIsRUFBRStvQyxjQUFjMWtDLFFBQVEsZUFBZSxHQUN2REEsUUFBUSxVQUFVLEtBRTFCaEYsR0FBRyxXQUFZLFNBQVNXLEdBQ3JCc0IsVUFBa0J0QixFQUFFK29DLGNBQWMxa0MsUUFBUSxlQUFlLEdBQ3pENm5DLEVBQU01cUMsVUFBVSxTQUFTK0MsUUFBUSxlQUFlLEdBQ2hENm5DLEVBQU01cUMsVUFBVSxXQUFXK0MsUUFBUSxlQUFlLEdBQzdDQSxRQUFRLFVBQVUsR0FDdkJ5NUIsRUFBUWUsU0FFaEJxTixFQUFNNXFDLFVBQVUsaUJBQ1hqQyxHQUFHLFlBQWEsU0FBU1csR0FDdEJrQixFQUFPNUksTUFBTStMLFFBQVEsZUFBZSxHQUNwQ3k1QixFQUFRRyxhQUFhaitCLEVBQUU4b0MsZUFBZTlvQyxFQUFFd3ZCLGdCQUFnQnh2QixFQUFFeXZCLGFBQWF6dkIsRUFBRXl2QixTQUFTenZCLEVBQUV3dkIsV0FBVyxXQUVsR253QixHQUFHLFdBQVksU0FBU1csR0FDckJrQixFQUFPNUksTUFBTStMLFFBQVEsZUFBZSxHQUNwQ3k1QixFQUFRZSxTQUlwQixTQUFTZ1AsR0FBd0J0QixHQUM3QixNQUFNUSxFQUFTUixFQUFLNUosaUJBQWlCcHJDLElBQy9CdW1DLEVBQVV5TyxFQUFLek8sUUFFckJpUCxFQUFPenJDLFVBQVUsYUFBYUEsVUFBVSxpQkFDbkNqQyxHQUFHLFlBQWEsU0FBU1csR0FDdEJrQixFQUFPNUksTUFBTStMLFFBQVEsZUFBZSxHQUNwQ3k1QixFQUFRRyxhQUFhaitCLEVBQUV5cEMsUUFBUVgsZUFBZTlvQyxFQUFFd3ZCLGdCQUFnQnh2QixFQUFFeXZCLGFBQWFvWixPQUFPN29DLEVBQUV5dkIsVUFBWW9aLE9BQU83b0MsRUFBRXd2QixZQUFjLFdBRTlIbndCLEdBQUcsV0FBWSxXQUNaNkIsRUFBTzVJLE1BQU0rTCxRQUFRLGVBQWUsR0FDcEMwb0MsRUFBT3pyQyxVQUFVLGlCQUFpQitDLFFBQVEsZUFBZSxHQUN6RHk1QixFQUFRZSx5QkE3a0JwQixTQUF1Qm4vQixFQUFNb3VDLEVBQVFDLEVBQVFDLEV6R2pDN0MsV0FDSSxNQUFNQyxFQUFPLGtDQUViLE9BRUlDLFFBQVNELEVBQU8sc0JBQ2hCRSxJQUFLRixFQUFPLHVDQUNaRyxVQUFXSCxFQUFPLHlDQUdsQkksUUFBU0osRUFBTyw2RUFDaEJLLGNBQWVMLEVBQU8sbUZBQ3RCTSxZQUFhTixFQUFPLGlGQUNwQk8sV0FBWVAsRUFBTyxvREFDbkJRLEtBQU1SLEVBQU8sOENBQ2IzQixVQUFXMkIsRUFBTyw4REFDbEJTLG9CQUFxQlQsRUFBTyxtRUFHNUJVLFFBQVNWLEVBQU8seURBR2hCVyxXQUFZWCxFQUFPLGlGQUduQlksb0JBQXFCWixFQUFPLG1JQUM1QmEsWUFBYWIsRUFBTyxpSEFFcEJILE9BQVFHLEVBQU8sa0ZBR2ZaLE9BQVNZLEVBQU8sd0NBRWhCYyxZQUFhZCxFQUFPLHdDQUdwQmUsT0FBUSxpQ0FDUkMsV0FBWSx1REFDWkMsUUFBUyx5REFHVEMsVUFBVyxnREFDWEMsWUFBYSwyQ0FDYkMsa0JBQW1CLDRDeUdWdUJDLElBQzlDbm5DLEdBQUs2bEMsRUFBS0YsT0FBU0EsR0FDZHZsQyxLQUFLLFNBQVN2TixHQUVWLElBQUtBLEVBQUsvQyxlQUFlLFFBQVMsS0FBTSwrQ0FDeEMsR0FBc0IsR0FBbEIrQyxFQUFLcXRDLEtBQUt2dUMsT0FFVixNQURBNG5DLE1BQU0seUJBQTJCb00sR0FDM0IsaUNBRVYsR0FBSTl5QyxFQUFLcXRDLEtBQUt2dUMsT0FBTyxFQUFHLENBQ3BCLElBQUl5MUMsRUFBV3YwQyxFQUFLcXRDLEtBQUs3bUMsT0FBUXNXLEdBQ3RCQSxFQUFFMDNCLGlCQUFpQjFCLEVBQU8vckIsZUFBaUJqSyxFQUFFMjNCLFdBQWEzQixFQUFPL3JCLGVBRTVFLEdBQUl3dEIsRUFBU3oxQyxPQUFTLEVBRWxCLE1BREE0bkMsTUFBTSw2Q0FDQSw0Q0FHTjFtQyxFQUFLcXRDLEtBQU9rSCxFQUdwQixNQUFNbEgsRUFBT3J0QyxFQUFLcXRDLEtBQUssR0FDdkIsUUFBYTk3QixJQUFUODdCLEVBRUEsTUFEQTNHLE1BQU0seUJBQTJCb00sR0FDM0IsaUNBRVYsTUFBTTJCLEVBQVlwSCxFQUFLb0gsVUFHakJDLEdBQ0h2bkMsR0FBSzZsQyxFQUFLWCxRQUNWbGxDLEdBQUs2bEMsRUFBS1Usb0JBQXNCZSxHQUNoQ3RuQyxHQUFLNmxDLEVBQUsxQixVQUFZbUQsR0FDdEJ0bkMsR0FBSzZsQyxFQUFLUSxXQUFhaUIsR0FDdkJ0bkMsR0FBSzZsQyxFQUFLTyxZQUFja0IsR0FDeEJ0bkMsR0FBSzZsQyxFQUFLSyxRQUFVb0IsR0FDcEJ0bkMsR0FBSzZsQyxFQUFLTSxjQUFnQm1CLEdBQzFCdG5DLEdBQUs2bEMsRUFBS1MsS0FBT2dCLElBR3BCRSxRQUFRQyxJQUFJRixHQUNQbm5DLEtBQUssU0FBUyt2QixHQUNaLE1BQU0rVCxFekdaMUIsU0FBNkJsa0MsR0FDekIsTUFBTXhFLEVBQU8sbUJBQ2IsSUFBSXdFLEVBQUtsUSxlQUFlMEwsR0FBTyxLQUFNLCtDQUFpREEsRUFDdEYsTUFBTTBvQyxFQUFVbGtDLEVBQUt4RSxHQU9yQixPQUpDLHFCQUFzQixtQkFBb0IsWUFBWTRELFFBQVN2SCxJQUM1RCxJQUFLcXNDLEVBQVEsR0FBR3AwQyxlQUFlK0gsR0FBSSxLQUFNLCtDQUFpREEsSUFHdkZxc0MsRXlHRXlCd0QsQ0FBYXZYLEVBQUssSUFDOUJnUSxFQUFRaFosR0FBZ0JnSixFQUFLLElBQzdCaVEsRUFBZWpaLEdBQWdCZ0osRUFBSyxJQUNwQzhTLEV6R29JeEIsU0FBaUNqakMsR0FDN0IsTUFBTXhFLEVBQU8sYUFDYixJQUFJd0UsRUFBS2xRLGVBQWUwTCxHQUFPLGlDQVUvQixPQVBDLGVBQWdCLFFBQVMsT0FBTzRELFFBQVNzRSxJQUN0QyxJQUFJMUQsRUFBS3hFLEdBQU0sR0FBRzFMLGVBQWU0VCxHQUU3QixNQURBMGpCLFFBQVF0bEIsTUFBTWpLLEdBQ1Isb0RBQXNENkwsSUFJN0QxRCxFQUFLeEUsR0FBTVQsS0FBSyxDQUFDeEgsRUFBR0MsTUFDWmlILEtBQUs4ZCxJQUFJaGxCLEVBQUVzZ0IsSUFBTXRnQixFQUFFb04sT0FBUyxHQUM1QmxHLEtBQUs4ZCxJQUFJL2tCLEVBQUVxZ0IsSUFBTXJnQixFQUFFbU4sT0FBUyxLeUdsSlpnbkMsQ0FBaUJ4WCxFQUFLLElBQ2pDK1MsRXpHMEd4QixTQUEyQmxqQyxHQUV2QixJQUFJQSxFQUFLbFEsZUFESSxRQUNrQixLQUFNLHdEQUNyQyxPQUFPa1EsRUFBUyxLQUFFb3ZCLE9BQU8sQ0FBQzc3QixFQUFHc0UsTUFFeEIsZUFBZ0IsYUFBYyxRQUFTLE1BQU8sYUFBYyxVQUFVdUgsUUFBU3NFLElBQzVFLElBQUk3TCxFQUFFL0gsZUFBZTRULEdBRWpCLE1BREEwakIsUUFBUXRsQixNQUFNakssR0FDUixvREFBc0Q2TCxTQUcxQ1UsSUFBdEI3USxFQUFFc0UsRUFBRTZwQyxnQkFBNkJudUMsRUFBRXNFLEVBQUU2cEMsa0JBQ3pDN3BDLEVBQUUrdkMsTUFBUS92QyxFQUFFZ3dDLFdBQ1pod0MsRUFBRXd2QixXQUFheHZCLEVBQUU4SSxNQUNqQjlJLEVBQUV5dkIsU0FBV3p2QixFQUFFZ2MsSUFDZnRnQixFQUFFc0UsRUFBRTZwQyxjQUFjM3NDLEtBQUs4QyxHQUNoQnRFLE95RzFId0J1MEMsQ0FBVzNYLEVBQUssSUFDL0JrUSxFekcyRXhCLFNBQStCcmdDLEdBRTNCLE1BQU14RSxFQUFPLDJCQUNiLElBQUl3RSxFQUFLbFEsZUFBZTBMLEdBQU8sS0FBTSw0Q0FBOENBLEVBVW5GLE9BUEMscUJBQXNCLGNBQWM0RCxRQUFTdkgsSUFFMUMsSUFBSW1JLEVBQUt4RSxHQUFNLEdBQUcxTCxlQUFlK0gsR0FFN0IsTUFEQXV2QixRQUFRdGxCLE1BQU05QixFQUFLeEUsR0FBTSxJQUNuQix3REFBMEQzRCxJQUdqRW1JLEVBQUt4RSxHQUFNbkMsT0FBUXhCLEdBQTBCLFNBQXRCQSxFQUFFa3RDLG9CQUNmN3FDLElBQUtyQyxJQUNGLElBQUlpckMsRUFBTWpyQyxFQUFFK29DLFdBQVcxc0MsTUFBTSxLQUM3QixPQUNJMHpDLE1BQU85RSxFQUFJLEdBQ1h6YixXQUFZeWIsRUFBSSxHQUNoQnhiLFNBQVV3YixFQUFJLEdBQ2RsQyxXQUFZL29DLEVBQUUrb0MsY3lHL0ZObUgsQ0FBZTVYLEVBQUssSUFDaEM2WCxFekd3TXhCLFNBQXdDbjFDLEVBQU1vM0IsR0FBTyxFQUFNYyxFQUFPLEdBQzlELE1BQU12dkIsRUFBTywyQkFDYixJQUFJM0ksRUFBSy9DLGVBQWUwTCxHQUFPLDJDQUUvQixNQUFNNmtDLEVBQVl4dEMsRUFBSzJJLEdBR3ZCLFFBQWtCNEksSUFBZGk4QixHQUErQyxHQUFwQkEsRUFBVTF1QyxPQXlCekMsT0FsQkEwdUMsRUFBVWpoQyxRQUFTdkgsS0FDZCxxQkFBc0IsYUFBYyxTQUFVLGFBQWF1SCxRQUFTc0UsSUFDakUsSUFBSzdMLEVBQUUvSCxlQUFlNFQsR0FFbEIsTUFEQTBqQixRQUFRdGxCLE1BQU1qSyxHQUNSLHlEQUEyRDZMLElBR3pFLElBQUl1a0MsRUFBU3B3QyxFQUFFb3dDLE9BQ1hDLEVBQVdyd0MsRUFBRWt0QyxtQkFDakJsdEMsRUFBRXF3QyxTQUFXQSxFQUNicndDLEVBQUVvekIsR0FBS3B6QixFQUFFeXZDLFVBQ1R6dkMsRUFBRTRCLEVBQUk1QixFQUFFK29DLFdBQ1Ivb0MsRUFBRWlhLEVBQUlvMkIsRUFDTnJ3QyxFQUFFRixNQUFRc3lCLEVBQU94dkIsS0FBSzB0QyxNQUFNekgsT0FBT3VILEVBQVNsZCxJQUFTMlYsT0FBT3VILEdBQzVEcHdDLEVBQUUraEMsY0FBZ0I4RyxPQUFPdUgsS0FJdEI1SCxFQUFVdGxDLEtBQUssQ0FBQ3hILEVBQUVDLElBQ2pCRCxFQUFFcXRDLFdBQVdwdEMsRUFBRW90QyxXQUFtQixFQUM3QnJ0QyxFQUFFcXRDLFdBQVdwdEMsRUFBRW90QyxZQUFvQixFQUNyQyxHQTNCUHhaLFFBQVFxYSxLQUFLLDBCeUdoTnFCMkcsQ0FBd0JqWSxFQUFLLElBQy9Da1ksRXpHNEp4QixTQUFvQ3gxQyxFQUFNc3RDLEVBQU9sVyxHQUFPLEVBQU1jLEVBQU8sR0FDakUsTUFBTXVkLEVBQVduSSxFQUFNL1EsT0FBTyxDQUFDNzdCLEVBQUdzRSxLQUFLdEUsRUFBRXNFLEVBQUVzcEMsUUFBVXRwQyxFQUFVdEUsT0FDekRpSSxFQUFPLHVCQUNiLElBQUkzSSxFQUFLL0MsZUFBZTBMLEdBQU8sdUNBRS9CLE1BQU0rc0MsRUFBYzExQyxFQUFLMkksR0F3QnpCLE9BdEJDLFNBQVUsU0FBVSxzQkFBc0I0RCxRQUFTdkgsSUFDaEQsSUFBSzB3QyxFQUFZLEdBQUd6NEMsZUFBZStILEdBQUksS0FBTSxvREFBc0RBLElBR3ZHMHdDLEVBQVlucEMsUUFBU3ZILElBQ2pCLE1BQU15dUMsRUFBT2dDLEVBQVN6d0MsRUFBRXNwQyxTQUV2QixNQUFPLFNBQVMvaEMsUUFBUytZLElBQ3RCLElBQUttdUIsRUFBS3gyQyxlQUFlcW9CLEdBQUksS0FBTSw2REFBK0RBLElBRXRHdGdCLEVBQUVzWSxFQUFJbTJCLEVBQUt6eUIsSUFBTXl5QixFQUFLM2xDLE1BQVEsRUFDOUI5SSxFQUFFRixNQUFRK29DLE9BQU83b0MsRUFBRW93QyxRQUFRcHdDLEVBQUVzWSxFQUM3QnRZLEVBQUUraEMsY0FBZ0I4RyxPQUFPN29DLEVBQUVvd0MsUUFBUXB3QyxFQUFFc1ksRUFDakM4WixJQUFRcHlCLEVBQUVGLE1BQVE4QyxLQUFLK3RDLEtBQUszd0MsRUFBRUYsTUFBUSxJQUMxQ0UsRUFBRTRCLEVBQUk1QixFQUFFc3BDLE9BQ1J0cEMsRUFBRWlhLEVBQUlqYSxFQUFFa3RDLG1CQUNSbHRDLEVBQUVvekIsR0FBS3B6QixFQUFFeXZDLFVBQ1R6dkMsRUFBRXd2QixXQUFhaWYsRUFBSzNsQyxNQUNwQjlJLEVBQUV5dkIsU0FBV2dmLEVBQUt6eUIsSUFDbEJoYyxFQUFFMmYsS0FBTyxVQUFZM2YsRUFBRTJmLEtBQU8sWUFDOUIzZixFQUFFcXdDLFNBQVdyd0MsRUFBRWt0QyxxQkFFWndELEVBQVl4dEMsS0FBSyxDQUFDeEgsRUFBRUMsSUFDbkJELEVBQUU4ekIsV0FBVzd6QixFQUFFNnpCLFlBQW9CLEVBQ25DOXpCLEVBQUU4ekIsV0FBVzd6QixFQUFFNnpCLFdBQW1CLEVBQy9CLEd5RzVMdUJvaEIsQ0FBb0J0WSxFQUFLLEdBQUtpUSxHQUNoRCxJQUdJc0ksRUFBZ0JDLEVBQW1CQyxFQUhuQ0MsRXpHb1B4QixTQUEwQ2gyQyxFQUFNbzNCLEdBQU8sRUFBTWMsRUFBTyxHQUNoRSxNQUFNdnZCLEVBQU8sNkJBQ2IsSUFBSTNJLEVBQUsvQyxlQUFlMEwsR0FBTywwREFpQi9CLE9BZkEzSSxFQUFLMkksR0FBTTRELFFBQVN2SCxLQUNmLFNBQVUsZUFBZ0IscUJBQXNCLGFBQWF1SCxRQUFTc0UsSUFDbkUsSUFBSTdMLEVBQUUvSCxlQUFlNFQsR0FFakIsTUFEQTBqQixRQUFRdGxCLE1BQU1qSyxHQUNSLHlEQUEyRDZMLElBR3pFN0wsRUFBRUYsTUFBUXN5QixFQUFPeHZCLEtBQUswdEMsTUFBTXpILE9BQU83b0MsRUFBRW93QyxPQUFTbGQsSUFBUzJWLE9BQU83b0MsRUFBRW93QyxRQUNoRXB3QyxFQUFFK2hDLGNBQWdCOEcsT0FBTzdvQyxFQUFFb3dDLFFBQzNCcHdDLEVBQUU0QixFQUFJNUIsRUFBRTZwQyxhQUNSN3BDLEVBQUVpYSxFQUFJamEsRUFBRWt0QyxtQkFDUmx0QyxFQUFFb3pCLEdBQUtwekIsRUFBRXl2QyxVQUNUenZDLEVBQUVxd0MsU0FBV3J3QyxFQUFFa3RDLHFCQUdabHlDLEVBQUsySSxHeUd2UXlCc3RDLENBQTBCM1ksRUFBSyxJQUloRGtRLEVBQVUxdUMsUUFBVSxRQUVJeVMsSUFBcEI0akMsSUFDQVksRUFBcUJoaEIsR0FBY29nQixFQUFnQjl0QyxJQUFJckMsR0FBR0EsRUFBRUYsT0FBUSxTQUs1RSt3QyxFQUFpQjlnQixHQUFjeWdCLEVBQVludUMsSUFBSXJDLEdBQUdBLEVBQUVGLE9BQVEsU0FDNURneEMsRUFBb0IvZ0IsR0FBY2loQixFQUFlM3VDLElBQUlyQyxHQUFHQSxFQUFFRixPQUFRLFdBR3RFLElBQUl5c0MsT0FBT2hnQyxFQUNYLE1BQU1nM0IsR0FDRjVpQyxLQUFNb3RDLEVBQ054MkMsT0FBUXcyQyxRQUNSalEsUUFBUyxpQkFDVG1ELFFBQVMsaUJBQ1RwOEIsTUFBTyxlQUNQeTVCLFNBQ0k0UyxLQUFNLGdCQUlvQixHQUEvQmxULE1BQU11RixFQUFJekYsV0FBV2hrQyxRQUFha2tDLEVBQUUsVUFBVXI2QixLQUFLLEtBQU00L0IsRUFBSXpGLFNBQVNPLFNBQVNMLEVBQUUsVUFDbkYsVUFBVyxTQUFTejJCLFFBQVNsTSxJQUMxQjJpQyxFQUFFLFVBQVVyNkIsS0FBSyxLQUFNNC9CLEVBQUlsb0MsSUFBTWdqQyxTQUFTTCxNQUFNdUYsRUFBSTVpQyxXQUV4RCxNQUFNd3dDLEtBQWM5SSxFQUFLd0MsZUFBZXhDLEVBQUtvSCxhQUFhcEgsRUFBSytJLGNBQ3pEbHdCLEVBQVE4YyxNQUFNK1AsS0FBVXBiLGNBQWN2eUIsT0FBT3V5QixXQUVuRCxPQUFPanpCLEdBQ0gsSUFBSyxvQkFBcUIsQ0FDdEIsTUFBTTJ4QyxFQUFhLElBQUk3ZSxHQUFvQnRSLEVBQU8sSUFBSyxLQUFNNlIsSUFBSyxHQUFJbHFCLE1BQU8sSUFBS21xQixPQUFRLElBQUt2cUIsS0FBTSxJQUFLLEdBQUksS0FFN0csU0FBVSxjQUFjbEIsUUFBU3NFLElBQzlCLElBQUl5c0IsRUFBSyxHQUFHZ1osU0FBU3I1QyxlQUFlNFQsR0FFaEMsTUFEQTBqQixRQUFRdGxCLE1BQU1xdUIsRUFBSyxHQUFHZ1osVUFDaEIsdURBQXlEemxDLElBR3ZFLElBQUkwbEMsRUFBYWpaLEVBQUssR0FBR2daLFNBQVNqRSxPQUM5Qm1FLEVBQWNsWixFQUFLLEdBQUdnWixTQUFTOUMsV0FDL0JpRCxFekcyTjVCLFNBQW1EejJDLEVBQU1vM0IsR0FBTyxFQUFNYyxFQUFPLEdBQ3pFLE1BQU12dkIsRUFBTyw2QkFDYixJQUFJM0ksRUFBSy9DLGVBQWUwTCxHQUVwQixNQURBNHJCLFFBQVF0bEIsTUFBTWpQLGtFQXFCbEIsT0FqQkFBLEVBQUsySSxHQUFNNEQsUUFBU3ZILEtBQ2YsU0FBVSxlQUFnQixxQkFBc0IsYUFBYXVILFFBQVNzRSxJQUNuRSxJQUFJN0wsRUFBRS9ILGVBQWU0VCxHQUVqQixNQURBMGpCLFFBQVF0bEIsTUFBTWpLLEdBQ1IsMERBQTRENkwsSUFHMUUsTUFBTXVrQyxFQUFTcHdDLEVBQUVvd0MsT0FDWEMsRUFBV3J3QyxFQUFFa3RDLG1CQUNuQmx0QyxFQUFFRixNQUFRc3lCLEVBQU94dkIsS0FBSzB0QyxNQUFNekgsT0FBT3VILEVBQVNsZCxJQUFTMlYsT0FBT3VILEdBQzVEcHdDLEVBQUUraEMsY0FBZ0I4RyxPQUFPdUgsR0FDekJwd0MsRUFBRWlhLEVBQUlqYSxFQUFFNnBDLGFBQ1I3cEMsRUFBRTRCLEVBQUl5dUMsRUFDTnJ3QyxFQUFFb3pCLEdBQUtwekIsRUFBRXl2QyxVQUNUenZDLEVBQUVxd0MsU0FBV0EsSUFHVnIxQyxFQUFLMkksR3lHblA4Qit0QyxDQUFtQ3BaLEVBQUssSUFJOUQsSUFGQWlVLEVBQU8sSUFBSXBLLEdBQWNvUCxFQUFZQyxFQUFhQyxFQUFpQixVQUFXLEVBQUdKLEdBQVksRUFBTSw0QkFBNkJGLE1BQzNIckYsT0FBT3ZJLEVBQUk1aUMsS0FBTTRpQyxFQUFJaHNDLEtBQUssR0FBTSxFQUFNdzdCLElBQUssSUFDM0N5ZSxFQUFZalAsV0FBVyxtQkFBbUIsQ0FDM0MsTUFBTW9QLEVBQVNwRixFQUFLN0osUUFBUUwsUUFBUXBMLE9BQU85cUIsU0FDM0NpL0IsRUFBU2xvQyxLQUFLLENBQUN4SCxFQUFHQyxJQUNWZzJDLEVBQU83NUMsUUFBUTRELEVBQUVtdUMsY0FBZ0I4SCxFQUFPNzVDLFFBQVE2RCxFQUFFa3VDLGVBQXVCLEVBQ3pFOEgsRUFBTzc1QyxRQUFRNEQsRUFBRW11QyxjQUFnQjhILEVBQU83NUMsUUFBUTZELEVBQUVrdUMsY0FBc0IsRUFDckUsR0FJZixNQUVKLElBQUssV0FBWSxDQUNiLEdBQXdCLEdBQXBCckIsRUFBVTF1QyxPQUFhLENBQ3ZCa2tDLE1BQU0rUCxLQUFVenBDLEtBQUsseUNBQ3JCLE1BRUosTUFBTStzQyxFQUFhLElBQUk3ZSxHQUFvQnRSLEVBQU8sSUFBSyxHQUFJNlIsSUFBSyxHQUFJbHFCLE1BQU8sSUFBS21xQixPQUFRLElBQUt2cUIsS0FBTSxJQUFLLEdBQUksSUFDNUcsSUFBSThvQyxFQUFhalosRUFBSyxHQUFHZ1osU0FBU2pFLFFBQ2xDZCxFQUFPLElBQUlwSyxRQUFjNTFCLEVBQVdnbEMsRUFBWXBCLEVBQWlCLE9BQVEsRUFBR2tCLEdBQVksRUFBTSw2QkFBOEJGLE1BQ3ZIckYsT0FBT3ZJLEVBQUk1aUMsS0FBTTRpQyxFQUFJaHNDLEtBQUssR0FBTyxFQUFNdzdCLElBQUssR0FFakQsTUFFSixJQUFLLE9BQVEsQ0FDVCxNQUFNc2UsRUFBYSxJQUFJN2UsR0FBb0J0UixFQUFPLElBQUssR0FBSTZSLElBQUssR0FBSWxxQixNQUFPLElBQUttcUIsT0FBUSxJQUFLdnFCLEtBQU0sSUFBSyxHQUFJLElBQzVHLElBQUk4b0MsRUFBYWpaLEVBQUssR0FBR2daLFNBQVNqRSxRQUNsQ2QsRUFBTyxJQUFJcEssUUFBYzUxQixFQUFXZ2xDLEVBQVlmLEVBQWEsUUFBUyxFQUFHYSxHQUFZLEVBQU0sd0JBQXlCRixNQUMvR3JGLE9BQU92SSxFQUFJNWlDLEtBQU00aUMsRUFBSWhzQyxLQUFLLEdBQU8sRUFBTXc3QixJQUFLLEdBRWpELE1BRUosUUFDSSxLQUFNLCtCQUdkaUwsRUFBRSxZQUFZYSxPQUlkME4sRUFBS3FGLGNBQWNyTyxFQUFJekYsU0FHdkIsTUFBTStULEVBQVVueUMsRUFBSzZpQyxXQUFXLFdBQVcsR0FBRyxHQUN4Q3VQLEdBQ0Zsd0MsRUFBRzJxQyxFQUFLcGEsT0FBT3FCLE9BQU9DLEtBQUs3eEIsRUFDM0JxWSxFQUFHc3lCLEVBQUtwYSxPQUFPcUIsT0FBT0MsS0FBS3JiLEVBQUltMEIsRUFBS3BhLE9BQU9xQixPQUFPQyxLQUFLeFosRUFBSTQzQixFQUMzRGxwQixFQUFHNGpCLEVBQUtwYSxPQUFPcUIsT0FBT0MsS0FBSzlLLEVBQzNCdlEsRUFBRyxLQUlEMjVCLEdBQ0Zud0MsRUFBR2t3QyxFQUFZbHdDLEVBQ2ZxWSxFQUFHNjNCLEVBQVk3M0IsRUFBSTYzQixFQUFZMTVCLEVBQy9CdVEsRUFBR21wQixFQUFZbnBCLEVBQ2Z2USxFQUxVLEdBS0FnekIsRUFBZSxPQUN6QlIsUUFBUyxRQUliLElBQ0kxWCxHQURLaHlCLE1BQVdxaUMsRUFBSWhzQyxPQUFPb00sS0FBSyxVQUNuQm11QyxFQUFZMTVCLEVBQUkyNUIsRUFBcUIzNUIsRUFDakQxWSxFQUFLNmlDLFdBQVcsYUFBWXJQLEVBQVNBLEVBQVMsS0FBSyxLQUFLQSxHQUM3RGh5QixNQUFXcWlDLEVBQUloc0MsT0FBT29NLEtBQUssU0FBVXV2QixHQUdyQyxNQUFNb1osRUFBWSxJQUFJbEUsR0FBVUMsRUFBTUMsRUFBT0MsRUFBY0MsR0FDckR3SixFQUFTekYsRUFBSzVKLGlCQUFpQnByQyxJQUFJaU4sT0FBTyxLQUFLYixLQUFLLEtBQU0sYUFDM0RBLEtBQUsseUJBQTBCbXVDLEVBQVlsd0MsTUFBTWt3QyxFQUFZNzNCLE1BQzdEdmEsRUFBSzZpQyxXQUFXLFlBQVkrSixFQUFVUixPQUFPa0csRUFBUUYsR0FHMUQsTUFBTUcsRUFBcUIsSUFBSTlHLEdBQW1CQyxFQUFVQyxFQUFjL0MsRUFBT3lKLEdBQzNFRyxFQUFlM0YsRUFBSzVKLGlCQUFpQnByQyxJQUFJaU4sT0FBTyxLQUNqRGIsS0FBSyx5QkFBMEJvdUMsRUFBcUJud0MsTUFBTW13QyxFQUFxQjkzQixNQUM5RTJ3QixFQUFVbHJDLEVBQUs2aUMsV0FBVyxXQUFXLE9BQU8sT0FPbEQsT0FOQTBQLEVBQW1CbkcsUUFBTyxFQUFPb0csRUFBY3RILEdBRzNDbHJDLEVBQUs2aUMsV0FBVyxZQTZacEMsU0FBc0NnSyxFQUFNRSxFQUFlQyxHQUN2RCxNQUFNSyxFQUFTUixFQUFLNUosaUJBQWlCcHJDLElBQ3JDLElBQUl1cUIsRUFBSXlxQixFQUFLN0osUUFBUUYsUUFBUXhMLE9BQU83dEIsUUFBUSxHQUFLLEdBR2pENm9CLEdBQWdCLDRCQUE2QithLEVBQU83ckMsT0FBTyxjQUFld3JDLEdBQVk5cUMsRUFBR2tnQixFQUFHN0gsRUFGbEYsS0FFd0YsRUFBTSxFQUFHLEdBQUk3QixFQUFFLEdBQUl1USxFQUFFLElBQUssS0FFNUg3RyxHQUhZLFFBSVV2VixJQUFsQmtnQyxHQUE2QnphLEdBQWdCLHVCQUF3QithLEVBQU83ckMsT0FBTyxjQUFldXJDLEdBQWdCN3FDLEVBQUdrZ0IsRUFBRzdILEVBTGxILEtBS3dILEVBQU0sRUFBRyxJQUFLN0IsRUFBRSxHQUFJdVEsRUFBRSxJQUFLLEtBcmFqSHdwQixDQUE2QjVGLEVBQU13RSxFQUFvQkYsR0ErQ3ZHLFNBQXdCdEUsRUFBTWhKLEdBQ1pnSixFQUFLNkYsY0FBYzdPLEVBQUl0QyxRQUFTc0wsRUFBS3pPLFNBQzNDdVUsd0JBQXdCOU8sRUFBSWpGLFFBQVE0UyxLQUFNM04sRUFBSWhzQyxPQUFRZ3NDLEVBQUk1aUMsZ0JBQWlCNGlDLEVBQUkxK0IsT0FoRDNFeXRDLENBQWUvRixFQUFNaEosR0FFZDdqQyxHQUNILElBQUsscUJBMEl6QixTQUF3QzJzQyxFQUFTRSxFQUFNQyxFQUFnQkMsRUFBZUMsRUFBV0MsRUFBY0MsRUFBY0MsRUFBVUMsR0FDbkksTUFBTUMsRUFBU1IsRUFBSzVKLGlCQUFpQnByQyxJQUMvQnkxQyxFQUFhWCxFQUFROVUsT0FBTyxDQUFDMFYsRUFBS2p0QyxLQUFLaXRDLEVBQUlqdEMsRUFBRWt0QyxvQkFBc0JsdEMsRUFBVWl0QyxPQUM3RW5QLEVBQVV5TyxFQUFLek8sUUFHckJpUCxFQUFPenJDLFVBQVUsbUJBQ1pnRCxLQUFNdEUsUUFBb0J1TSxJQUFoQnlnQyxFQUFXaHRDLEdBQWVndEMsRUFBV2h0QyxHQUFHbXRDLGlCQUFpQm50QyxHQUNuRWpFLE1BQU0sU0FBVSxXQUdyQmd4QyxFQUFPN3JDLE9BQU8sWUFBWUksVUFBVSxtQkFDL0J0RyxLQUFLdXhDLEVBQUs3SixRQUFRRixRQUFReEwsT0FBTzdxQixVQUNqQ3JSLFFBQ0EwSixPQUFPLFFBQ1BiLEtBQUssSUFBTTNELEdBQUl1c0MsRUFBSzdKLFFBQVFGLFFBQVF4TCxPQUFPaDNCLElBQzNDMkQsS0FBSyxJQUFLNG9DLEVBQUs3SixRQUFRRixRQUFRdkwsT0FBTzl0QixRQUFRLEdBQUssR0FDbkR4RixLQUFLLFFBQVM0b0MsRUFBSzdKLFFBQVFGLFFBQVF4TCxPQUFPaHJCLGFBQzFDckksS0FBSyxTQUFVLEdBQ2ZVLFFBQVEsa0JBQWtCLEdBQzFCdEksTUFBTSxPQUFTaUUsT0FBUWd0QyxFQUFXaHRDLEdBQUdvdEMsWUFFdENiLEVBQUs3SixRQUFRRixRQUFRdkwsT0FBTzlxQixTQUFTclMsT0FBUyxJQUU3Q2l6QyxFQUFPN3JDLE9BQU8sWUFBWUksVUFBVSxlQUNoQ3RHLEtBQUt1eEMsRUFBSzdKLFFBQVFGLFFBQVF4TCxPQUFPN3FCLFVBQ2pDclIsUUFDQTBKLE9BQU8sUUFDUGIsS0FBSyxJQUFNM0QsR0FBSXVzQyxFQUFLN0osUUFBUUYsUUFBUXhMLE9BQU9oM0IsSUFDM0MyRCxLQUFLLElBQUs0b0MsRUFBSzdKLFFBQVFGLFFBQVF2TCxPQUFPOXRCLFFBQVEsR0FBSyxJQUNuRHhGLEtBQUssUUFBUzRvQyxFQUFLN0osUUFBUUYsUUFBUXhMLE9BQU9ockIsYUFDMUNySSxLQUFLLFNBQVUsR0FDZlUsUUFBUSxjQUFjLEdBQ3RCdEksTUFBTSxPQUFTaUUsT0FBUWd0QyxFQUFXaHRDLEdBQUdvdEMsWUFLOUNMLEVBQU96ckMsVUFBVSxtQkFDWmpDLEdBQUcsWUFBYSxXQUNaNkIsRUFBTzVJLE1BQ0grTCxRQUFRLGVBQWUsS0FHL0JoRixHQUFHLFdBQVksV0FDWDZCLEVBQU81SSxNQUNIK0wsUUFBUSxlQUFlLEtBRy9CaEYsR0FBRyxRQUFTLFNBQVNXLEdBQ2xCK3NDLEVBQU96ckMsVUFBVSxtQkFBbUIrQyxRQUFRLFdBQVcsR0FDdkRuRCxFQUFPNUksTUFBTStMLFFBQVEsV0FBVyxHQUNoQyxNQUFNZ3BDLEVBQVNydEMsRUFDZixJQUFJUixPQUNpQitNLElBQWpCcWdDLElBQTRCcHRDLEVBQUlvdEMsRUFBYXByQyxPQUFRaEMsR0FBSUEsRUFBRTB0QyxvQkFBb0JHLElBQ3hFUixFQUFTcnJDLE9BQVEyYyxHQUFJQSxFQUFFK3VCLG9CQUFvQkcsR0FBdEQsTUFJTUcsRUFBYzFWLEtBQ2YzckIsUUFBUXRKLEdBQUlpcUMsRUFBWXpxQyxJQUFJckMsR0FBR0EsRUFBRUYsUUFBU21KLEdBQUk2akMsRUFBWXpxQyxJQUFJckMsR0FBR0EsRUFBRUYsVUFDbkVxSixPQUFPLEdBQUksTUFDVnNrQyxFQUFVWCxFQUFZdHJDLE9BQVFrc0MsR0FBTUEsRUFBSVIsb0JBQW9CRyxHQUVsRWIsRUFBZW1CLFNBQVNGLEVBQVNkLEVBQWNhLEVBQWFSLEVBQVdLLEdBQVFGLGtCQURsRSxLQVFyQkosRUFBT3pyQyxVQUFVLGlCQUNaakMsR0FBRyxZQUFhLFNBQVNXLEdBQ3RCLE1BQU00aEMsRUFBVzFnQyxFQUFPNUksTUFDeEJpMEMsRUFBSzdKLFFBQVFGLFFBQVFYLGNBQWNELEdBQ25DLE1BQU15TCxPQUE2QjlnQyxJQUFwQnlnQyxFQUFXaHRDLEVBQUU0QixHQUFpQjVCLEVBQUU0QixFQUFFb3JDLEVBQVdodEMsRUFBRTRCLEdBQUd1ckMsaUJBQzNEcnRDLEVBQVFnM0IsV0FBVzkyQixFQUFFK2hDLGNBQWN4aEIsaUJBQWlCcUIsWUFBWSxHQUN0RWtjLEVBQVFHLGdCQUFnQm9QLG1CQUF3QnJ0QyxFQUFFb3pCLFdBQVdwekIsRUFBRTJmLFNBQWdCLEdBQVA3ZixFQUFTLEtBQUtBLE9BRXpGVCxHQUFHLFdBQVksU0FBU1csR0FDckIrc0MsRUFBT3pyQyxVQUFVLEtBQUsrQyxRQUFRLGVBQWUsR0FDN0N5NUIsRUFBUWUsU0FJaEJrTyxFQUFPenJDLFVBQVUsbUJBQ1pqQyxHQUFHLFlBQWEsU0FBU1csR0FDdEJrQixFQUFPNUksTUFBTStMLFFBQVEsZUFBZSxHQUdwQyxNQUFNK3VCLEVBQUtwekIsRUFBRTJHLFFBQVEsSUFBSyxLQUMxQm9tQyxFQUFPN3JDLFdBQVdreUIsS0FBTTl4QixVQUFVLGlCQUFpQitDLFFBQVEsZUFBZSxHQUMxRTBvQyxFQUFPN3JDLFdBQVdreUIsS0FBTTl4QixVQUFVLFdBQVcrQyxRQUFRLGVBQWUsS0FFdkVoRixHQUFHLFdBQVksV0FDWjZCLEVBQU81SSxNQUFNK0wsUUFBUSxlQUFlLEdBQ3BDMG9DLEVBQU96ckMsVUFBVSxpQkFBaUIrQyxRQUFRLGVBQWUsR0FDekQwb0MsRUFBT3pyQyxVQUFVLFdBQVcrQyxRQUFRLGVBQWUsS0FFdERoRixHQUFJLFFBQVMsY0E1T0VrekMsQ0FBK0JsRyxFQUFTRSxFQUFNMEYsRUFBb0JsQixFQUFvQkYsRUFBZ0JDLEVBQW1CWCxFQUFpQkssRUFBYVEsR0FDdkpuRCxHQUF3QnRCLEdBQ3hCLE1BRUosSUFBSyxXQUNELEdBQXdCLEdBQXBCL0QsRUFBVTF1QyxPQUFhLE1BQzNCc3lDLEdBQWtCQyxFQUFTQyxFQUFXQyxFQUFNMEYsRUFBb0JsQixFQUFvQkYsRUFBZ0JDLEVBQW1CWCxFQUFpQkssRUFBYVEsR0FvUzdLLFNBQStCM0UsRUFBU0MsRUFBV0MsR0FDL0MsTUFBTVEsRUFBU1IsRUFBSzVKLGlCQUFpQnByQyxJQUMvQnVtQyxFQUFVeU8sRUFBS3pPLFFBQ2ZrUCxFQUFhWCxFQUFROVUsT0FBTyxDQUFDMFYsRUFBS2p0QyxLQUFLaXRDLEVBQUlqdEMsRUFBRWt0QyxvQkFBc0JsdEMsRUFBVWl0QyxPQUduRkYsRUFBT3pyQyxVQUFVLGlCQUNaakMsR0FBRyxZQUFhLFNBQVNXLEdBQ3RCLE1BQU00aEMsRUFBVzFnQyxFQUFPNUksTUFDeEJpMEMsRUFBSzdKLFFBQVFGLFFBQVFYLGNBQWNELEdBQ25DLE1BQU15TCxPQUE2QjlnQyxJQUFwQnlnQyxFQUFXaHRDLEVBQUVpYSxHQUFpQmphLEVBQUU0QixFQUFFb3JDLEVBQVdodEMsRUFBRWlhLEdBQUdrekIsaUJBQzNEcUYsRUFBT2xHLEVBQVU5RCxVQUFVaG5DLE9BQVFoQyxHQUFJQSxFQUFFdXBDLFlBQWMvb0MsRUFBRTRCLElBQU1wQyxFQUFFK3ZDLFVBQVUsR0FDM0V6dkMsRUFBUWczQixXQUFXOTJCLEVBQUUraEMsY0FBY3hoQixpQkFBaUJxQixZQUFZLEdBQ3RFa2MsRUFBUUcsZ0JBQWdCb1Asb0JBQXlCbUYsRUFBS3hJLGdCQUFnQm5CLE9BQU8ySixFQUFLL2lCLFVBQVlvWixPQUFPMkosRUFBS2hqQix3QkFBd0J4dkIsRUFBRTJmLFNBQWdCLEdBQVA3ZixFQUFTLEtBQUtBLE9BRTlKVCxHQUFHLFdBQVksU0FBU1csR0FDckIrc0MsRUFBT3pyQyxVQUFVLEtBQUsrQyxRQUFRLGVBQWUsR0FDN0N5NUIsRUFBUWUsU0FJaEJrTyxFQUFPenJDLFVBQVUsbUJBQ1pLLEtBQUssV0FFRixNQUFNOHdDLEVBQVN2eEMsRUFBTzVJLE1BQ2hCbzZDLEVBQU1ELEVBQU9udUMsT0FDbkJtdUMsRUFBTzl1QyxLQUFLLFFBQVMrdUMsS0FDckJELEVBQU9wdUMsZUFBZXF1QyxLQUFPLEdBRzdCLE1BQU1GLEVBQU9sRyxFQUFVOUQsVUFBVWhuQyxPQUFReEIsR0FBSUEsRUFBRStvQyxlQUFpQjJKLE1BQVUxeUMsRUFBRXV2QyxVQUFVLFFBQ3pFaGpDLElBQVRpbUMsR0FBb0JDLEVBQU9udUMsS0FBS2t1QyxFQUFLeEksZUFFNUMzcUMsR0FBRyxZQUFhLFdBQ2IsTUFBTXF6QyxFQUFNeHhDLEVBQU81SSxNQUFNcUwsS0FBSyxNQUM5QnpDLEVBQU81SSxNQUFNK0wsUUFBUSxlQUFlLEdBR3BDMG9DLEVBQU96ckMsa0JBQWtCb3hDLEtBQU9ydUMsUUFBUSxlQUFlLEdBQ3ZELE1BQU1tdUMsRUFBT2xHLEVBQVU5RCxVQUFVaG5DLE9BQVF4QixHQUFJQSxFQUFFK29DLFlBQWMySixJQUFRMXlDLEVBQUV1dkMsVUFBVSxRQUNwRWhqQyxJQUFUaW1DLElBQ0F6RixFQUFPenJDLGtCQUFrQmt4QyxFQUFLMUksVUFBVWhCLGNBQWN6a0MsUUFBUSxlQUFlLEdBQzdFMG9DLEVBQU96ckMsa0JBQWtCa3hDLEVBQUt6SSxRQUFRakIsY0FBY3prQyxRQUFRLGVBQWUsTUFHbEZoRixHQUFHLFdBQVksV0FDWjZCLEVBQU81SSxNQUFNK0wsUUFBUSxlQUFlLEdBQ3BDL0MsRUFBVSxTQUFTK0MsUUFBUSxlQUFlLEdBQzFDL0MsRUFBVSxlQUFlK0MsUUFBUSxlQUFlLEdBQ2hEMG9DLEVBQU96ckMsVUFBVSxTQUFTK0MsUUFBUSxlQUFlLEtBcFZyQ3N1QyxDQUFzQnRHLEVBQVNDLEVBQVdDLEdBQzFDcUIsR0FBb0J2QixFQUFTQyxFQUFXQyxHQUN4Q3NCLEdBQXdCdEIsR0FFeEIsTUFFSixJQUFLLE9BQ0RILEdBQWtCQyxFQUFTQyxFQUFXQyxFQUFNMEYsRUFBb0JsQixFQUFvQkYsRUFBZ0JDLEVBQW1CWCxFQUFpQkssRUFBYVEsR0E0TzdLLFNBQTJCM0UsRUFBU0MsRUFBV0MsR0FDM0MsTUFBTVEsRUFBU1IsRUFBSzVKLGlCQUFpQnByQyxJQUMvQnVtQyxFQUFVeU8sRUFBS3pPLFFBQ2ZrUCxFQUFhWCxFQUFROVUsT0FBTyxDQUFDMFYsRUFBS2p0QyxLQUFLaXRDLEVBQUlqdEMsRUFBRWt0QyxvQkFBc0JsdEMsRUFBVWl0QyxPQUluRkYsRUFBT3pyQyxVQUFVLGlCQUNaakMsR0FBRyxZQUFhLFNBQVNXLEdBQ3RCLE1BQU00aEMsRUFBVzFnQyxFQUFPNUksTUFDeEJpMEMsRUFBSzdKLFFBQVFGLFFBQVFYLGNBQWNELEdBQ25DLE1BQU15TCxPQUE2QjlnQyxJQUFwQnlnQyxFQUFXaHRDLEVBQUVpYSxHQUFpQmphLEVBQUU0QixFQUFFb3JDLEVBQVdodEMsRUFBRWlhLEdBQUdrekIsaUJBQzNEcnRDLEVBQVFnM0IsV0FBVzkyQixFQUFFK2hDLGNBQWN4aEIsaUJBQWlCcUIsWUFBWSxHQUN0RWtjLEVBQVFHLGdCQUFnQm9QLGdCQUFxQnJ0QyxFQUFFc3BDLGVBQWV0cEMsRUFBRXd2QixnQkFBZ0J4dkIsRUFBRXl2QixhQUFhb1osT0FBTzdvQyxFQUFFeXZCLFVBQVVvWixPQUFPN29DLEVBQUV3dkIsWUFBYyxhQUFheHZCLEVBQUUyZixTQUFnQixHQUFQN2YsRUFBUyxLQUFLQSxPQUVsTFQsR0FBRyxXQUFZLFNBQVNXLEdBQ3JCK3NDLEVBQU96ckMsVUFBVSxLQUFLK0MsUUFBUSxlQUFlLEdBQzdDeTVCLEVBQVFlLFNBSWhCa08sRUFBT3pyQyxVQUFVLG1CQUNaSyxLQUFLLFNBQVMzQixHQUVYLE1BQU04b0MsRUFBYTlvQyxFQUFFM0QsTUFBTSxLQUFLLEdBQ2hDNkUsRUFBTzVJLE1BQU1nTSxhQUFhd2tDLE9BRTdCenBDLEdBQUcsWUFBYSxTQUFTVyxHQUN0QmtCLEVBQU81SSxNQUFNK0wsUUFBUSxlQUFlLEdBR3BDLE1BQU15a0MsRUFBYTlvQyxFQUFFM0QsTUFBTSxLQUFLLEdBQ2hDMHdDLEVBQU96ckMsMEJBQTBCd25DLEtBQWN6a0MsUUFBUSxlQUFlLEtBRXpFaEYsR0FBRyxXQUFZLFdBQ1o2QixFQUFPNUksTUFBTStMLFFBQVEsZUFBZSxHQUNwQzBvQyxFQUFPenJDLFVBQVUsaUJBQWlCK0MsUUFBUSxlQUFlLEtBL1E3Q3V1QyxDQUFrQnZHLEVBQVNDLEVBQVdDLEdBQ3RDcUIsR0FBb0J2QixFQUFTQyxFQUFXQyxHQUN4Q3NCLEdBQXdCdEIsR0FFeEIsTUFFSixRQUNJLEtBQU0sdUJBR25Cc0csTUFBTSxTQUFTL2dCLEdBQ2R2QyxRQUFRdGxCLE1BQU02bkIsR0FDZGtNLEVBQUUsWUFBWWEsV0FHakJnVSxNQUFNLFNBQVMvZ0IsR0FDWnZDLFFBQVF0bEIsTUFBTTZuQixHQUNka00sRUFBRSxZQUFZYSJ9
