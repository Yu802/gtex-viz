var IsoformExpression=function(t){"use strict";var e="http://www.w3.org/1999/xhtml",n={svg:"http://www.w3.org/2000/svg",xhtml:e,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},r=function(t){var e=t+="",r=e.indexOf(":");return r>=0&&"xmlns"!==(e=t.slice(0,r))&&(t=t.slice(r+1)),n.hasOwnProperty(e)?{space:n[e],local:t}:t};var a=function(t){var n=r(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,r=this.namespaceURI;return r===e&&n.documentElement.namespaceURI===e?n.createElement(t):n.createElementNS(r,t)}})(n)};function i(){}var o=function(t){return null==t?i:function(){return this.querySelector(t)}};function c(){return[]}var f=function(t){return null==t?c:function(){return this.querySelectorAll(t)}},s=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var u=document.documentElement;if(!u.matches){var l=u.webkitMatchesSelector||u.msMatchesSelector||u.mozMatchesSelector||u.oMatchesSelector;s=function(t){return function(){return l.call(this,t)}}}}var d=s,h=function(t){return new Array(t.length)};function b(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}b.prototype={constructor:b,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var p="$";function g(t,e,n,r,a,i){for(var o,c=0,f=e.length,s=i.length;c<s;++c)(o=e[c])?(o.__data__=i[c],r[c]=o):n[c]=new b(t,i[c]);for(;c<f;++c)(o=e[c])&&(a[c]=o)}function m(t,e,n,r,a,i,o){var c,f,s,u={},l=e.length,d=i.length,h=new Array(l);for(c=0;c<l;++c)(f=e[c])&&(h[c]=s=p+o.call(f,f.__data__,c,e),s in u?a[c]=f:u[s]=f);for(c=0;c<d;++c)(f=u[s=p+o.call(t,i[c],c,i)])?(r[c]=f,f.__data__=i[c],u[s]=null):n[c]=new b(t,i[c]);for(c=0;c<l;++c)(f=e[c])&&u[h[c]]===f&&(a[c]=f)}function y(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var v=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function x(t,e){return t.style.getPropertyValue(e)||v(t).getComputedStyle(t,null).getPropertyValue(e)}function w(t){return t.trim().split(/^|\s+/)}function _(t){return t.classList||new M(t)}function M(t){this._node=t,this._names=w(t.getAttribute("class")||"")}function T(t,e){for(var n=_(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function A(t,e){for(var n=_(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}M.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function S(){this.textContent=""}function E(){this.innerHTML=""}function N(){this.nextSibling&&this.parentNode.appendChild(this)}function k(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function I(){return null}function C(){var t=this.parentNode;t&&t.removeChild(this)}function j(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function D(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var P={},L=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(P={mouseenter:"mouseover",mouseleave:"mouseout"}));function U(t,e,n){return t=F(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function F(t,e,n){return function(r){var a=L;L=r;try{t.call(this,this.__data__,e,n)}finally{L=a}}}function O(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function Y(t,e,n){var r=P.hasOwnProperty(t.type)?U:F;return function(a,i,o){var c,f=this.__on,s=r(e,i,o);if(f)for(var u=0,l=f.length;u<l;++u)if((c=f[u]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=s,c.capture=n),void(c.value=e);this.addEventListener(t.type,s,n),c={type:t.type,name:t.name,value:e,listener:s,capture:n},f?f.push(c):this.__on=[c]}}function H(t,e,n){var r=v(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}var B=[null];function X(t,e){this._groups=t,this._parents=e}function V(){return new X([[document.documentElement]],B)}X.prototype=V.prototype={constructor:X,select:function(t){"function"!=typeof t&&(t=o(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,c,f=e[a],s=f.length,u=r[a]=new Array(s),l=0;l<s;++l)(i=f[l])&&(c=t.call(i,i.__data__,l,f))&&("__data__"in i&&(c.__data__=i.__data__),u[l]=c);return new X(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,c=e[i],s=c.length,u=0;u<s;++u)(o=c[u])&&(r.push(t.call(o,o.__data__,u,c)),a.push(o));return new X(r,a)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,f=r[a]=[],s=0;s<c;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&f.push(i);return new X(r,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),u=-1,this.each(function(t){b[++u]=t}),b;var n,r=e?m:g,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),f=new Array(o),s=new Array(o),u=0;u<o;++u){var l=a[u],d=i[u],h=d.length,b=t.call(l,l&&l.__data__,u,a),p=b.length,y=f[u]=new Array(p),v=c[u]=new Array(p);r(l,d,y,v,s[u]=new Array(h),b,e);for(var x,w,_=0,M=0;_<p;++_)if(x=y[_]){for(_>=M&&(M=_+1);!(w=v[M])&&++M<p;);x._next=w||null}}return(c=new X(c,a))._enter=f,c._exit=s,c},enter:function(){return new X(this._enter||this._groups.map(h),this._parents)},exit:function(){return new X(this._exit||this._groups.map(h),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var f,s=e[c],u=n[c],l=s.length,d=o[c]=new Array(l),h=0;h<l;++h)(f=s[h]||u[h])&&(d[h]=f);for(;c<r;++c)o[c]=e[c];return new X(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=y);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,c=n[i],f=c.length,s=a[i]=new Array(f),u=0;u<f;++u)(o=c[u])&&(s[u]=o);s.sort(e)}return new X(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,c=i.length;o<c;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=r(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):x(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=w(t+"");if(arguments.length<2){for(var r=_(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?T:A)(this,t)}}:e?function(t){return function(){T(this,t)}}:function(t){return function(){A(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?S:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?E:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(N)},lower:function(){return this.each(k)},append:function(t){var e="function"==typeof t?t:a(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?I:"function"==typeof e?e:o(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(C)},clone:function(t){return this.select(t?D:j)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?Y:O,null==n&&(n=!1),r=0;r<o;++r)this.each(c(i[r],e,n));return this}var c=this.node().__on;if(c)for(var f,s=0,u=c.length;s<u;++s)for(r=0,f=c[s];r<o;++r)if((a=i[r]).type===f.type&&a.name===f.name)return f.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return H(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return H(this,t,e)}})(t,e))}};var z=function(t){return"string"==typeof t?new X([[document.querySelector(t)]],[document.documentElement]):new X([[t]],B)},R=function(t){return"string"==typeof t?new X([document.querySelectorAll(t)],[document.documentElement]):new X([null==t?[]:t],B)},q={},W={},G=34,J=10,Z=13;function Q(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var K=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,a=[],i=t.length,o=0,c=0,f=i<=0,s=!1;function u(){if(f)return W;if(s)return s=!1,q;var e,r,a=o;if(t.charCodeAt(a)===G){for(;o++<i&&t.charCodeAt(o)!==G||t.charCodeAt(++o)===G;);return(e=o)>=i?f=!0:(r=t.charCodeAt(o++))===J?s=!0:r===Z&&(s=!0,t.charCodeAt(o)===J&&++o),t.slice(a+1,e-1).replace(/""/g,'"')}for(;o<i;){if((r=t.charCodeAt(e=o++))===J)s=!0;else if(r===Z)s=!0,t.charCodeAt(o)===J&&++o;else if(r!==n)continue;return t.slice(a,e)}return f=!0,t.slice(a,i)}for(t.charCodeAt(i-1)===J&&--i,t.charCodeAt(i-1)===Z&&--i;(r=u())!==W;){for(var l=[];r!==q&&r!==W;)l.push(r),r=u();e&&null==(l=e(l,c++))||a.push(l)}return a}function a(e){return e.map(i).join(t)}function i(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,i=r(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=Q(t);return function(r,a){return e(n(r),a,t)}}(t,e):Q(t)});return i.columns=a||[],i},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(i).join(t)].concat(e.map(function(e){return n.map(function(t){return i(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}};K(","),K("\t");function tt(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var et=function(t,e){return fetch(t,e).then(tt)},nt=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var rt,at,it=(1===(rt=nt).length&&(at=rt,rt=function(t,e){return nt(at(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;rt(t[a],e)<0?n=a+1:r=a}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;rt(t[a],e)>0?r=a:n=a+1}return n}}).right,ot=function(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i},ct=Math.sqrt(50),ft=Math.sqrt(10),st=Math.sqrt(2),ut=function(t,e,n){var r,a,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=lt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(t-c)/o;return r&&i.reverse(),i};function lt(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=ct?10:i>=ft?5:i>=st?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=ct?10:i>=ft?5:i>=st?2:1)}var dt=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},ht=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},bt=function(t,e){var n,r=t.length,a=-1,i=0;if(null==e)for(;++a<r;)(n=+t[a])&&(i+=n);else for(;++a<r;)(n=+e(t[a],a,t))&&(i+=n);return i};function pt(){}function gt(t,e){var n=new pt;if(t instanceof pt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}pt.prototype=gt.prototype={constructor:pt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var mt=function(){var t,e,n,r=[],a=[];function i(n,a,o,c){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var f,s,u,l=-1,d=n.length,h=r[a++],b=gt(),p=o();++l<d;)(u=b.get(f=h(s=n[l])+""))?u.push(s):b.set(f,[s]);return b.each(function(t,e){c(p,e,i(t,a,o,c))}),p}return n={object:function(t){return i(t,0,yt,vt)},map:function(t){return i(t,0,xt,wt)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var o,c=a[i-1];return null!=e&&i>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,xt,wt),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function yt(){return{}}function vt(t,e,n){t[e]=n}function xt(){return gt()}function wt(t,e,n){t.set(e,n)}var _t=Array.prototype,Mt=_t.map,Tt=_t.slice,At={name:"implicit"};function St(){var t,e,n=function t(e){var n=gt(),r=[],a=At;function i(t){var i=t+"",o=n.get(i);if(!o){if(a!==At)return a;n.set(i,o=r.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:Tt.call(e),i.domain=function(t){if(!arguments.length)return r.slice();r=[],n=gt();for(var e,a,o=-1,c=t.length;++o<c;)n.has(a=(e=t[o])+"")||n.set(a,r.push(e));return i},i.range=function(t){return arguments.length?(e=Tt.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(a=t,i):a},i.copy=function(){return t().domain(r).range(e).unknown(a)},i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,c=0,f=0,s=.5;function u(){var n=r().length,u=i[1]<i[0],l=i[u-0],d=i[1-u];t=(d-l)/Math.max(1,n-c+2*f),o&&(t=Math.floor(t)),l+=(d-l-t*(n-c))*s,e=t*(1-c),o&&(l=Math.round(l),e=Math.round(e));var h=ot(n).map(function(e){return l+t*e});return a(u?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),u()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],u()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,u()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,u()):o},n.padding=function(t){return arguments.length?(c=f=Math.max(0,Math.min(1,t)),u()):c},n.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),u()):c},n.paddingOuter=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),u()):f},n.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),u()):s},n.copy=function(){return St().domain(r()).range(i).round(o).paddingInner(c).paddingOuter(f).align(s)},u()}var Et=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Nt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function kt(){}var It="\\s*([+-]?\\d+)\\s*",$t="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ct="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jt=/^#([0-9a-f]{3})$/,Dt=/^#([0-9a-f]{6})$/,Pt=new RegExp("^rgb\\("+[It,It,It]+"\\)$"),Lt=new RegExp("^rgb\\("+[Ct,Ct,Ct]+"\\)$"),Ut=new RegExp("^rgba\\("+[It,It,It,$t]+"\\)$"),Ft=new RegExp("^rgba\\("+[Ct,Ct,Ct,$t]+"\\)$"),Ot=new RegExp("^hsl\\("+[$t,Ct,Ct]+"\\)$"),Yt=new RegExp("^hsla\\("+[$t,Ct,Ct,$t]+"\\)$"),Ht={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Bt(t){var e;return t=(t+"").trim().toLowerCase(),(e=jt.exec(t))?new qt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Dt.exec(t))?Xt(parseInt(e[1],16)):(e=Pt.exec(t))?new qt(e[1],e[2],e[3],1):(e=Lt.exec(t))?new qt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ut.exec(t))?Vt(e[1],e[2],e[3],e[4]):(e=Ft.exec(t))?Vt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ot.exec(t))?Wt(e[1],e[2]/100,e[3]/100,1):(e=Yt.exec(t))?Wt(e[1],e[2]/100,e[3]/100,e[4]):Ht.hasOwnProperty(t)?Xt(Ht[t]):"transparent"===t?new qt(NaN,NaN,NaN,0):null}function Xt(t){return new qt(t>>16&255,t>>8&255,255&t,1)}function Vt(t,e,n,r){return r<=0&&(t=e=n=NaN),new qt(t,e,n,r)}function zt(t){return t instanceof kt||(t=Bt(t)),t?new qt((t=t.rgb()).r,t.g,t.b,t.opacity):new qt}function Rt(t,e,n,r){return 1===arguments.length?zt(t):new qt(t,e,n,null==r?1:r)}function qt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Wt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Gt(t,e,n,r)}function Gt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Jt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Et(kt,Bt,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Et(qt,Rt,Nt(kt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new qt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new qt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Et(Gt,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Gt)return new Gt(t.h,t.s,t.l,t.opacity);if(t instanceof kt||(t=Bt(t)),!t)return new Gt;if(t instanceof Gt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,c=i-a,f=(i+a)/2;return c?(o=e===i?(n-r)/c+6*(n<r):n===i?(r-e)/c+2:(e-n)/c+4,c/=f<.5?i+a:2-i-a,o*=60):c=f>0&&f<1?0:o,new Gt(o,c,f,t.opacity)}(t):new Gt(t,e,n,null==r?1:r)},Nt(kt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Gt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Gt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new qt(Jt(t>=240?t-240:t+120,a,r),Jt(t,a,r),Jt(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Zt=Math.PI/180,Qt=180/Math.PI,Kt=.95047,te=1,ee=1.08883,ne=4/29,re=6/29,ae=3*re*re,ie=re*re*re;function oe(t){if(t instanceof ce)return new ce(t.l,t.a,t.b,t.opacity);if(t instanceof de){var e=t.h*Zt;return new ce(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof qt||(t=zt(t));var n=le(t.r),r=le(t.g),a=le(t.b),i=fe((.4124564*n+.3575761*r+.1804375*a)/Kt),o=fe((.2126729*n+.7151522*r+.072175*a)/te);return new ce(116*o-16,500*(i-o),200*(o-fe((.0193339*n+.119192*r+.9503041*a)/ee)),t.opacity)}function ce(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function fe(t){return t>ie?Math.pow(t,1/3):t/ae+ne}function se(t){return t>re?t*t*t:ae*(t-ne)}function ue(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function le(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function de(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}Et(ce,function(t,e,n,r){return 1===arguments.length?oe(t):new ce(t,e,n,null==r?1:r)},Nt(kt,{brighter:function(t){return new ce(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ce(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return t=te*se(t),new qt(ue(3.2404542*(e=Kt*se(e))-1.5371385*t-.4985314*(n=ee*se(n))),ue(-.969266*e+1.8760108*t+.041556*n),ue(.0556434*e-.2040259*t+1.0572252*n),this.opacity)}})),Et(de,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof de)return new de(t.h,t.c,t.l,t.opacity);t instanceof ce||(t=oe(t));var e=Math.atan2(t.b,t.a)*Qt;return new de(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new de(t,e,n,null==r?1:r)},Nt(kt,{brighter:function(t){return new de(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new de(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return oe(this).rgb()}}));var he=-.14861,be=1.78277,pe=-.29227,ge=-.90649,me=1.97294,ye=me*ge,ve=me*be,xe=be*pe-ge*he;function we(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof _e)return new _e(t.h,t.s,t.l,t.opacity);t instanceof qt||(t=zt(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(xe*r+ye*e-ve*n)/(xe+ye-ve),i=r-a,o=(me*(n-a)-pe*i)/ge,c=Math.sqrt(o*o+i*i)/(me*a*(1-a)),f=c?Math.atan2(o,i)*Qt-120:NaN;return new _e(f<0?f+360:f,c,a,t.opacity)}(t):new _e(t,e,n,null==r?1:r)}function _e(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Me(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}Et(_e,we,Nt(kt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new _e(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new _e(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Zt,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new qt(255*(e+n*(he*r+be*a)),255*(e+n*(pe*r+ge*a)),255*(e+n*(me*r)),this.opacity)}}));var Te=function(t){return function(){return t}};function Ae(t,e){return function(n){return t+n*e}}function Se(t){return 1==(t=+t)?Ee:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Te(isNaN(e)?n:e)}}function Ee(t,e){var n=e-t;return n?Ae(t,n):Te(isNaN(t)?e:t)}var Ne=function t(e){var n=Se(e);function r(t,e){var r=n((t=Rt(t)).r,(e=Rt(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Ee(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function ke(t){return function(e){var n,r,a=e.length,i=new Array(a),o=new Array(a),c=new Array(a);for(n=0;n<a;++n)r=Rt(e[n]),i[n]=r.r||0,o[n]=r.g||0,c[n]=r.b||0;return i=t(i),o=t(o),c=t(c),r.opacity=1,function(t){return r.r=i(t),r.g=o(t),r.b=c(t),r+""}}}var Ie=ke(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,c=r<e-1?t[r+2]:2*i-a;return Me((n-r/e)*e,o,a,i,c)}}),$e=(ke(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),a=t[(r+e-1)%e],i=t[r%e],o=t[(r+1)%e],c=t[(r+2)%e];return Me((n-r/e)*e,a,i,o,c)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),Ce=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,je=new RegExp(Ce.source,"g");var De,Pe,Le,Ue,Fe=function(t,e){var n,r,a,i=Ce.lastIndex=je.lastIndex=0,o=-1,c=[],f=[];for(t+="",e+="";(n=Ce.exec(t))&&(r=je.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),c[o]?c[o]+=a:c[++o]=a),(n=n[0])===(r=r[0])?c[o]?c[o]+=r:c[++o]=r:(c[++o]=null,f.push({i:o,x:$e(n,r)})),i=je.lastIndex;return i<e.length&&(a=e.slice(i),c[o]?c[o]+=a:c[++o]=a),c.length<2?f[0]?function(t){return function(e){return t(e)+""}}(f[0].x):function(t){return function(){return t}}(e):(e=f.length,function(t){for(var n,r=0;r<e;++r)c[(n=f[r]).i]=n.x(t);return c.join("")})},Oe=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Te(e):("number"===r?$e:"string"===r?(n=Bt(e))?(e=n,Ne):Fe:e instanceof Bt?Ne:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Oe(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Oe(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}:$e)(t,e)},Ye=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},He=180/Math.PI,Be={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Xe=function(t,e,n,r,a,i){var o,c,f;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(f=t*n+e*r)&&(n-=t*f,r-=e*f),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,f/=c),t*r<e*n&&(t=-t,e=-e,f=-f,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*He,skewX:Math.atan(f)*He,scaleX:o,scaleY:c}};function Ve(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],f=[];return i=t(i),o=t(o),function(t,r,a,i,o,c){if(t!==a||r!==i){var f=o.push("translate(",null,e,null,n);c.push({i:f-4,x:$e(t,a)},{i:f-2,x:$e(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,f),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:$e(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,c,f),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:$e(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,c,f),function(t,e,n,r,i,o){if(t!==n||e!==r){var c=i.push(a(i)+"scale(",null,",",null,")");o.push({i:c-4,x:$e(t,n)},{i:c-2,x:$e(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,f),i=o=null,function(t){for(var e,n=-1,r=f.length;++n<r;)c[(e=f[n]).i]=e.x(t);return c.join("")}}}var ze=Ve(function(t){return"none"===t?Be:(De||(De=document.createElement("DIV"),Pe=document.documentElement,Le=document.defaultView),De.style.transform=t,t=Le.getComputedStyle(Pe.appendChild(De),null).getPropertyValue("transform"),Pe.removeChild(De),t=t.slice(7,-1).split(","),Xe(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Re=Ve(function(t){return null==t?Be:(Ue||(Ue=document.createElementNS("http://www.w3.org/2000/svg","g")),Ue.setAttribute("transform",t),(t=Ue.transform.baseVal.consolidate())?(t=t.matrix,Xe(t.a,t.b,t.c,t.d,t.e,t.f)):Be)},", ",")",")");function qe(t){return function e(n){function r(e,r){var a=t((e=we(e)).h,(r=we(r)).h),i=Ee(e.s,r.s),o=Ee(e.l,r.l),c=Ee(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,r.gamma=e,r}(1)}qe(function(t,e){var n=e-t;return n?Ae(t,n>180||n<-180?n-360*Math.round(n/360):n):Te(isNaN(t)?e:t)});var We=qe(Ee),Ge=function(t){return function(){return t}},Je=function(t){return+t},Ze=[0,1];function Qe(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Ge(e)}function Ke(t,e,n,r){var a=t[0],i=t[1],o=e[0],c=e[1];return i<a?(a=n(i,a),o=r(c,o)):(a=n(a,i),o=r(o,c)),function(t){return o(a(t))}}function tn(t,e,n,r){var a=Math.min(t.length,e.length)-1,i=new Array(a),o=new Array(a),c=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<a;)i[c]=n(t[c],t[c+1]),o[c]=r(e[c],e[c+1]);return function(e){var n=it(t,e,1,a)-1;return o[n](i[n](e))}}var en,nn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},rn=function(t){return(t=nn(Math.abs(t)))?t[1]:NaN},an=function(t,e){var n=nn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")},on={"":function(t,e){t=t.toPrecision(e);t:for(var n,r=t.length,a=1,i=-1;a<r;++a)switch(t[a]){case".":i=n=a;break;case"0":0===i&&(i=a),n=a;break;case"e":break t;default:i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t},"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return an(100*t,e)},r:an,s:function(t,e){var n=nn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(en=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+nn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},cn=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function fn(t){return new sn(t)}function sn(t){if(!(e=cn.exec(t)))throw new Error("invalid format: "+t);var e,n=e[1]||" ",r=e[2]||">",a=e[3]||"-",i=e[4]||"",o=!!e[5],c=e[6]&&+e[6],f=!!e[7],s=e[8]&&+e[8].slice(1),u=e[9]||"";"n"===u?(f=!0,u="g"):on[u]||(u=""),(o||"0"===n&&"="===r)&&(o=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=a,this.symbol=i,this.zero=o,this.width=c,this.comma=f,this.precision=s,this.type=u}fn.prototype=sn.prototype,sn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var un,ln,dn,hn=function(t){return t},bn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];un=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var a=t.length,i=[],o=0,c=e[0],f=0;a>0&&c>0&&(f+c+1>r&&(c=Math.max(1,r-f)),i.push(t.substring(a-=c,a+c)),!((f+=c+1)>r));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):hn,a=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):hn,c=t.percent||"%";function f(t){var e=(t=fn(t)).fill,n=t.align,f=t.sign,s=t.symbol,u=t.zero,l=t.width,d=t.comma,h=t.precision,b=t.type,p="$"===s?a[0]:"#"===s&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",g="$"===s?a[1]:/[%p]/.test(b)?c:"",m=on[b],y=!b||/[defgprs%]/.test(b);function v(t){var a,c,s,v=p,x=g;if("c"===b)x=m(t)+x,t="";else{var w=(t=+t)<0;if(t=m(Math.abs(t),h),w&&0==+t&&(w=!1),v=(w?"("===f?f:"-":"-"===f||"("===f?"":f)+v,x=("s"===b?bn[8+en/3]:"")+x+(w&&"("===f?")":""),y)for(a=-1,c=t.length;++a<c;)if(48>(s=t.charCodeAt(a))||s>57){x=(46===s?i+t.slice(a+1):t.slice(a))+x,t=t.slice(0,a);break}}d&&!u&&(t=r(t,1/0));var _=v.length+t.length+x.length,M=_<l?new Array(l-_+1).join(e):"";switch(d&&u&&(t=r(M+t,M.length?l-x.length:1/0),M=""),n){case"<":t=v+t+x+M;break;case"=":t=v+M+t+x;break;case"^":t=M.slice(0,_=M.length>>1)+v+t+x+M.slice(_);break;default:t=M+v+t+x}return o(t)}return h=null==h?b?6:12:/[gprs]/.test(b)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),v.toString=function(){return t+""},v}return{format:f,formatPrefix:function(t,e){var n=f(((t=fn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(rn(e)/3))),a=Math.pow(10,-r),i=bn[8+r/3];return function(t){return n(a*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),ln=un.format,dn=un.formatPrefix;var pn=function(t,e,n){var r,a=t[0],i=t[t.length-1],o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=ct?a*=10:i>=ft?a*=5:i>=st&&(a*=2),e<t?-a:a}(a,i,null==e?10:e);switch((n=fn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(a),Math.abs(i));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(rn(e)/3)))-rn(Math.abs(t)))}(o,c))||(n.precision=r),dn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,rn(e)-rn(t))+1}(o,Math.max(Math.abs(a),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-rn(Math.abs(t)))}(o))||(n.precision=r-2*("%"===n.type))}return ln(n)};function gn(t){var e=t.domain;return t.ticks=function(t){var n=e();return ut(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return pn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,o=a.length-1,c=a[i],f=a[o];return f<c&&(r=c,c=f,f=r,r=i,i=o,o=r),(r=lt(c,f,n))>0?r=lt(c=Math.floor(c/r)*r,f=Math.ceil(f/r)*r,n):r<0&&(r=lt(c=Math.ceil(c*r)/r,f=Math.floor(f*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[o]=Math.ceil(f/r)*r,e(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[o]=Math.floor(f*r)/r,e(a)),t},t}function mn(){var t=function(t,e){var n,r,a,i=Ze,o=Ze,c=Oe,f=!1;function s(){return n=Math.min(i.length,o.length)>2?tn:Ke,r=a=null,u}function u(e){return(r||(r=n(i,o,f?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,c)))(+e)}return u.invert=function(t){return(a||(a=n(o,i,Qe,f?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},u.domain=function(t){return arguments.length?(i=Mt.call(t,Je),s()):i.slice()},u.range=function(t){return arguments.length?(o=Tt.call(t),s()):o.slice()},u.rangeRound=function(t){return o=Tt.call(t),c=Ye,s()},u.clamp=function(t){return arguments.length?(f=!!t,s()):f},u.interpolate=function(t){return arguments.length?(c=t,s()):c},s()}(Qe,$e);return t.copy=function(){return e=t,mn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp());var e},gn(t)}var yn=new Date,vn=new Date;function xn(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return c},a.filter=function(n){return xn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(a.count=function(e,r){return yn.setTime(+e),vn.setTime(+r),t(yn),t(vn),Math.floor(n(yn,vn))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var wn=xn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});wn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):wn:null};var _n=6e4,Mn=6048e5,Tn=(xn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),xn(function(t){t.setTime(Math.floor(t/_n)*_n)},function(t,e){t.setTime(+t+e*_n)},function(t,e){return(e-t)/_n},function(t){return t.getMinutes()}),xn(function(t){var e=t.getTimezoneOffset()*_n%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),xn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*_n)/864e5},function(t){return t.getDate()-1}));function An(t){return xn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*_n)/Mn})}var Sn=An(0),En=An(1),Nn=(An(2),An(3),An(4)),kn=(An(5),An(6),xn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),xn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));kn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};xn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*_n)},function(t,e){return(e-t)/_n},function(t){return t.getUTCMinutes()}),xn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var In=xn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function $n(t){return xn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Mn})}var Cn=$n(0),jn=$n(1),Dn=($n(2),$n(3),$n(4)),Pn=($n(5),$n(6),xn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),xn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Ln(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Un(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Pn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var On,Yn,Hn,Bn={"-":"",_:" ",0:"0"},Xn=/^\s*\d+/,Vn=/^%/,zn=/[\\^$*+?|[\]().{}]/g;function Rn(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function qn(t){return t.replace(zn,"\\$&")}function Wn(t){return new RegExp("^(?:"+t.map(qn).join("|")+")","i")}function Gn(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Jn(t,e,n){var r=Xn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Zn(t,e,n){var r=Xn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Qn(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Kn(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function tr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function er(t,e,n){var r=Xn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function nr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function rr(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function ar(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function ir(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function or(t,e,n){var r=Xn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function cr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function fr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function sr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ur(t,e,n){var r=Xn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function lr(t,e,n){var r=Xn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function dr(t,e,n){var r=Vn.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function hr(t,e,n){var r=Xn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function br(t,e,n){var r=Xn.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function pr(t,e){return Rn(t.getDate(),e,2)}function gr(t,e){return Rn(t.getHours(),e,2)}function mr(t,e){return Rn(t.getHours()%12||12,e,2)}function yr(t,e){return Rn(1+Tn.count(kn(t),t),e,3)}function vr(t,e){return Rn(t.getMilliseconds(),e,3)}function xr(t,e){return vr(t,e)+"000"}function wr(t,e){return Rn(t.getMonth()+1,e,2)}function _r(t,e){return Rn(t.getMinutes(),e,2)}function Mr(t,e){return Rn(t.getSeconds(),e,2)}function Tr(t){var e=t.getDay();return 0===e?7:e}function Ar(t,e){return Rn(Sn.count(kn(t),t),e,2)}function Sr(t,e){var n=t.getDay();return t=n>=4||0===n?Nn(t):Nn.ceil(t),Rn(Nn.count(kn(t),t)+(4===kn(t).getDay()),e,2)}function Er(t){return t.getDay()}function Nr(t,e){return Rn(En.count(kn(t),t),e,2)}function kr(t,e){return Rn(t.getFullYear()%100,e,2)}function Ir(t,e){return Rn(t.getFullYear()%1e4,e,4)}function $r(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Rn(e/60|0,"0",2)+Rn(e%60,"0",2)}function Cr(t,e){return Rn(t.getUTCDate(),e,2)}function jr(t,e){return Rn(t.getUTCHours(),e,2)}function Dr(t,e){return Rn(t.getUTCHours()%12||12,e,2)}function Pr(t,e){return Rn(1+In.count(Pn(t),t),e,3)}function Lr(t,e){return Rn(t.getUTCMilliseconds(),e,3)}function Ur(t,e){return Lr(t,e)+"000"}function Fr(t,e){return Rn(t.getUTCMonth()+1,e,2)}function Or(t,e){return Rn(t.getUTCMinutes(),e,2)}function Yr(t,e){return Rn(t.getUTCSeconds(),e,2)}function Hr(t){var e=t.getUTCDay();return 0===e?7:e}function Br(t,e){return Rn(Cn.count(Pn(t),t),e,2)}function Xr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Dn(t):Dn.ceil(t),Rn(Dn.count(Pn(t),t)+(4===Pn(t).getUTCDay()),e,2)}function Vr(t){return t.getUTCDay()}function zr(t,e){return Rn(jn.count(Pn(t),t),e,2)}function Rr(t,e){return Rn(t.getUTCFullYear()%100,e,2)}function qr(t,e){return Rn(t.getUTCFullYear()%1e4,e,4)}function Wr(){return"+0000"}function Gr(){return"%"}function Jr(t){return+t}function Zr(t){return Math.floor(+t/1e3)}!function(t){On=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,c=t.months,f=t.shortMonths,s=Wn(a),u=Gn(a),l=Wn(i),d=Gn(i),h=Wn(o),b=Gn(o),p=Wn(c),g=Gn(c),m=Wn(f),y=Gn(f),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return f[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:pr,e:pr,f:xr,H:gr,I:mr,j:yr,L:vr,m:wr,M:_r,p:function(t){return a[+(t.getHours()>=12)]},Q:Jr,s:Zr,S:Mr,u:Tr,U:Ar,V:Sr,w:Er,W:Nr,x:null,X:null,y:kr,Y:Ir,Z:$r,"%":Gr},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return f[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Cr,e:Cr,f:Ur,H:jr,I:Dr,j:Pr,L:Lr,m:Fr,M:Or,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:Jr,s:Zr,S:Yr,u:Hr,U:Br,V:Xr,w:Vr,W:zr,x:null,X:null,y:Rr,Y:qr,Z:Wr,"%":Gr},w={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return T(t,e,n,r)},d:ir,e:ir,f:lr,H:cr,I:cr,j:or,L:ur,m:ar,M:fr,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=u[r[0].toLowerCase()],n+r[0].length):-1},Q:hr,s:br,S:sr,u:Zn,U:Qn,V:Kn,w:Jn,W:tr,x:function(t,e,r){return T(t,n,e,r)},X:function(t,e,n){return T(t,r,e,n)},y:nr,Y:er,Z:rr,"%":dr};function _(t,e){return function(n){var r,a,i,o=[],c=-1,f=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++c<s;)37===t.charCodeAt(c)&&(o.push(t.slice(f,c)),null!=(a=Bn[r=t.charAt(++c)])?r=t.charAt(++c):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),f=c+1);return o.push(t.slice(f,c)),o.join("")}}function M(t,e){return function(n){var r,a,i=Fn(1900);if(T(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=(r=Un(Fn(i.y))).getUTCDay())>4||0===a?jn.ceil(r):jn(r),r=In.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(a=(r=e(Fn(i.y))).getDay())>4||0===a?En.ceil(r):En(r),r=Tn.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Un(Fn(i.y)).getUTCDay():e(Fn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Un(i)):e(i)}}function T(t,e,n,r){for(var a,i,o=0,c=e.length,f=n.length;o<c;){if(r>=f)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=w[a in Bn?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return v.x=_(n,v),v.X=_(r,v),v.c=_(e,v),x.x=_(n,x),x.X=_(r,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Ln);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,Un);return e.toString=function(){return t},e}}}(t),Yn=On.utcFormat,Hn=On.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Yn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Hn("%Y-%m-%dT%H:%M:%S.%LZ");function Qr(t){const e="collapsedGeneModel";if(!t.hasOwnProperty(e))throw"Fatal Error: parseExons input error."+t;return["featureType"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw"Fatal Error: parseExons attr not found: "+n}),t[e].filter(t=>"exon"==t.featureType)}var Kr=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n};Kr("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Kr("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Kr("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Kr("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Kr("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Kr("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Kr("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Kr("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Kr("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var ta=function(t){return Ie(t[t.length-1])};ta(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Kr)),ta(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Kr)),ta(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Kr)),ta(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Kr)),ta(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Kr)),ta(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Kr)),ta(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Kr)),ta(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Kr)),ta(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Kr));var ea=ta(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Kr));ta(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Kr)),ta(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Kr));var na=ta(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Kr));ta(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Kr));var ra=ta(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Kr));ta(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Kr)),ta(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Kr));var aa=ta(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Kr));ta(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Kr)),ta(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Kr)),ta(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Kr));var ia=ta(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Kr)),oa=ta(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Kr)),ca=ta(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Kr)),fa=ta(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Kr)),sa=ta(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Kr)),ua=ta(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Kr));We(we(300,.5,0),we(-240,.5,1));We(we(-100,.75,.35),we(80,1.5,.8)),We(we(260,.75,.35),we(80,1.5,.8)),we();function la(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}la(Kr("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));la(Kr("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),la(Kr("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),la(Kr("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function da(t,e="YlGnBu",n=0){let r=Math.round(dt(t));const a=function t(e){var n=0,r=1,a=!1;function i(t){var i=(t-n)/(r-n);return e(a?Math.max(0,Math.min(1,i)):i)}return i.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],i):[n,r]},i.clamp=function(t){return arguments.length?(a=!!t,i):a},i.interpolator=function(t){return arguments.length?(e=t,i):e},i.copy=function(){return t(e).domain([n,r]).clamp(a)},gn(i)}(function(t){const e={BuGn:ea,OrRd:na,PuBu:ra,YlGnBu:aa,Blues:ia,Oranges:ua,Greens:oa,Purples:fa,Reds:sa,Greys:ca,Grays:ca};if(!e.hasOwnProperty(t)){const e="Color Interpolator Error "+t;throw console.error(e),e}return e[t]}(e));return a.domain([n,r]),a}function ha(t,e,n,r,a,i=10,o=10,c={h:10,w:50},f="h"){const s=n.ticks(i).slice(1),u=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(s).enter().append("g").classed("legend",!0);"h"==f?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${r.x}, ${r.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+c.h*s.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}class ba{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},a=12,i=10){this.margin=r,this.rootW=t<1e3?1e3:t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:a},this.topTreePanel={x:r.left+e,y:r.top,h:n-i,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function pa(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ga(t,e){var n,r,a,i,o,c=new xa(t),f=+t.value&&(c.value=t.value),s=[c];for(null==e&&(e=ma);n=s.pop();)if(f&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)s.push(r=n.children[i]=new xa(a[i])),r.parent=n,r.depth=n.depth+1;return c.eachBefore(va)}function ma(t){return t.children}function ya(t){t.data=t.data.data}function va(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function xa(t){this.data=t,this.depth=this.height=0,this.parent=null}xa.prototype=ga.prototype={constructor:xa,count:function(){return this.eachAfter(pa)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;for(t=n.pop(),e=r.pop();t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return ga(this).eachBefore(ya)}};var wa=Array.prototype.slice,_a=function(t){return t},Ma=1,Ta=2,Aa=3,Sa=4,Ea=1e-6;function Na(t){return"translate("+(t+.5)+",0)"}function ka(t){return"translate(0,"+(t+.5)+")"}function Ia(){return!this.__axis}function $a(t,e){var n=[],r=null,a=null,i=6,o=6,c=3,f=t===Ma||t===Sa?-1:1,s=t===Sa||t===Ta?"x":"y",u=t===Ma||t===Aa?Na:ka;function l(l){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==a?e.tickFormat?e.tickFormat.apply(e,n):_a:a,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=l.selection?l.selection():l,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(d,e).order(),_=w.exit(),M=w.enter().append("g").attr("class","tick"),T=w.select("line"),A=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),w=w.merge(M),T=T.merge(M.append("line").attr("stroke","#000").attr(s+"2",f*i)),A=A.merge(M.append("text").attr("fill","#000").attr(s,f*b).attr("dy",t===Ma?"0em":t===Aa?"0.71em":"0.32em")),l!==v&&(x=x.transition(l),w=w.transition(l),T=T.transition(l),A=A.transition(l),_=_.transition(l).attr("opacity",Ea).attr("transform",function(t){return isFinite(t=y(t))?u(t):this.getAttribute("transform")}),M.attr("opacity",Ea).attr("transform",function(t){var e=this.parentNode.__axis;return u(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===Sa||t==Ta?"M"+f*o+","+g+"H0.5V"+m+"H"+f*o:"M"+g+","+f*o+"V0.5H"+m+"V"+f*o),w.attr("opacity",1).attr("transform",function(t){return u(y(t))}),T.attr(s+"2",f*i),A.attr(s,f*b).text(h),v.filter(Ia).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Ta?"start":t===Sa?"end":"middle"),v.each(function(){this.__axis=y})}return l.scale=function(t){return arguments.length?(e=t,l):e},l.ticks=function(){return n=wa.call(arguments),l},l.tickArguments=function(t){return arguments.length?(n=null==t?[]:wa.call(t),l):n.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:wa.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(a=t,l):a},l.tickSize=function(t){return arguments.length?(i=o=+t,l):i},l.tickSizeInner=function(t){return arguments.length?(i=+t,l):i},l.tickSizeOuter=function(t){return arguments.length?(o=+t,l):o},l.tickPadding=function(t){return arguments.length?(c=+t,l):c},l}const Ca=!1;class ja{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=ga(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),a=0;a<r.length;a++){var i=r[a];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=r[a-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||nt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call((i=this.xScale,$a(Aa,i)).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||nt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").call((i=this.yScale,$a(Sa,i)).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=mn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),Ca&&console.log(this.postorder),this.xScale=St().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),Ca&&console.log(this.postorder),this.yScale=St().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=mn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var Da={value:function(){}};function Pa(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new La(r)}function La(t){this._=t}function Ua(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function Fa(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=Da,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}La.prototype=Pa.prototype={constructor:La,on:function(t,e){var n,r,a=this._,i=(r=a,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)a[n]=Fa(a[n],t.name,e);else if(null==e)for(n in a)a[n]=Fa(a[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=Ua(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new La(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var Oa,Ya,Ha=0,Ba=0,Xa=0,Va=1e3,za=0,Ra=0,qa=0,Wa="object"==typeof performance&&performance.now?performance:Date,Ga="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ja(){return Ra||(Ga(Za),Ra=Wa.now()+qa)}function Za(){Ra=0}function Qa(){this._call=this._time=this._next=null}function Ka(t,e,n){var r=new Qa;return r.restart(t,e,n),r}function ti(){Ra=(za=Wa.now())+qa,Ha=Ba=0;try{!function(){Ja(),++Ha;for(var t,e=Oa;e;)(t=Ra-e._time)>=0&&e._call.call(null,t),e=e._next;--Ha}()}finally{Ha=0,function(){var t,e,n=Oa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Oa=e);Ya=t,ni(r)}(),Ra=0}}function ei(){var t=Wa.now(),e=t-za;e>Va&&(qa-=e,za=t)}function ni(t){Ha||(Ba&&(Ba=clearTimeout(Ba)),t-Ra>24?(t<1/0&&(Ba=setTimeout(ti,t-Wa.now()-qa)),Xa&&(Xa=clearInterval(Xa))):(Xa||(za=Wa.now(),Xa=setInterval(ei,Va)),Ha=1,Ga(ti)))}Qa.prototype=Ka.prototype={constructor:Qa,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ja():+n)+(null==e?0:+e),this._next||Ya===this||(Ya?Ya._next=this:Oa=this,Ya=this),this._call=t,this._time=n,ni()},stop:function(){this._call&&(this._call=null,this._time=1/0,ni())}};var ri=function(t,e,n){var r=new Qa;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},ai=Pa("start","end","interrupt"),ii=[],oi=0,ci=1,fi=2,si=3,ui=4,li=5,di=6,hi=function(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(f){var s,u,l,d;if(n.state!==ci)return c();for(s in a)if((d=a[s]).name===n.name){if(d.state===si)return ri(i);d.state===ui?(d.state=di,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete a[s]):+s<e&&(d.state=di,d.timer.stop(),delete a[s])}if(ri(function(){n.state===si&&(n.state=ui,n.timer.restart(o,n.delay,n.time),o(f))}),n.state=fi,n.on.call("start",t,t.__data__,n.index,n.group),n.state===fi){for(n.state=si,r=new Array(l=n.tween.length),s=0,u=-1;s<l;++s)(d=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++u]=d);r.length=u+1}}function o(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=li,1),i=-1,o=r.length;++i<o;)r[i].call(null,a);n.state===li&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var r in n.state=di,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=Ka(function(t){n.state=ci,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:a,on:ai,tween:ii,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:oi})};function bi(t,e){var n=gi(t,e);if(n.state>oi)throw new Error("too late; already scheduled");return n}function pi(t,e){var n=gi(t,e);if(n.state>fi)throw new Error("too late; already started");return n}function gi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function mi(t,e,n){var r=t._id;return t.each(function(){var t=pi(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return gi(t,r).value[e]}}var yi=function(t,e){var n;return("number"==typeof e?$e:e instanceof Bt?Ne:(n=Bt(e))?(e=n,Ne):Fe)(t,e)};var vi=V.prototype.constructor;var xi=0;function wi(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function _i(){return++xi}var Mi=V.prototype;wi.prototype=function(t){return V().transition(t)}.prototype={constructor:wi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=o(t));for(var r=this._groups,a=r.length,i=new Array(a),c=0;c<a;++c)for(var f,s,u=r[c],l=u.length,d=i[c]=new Array(l),h=0;h<l;++h)(f=u[h])&&(s=t.call(f,f.__data__,h,u))&&("__data__"in f&&(s.__data__=f.__data__),d[h]=s,hi(d[h],e,n,h,d,gi(f,n)));return new wi(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=f(t));for(var r=this._groups,a=r.length,i=[],o=[],c=0;c<a;++c)for(var s,u=r[c],l=u.length,d=0;d<l;++d)if(s=u[d]){for(var h,b=t.call(s,s.__data__,d,u),p=gi(s,n),g=0,m=b.length;g<m;++g)(h=b[g])&&hi(h,e,n,g,b,p);i.push(b),o.push(s)}return new wi(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,f=r[a]=[],s=0;s<c;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&f.push(i);return new wi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var f,s=e[c],u=n[c],l=s.length,d=o[c]=new Array(l),h=0;h<l;++h)(f=s[h]||u[h])&&(d[h]=f);for(;c<r;++c)o[c]=e[c];return new wi(o,this._parents,this._name,this._id)},selection:function(){return new vi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=_i(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],f=c.length,s=0;s<f;++s)if(o=c[s]){var u=gi(o,e);hi(o,t,n,s,c,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new wi(r,this._parents,t,n)},call:Mi.call,nodes:Mi.nodes,node:Mi.node,size:Mi.size,empty:Mi.empty,each:Mi.each,on:function(t,e){var n=this._id;return arguments.length<2?gi(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?bi:pi;return function(){var o=i(this,t),c=o.on;c!==r&&(a=(r=c).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=r(t),a="transform"===n?Re:yi;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttribute(t))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttribute(t)}})(n,a,mi(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,a;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?a:a=e(r=i,n)}}:function(t,e,n){var r,a;return function(){var i=this.getAttribute(t);return i===n?null:i===r?a:a=e(r=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=r(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var r="transform"==(t+="")?ze:yi;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=x(this,t),o=(this.style.removeProperty(t),x(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,a,i;return function(){var o=x(this,t),c=n(this);return null==c&&(this.style.removeProperty(t),c=x(this,t)),o===c?null:o===r&&c===a?i:i=e(r=o,a=c)}}(t,r,mi(this,"style."+t,e)):function(t,e,n){var r,a;return function(){var i=x(this,t);return i===n?null:i===r?a:a=e(r=i,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,a=e.apply(r,arguments);return a&&function(e){r.style.setProperty(t,a(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(mi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=gi(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var a=pi(this,t),i=a.tween;if(i!==n)for(var o=0,c=(r=n=i).length;o<c;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}:function(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=pi(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var c={name:e,value:n},f=0,s=a.length;f<s;++f)if(a[f].name===e){a[f]=c;break}f===s&&a.push(c)}i.tween=a}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){bi(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){bi(this,t).delay=e}})(e,t)):gi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){pi(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){pi(this,t).duration=e}})(e,t)):gi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){pi(this,t).ease=e}}(e,t)):gi(this.node(),e).ease}};var Ti={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ai(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Ti.time=Ja(),Ti;return n}V.prototype.interrupt=function(t){return this.each(function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>fi&&n.state<li,n.state=di,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)})},V.prototype.transition=function(t){var e,n;t instanceof wi?(e=t._id,t=t._name):(e=_i(),(n=Ti).time=Ja(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],f=c.length,s=0;s<f;++s)(o=c[s])&&hi(o,t,e,s,c,n||Ai(o,e));return new wi(r,this._parents,t,e)};class Si{constructor(t,e){$(`#${t}`).show(),this.bar=$("<div/>").addClass("btn-group btn-group-sm").appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadButton(t,e,n,r,a="fa-save"){this.createButton(t,a);z(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);z(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-save"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]);var a=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var a=n[r].cssRules,i=0;i<a.length;i++){var o=a[i];if(void 0!==o.style){var c;try{c=$(t).find(o.selectorText)}catch(t){c=[]}c.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var f=document.createElement("style");return f.setAttribute("type","text/css"),f.innerHTML="<![CDATA[\n"+e+"\n]]>",f}(r.get());a.prepend(i),$("#"+n).html("").hide();var o=$(`#${n}`).append(a).html(),c=new Blob([o],{type:"image/svg+xml"});saveAs(c,e),$(`#${n}`).html("").hide()}}class Ei{constructor(t,e=!1,n=30,r=-40,a=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=a}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),z("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){z("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=L.pageX,e=L.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;z("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){z("#"+this.id).html(t)}}class Ni{constructor(t,e="YlGnBu",n=!0,r=10,a=2){this.data=t,this.useLog=n,this.base=r,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=a,this.colorScheme=e,this.toolbar=void 0,this.tooltip=void 0}createToolbar(t,e){return this.toolbar=new Si(t,e),this.toolbar}createTooltip(t){return this.tooltip=new Ei(t),z(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}drawColorLegend(t,e={x:0,y:0},n=10){ha(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.base)}redraw(t,e,n,r={w:1e3,h:1e3},a=30){this._setXList(r.w,e),this._setYList(r.h,n),this.draw(t,r,a)}draw(t,e={w:1e3,h:600},n=30,r=!0){void 0===this.xList&&this._setXList(e.w),void 0===this.yList&&this._setYList(e.h),void 0===this.colorScale&&(this.colorScale=da(this.data.map(t=>t.value),this.colorScheme));const a=t.selectAll(".exp-map-xlabel").data(this.xList),i=this.yScale.range()[1]+2*this.yScale.bandwidth();a.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}),a.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}).merge(a).text(t=>t),a.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).style("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){z(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){z(this).classed("normal",!0).classed("highlighted",!1)});const o=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);o.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const c=this;o.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class",t=>"exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill",t=>"#eeeeee").on("mouseover",function(t){const e=z(this);c.cellMouseover(e)}).on("mouseout",function(t){z(this);c.cellMouseout()}).merge(o).style("fill",t=>r&&0==t.originalValue?"#DDDDDD":this.colorScale(t.value)),o.exit().remove()}cellMouseout(t){R("*").classed("highlighted",!1)}cellMouseover(t){const e=t.attr("row"),n=t.attr("col");R(".exp-map-xlabel").filter(`.${e}`).classed("highlighted",!0),R(".exp-map-ylabel").filter(`.${n}`).classed("highlighted",!0),t.classed("highlighted",!0)}_setXList(t,e){this.xList=void 0!==e?e:mt().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=St().domain(this.xList).range([0,t]).padding(.05)}_setYList(t,e){this.yList=void 0!==e?e:mt().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=St().domain(this.yList).range([0,t]).padding(.05)}}class ki{constructor(t,e,n,r="YlGnBu",a=2,i=new ba,o=!0,c=10){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new ja(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new ja(this.data.rowTree,"h"),heatmap:new Ni(this.data.heatmap,r,o,c,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.tooltip=void 0,this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Si(t,e),this.toolbar}createTooltip(t){return this.tooltip=new Ei(t),z(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}render(t,e,n=!0,r=!0,a="top",i=10){this._updateConfig(a),this.visualComponents.svg=function(t,e,n,r,a){return void 0===a&&(a=`${t}-svg`),z("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let r=this.visualComponents.svg;const a="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",function(t){z(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);r.selectAll(a).filter(t=>e.includes(t)).classed("highlighted",!0),r.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)}).on("mouseout",function(){z(this).attr("r",2).attr("fill","#333"),r.selectAll(a).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)}),i}_renderHeatmap(t,e,n,r=10){let a=this.visualComponents.svg;const i=this.config.panels.main,o=a.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(a,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var Ii=Math.PI,$i=2*Ii,Ci=$i-1e-6;function ji(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Di(){return new ji}ji.prototype=Di.prototype={constructor:ji,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,c=n-t,f=r-e,s=i-t,u=o-e,l=s*s+u*u;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(l>1e-6)if(Math.abs(u*c-f*s)>1e-6&&a){var d=n-i,h=r-o,b=c*c+f*f,p=d*d+h*h,g=Math.sqrt(b),m=Math.sqrt(l),y=a*Math.tan((Ii-Math.acos((b+l-p)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*s)+","+(e+v*u)),this._+="A"+a+","+a+",0,0,"+ +(u*d>s*h)+","+(this._x1=t+x*c)+","+(this._y1=e+x*f)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e;var o=(n=+n)*Math.cos(r),c=n*Math.sin(r),f=t+o,s=e+c,u=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+f+","+s:(Math.abs(this._x1-f)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+f+","+s),n&&(l<0&&(l=l%$i+$i),l>Ci?this._+="A"+n+","+n+",0,1,"+u+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+u+","+(this._x1=f)+","+(this._y1=s):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=Ii)+","+u+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Pi=function(t){return function(){return t}};function Li(t){this._context=t}Li.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Ui=function(t){return new Li(t)};function Fi(t){return t[0]}function Oi(t){return t[1]}var Yi=function(){var t=Fi,e=Oi,n=Pi(!0),r=null,a=Ui,i=null;function o(o){var c,f,s,u=o.length,l=!1;for(null==r&&(i=a(s=Di())),c=0;c<=u;++c)!(c<u&&n(f=o[c],c,o))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+t(f,c,o),+e(f,c,o));if(s)return i=null,s+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Pi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Pi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Pi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o};function Hi(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Bi(t,e){this._context=t,this._k=(1-e)/6}Bi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Hi(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Hi(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Xi=function t(e){function n(t){return new Bi(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Vi(t){return t<0?-1:1}function zi(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),c=(i*a+o*r)/(r+a);return(Vi(i)+Vi(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function Ri(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function qi(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,c=(i-r)/3;t._context.bezierCurveTo(r+c,a+c*e,i-c,o-c*n,i,o)}function Wi(t){this._context=t}function Gi(t){this._context=t}Wi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:qi(this,this._t0,Ri(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,qi(this,Ri(this,n=zi(this,t,e)),n);break;default:qi(this,this._t0,n=zi(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new Gi(t)}.prototype=Object.create(Wi.prototype)).point=function(t,e){Wi.prototype.point.call(this,e,t)},Gi.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}};class Ji{constructor(t,e,n,r,a=!1){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)):this.exons.sort((t,e)=>Number(e.exonNumber)-Number(t.exonNumber)),this.exonsCurated=n.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)),this.junctions=r.sort((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0),this.isIsoform=a,this.intronLength=0,this.minExonWidth=5}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,r,a){t.selectAll(".junc").style("fill",n=>{const a=e.filter(t=>t.junctionId==n.junctionId)[0],i=r(a.value);return t.selectAll(".junc-curve").filter(`.junc${n.junctionId}`).style("stroke",i),i}),t.selectAll(".exon-curated").style("fill",t=>{const e=n.filter(e=>e.exonId==t.exonId)[0];if(void 0===e)throw`${t.exonId} has no data`;return a(e.value)})}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach((t,e)=>{0==e&&(t.x=0),e>0&&(t.x=this.exons[e-1].x+this.exons[e-1].w+this.xScale(this.intronLength)),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}),this.exonsCurated.forEach((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0===t.oriExon)throw`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`;if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}),this.isIsoform){t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0)}else{this.junctions.forEach(t=>{if(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),t.displayName=t.junctionId,void 0===t.startExon||void 0===t.endExon)t.filtered=!0,console.warn("Can't map junction to exons "+t.junctionId);else{t.displayName=`Exon ${t.startExon.exonNumber} - ${t.endExon.exonNumber}`,t.startExon.exonNumber==t.endExon.exonNumber&&console.warn(t.junctionId+" is in Exon: "+t.startExon.chromStart+" - "+t.startExon.chromEnd),t.filtered=!1;const e=Number(t.chromStart)-Number(t.startExon.chromStart)+1,r=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(e),t.endX=t.endExon.x+this.xScale(r),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber)+1),t.cy<0&&(t.cy=0)}});const e=this.junctions.reduce((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t),{});this.junctions.forEach(t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())});const r=Yi().x(t=>t.x).y(t=>t.y).curve(Xi);this.junctions.filter(t=>!t.filtered).forEach((e,a)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class",`junc-curve junc${e.junctionId}`).attr("d",r).style("stroke","#92bcc9")});const a=t.selectAll(".junc").data(this.junctions.filter(t=>!t.filtered));a.attr("cx",t=>t.cx),a.attr("cy",t=>t.cy),a.enter().append("circle").attr("class",t=>`junc junc${t.junctionId}`).attr("cx",t=>t.cx).attr("cy",t=>t.cy).merge(a).attr("r",4).style("fill","rgb(86, 98, 107)");const i=t.selectAll(".exon").data(this.exons);i.attr("x",t=>t.x),i.attr("y",n),i.enter().append("rect").attr("class",t=>`exon exon${t.exonNumber}`).attr("y",n).attr("rx",2).attr("ry",2).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(i).style("cursor","default"),t.append("text").attr("id","modelInfo").style("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const r=t.selectAll(".exon-curated").data(this.exonsCurated);r.attr("x",t=>t.x),r.attr("y",n),r.enter().append("rect").attr("class",t=>"exon-curated").attr("y",n).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(r).style("fill","#eee").style("cursor","default"),t.append("text").attr("id","modelLabel").style("text-anchor","end").attr("x",this.xScale(0)-5).attr("y",n+7.5).style("font-size",9).text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId)}setXscale(t){this.exons.forEach(t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1});const e=dt(this.exons,t=>t.length),n=[0,e*this.exons.length],r=[0,t];this.xScale=mn().domain(n).range(r);const a=this.xScale.invert(this.minExonWidth),i=bt(this.exons,t=>t.length>a?t.length:a);this.intronLength=(e*this.exons.length-i)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter(e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t);return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class Zi{constructor(t,e,n,r){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=r}showData(t,e,n){t.sort((t,e)=>-(t.originalValue-e.originalValue));const r=t.map(t=>t.transcriptId);this.sortTracks(r),t.forEach(t=>{this.visualDom.select(`#${t.transcriptId.replace(".","_")}`).selectAll(".exon-curated").style("fill",e(t.value))}),this.visualDom.select(".lollipopGraph").remove();const a=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),i=a.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var o;i.append("line").attr("x1",0).attr("y1",t=>this.yScale(t.transcriptId)).attr("y2",t=>this.yScale(t.transcriptId)).style("stroke",t=>e(t.value)).style("stroke-width",2).transition().duration(1e3).attr("x2",t=>n(t.value)),i.append("circle").attr("cx",0).attr("cy",t=>this.yScale(t.transcriptId)).attr("r",5).style("fill",t=>e(t.value)).transition().duration(1e3).attr("cx",t=>n(t.value)),a.append("g").attr("class","lollipop-axis").attr("transform","translate(0,-10)").call((o=n,$a(Ma,o)).ticks(3)),a.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).style("text-anchor","end").style("font-size",9).text("log10(TPM)"),a.append("g").attr("class","lollipop-axis").attr("transform","translate(0,-10)").call(function(t){return $a(Ta,t)}(this.yScale).tickValues([]))}sortTracks(t){console.log(t),this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e,n=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const r=e.selectAll(".isotrack").data(this.isoforms.map(t=>t.transcriptId));r.transition().duration(n).attr("transform",t=>`translate(0, ${this.yScale(t)})`),r.enter().append("g").attr("id",t=>t.replace(".","_")).attr("class","isotrack").attr("transform",t=>"translate(0, 0)").transition().duration(n/2).attr("transform",t=>`translate(0, ${this.yScale(t)})`),t||this._renderModels(this.config.w)}_renderModels(t){this.isoforms.forEach(e=>{const n=new Ji(e,this.modelExons,this.isoformExons[e.transcriptId],[],!0),r=z(`#${e.transcriptId.replace(".","_")}`);n.render(r,{w:t,h:this.yScale.bandwidth()})})}setYscale(t,e){void 0===e&&(e=this.isoforms.map(t=>t.transcriptId)),this.yScale=St().domain(e).range([0,t]).padding(.05)}}function Qi(t,e,n,r,a,i,o,c,f,s){const u=n.visualComponents.svg,l=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});u.selectAll(".exp-map-ylabel").text(t=>void 0!==l[t]?l[t].tissueName:t).style("cursor","pointer").attr("x",n.objects.heatmap.xScale.range()[1]+15),u.select("#heatmap").selectAll(".exp-map-ycolor").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[1]+5).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("exp-map-ycolor",!0).style("fill",t=>l[t].colorHex),u.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[0]-10).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("leaf-color",!0).style("fill",t=>l[t].colorHex),u.selectAll(".exp-map-ylabel").on("mouseover",function(){z(this).classed("highlighted",!0)}).on("click",function(t){u.selectAll(".exp-map-ylabel").classed("clicked",!1),z(this).classed("clicked",!0);const n=t,l=c.filter(t=>t.tissueId==n),d=f.filter(t=>t.tissueId==n);e.changeTextlabel(u.select("#geneModel"),n),e.addData(u.select("#geneModel"),l,d,a,i);const h=mn().domain([ht(s.map(t=>t.value)),dt(s.map(t=>t.value))]).range([0,-100]),b=s.filter(t=>t.tissueId==n);r.showData(b,o,h)})}return t.render=function(t,e,n,r=function(){const t="https://dev.gtexportal.org/rest/v1/";return{geneId:t+"reference/geneId?format=json&geneId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",tissue:t+"dataset/tissueInfo",topInTissueFiltered:t+"expression/topExpressedGenes?datasetId=gtex_v7&filterMtGene=true&sort_by=median&sortDirection=desc&page_size=50&tissueId=",topInTissue:t+"expression/topExpressedGenes?datasetId=gtex_v7&sort_by=median&sortDirection=desc&page_size=50&tissueId=",medExpById:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&page_size=10000&gencodeId=",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",isoformExp:t+"expression/isoformExpression?datasetId=gtex_v7&boxplotDetail=median&gencodeId=",geneModel:t+"reference/collapsedGeneModel?unfiltered=false&release=v7&gencode_id=",geneModelUnfiltered:t+"reference/collapsedGeneModel?unfiltered=true&release=v7&gencode_id=",isoform:t+"reference/transcript?release=v7&gencode_id=",liverGeneExp:"data/top50.genes.liver.genomic.median.tpm.json",cerebellumGeneExp:"data/top.gtex.cerebellum.genes.median.tpm.tsv",mayoGeneExp:"data/gtex+mayo.top.cerebellum_ad.genes.median.tpm.tsv"}}()){et(r.geneId+e).then(function(e){if(!e.hasOwnProperty("geneId"))throw"Parsing Error: attribute geneId doesn't exist.";const a=e.geneId[0];if(void 0===a)throw"Fatal Error: gene not found";const i=a.gencodeId,o=[et(r.tissue),et(r.geneModelUnfiltered+i),et(r.geneModel+i),et(r.isoform+i),et(r.junctionExp+i),et(r.exonExp+i),et(r.isoformExp+i)];Promise.all(o).then(function(e){const r=function(t){if(!t.hasOwnProperty("tissueInfo"))throw"Fatal Error: parseTissues input error.";const e=t.tissueInfo;return["tissueId","tissueName","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Fatal Error: parseTissue attr not found: "+t}),e}(e[0]),i=Qr(e[1]),o=Qr(e[2]),c=function(t){if(!t.hasOwnProperty("transcript"))throw"parseIsoforms input error";return t.transcript.filter(t=>"transcript"==t.featureType).sort((t,e)=>-(Math.abs(t.chromEnd-t.chromStart)+1-(Math.abs(e.chromEnd-e.chromStart)+1)))}(e[3]),f=function(t){if(!t.hasOwnProperty("transcript"))throw"parseIsoforms input error "+t;return t.transcript.filter(t=>"exon"==t.featureType).reduce((t,e)=>(void 0===t[e.transcriptId]&&(t[e.transcriptId]=[]),t[e.transcriptId].push(e),t),{})}(e[3]),s=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"Fatal Error: parseJunctions input error. "+t;return t[e].filter(t=>"Liver"==t.tissueId).map(t=>{let e=t.junctionId.split("_");return{chrom:e[0],chromStart:e[1],chromEnd:e[2],junctionId:t.junctionId}})}(e[4]),u=function(t,e=!0,n=1){const r="medianJunctionExpression";if(!t.hasOwnProperty(r))throw"parseJunctionExpression input error";const a=t[r];return["tissueId","junctionId","data","gencodeId"].forEach(t=>{if(!a[0].hasOwnProperty(t))throw"Fatal Error: parseJunctionExpression attr not found: "+t}),a.forEach(t=>{t.value=e?Math.log10(Number(t.data+n)):Number(t.data),t.x=t.junctionId,t.y=t.tissueId,t.originalValue=Number(t.data),t.id=t.gencodeId}),a.sort((t,e)=>t.junctionId>e.junctionId?1:t.junctionId<e.junctionId?-1:0)}(e[4]),l=function(t,e,n=!0,r=1){const a=e.reduce((t,e)=>(t[e.exonId]=e,t),{}),i="medianExonExpression";if(!t.hasOwnProperty(i))throw"parseExonExpression input error";const o=t[i];return["data","exonId","tissueId"].forEach(t=>{if(!o[0].hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t}),o.forEach(t=>{const e=a[t.exonId];["chromEnd","chromStart"].forEach(t=>{if(!e.hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t}),t.l=e.chromEnd-e.chromStart+1,t.value=Number(t.data)/t.l,t.originalValue=Number(t.data)/t.l,n&&(t.value=Math.log2(t.value+1)),t.x=t.exonId,t.y=t.tissueId,t.id=t.gencodeId,t.chromStart=e.chromStart,t.unit=t.unit+" per base"}),o.sort((t,e)=>t.chromStart<e.chromStart?-1:t.chromStart>e.chromStart?1:0)}(e[5],o);let d=function(t,e=!0,n=1){const r="isoformExpression";if(!t.hasOwnProperty(r))throw"parseIsoformExpression input error";return t[r].forEach(t=>{t.value=e?Math.log10(Number(t.data+n)):Number(t.data),t.originalValue=Number(t.data),t.x=t.transcriptId,t.y=t.tissueId,t.id=t.gencodeId}),t[r]}(e[6]);const h=da(l.map(t=>t.value),"Blues"),b=da(d.map(t=>t.value),"Greys"),p=da(u.map(t=>t.value),"Reds");let g=void 0;const m={root:n,svg:`${n}-svg`,tooltip:"isoformTooltip",toolbar:"isoformToolbar",clone:"isoformClone",buttons:{save:"isoformSave"}};switch(0==$(`#${m.tooltip}`).length&&$("<div/>").attr("id",m.tooltip).appendTo($("body")),["toolbar","clone"].forEach(t=>{$("<div/>").attr("id",m[t]).appendTo($(`#${m.root}`))}),t){case"isoform":{const t=new ba(window.innerWidth,150,100,{top:30,right:350,bottom:200,left:50},12,10);let n=e[6].clusters.tissue,r=e[6].clusters.isoform;(g=new ki(r,n,d,"Greys",5,t,!0,10)).render(m.root,m.svg,!0,!0,top,5),c.sort((t,e)=>{const n=g.objects.columnTree.xScale.domain();return n.indexOf(t.transcriptId)<n.indexOf(e.transcriptId)?-1:n.indexOf(t.transcriptId)>n.indexOf(e.transcriptId)?1:0});break}case"isoformTransposed":{const t=new ba(window.innerWidth,150,100,{top:30,right:350,bottom:200,left:50},12,10);let n=e[6].clusters.tissue,r=e[6].clusters.isoform,a=function(t,e=!0,n=1){const r="isoformExpression";if(!t.hasOwnProperty(r))throw"parseIsoformExpression input error";return t[r].forEach(t=>{t.value=e?Math.log10(Number(t.data+n)):Number(t.data),t.originalValue=Number(t.data),t.y=t.transcriptId,t.x=t.tissueId,t.id=t.gencodeId}),t[r]}(e[6]);(g=new ki(n,r,a,"Greys",5,t,!0,10)).render(m.root,m.svg,!0,!0,top,5),c.sort((t,e)=>{const n=g.objects.rowTree.yScale.domain();return n.indexOf(t.transcriptId)<n.indexOf(e.transcriptId)?-1:n.indexOf(t.transcriptId)>n.indexOf(e.transcriptId)?1:0});break}case"junction":{const t=new ba(window.innerWidth,150,0,{top:30,right:350,bottom:200,left:50},12,10);let n=e[4].clusters.tissue;(g=new ki(void 0,n,u,"Reds",5,t,!0,10)).render(m.root,m.svg,!1,!0,top,5);break}case"exon":{const t=new ba(window.innerWidth,150,0,{top:30,right:350,bottom:200,left:50},12,10);let n=e[5].clusters.tissue;(g=new ki(void 0,n,l,"Blues",5,t,!0,2)).render(m.root,m.svg,!1,!0,top,5);break}default:throw"Input type is not recognized"}$("#spinner").hide(),g.createTooltip(m.tooltip);const y={x:g.config.panels.main.x,y:g.config.panels.main.h+g.config.panels.main.y+100,w:g.config.panels.main.w,h:100},v={x:y.x,y:y.y+y.h,w:y.w,h:20*c.length};let x=+z(`#${m.svg}`).attr("height");z(`#${m.svg}`).attr("height",x+y.h+v.h);const w=new Ji(a,i,o,s),_=g.visualComponents.svg.append("g").attr("id","geneModel").attr("transform",`translate(${y.x}, ${y.y})`);w.render(_,y);const M=new Zi(c,f,i,v),T=g.visualComponents.svg.append("g").attr("transform",`translate(${v.x}, ${v.y})`);switch(M.render(!1,T),function(t,e,n,r){const a=t.visualComponents.svg;let i=t.objects.heatmap.xScale.range()[1]+50;ha("Exon read counts per base",a.select("#geneModel"),n,{x:i,y:30},!0,5,2,{h:20,w:10},"v"),i+=50,ha("Junction read counts",a.select("#geneModel"),e,{x:i,y:30},!0,5,10,{h:20,w:10},"v")}(g,p,h),function(t,e){t.createToolbar(e.toolbar,t.tooltip).createDownloadButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone)}(g,m),t){case"isoform":Qi(r,w,g,M,p,h,b,u,l,d),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const e=z(this);n.objects.heatmap.cellMouseover(e);const r=void 0===i[t.y]?t.y:i[t.y].tissueName;a.show(`Tissue: ${r}<br/> Isoform: ${t.id}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(3)}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.replace(".","_");r.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),r.selectAll(".exon-curated").classed("highlighted",!1)})}(r,0,g);break;case"isoformTransposed":!function(t,e,n,r,a,i,o,c,f,s){const u=n.visualComponents.svg,l=t.reduce((t,e)=>(t[e.tissueId]=e,t),{}),d=n.tooltip;u.selectAll(".exp-map-xlabel").text(t=>void 0!==l[t]?l[t].tissueName:t).style("cursor","pointer"),u.select("#heatmap").selectAll(".exp-map-xcolor").data(n.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>n.objects.heatmap.xScale(t)).attr("y",n.objects.heatmap.yScale.range()[1]+5).attr("width",n.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("exp-map-xcolor",!0).style("fill",t=>l[t].colorHex),u.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>n.objects.heatmap.xScale(t)).attr("y",n.objects.heatmap.yScale.range()[0]-10).attr("width",n.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("leaf-color",!0).style("fill",t=>l[t].colorHex),u.selectAll(".exp-map-xlabel").on("mouseover",function(){z(this).classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1)}).on("click",function(t){u.selectAll(".exp-map-xlabel").classed("clicked",!1),z(this).classed("clicked",!0);const n=t,l=c.filter(t=>t.tissueId==n),d=f.filter(t=>t.tissueId==n);e.changeTextlabel(u.select("#geneModel"),n),e.addData(u.select("#geneModel"),l,d,a,i);const h=mn().domain([ht(s.map(t=>t.value)),dt(s.map(t=>t.value))]).range([0,-100]),b=s.filter(t=>t.tissueId==n);r.showData(b,o,h)}),u.selectAll(".exp-map-cell").on("mouseover",function(t){const e=z(this);n.objects.heatmap.cellMouseover(e);const r=void 0===l[t.x]?t.x:l[t.x].tissueName;d.show(`Tissue: ${r}<br/> Isoform: ${t.id}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(3)}`)}).on("mouseout",function(t){u.selectAll("*").classed("highlighted",!1),d.hide()}),u.selectAll(".exp-map-ylabel").on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.replace(".","_");u.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),u.selectAll(".exon-curated").classed("highlighted",!1)})}(r,w,g,M,p,h,b,u,l,d);break;case"junction":Qi(r,w,g,M,p,h,b,u,l,d),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const r=z(this);n.objects.heatmap.cellMouseover(r);const o=void 0===i[t.y]?t.x:i[t.y].tissueName,c=e.junctions.filter(e=>e.junctionId==t.x&&!e.filtered)[0];a.show(`Tissue: ${o}<br/> Junction: ${c.displayName}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(4)}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").each(function(){const t=z(this),n=t.text();t.attr("id",`${n}`),t.classed(`junc${n}`,!0);const r=e.junctions.filter(t=>t.junctionId==`${n}`&&!t.filtered)[0];void 0!==r&&t.text(r.displayName)}).on("mouseover",function(){const t=z(this).attr("id");z(this).classed("highlighted",!0),r.selectAll(`.junc${t}`).classed("highlighted",!0);const n=e.junctions.filter(e=>e.junctionId==t&&!e.filtered)[0];void 0!==n&&(r.selectAll(`.exon${n.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${n.endExon.exonNumber}`).classed("highlighted",!0))}).on("mouseout",function(){z(this).classed("highlighted",!1),R(".junc").classed("highlighted",!1),R(".junc-curve").classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)}),r.selectAll(".junc").on("mouseover",function(t){R(`.junc${t.junctionId}`).classed("highlighted",!0),console.log(`Junction ${t.junctionId}: ${t.chromStart} - ${t.chromEnd}`),void 0!==t.startExon&&(r.selectAll(".exon").filter(`.exon${t.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(".exon").filter(`.exon${t.endExon.exonNumber}`).classed("highlighted",!0)),r.select(`.junc${t.junctionId}`).classed("highlighted",!0).classed("normal",!1)}).on("mouseout",function(t){R(`.junc${t.junctionId}`).classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1),r.selectAll(".xLabel").classed("highlighted",!1).classed("normal",!0)}),r.selectAll(".exon-curated").on("mouseover",function(t){z(this).classed("highlighted",!0),console.log(`Exon ${t.exonNumber}: ${t.chromStart} - ${t.chromEnd}. RPK: ${t.originalValue}`)}).on("mouseout",function(t){z(this).classed("highlighted",!1)})}(r,w,g);break;case"exon":Qi(r,w,g,M,p,h,b,u,l,d),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const e=z(this);n.objects.heatmap.cellMouseover(e);const r=void 0===i[t.y]?t.x:i[t.y].tissueName;a.show(`Tissue: ${r}<br/> Exon: ${t.exonId}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(3)}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.split("_")[1];r.selectAll(`.exon${e}`).classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)})}(r,0,g);break;default:throw"unrecognized type"}}).catch(function(t){console.error(t)})}).catch(function(t){console.error(t)})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
