var IsoformExpression=function(t){"use strict";var e="http://www.w3.org/1999/xhtml",n={svg:"http://www.w3.org/2000/svg",xhtml:e,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},r=function(t){var e=t+="",r=e.indexOf(":");return r>=0&&"xmlns"!==(e=t.slice(0,r))&&(t=t.slice(r+1)),n.hasOwnProperty(e)?{space:n[e],local:t}:t};var a=function(t){var n=r(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,r=this.namespaceURI;return r===e&&n.documentElement.namespaceURI===e?n.createElement(t):n.createElementNS(r,t)}})(n)};function i(){}var o=function(t){return null==t?i:function(){return this.querySelector(t)}};function c(){return[]}var s=function(t){return null==t?c:function(){return this.querySelectorAll(t)}},f=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var u=document.documentElement;if(!u.matches){var l=u.webkitMatchesSelector||u.msMatchesSelector||u.mozMatchesSelector||u.oMatchesSelector;f=function(t){return function(){return l.call(this,t)}}}}var d=f,h=function(t){return new Array(t.length)};function b(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}b.prototype={constructor:b,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var p="$";function g(t,e,n,r,a,i){for(var o,c=0,s=e.length,f=i.length;c<f;++c)(o=e[c])?(o.__data__=i[c],r[c]=o):n[c]=new b(t,i[c]);for(;c<s;++c)(o=e[c])&&(a[c]=o)}function m(t,e,n,r,a,i,o){var c,s,f,u={},l=e.length,d=i.length,h=new Array(l);for(c=0;c<l;++c)(s=e[c])&&(h[c]=f=p+o.call(s,s.__data__,c,e),f in u?a[c]=s:u[f]=s);for(c=0;c<d;++c)(s=u[f=p+o.call(t,i[c],c,i)])?(r[c]=s,s.__data__=i[c],u[f]=null):n[c]=new b(t,i[c]);for(c=0;c<l;++c)(s=e[c])&&u[h[c]]===s&&(a[c]=s)}function y(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var v=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function x(t,e){return t.style.getPropertyValue(e)||v(t).getComputedStyle(t,null).getPropertyValue(e)}function w(t){return t.trim().split(/^|\s+/)}function _(t){return t.classList||new M(t)}function M(t){this._node=t,this._names=w(t.getAttribute("class")||"")}function S(t,e){for(var n=_(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function T(t,e){for(var n=_(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}M.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function A(){this.textContent=""}function E(){this.innerHTML=""}function N(){this.nextSibling&&this.parentNode.appendChild(this)}function I(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function k(){return null}function C(){var t=this.parentNode;t&&t.removeChild(this)}function j(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function D(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var P={},U=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(P={mouseenter:"mouseover",mouseleave:"mouseout"}));function L(t,e,n){return t=F(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function F(t,e,n){return function(r){var a=U;U=r;try{t.call(this,this.__data__,e,n)}finally{U=a}}}function O(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function Y(t,e,n){var r=P.hasOwnProperty(t.type)?L:F;return function(a,i,o){var c,s=this.__on,f=r(e,i,o);if(s)for(var u=0,l=s.length;u<l;++u)if((c=s[u]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=f,c.capture=n),void(c.value=e);this.addEventListener(t.type,f,n),c={type:t.type,name:t.name,value:e,listener:f,capture:n},s?s.push(c):this.__on=[c]}}function H(t,e,n){var r=v(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}var B=[null];function X(t,e){this._groups=t,this._parents=e}function V(){return new X([[document.documentElement]],B)}X.prototype=V.prototype={constructor:X,select:function(t){"function"!=typeof t&&(t=o(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,c,s=e[a],f=s.length,u=r[a]=new Array(f),l=0;l<f;++l)(i=s[l])&&(c=t.call(i,i.__data__,l,s))&&("__data__"in i&&(c.__data__=i.__data__),u[l]=c);return new X(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=s(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,c=e[i],f=c.length,u=0;u<f;++u)(o=c[u])&&(r.push(t.call(o,o.__data__,u,c)),a.push(o));return new X(r,a)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new X(r,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),u=-1,this.each(function(t){b[++u]=t}),b;var n,r=e?m:g,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),s=new Array(o),f=new Array(o),u=0;u<o;++u){var l=a[u],d=i[u],h=d.length,b=t.call(l,l&&l.__data__,u,a),p=b.length,y=s[u]=new Array(p),v=c[u]=new Array(p);r(l,d,y,v,f[u]=new Array(h),b,e);for(var x,w,_=0,M=0;_<p;++_)if(x=y[_]){for(_>=M&&(M=_+1);!(w=v[M])&&++M<p;);x._next=w||null}}return(c=new X(c,a))._enter=s,c._exit=f,c},enter:function(){return new X(this._enter||this._groups.map(h),this._parents)},exit:function(){return new X(this._exit||this._groups.map(h),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],u=n[c],l=f.length,d=o[c]=new Array(l),h=0;h<l;++h)(s=f[h]||u[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new X(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=y);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,c=n[i],s=c.length,f=a[i]=new Array(s),u=0;u<s;++u)(o=c[u])&&(f[u]=o);f.sort(e)}return new X(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,c=i.length;o<c;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=r(t);if(arguments.length<2){var a=this.node();return n.local?a.getAttributeNS(n.space,n.local):a.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):x(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=w(t+"");if(arguments.length<2){for(var r=_(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?S:T)(this,t)}}:e?function(t){return function(){S(this,t)}}:function(t){return function(){T(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?A:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?E:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(N)},lower:function(){return this.each(I)},append:function(t){var e="function"==typeof t?t:a(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:a(t),r=null==e?k:"function"==typeof e?e:o(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(C)},clone:function(t){return this.select(t?D:j)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?Y:O,null==n&&(n=!1),r=0;r<o;++r)this.each(c(i[r],e,n));return this}var c=this.node().__on;if(c)for(var s,f=0,u=c.length;f<u;++f)for(r=0,s=c[f];r<o;++r)if((a=i[r]).type===s.type&&a.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return H(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return H(this,t,e)}})(t,e))}};var z=function(t){return"string"==typeof t?new X([[document.querySelector(t)]],[document.documentElement]):new X([[t]],B)},q=function(t){return"string"==typeof t?new X([document.querySelectorAll(t)],[document.documentElement]):new X([null==t?[]:t],B)},R={},W={},G=34,J=10,Z=13;function Q(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var K=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,a=[],i=t.length,o=0,c=0,s=i<=0,f=!1;function u(){if(s)return W;if(f)return f=!1,R;var e,r,a=o;if(t.charCodeAt(a)===G){for(;o++<i&&t.charCodeAt(o)!==G||t.charCodeAt(++o)===G;);return(e=o)>=i?s=!0:(r=t.charCodeAt(o++))===J?f=!0:r===Z&&(f=!0,t.charCodeAt(o)===J&&++o),t.slice(a+1,e-1).replace(/""/g,'"')}for(;o<i;){if((r=t.charCodeAt(e=o++))===J)f=!0;else if(r===Z)f=!0,t.charCodeAt(o)===J&&++o;else if(r!==n)continue;return t.slice(a,e)}return s=!0,t.slice(a,i)}for(t.charCodeAt(i-1)===J&&--i,t.charCodeAt(i-1)===Z&&--i;(r=u())!==W;){for(var l=[];r!==R&&r!==W;)l.push(r),r=u();e&&null==(l=e(l,c++))||a.push(l)}return a}function a(e){return e.map(i).join(t)}function i(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,i=r(t,function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=Q(t);return function(r,a){return e(n(r),a,t)}}(t,e):Q(t)});return i.columns=a||[],i},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(i).join(t)].concat(e.map(function(e){return n.map(function(t){return i(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}};K(","),K("\t");function tt(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var et=function(t,e){return fetch(t,e).then(tt)},nt=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var rt,at,it=(1===(rt=nt).length&&(at=rt,rt=function(t,e){return nt(at(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;rt(t[a],e)<0?n=a+1:r=a}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var a=n+r>>>1;rt(t[a],e)>0?r=a:n=a+1}return n}}).right,ot=function(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i},ct=Math.sqrt(50),st=Math.sqrt(10),ft=Math.sqrt(2),ut=function(t,e,n){var r,a,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=lt(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(t-c)/o;return r&&i.reverse(),i};function lt(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=ct?10:i>=st?5:i>=ft?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=ct?10:i>=st?5:i>=ft?2:1)}var dt=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},ht=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},bt=function(t,e){var n,r=t.length,a=-1,i=0;if(null==e)for(;++a<r;)(n=+t[a])&&(i+=n);else for(;++a<r;)(n=+e(t[a],a,t))&&(i+=n);return i};function pt(){}function gt(t,e){var n=new pt;if(t instanceof pt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}pt.prototype=gt.prototype={constructor:pt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var mt=function(){var t,e,n,r=[],a=[];function i(n,a,o,c){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,f,u,l=-1,d=n.length,h=r[a++],b=gt(),p=o();++l<d;)(u=b.get(s=h(f=n[l])+""))?u.push(f):b.set(s,[f]);return b.each(function(t,e){c(p,e,i(t,a,o,c))}),p}return n={object:function(t){return i(t,0,yt,vt)},map:function(t){return i(t,0,xt,wt)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var o,c=a[i-1];return null!=e&&i>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,xt,wt),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function yt(){return{}}function vt(t,e,n){t[e]=n}function xt(){return gt()}function wt(t,e,n){t.set(e,n)}var _t=Array.prototype,Mt=_t.map,St=_t.slice,Tt={name:"implicit"};function At(){var t,e,n=function t(e){var n=gt(),r=[],a=Tt;function i(t){var i=t+"",o=n.get(i);if(!o){if(a!==Tt)return a;n.set(i,o=r.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:St.call(e),i.domain=function(t){if(!arguments.length)return r.slice();r=[],n=gt();for(var e,a,o=-1,c=t.length;++o<c;)n.has(a=(e=t[o])+"")||n.set(a,r.push(e));return i},i.range=function(t){return arguments.length?(e=St.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(a=t,i):a},i.copy=function(){return t().domain(r).range(e).unknown(a)},i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,c=0,s=0,f=.5;function u(){var n=r().length,u=i[1]<i[0],l=i[u-0],d=i[1-u];t=(d-l)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),l+=(d-l-t*(n-c))*f,e=t*(1-c),o&&(l=Math.round(l),e=Math.round(e));var h=ot(n).map(function(e){return l+t*e});return a(u?h.reverse():h)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),u()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],u()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,u()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,u()):o},n.padding=function(t){return arguments.length?(c=s=Math.max(0,Math.min(1,t)),u()):c},n.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),u()):c},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),u()):s},n.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),u()):f},n.copy=function(){return At().domain(r()).range(i).round(o).paddingInner(c).paddingOuter(s).align(f)},u()}var Et=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Nt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function It(){}var kt="\\s*([+-]?\\d+)\\s*",$t="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ct="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jt=/^#([0-9a-f]{3})$/,Dt=/^#([0-9a-f]{6})$/,Pt=new RegExp("^rgb\\("+[kt,kt,kt]+"\\)$"),Ut=new RegExp("^rgb\\("+[Ct,Ct,Ct]+"\\)$"),Lt=new RegExp("^rgba\\("+[kt,kt,kt,$t]+"\\)$"),Ft=new RegExp("^rgba\\("+[Ct,Ct,Ct,$t]+"\\)$"),Ot=new RegExp("^hsl\\("+[$t,Ct,Ct]+"\\)$"),Yt=new RegExp("^hsla\\("+[$t,Ct,Ct,$t]+"\\)$"),Ht={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Bt(t){var e;return t=(t+"").trim().toLowerCase(),(e=jt.exec(t))?new Rt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Dt.exec(t))?Xt(parseInt(e[1],16)):(e=Pt.exec(t))?new Rt(e[1],e[2],e[3],1):(e=Ut.exec(t))?new Rt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Lt.exec(t))?Vt(e[1],e[2],e[3],e[4]):(e=Ft.exec(t))?Vt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ot.exec(t))?Wt(e[1],e[2]/100,e[3]/100,1):(e=Yt.exec(t))?Wt(e[1],e[2]/100,e[3]/100,e[4]):Ht.hasOwnProperty(t)?Xt(Ht[t]):"transparent"===t?new Rt(NaN,NaN,NaN,0):null}function Xt(t){return new Rt(t>>16&255,t>>8&255,255&t,1)}function Vt(t,e,n,r){return r<=0&&(t=e=n=NaN),new Rt(t,e,n,r)}function zt(t){return t instanceof It||(t=Bt(t)),t?new Rt((t=t.rgb()).r,t.g,t.b,t.opacity):new Rt}function qt(t,e,n,r){return 1===arguments.length?zt(t):new Rt(t,e,n,null==r?1:r)}function Rt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Wt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Gt(t,e,n,r)}function Gt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Jt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Et(It,Bt,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Et(Rt,qt,Nt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Rt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Rt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Et(Gt,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Gt)return new Gt(t.h,t.s,t.l,t.opacity);if(t instanceof It||(t=Bt(t)),!t)return new Gt;if(t instanceof Gt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,c=i-a,s=(i+a)/2;return c?(o=e===i?(n-r)/c+6*(n<r):n===i?(r-e)/c+2:(e-n)/c+4,c/=s<.5?i+a:2-i-a,o*=60):c=s>0&&s<1?0:o,new Gt(o,c,s,t.opacity)}(t):new Gt(t,e,n,null==r?1:r)},Nt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Gt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Gt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new Rt(Jt(t>=240?t-240:t+120,a,r),Jt(t,a,r),Jt(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Zt=Math.PI/180,Qt=180/Math.PI,Kt=.95047,te=1,ee=1.08883,ne=4/29,re=6/29,ae=3*re*re,ie=re*re*re;function oe(t){if(t instanceof ce)return new ce(t.l,t.a,t.b,t.opacity);if(t instanceof de){var e=t.h*Zt;return new ce(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Rt||(t=zt(t));var n=le(t.r),r=le(t.g),a=le(t.b),i=se((.4124564*n+.3575761*r+.1804375*a)/Kt),o=se((.2126729*n+.7151522*r+.072175*a)/te);return new ce(116*o-16,500*(i-o),200*(o-se((.0193339*n+.119192*r+.9503041*a)/ee)),t.opacity)}function ce(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function se(t){return t>ie?Math.pow(t,1/3):t/ae+ne}function fe(t){return t>re?t*t*t:ae*(t-ne)}function ue(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function le(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function de(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}Et(ce,function(t,e,n,r){return 1===arguments.length?oe(t):new ce(t,e,n,null==r?1:r)},Nt(It,{brighter:function(t){return new ce(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ce(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return t=te*fe(t),new Rt(ue(3.2404542*(e=Kt*fe(e))-1.5371385*t-.4985314*(n=ee*fe(n))),ue(-.969266*e+1.8760108*t+.041556*n),ue(.0556434*e-.2040259*t+1.0572252*n),this.opacity)}})),Et(de,function(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof de)return new de(t.h,t.c,t.l,t.opacity);t instanceof ce||(t=oe(t));var e=Math.atan2(t.b,t.a)*Qt;return new de(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new de(t,e,n,null==r?1:r)},Nt(It,{brighter:function(t){return new de(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new de(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return oe(this).rgb()}}));var he=-.14861,be=1.78277,pe=-.29227,ge=-.90649,me=1.97294,ye=me*ge,ve=me*be,xe=be*pe-ge*he;function we(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof _e)return new _e(t.h,t.s,t.l,t.opacity);t instanceof Rt||(t=zt(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(xe*r+ye*e-ve*n)/(xe+ye-ve),i=r-a,o=(me*(n-a)-pe*i)/ge,c=Math.sqrt(o*o+i*i)/(me*a*(1-a)),s=c?Math.atan2(o,i)*Qt-120:NaN;return new _e(s<0?s+360:s,c,a,t.opacity)}(t):new _e(t,e,n,null==r?1:r)}function _e(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Me(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}Et(_e,we,Nt(It,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new _e(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new _e(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Zt,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new Rt(255*(e+n*(he*r+be*a)),255*(e+n*(pe*r+ge*a)),255*(e+n*(me*r)),this.opacity)}}));var Se=function(t){return function(){return t}};function Te(t,e){return function(n){return t+n*e}}function Ae(t){return 1==(t=+t)?Ee:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Se(isNaN(e)?n:e)}}function Ee(t,e){var n=e-t;return n?Te(t,n):Se(isNaN(t)?e:t)}var Ne=function t(e){var n=Ae(e);function r(t,e){var r=n((t=qt(t)).r,(e=qt(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Ee(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Ie(t){return function(e){var n,r,a=e.length,i=new Array(a),o=new Array(a),c=new Array(a);for(n=0;n<a;++n)r=qt(e[n]),i[n]=r.r||0,o[n]=r.g||0,c[n]=r.b||0;return i=t(i),o=t(o),c=t(c),r.opacity=1,function(t){return r.r=i(t),r.g=o(t),r.b=c(t),r+""}}}var ke=Ie(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,c=r<e-1?t[r+2]:2*i-a;return Me((n-r/e)*e,o,a,i,c)}}),$e=(Ie(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),a=t[(r+e-1)%e],i=t[r%e],o=t[(r+1)%e],c=t[(r+2)%e];return Me((n-r/e)*e,a,i,o,c)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),Ce=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,je=new RegExp(Ce.source,"g");var De,Pe,Ue,Le,Fe=function(t,e){var n,r,a,i=Ce.lastIndex=je.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=Ce.exec(t))&&(r=je.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),c[o]?c[o]+=a:c[++o]=a),(n=n[0])===(r=r[0])?c[o]?c[o]+=r:c[++o]=r:(c[++o]=null,s.push({i:o,x:$e(n,r)})),i=je.lastIndex;return i<e.length&&(a=e.slice(i),c[o]?c[o]+=a:c[++o]=a),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)c[(n=s[r]).i]=n.x(t);return c.join("")})},Oe=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Se(e):("number"===r?$e:"string"===r?(n=Bt(e))?(e=n,Ne):Fe:e instanceof Bt?Ne:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Oe(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Oe(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}:$e)(t,e)},Ye=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},He=180/Math.PI,Be={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Xe=function(t,e,n,r,a,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,s/=c),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*He,skewX:Math.atan(s)*He,scaleX:o,scaleY:c}};function Ve(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,r,a,i,o,c){if(t!==a||r!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:$e(t,a)},{i:s-2,x:$e(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:$e(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:$e(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,c,s),function(t,e,n,r,i,o){if(t!==n||e!==r){var c=i.push(a(i)+"scale(",null,",",null,")");o.push({i:c-4,x:$e(t,n)},{i:c-2,x:$e(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var ze=Ve(function(t){return"none"===t?Be:(De||(De=document.createElement("DIV"),Pe=document.documentElement,Ue=document.defaultView),De.style.transform=t,t=Ue.getComputedStyle(Pe.appendChild(De),null).getPropertyValue("transform"),Pe.removeChild(De),t=t.slice(7,-1).split(","),Xe(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),qe=Ve(function(t){return null==t?Be:(Le||(Le=document.createElementNS("http://www.w3.org/2000/svg","g")),Le.setAttribute("transform",t),(t=Le.transform.baseVal.consolidate())?(t=t.matrix,Xe(t.a,t.b,t.c,t.d,t.e,t.f)):Be)},", ",")",")");function Re(t){return function e(n){function r(e,r){var a=t((e=we(e)).h,(r=we(r)).h),i=Ee(e.s,r.s),o=Ee(e.l,r.l),c=Ee(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,r.gamma=e,r}(1)}Re(function(t,e){var n=e-t;return n?Te(t,n>180||n<-180?n-360*Math.round(n/360):n):Se(isNaN(t)?e:t)});var We=Re(Ee),Ge=function(t){return function(){return t}},Je=function(t){return+t},Ze=[0,1];function Qe(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Ge(e)}function Ke(t,e,n,r){var a=t[0],i=t[1],o=e[0],c=e[1];return i<a?(a=n(i,a),o=r(c,o)):(a=n(a,i),o=r(o,c)),function(t){return o(a(t))}}function tn(t,e,n,r){var a=Math.min(t.length,e.length)-1,i=new Array(a),o=new Array(a),c=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<a;)i[c]=n(t[c],t[c+1]),o[c]=r(e[c],e[c+1]);return function(e){var n=it(t,e,1,a)-1;return o[n](i[n](e))}}var en,nn=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},rn=function(t){return(t=nn(Math.abs(t)))?t[1]:NaN},an=function(t,e){var n=nn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")},on={"":function(t,e){t=t.toPrecision(e);t:for(var n,r=t.length,a=1,i=-1;a<r;++a)switch(t[a]){case".":i=n=a;break;case"0":0===i&&(i=a),n=a;break;case"e":break t;default:i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t},"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return an(100*t,e)},r:an,s:function(t,e){var n=nn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(en=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+nn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},cn=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function sn(t){return new fn(t)}function fn(t){if(!(e=cn.exec(t)))throw new Error("invalid format: "+t);var e,n=e[1]||" ",r=e[2]||">",a=e[3]||"-",i=e[4]||"",o=!!e[5],c=e[6]&&+e[6],s=!!e[7],f=e[8]&&+e[8].slice(1),u=e[9]||"";"n"===u?(s=!0,u="g"):on[u]||(u=""),(o||"0"===n&&"="===r)&&(o=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=a,this.symbol=i,this.zero=o,this.width=c,this.comma=s,this.precision=f,this.type=u}sn.prototype=fn.prototype,fn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var un,ln,dn,hn=function(t){return t},bn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];un=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var a=t.length,i=[],o=0,c=e[0],s=0;a>0&&c>0&&(s+c+1>r&&(c=Math.max(1,r-s)),i.push(t.substring(a-=c,a+c)),!((s+=c+1)>r));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):hn,a=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):hn,c=t.percent||"%";function s(t){var e=(t=sn(t)).fill,n=t.align,s=t.sign,f=t.symbol,u=t.zero,l=t.width,d=t.comma,h=t.precision,b=t.type,p="$"===f?a[0]:"#"===f&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",g="$"===f?a[1]:/[%p]/.test(b)?c:"",m=on[b],y=!b||/[defgprs%]/.test(b);function v(t){var a,c,f,v=p,x=g;if("c"===b)x=m(t)+x,t="";else{var w=(t=+t)<0;if(t=m(Math.abs(t),h),w&&0==+t&&(w=!1),v=(w?"("===s?s:"-":"-"===s||"("===s?"":s)+v,x=("s"===b?bn[8+en/3]:"")+x+(w&&"("===s?")":""),y)for(a=-1,c=t.length;++a<c;)if(48>(f=t.charCodeAt(a))||f>57){x=(46===f?i+t.slice(a+1):t.slice(a))+x,t=t.slice(0,a);break}}d&&!u&&(t=r(t,1/0));var _=v.length+t.length+x.length,M=_<l?new Array(l-_+1).join(e):"";switch(d&&u&&(t=r(M+t,M.length?l-x.length:1/0),M=""),n){case"<":t=v+t+x+M;break;case"=":t=v+M+t+x;break;case"^":t=M.slice(0,_=M.length>>1)+v+t+x+M.slice(_);break;default:t=M+v+t+x}return o(t)}return h=null==h?b?6:12:/[gprs]/.test(b)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),v.toString=function(){return t+""},v}return{format:s,formatPrefix:function(t,e){var n=s(((t=sn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(rn(e)/3))),a=Math.pow(10,-r),i=bn[8+r/3];return function(t){return n(a*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),ln=un.format,dn=un.formatPrefix;var pn=function(t,e,n){var r,a=t[0],i=t[t.length-1],o=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=ct?a*=10:i>=st?a*=5:i>=ft&&(a*=2),e<t?-a:a}(a,i,null==e?10:e);switch((n=sn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(a),Math.abs(i));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(rn(e)/3)))-rn(Math.abs(t)))}(o,c))||(n.precision=r),dn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,rn(e)-rn(t))+1}(o,Math.max(Math.abs(a),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-rn(Math.abs(t)))}(o))||(n.precision=r-2*("%"===n.type))}return ln(n)};function gn(t){var e=t.domain;return t.ticks=function(t){var n=e();return ut(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return pn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,o=a.length-1,c=a[i],s=a[o];return s<c&&(r=c,c=s,s=r,r=i,i=o,o=r),(r=lt(c,s,n))>0?r=lt(c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r,n):r<0&&(r=lt(c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[o]=Math.ceil(s/r)*r,e(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[o]=Math.floor(s*r)/r,e(a)),t},t}function mn(){var t=function(t,e){var n,r,a,i=Ze,o=Ze,c=Oe,s=!1;function f(){return n=Math.min(i.length,o.length)>2?tn:Ke,r=a=null,u}function u(e){return(r||(r=n(i,o,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,c)))(+e)}return u.invert=function(t){return(a||(a=n(o,i,Qe,s?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},u.domain=function(t){return arguments.length?(i=Mt.call(t,Je),f()):i.slice()},u.range=function(t){return arguments.length?(o=St.call(t),f()):o.slice()},u.rangeRound=function(t){return o=St.call(t),c=Ye,f()},u.clamp=function(t){return arguments.length?(s=!!t,f()):s},u.interpolate=function(t){return arguments.length?(c=t,f()):c},f()}(Qe,$e);return t.copy=function(){return e=t,mn().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp());var e},gn(t)}var yn=new Date,vn=new Date;function xn(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return c},a.filter=function(n){return xn(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(a.count=function(e,r){return yn.setTime(+e),vn.setTime(+r),t(yn),t(vn),Math.floor(n(yn,vn))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var wn=xn(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});wn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?xn(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):wn:null};var _n=6e4,Mn=6048e5,Sn=(xn(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),xn(function(t){t.setTime(Math.floor(t/_n)*_n)},function(t,e){t.setTime(+t+e*_n)},function(t,e){return(e-t)/_n},function(t){return t.getMinutes()}),xn(function(t){var e=t.getTimezoneOffset()*_n%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),xn(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*_n)/864e5},function(t){return t.getDate()-1}));function Tn(t){return xn(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*_n)/Mn})}var An=Tn(0),En=Tn(1),Nn=(Tn(2),Tn(3),Tn(4)),In=(Tn(5),Tn(6),xn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),xn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));In.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xn(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};xn(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*_n)},function(t,e){return(e-t)/_n},function(t){return t.getUTCMinutes()}),xn(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var kn=xn(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function $n(t){return xn(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Mn})}var Cn=$n(0),jn=$n(1),Dn=($n(2),$n(3),$n(4)),Pn=($n(5),$n(6),xn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),xn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Un(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ln(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Fn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Pn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?xn(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var On,Yn,Hn,Bn={"-":"",_:" ",0:"0"},Xn=/^\s*\d+/,Vn=/^%/,zn=/[\\^$*+?|[\]().{}]/g;function qn(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function Rn(t){return t.replace(zn,"\\$&")}function Wn(t){return new RegExp("^(?:"+t.map(Rn).join("|")+")","i")}function Gn(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Jn(t,e,n){var r=Xn.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Zn(t,e,n){var r=Xn.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Qn(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Kn(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function tr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function er(t,e,n){var r=Xn.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function nr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function rr(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function ar(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function ir(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function or(t,e,n){var r=Xn.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function cr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function sr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function fr(t,e,n){var r=Xn.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ur(t,e,n){var r=Xn.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function lr(t,e,n){var r=Xn.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function dr(t,e,n){var r=Vn.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function hr(t,e,n){var r=Xn.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function br(t,e,n){var r=Xn.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function pr(t,e){return qn(t.getDate(),e,2)}function gr(t,e){return qn(t.getHours(),e,2)}function mr(t,e){return qn(t.getHours()%12||12,e,2)}function yr(t,e){return qn(1+Sn.count(In(t),t),e,3)}function vr(t,e){return qn(t.getMilliseconds(),e,3)}function xr(t,e){return vr(t,e)+"000"}function wr(t,e){return qn(t.getMonth()+1,e,2)}function _r(t,e){return qn(t.getMinutes(),e,2)}function Mr(t,e){return qn(t.getSeconds(),e,2)}function Sr(t){var e=t.getDay();return 0===e?7:e}function Tr(t,e){return qn(An.count(In(t),t),e,2)}function Ar(t,e){var n=t.getDay();return t=n>=4||0===n?Nn(t):Nn.ceil(t),qn(Nn.count(In(t),t)+(4===In(t).getDay()),e,2)}function Er(t){return t.getDay()}function Nr(t,e){return qn(En.count(In(t),t),e,2)}function Ir(t,e){return qn(t.getFullYear()%100,e,2)}function kr(t,e){return qn(t.getFullYear()%1e4,e,4)}function $r(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+qn(e/60|0,"0",2)+qn(e%60,"0",2)}function Cr(t,e){return qn(t.getUTCDate(),e,2)}function jr(t,e){return qn(t.getUTCHours(),e,2)}function Dr(t,e){return qn(t.getUTCHours()%12||12,e,2)}function Pr(t,e){return qn(1+kn.count(Pn(t),t),e,3)}function Ur(t,e){return qn(t.getUTCMilliseconds(),e,3)}function Lr(t,e){return Ur(t,e)+"000"}function Fr(t,e){return qn(t.getUTCMonth()+1,e,2)}function Or(t,e){return qn(t.getUTCMinutes(),e,2)}function Yr(t,e){return qn(t.getUTCSeconds(),e,2)}function Hr(t){var e=t.getUTCDay();return 0===e?7:e}function Br(t,e){return qn(Cn.count(Pn(t),t),e,2)}function Xr(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Dn(t):Dn.ceil(t),qn(Dn.count(Pn(t),t)+(4===Pn(t).getUTCDay()),e,2)}function Vr(t){return t.getUTCDay()}function zr(t,e){return qn(jn.count(Pn(t),t),e,2)}function qr(t,e){return qn(t.getUTCFullYear()%100,e,2)}function Rr(t,e){return qn(t.getUTCFullYear()%1e4,e,4)}function Wr(){return"+0000"}function Gr(){return"%"}function Jr(t){return+t}function Zr(t){return Math.floor(+t/1e3)}!function(t){On=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,f=Wn(a),u=Gn(a),l=Wn(i),d=Gn(i),h=Wn(o),b=Gn(o),p=Wn(c),g=Gn(c),m=Wn(s),y=Gn(s),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:pr,e:pr,f:xr,H:gr,I:mr,j:yr,L:vr,m:wr,M:_r,p:function(t){return a[+(t.getHours()>=12)]},Q:Jr,s:Zr,S:Mr,u:Sr,U:Tr,V:Ar,w:Er,W:Nr,x:null,X:null,y:Ir,Y:kr,Z:$r,"%":Gr},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Cr,e:Cr,f:Lr,H:jr,I:Dr,j:Pr,L:Ur,m:Fr,M:Or,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:Jr,s:Zr,S:Yr,u:Hr,U:Br,V:Xr,w:Vr,W:zr,x:null,X:null,y:qr,Y:Rr,Z:Wr,"%":Gr},w={a:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=y[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return S(t,e,n,r)},d:ir,e:ir,f:lr,H:cr,I:cr,j:or,L:ur,m:ar,M:sr,p:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.p=u[r[0].toLowerCase()],n+r[0].length):-1},Q:hr,s:br,S:fr,u:Zn,U:Qn,V:Kn,w:Jn,W:tr,x:function(t,e,r){return S(t,n,e,r)},X:function(t,e,n){return S(t,r,e,n)},y:nr,Y:er,Z:rr,"%":dr};function _(t,e){return function(n){var r,a,i,o=[],c=-1,s=0,f=t.length;for(n instanceof Date||(n=new Date(+n));++c<f;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(a=Bn[r=t.charAt(++c)])?r=t.charAt(++c):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function M(t,e){return function(n){var r,a,i=Fn(1900);if(S(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=(r=Ln(Fn(i.y))).getUTCDay())>4||0===a?jn.ceil(r):jn(r),r=kn.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(a=(r=e(Fn(i.y))).getDay())>4||0===a?En.ceil(r):En(r),r=Sn.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Ln(Fn(i.y)).getUTCDay():e(Fn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Ln(i)):e(i)}}function S(t,e,n,r){for(var a,i,o=0,c=e.length,s=n.length;o<c;){if(r>=s)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=w[a in Bn?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return v.x=_(n,v),v.X=_(r,v),v.c=_(e,v),x.x=_(n,x),x.X=_(r,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Un);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,Ln);return e.toString=function(){return t},e}}}(t),Yn=On.utcFormat,Hn=On.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Yn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Hn("%Y-%m-%dT%H:%M:%S.%LZ");function Qr(t){const e="collapsedGeneModel";if(!t.hasOwnProperty(e))throw"Fatal Error: parseExons input error."+t;return["featureType","start","end"].forEach(n=>{if(!t[e][0].hasOwnProperty(n))throw"Fatal Error: parseExons attr not found: "+n}),t[e].filter(t=>"exon"==t.featureType).map(t=>(t.chromStart=t.start,t.chromEnd=t.end,t))}var Kr=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n};Kr("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Kr("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Kr("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Kr("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Kr("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Kr("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Kr("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Kr("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Kr("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var ta=function(t){return ke(t[t.length-1])};ta(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Kr)),ta(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Kr)),ta(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Kr)),ta(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Kr)),ta(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Kr)),ta(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Kr)),ta(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Kr)),ta(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Kr)),ta(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Kr));var ea=ta(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Kr));ta(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Kr)),ta(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Kr));var na=ta(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Kr));ta(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Kr));var ra=ta(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Kr));ta(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Kr)),ta(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Kr));var aa=ta(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Kr));ta(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Kr)),ta(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Kr)),ta(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Kr));var ia=ta(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Kr)),oa=ta(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Kr)),ca=ta(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Kr)),sa=ta(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Kr)),fa=ta(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Kr)),ua=ta(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Kr));We(we(300,.5,0),we(-240,.5,1));We(we(-100,.75,.35),we(80,1.5,.8)),We(we(260,.75,.35),we(80,1.5,.8)),we();function la(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}la(Kr("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));la(Kr("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),la(Kr("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),la(Kr("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function da(t,e="YlGnBu",n=0){let r=Math.round(dt(t));const a=function t(e){var n=0,r=1,a=!1;function i(t){var i=(t-n)/(r-n);return e(a?Math.max(0,Math.min(1,i)):i)}return i.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],i):[n,r]},i.clamp=function(t){return arguments.length?(a=!!t,i):a},i.interpolator=function(t){return arguments.length?(e=t,i):e},i.copy=function(){return t(e).domain([n,r]).clamp(a)},gn(i)}(function(t){const e={BuGn:ea,OrRd:na,PuBu:ra,YlGnBu:aa,Blues:ia,Oranges:ua,Greens:oa,Purples:sa,Reds:fa,Greys:ca,Grays:ca};if(!e.hasOwnProperty(t)){const e="Color Interpolator Error "+t;throw console.error(e),e}return e[t]}(e));return a.domain([n,r]),a}function ha(t,e,n,r,a,i=10,o=10,c={h:10,w:50},s="h"){const f=n.ticks(i).slice(1),u=e.append("g").attr("transform",`translate(${r.x}, ${r.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"==s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${r.x}, ${r.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${r.x}, ${r.y+c.h*f.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>a?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}class ba{constructor(t=window.innerWidth,e=100,n=100,r={top:50,right:250,bottom:170,left:10},a=12,i=10){this.margin=r,this.rootW=t,this.leftTreePanel={x:r.left,y:r.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:a},this.topTreePanel={x:r.left+e,y:r.top,h:n-i,w:this.rootW-(r.left+e+r.right),id:"topTree"},this.heatmapPanel={x:r.left+e,y:r.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:r.left+e,y:0,h:r.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function pa(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ga(t,e){var n,r,a,i,o,c=new xa(t),s=+t.value&&(c.value=t.value),f=[c];for(null==e&&(e=ma);n=f.pop();)if(s&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)f.push(r=n.children[i]=new xa(a[i])),r.parent=n,r.depth=n.depth+1;return c.eachBefore(va)}function ma(t){return t.children}function ya(t){t.data=t.data.data}function va(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function xa(t){this.data=t,this.depth=this.height=0,this.parent=null}xa.prototype=ga.prototype={constructor:xa,count:function(){return this.eachAfter(pa)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;for(t=n.pop(),e=r.pop();t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return ga(this).eachBefore(ya)}};var wa=Array.prototype.slice,_a=function(t){return t},Ma=1,Sa=2,Ta=3,Aa=4,Ea=1e-6;function Na(t){return"translate("+(t+.5)+",0)"}function Ia(t){return"translate(0,"+(t+.5)+")"}function ka(){return!this.__axis}function $a(t,e){var n=[],r=null,a=null,i=6,o=6,c=3,s=t===Ma||t===Aa?-1:1,f=t===Aa||t===Sa?"x":"y",u=t===Ma||t===Ta?Na:Ia;function l(l){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,h=null==a?e.tickFormat?e.tickFormat.apply(e,n):_a:a,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=l.selection?l.selection():l,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(d,e).order(),_=w.exit(),M=w.enter().append("g").attr("class","tick"),S=w.select("line"),T=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),w=w.merge(M),S=S.merge(M.append("line").attr("stroke","#000").attr(f+"2",s*i)),T=T.merge(M.append("text").attr("fill","#000").attr(f,s*b).attr("dy",t===Ma?"0em":t===Ta?"0.71em":"0.32em")),l!==v&&(x=x.transition(l),w=w.transition(l),S=S.transition(l),T=T.transition(l),_=_.transition(l).attr("opacity",Ea).attr("transform",function(t){return isFinite(t=y(t))?u(t):this.getAttribute("transform")}),M.attr("opacity",Ea).attr("transform",function(t){var e=this.parentNode.__axis;return u(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===Aa||t==Sa?"M"+s*o+","+g+"H0.5V"+m+"H"+s*o:"M"+g+","+s*o+"V0.5H"+m+"V"+s*o),w.attr("opacity",1).attr("transform",function(t){return u(y(t))}),S.attr(f+"2",s*i),T.attr(f,s*b).text(h),v.filter(ka).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Sa?"start":t===Aa?"end":"middle"),v.each(function(){this.__axis=y})}return l.scale=function(t){return arguments.length?(e=t,l):e},l.ticks=function(){return n=wa.call(arguments),l},l.tickArguments=function(t){return arguments.length?(n=null==t?[]:wa.call(t),l):n.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:wa.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(a=t,l):a},l.tickSize=function(t){return arguments.length?(i=o=+t,l):i},l.tickSizeInner=function(t){return arguments.length?(i=+t,l):i},l.tickSizeOuter=function(t){return arguments.length?(o=+t,l):o},l.tickPadding=function(t){return arguments.length?(c=+t,l):c},l}const Ca=!1;class ja{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=ga(function(t){for(var e=[],n={},r=t.split(/\s*(;|\(|\)|,|:)\s*/),a=0;a<r.length;a++){var i=r[a];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=r[a-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||nt(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call((i=this.xScale,$a(Ta,i)).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||nt(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},r=this._sortNodesByLevel();r.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const a=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);var i;t.selectAll(".arm").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(a).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").call((i=this.yScale,$a(Aa,i)).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=mn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),Ca&&console.log(this.postorder),this.xScale=At().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),Ca&&console.log(this.postorder),this.yScale=At().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=mn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}var Da={value:function(){}};function Pa(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Ua(r)}function Ua(t){this._=t}function La(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function Fa(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=Da,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Ua.prototype=Pa.prototype={constructor:Ua,on:function(t,e){var n,r,a=this._,i=(r=a,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)a[n]=Fa(a[n],t.name,e);else if(null==e)for(n in a)a[n]=Fa(a[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=La(a[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Ua(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var Oa,Ya,Ha=0,Ba=0,Xa=0,Va=1e3,za=0,qa=0,Ra=0,Wa="object"==typeof performance&&performance.now?performance:Date,Ga="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ja(){return qa||(Ga(Za),qa=Wa.now()+Ra)}function Za(){qa=0}function Qa(){this._call=this._time=this._next=null}function Ka(t,e,n){var r=new Qa;return r.restart(t,e,n),r}function ti(){qa=(za=Wa.now())+Ra,Ha=Ba=0;try{!function(){Ja(),++Ha;for(var t,e=Oa;e;)(t=qa-e._time)>=0&&e._call.call(null,t),e=e._next;--Ha}()}finally{Ha=0,function(){var t,e,n=Oa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Oa=e);Ya=t,ni(r)}(),qa=0}}function ei(){var t=Wa.now(),e=t-za;e>Va&&(Ra-=e,za=t)}function ni(t){Ha||(Ba&&(Ba=clearTimeout(Ba)),t-qa>24?(t<1/0&&(Ba=setTimeout(ti,t-Wa.now()-Ra)),Xa&&(Xa=clearInterval(Xa))):(Xa||(za=Wa.now(),Xa=setInterval(ei,Va)),Ha=1,Ga(ti)))}Qa.prototype=Ka.prototype={constructor:Qa,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ja():+n)+(null==e?0:+e),this._next||Ya===this||(Ya?Ya._next=this:Oa=this,Ya=this),this._call=t,this._time=n,ni()},stop:function(){this._call&&(this._call=null,this._time=1/0,ni())}};var ri=function(t,e,n){var r=new Qa;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},ai=Pa("start","end","interrupt"),ii=[],oi=0,ci=1,si=2,fi=3,ui=4,li=5,di=6,hi=function(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(s){var f,u,l,d;if(n.state!==ci)return c();for(f in a)if((d=a[f]).name===n.name){if(d.state===fi)return ri(i);d.state===ui?(d.state=di,d.timer.stop(),d.on.call("interrupt",t,t.__data__,d.index,d.group),delete a[f]):+f<e&&(d.state=di,d.timer.stop(),delete a[f])}if(ri(function(){n.state===fi&&(n.state=ui,n.timer.restart(o,n.delay,n.time),o(s))}),n.state=si,n.on.call("start",t,t.__data__,n.index,n.group),n.state===si){for(n.state=fi,r=new Array(l=n.tween.length),f=0,u=-1;f<l;++f)(d=n.tween[f].value.call(t,t.__data__,n.index,n.group))&&(r[++u]=d);r.length=u+1}}function o(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=li,1),i=-1,o=r.length;++i<o;)r[i].call(null,a);n.state===li&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var r in n.state=di,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=Ka(function(t){n.state=ci,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:a,on:ai,tween:ii,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:oi})};function bi(t,e){var n=gi(t,e);if(n.state>oi)throw new Error("too late; already scheduled");return n}function pi(t,e){var n=gi(t,e);if(n.state>si)throw new Error("too late; already started");return n}function gi(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function mi(t,e,n){var r=t._id;return t.each(function(){var t=pi(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return gi(t,r).value[e]}}var yi=function(t,e){var n;return("number"==typeof e?$e:e instanceof Bt?Ne:(n=Bt(e))?(e=n,Ne):Fe)(t,e)};var vi=V.prototype.constructor;var xi=0;function wi(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function _i(){return++xi}var Mi=V.prototype;wi.prototype=function(t){return V().transition(t)}.prototype={constructor:wi,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=o(t));for(var r=this._groups,a=r.length,i=new Array(a),c=0;c<a;++c)for(var s,f,u=r[c],l=u.length,d=i[c]=new Array(l),h=0;h<l;++h)(s=u[h])&&(f=t.call(s,s.__data__,h,u))&&("__data__"in s&&(f.__data__=s.__data__),d[h]=f,hi(d[h],e,n,h,d,gi(s,n)));return new wi(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=s(t));for(var r=this._groups,a=r.length,i=[],o=[],c=0;c<a;++c)for(var f,u=r[c],l=u.length,d=0;d<l;++d)if(f=u[d]){for(var h,b=t.call(f,f.__data__,d,u),p=gi(f,n),g=0,m=b.length;g<m;++g)(h=b[g])&&hi(h,e,n,g,b,p);i.push(b),o.push(f)}return new wi(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],c=o.length,s=r[a]=[],f=0;f<c;++f)(i=o[f])&&t.call(i,i.__data__,f,o)&&s.push(i);return new wi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),c=0;c<i;++c)for(var s,f=e[c],u=n[c],l=f.length,d=o[c]=new Array(l),h=0;h<l;++h)(s=f[h]||u[h])&&(d[h]=s);for(;c<r;++c)o[c]=e[c];return new wi(o,this._parents,this._name,this._id)},selection:function(){return new vi(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=_i(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)if(o=c[f]){var u=gi(o,e);hi(o,t,n,f,c,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new wi(r,this._parents,t,n)},call:Mi.call,nodes:Mi.nodes,node:Mi.node,size:Mi.size,empty:Mi.empty,each:Mi.each,on:function(t,e){var n=this._id;return arguments.length<2?gi(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?bi:pi;return function(){var o=i(this,t),c=o.on;c!==r&&(a=(r=c).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=r(t),a="transform"===n?qe:yi;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,a,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttribute(t))===c?null:o===r&&c===a?i:i=e(r=o,a=c);this.removeAttribute(t)}})(n,a,mi(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,a;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?a:a=e(r=i,n)}}:function(t,e,n){var r,a;return function(){var i=this.getAttribute(t);return i===n?null:i===r?a:a=e(r=i,n)}})(n,a,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var a=r(t);return this.tween(n,(a.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(a,e))},style:function(t,e,n){var r="transform"==(t+="")?ze:yi;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=x(this,t),o=(this.style.removeProperty(t),x(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,a,i;return function(){var o=x(this,t),c=n(this);return null==c&&(this.style.removeProperty(t),c=x(this,t)),o===c?null:o===r&&c===a?i:i=e(r=o,a=c)}}(t,r,mi(this,"style."+t,e)):function(t,e,n){var r,a;return function(){var i=x(this,t);return i===n?null:i===r?a:a=e(r=i,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,a=e.apply(r,arguments);return a&&function(e){r.style.setProperty(t,a(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(mi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=gi(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var a=pi(this,t),i=a.tween;if(i!==n)for(var o=0,c=(r=n=i).length;o<c;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}:function(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=pi(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var c={name:e,value:n},s=0,f=a.length;s<f;++s)if(a[s].name===e){a[s]=c;break}s===f&&a.push(c)}i.tween=a}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){bi(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){bi(this,t).delay=e}})(e,t)):gi(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){pi(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){pi(this,t).duration=e}})(e,t)):gi(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){pi(this,t).ease=e}}(e,t)):gi(this.node(),e).ease}};var Si={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ti(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Si.time=Ja(),Si;return n}V.prototype.interrupt=function(t){return this.each(function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>si&&n.state<li,n.state=di,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)})},V.prototype.transition=function(t){var e,n;t instanceof wi?(e=t._id,t=t._name):(e=_i(),(n=Si).time=Ja(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,c=r[i],s=c.length,f=0;f<s;++f)(o=c[f])&&hi(o,t,e,f,c,n||Ti(o,e));return new wi(r,this._parents,t,e)};class Ai{constructor(t,e,n=!1){$(`#${t}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadButton(t,e,n,r,a="fa-download"){this.createButton(t,a);z(`#${t}`).on("click",()=>{this.downloadSvg(e,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);z(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let r=$($($(`${"#"+t}`))[0]);var a=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var a=n[r].cssRules,i=0;i<a.length;i++){var o=a[i];if(void 0!==o.style){var c;try{c=$(t).find(o.selectorText)}catch(t){c=[]}c.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var s=document.createElement("style");return s.setAttribute("type","text/css"),s.innerHTML="<![CDATA[\n"+e+"\n]]>",s}(r.get());a.prepend(i),$("#"+n).html("").hide();var o=$(`#${n}`).append(a).html(),c=new Blob([o],{type:"image/svg+xml"});saveAs(c,e),$(`#${n}`).html("").hide()}}class Ei{constructor(t,e=!1,n=30,r=-40,a=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=r,this.duration=a}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),z("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){z("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=U.pageX,e=U.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;z("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){z("#"+this.id).html(t)}}class Ni{constructor(t,e="YlGnBu",n=!0,r=10,a=2){this.data=t,this.useLog=n,this.base=r,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=a,this.colorScheme=e,this.toolbar=void 0,this.tooltip=void 0}createToolbar(t,e){return this.toolbar=new Ai(t,e),this.toolbar}createTooltip(t){return this.tooltip=new Ei(t),z(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}drawColorLegend(t,e={x:0,y:0},n=5){ha(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.base)}redraw(t,e,n,r={w:1e3,h:1e3},a=30){this._setXList(r.w,e),this._setYList(r.h,n),this.draw(t,r,a)}draw(t,e={w:1e3,h:600},n=30,r=!0){void 0===this.xList&&this._setXList(e.w),void 0===this.yList&&this._setYList(e.h),void 0===this.colorScale&&(this.colorScale=da(this.data.map(t=>t.value),this.colorScheme));const a=t.selectAll(".exp-map-xlabel").data(this.xList),i=this.yScale.range()[1]+2*this.yScale.bandwidth();a.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}),a.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${i}) rotate(${n})`}).merge(a).text(t=>t),a.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).style("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){z(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){z(this).classed("normal",!0).classed("highlighted",!1)});const o=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);o.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const c=this;o.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class",t=>"exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill",t=>"#eeeeee").on("mouseover",function(t){const e=z(this);c.cellMouseover(e)}).on("mouseout",function(t){z(this);c.cellMouseout()}).merge(o).style("fill",t=>r&&0==t.originalValue?"#DDDDDD":this.colorScale(t.value)),o.exit().remove()}cellMouseout(t){q("*").classed("highlighted",!1)}cellMouseover(t){const e=t.attr("row"),n=t.attr("col");q(".exp-map-xlabel").filter(`.${e}`).classed("highlighted",!0),q(".exp-map-ylabel").filter(`.${n}`).classed("highlighted",!0),t.classed("highlighted",!0)}_setXList(t,e){this.xList=void 0!==e?e:mt().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=At().domain(this.xList).range([0,t]).padding(.05)}_setYList(t,e){this.yList=void 0!==e?e:mt().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=At().domain(this.yList).range([0,t]).padding(.05)}}class Ii{constructor(t,e,n,r="YlGnBu",a=2,i=new ba,o=!0,c=10){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new ja(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new ja(this.data.rowTree,"h"),heatmap:new Ni(this.data.heatmap,r,o,c,a)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.tooltip=void 0,this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new Ai(t,e),this.toolbar}createTooltip(t){return this.tooltip=new Ei(t),z(`#${t}`).classed("heatmap-tooltip",!0),this.tooltip}render(t,e,n=!0,r=!0,a="top",i=5){this._updateConfig(a),this.visualComponents.svg=function(t,e,n,r,a){return void 0===a&&(a=`${t}-svg`),z("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),r&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let r=this.visualComponents.svg;const a="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=r.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",function(t){z(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);r.selectAll(a).filter(t=>e.includes(t)).classed("highlighted",!0),r.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)}).on("mouseout",function(){z(this).attr("r",2).attr("fill","#333"),r.selectAll(a).classed("highlighted",!1),r.selectAll(".leaf-color").classed("highlighted",!1)}),i}_renderHeatmap(t,e,n,r=5){let a=this.visualComponents.svg;const i=this.config.panels.main,o=a.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(a,this.config.panels.legend,r)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var ki=Math.PI,$i=2*ki,Ci=$i-1e-6;function ji(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Di(){return new ji}ji.prototype=Di.prototype={constructor:ji,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,c=n-t,s=r-e,f=i-t,u=o-e,l=f*f+u*u;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(l>1e-6)if(Math.abs(u*c-s*f)>1e-6&&a){var d=n-i,h=r-o,b=c*c+s*s,p=d*d+h*h,g=Math.sqrt(b),m=Math.sqrt(l),y=a*Math.tan((ki-Math.acos((b+l-p)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*f)+","+(e+v*u)),this._+="A"+a+","+a+",0,0,"+ +(u*d>f*h)+","+(this._x1=t+x*c)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e;var o=(n=+n)*Math.cos(r),c=n*Math.sin(r),s=t+o,f=e+c,u=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+f:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+s+","+f),n&&(l<0&&(l=l%$i+$i),l>Ci?this._+="A"+n+","+n+",0,1,"+u+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+u+","+(this._x1=s)+","+(this._y1=f):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=ki)+","+u+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Pi=function(t){return function(){return t}};function Ui(t){this._context=t}Ui.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Li=function(t){return new Ui(t)};function Fi(t){return t[0]}function Oi(t){return t[1]}var Yi=function(){var t=Fi,e=Oi,n=Pi(!0),r=null,a=Li,i=null;function o(o){var c,s,f,u=o.length,l=!1;for(null==r&&(i=a(f=Di())),c=0;c<=u;++c)!(c<u&&n(s=o[c],c,o))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+t(s,c,o),+e(s,c,o));if(f)return i=null,f+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Pi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Pi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Pi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o};function Hi(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Bi(t,e){this._context=t,this._k=(1-e)/6}Bi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Hi(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Hi(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Xi=function t(e){function n(t){return new Bi(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Vi(t){return t<0?-1:1}function zi(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),c=(i*a+o*r)/(r+a);return(Vi(i)+Vi(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function qi(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Ri(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,c=(i-r)/3;t._context.bezierCurveTo(r+c,a+c*e,i-c,o-c*n,i,o)}function Wi(t){this._context=t}function Gi(t){this._context=t}Wi.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ri(this,this._t0,qi(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Ri(this,qi(this,n=zi(this,t,e)),n);break;default:Ri(this,this._t0,n=zi(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new Gi(t)}.prototype=Object.create(Wi.prototype)).point=function(t,e){Wi.prototype.point.call(this,e,t)},Gi.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}};class Ji{constructor(t,e,n,r,a=!1){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)):this.exons.sort((t,e)=>Number(e.exonNumber)-Number(t.exonNumber)),this.exonsCurated=n.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)),this.junctions=r.sort((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0),this.isIsoform=a,this.intronLength=0,this.minExonWidth=5}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,r,a){t.selectAll(".junc").style("fill",n=>{const a=e.filter(t=>t.junctionId==n.junctionId)[0],i=r(a.value);return t.selectAll(".junc-curve").filter(`.junc${n.junctionId}`).style("stroke",i),i}),t.selectAll(".exon-curated").style("fill",t=>{const e=n.filter(e=>e.exonId==t.exonId)[0];if(void 0===e)throw`${t.exonId} has no data`;return a(e.value)})}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach((t,e)=>{0==e&&(t.x=0),e>0&&(t.x=this.exons[e-1].x+this.exons[e-1].w+this.xScale(this.intronLength)),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}),this.exonsCurated.forEach((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0!==t.oriExon){if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}else console.warn(`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`)}),this.isIsoform){t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0)}else{this.junctions.forEach(t=>{if(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),t.displayName=t.junctionId,void 0===t.startExon||void 0===t.endExon)t.filtered=!0,console.warn("Can't map junction to exons "+t.junctionId);else{t.displayName=`Exon ${t.startExon.exonNumber} - ${t.endExon.exonNumber}`,t.startExon.exonNumber==t.endExon.exonNumber&&console.warn(t.junctionId+" is in Exon: "+t.startExon.chromStart+" - "+t.startExon.chromEnd),t.filtered=!1;const e=Number(t.chromStart)-Number(t.startExon.chromStart)+1,r=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(e),t.endX=t.endExon.x+this.xScale(r),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*(Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber))+.5),t.cy<0&&(t.cy=0)}});const e=this.junctions.reduce((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t),{});this.junctions.forEach(t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())});const r=Yi().x(t=>t.x).y(t=>t.y).curve(Xi);this.junctions.filter(t=>!t.filtered).forEach((e,a)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class",`junc-curve junc${e.junctionId}`).attr("d",r).style("stroke","#92bcc9")});const a=t.selectAll(".junc").data(this.junctions.filter(t=>!t.filtered));a.attr("cx",t=>t.cx),a.attr("cy",t=>t.cy),a.enter().append("circle").attr("class",t=>`junc junc${t.junctionId}`).attr("cx",t=>t.cx).attr("cy",t=>t.cy).merge(a).attr("r",4).style("fill","rgb(86, 98, 107)");const i=t.selectAll(".exon").data(this.exons);i.attr("x",t=>t.x),i.attr("y",n),i.enter().append("rect").attr("class",t=>`exon exon${t.exonNumber}`).attr("y",n).attr("rx",2).attr("ry",2).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(i).style("cursor","default"),t.append("text").attr("id","modelInfo").style("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const r=t.selectAll(".exon-curated").data(this.exonsCurated);r.attr("x",t=>t.x),r.attr("y",n),r.enter().append("rect").attr("class",t=>"exon-curated").attr("y",n).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(r).style("fill","#eee").style("cursor","default"),t.append("text").attr("id","modelLabel").style("text-anchor","end").attr("x",this.xScale(0)-5).attr("y",n+7.5).style("font-size",9).text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId)}setXscale(t){this.exons.forEach(t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1});const e=dt(this.exons,t=>t.length),n=[0,e*this.exons.length],r=[0,t];this.xScale=mn().domain(n).range(r);const a=this.xScale.invert(this.minExonWidth),i=bt(this.exons,t=>t.length>a?t.length:a);this.intronLength=(e*this.exons.length-i)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter(e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t);return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class Zi{constructor(t,e,n,r){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=r}showData(t,e,n){t.sort((t,e)=>-(t.originalValue-e.originalValue));const r=t.map(t=>t.transcriptId);this.sortTracks(r),t.forEach(t=>{this.visualDom.select(`#${t.transcriptId.replace(".","_")}`).selectAll(".exon-curated").style("fill",e(t.value))}),this.visualDom.select(".lollipopGraph").remove();const a=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),i=a.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var o;i.append("line").attr("x1",0).attr("y1",t=>this.yScale(t.transcriptId)).attr("y2",t=>this.yScale(t.transcriptId)).style("stroke",t=>e(t.value)).style("stroke-width",2).transition().duration(1e3).attr("x2",t=>n(t.value)),i.append("circle").attr("cx",0).attr("cy",t=>this.yScale(t.transcriptId)).attr("r",5).style("fill",t=>e(t.value)).transition().duration(1e3).attr("cx",t=>n(t.value)),a.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call((o=n,$a(Ma,o)).ticks(3)),a.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).style("text-anchor","end").style("font-size",9).text("log10(TPM)"),a.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call(function(t){return $a(Sa,t)}(this.yScale).tickValues([]))}sortTracks(t){console.log(t),this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e,n=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const r=e.selectAll(".isotrack").data(this.isoforms.map(t=>t.transcriptId));r.transition().duration(n).attr("transform",t=>`translate(0, ${this.yScale(t)})`),r.enter().append("g").attr("id",t=>t.replace(".","_")).attr("class","isotrack").attr("transform",t=>"translate(0, 0)").transition().duration(n/2).attr("transform",t=>`translate(0, ${this.yScale(t)})`),t||this._renderModels(this.config.w)}_renderModels(t){this.isoforms.forEach(e=>{const n=new Ji(e,this.modelExons,this.isoformExons[e.transcriptId],[],!0),r=z(`#${e.transcriptId.replace(".","_")}`);n.render(r,{w:t,h:this.yScale.bandwidth()})})}setYscale(t,e){void 0===e&&(e=this.isoforms.map(t=>t.transcriptId)),this.yScale=At().domain(e).range([0,t]).padding(.05)}}function Qi(t,e,n,r,a,i,o,c,s,f){const u=n.visualComponents.svg,l=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});u.selectAll(".exp-map-ylabel").text(t=>void 0!==l[t]?l[t].tissueName:t).style("cursor","pointer").attr("x",n.objects.heatmap.xScale.range()[1]+15),u.select("#heatmap").selectAll(".exp-map-ycolor").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[1]+5).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("exp-map-ycolor",!0).style("fill",t=>`#${l[t].colorHex}`),n.objects.heatmap.xScale.domain().length>15&&u.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.yScale.domain()).enter().append("rect").attr("x",n.objects.heatmap.xScale.range()[0]-10).attr("y",t=>n.objects.heatmap.yScale(t)).attr("width",5).attr("height",n.objects.heatmap.yScale.bandwidth()).classed("leaf-color",!0).style("fill",t=>`#${l[t].colorHex}`),u.selectAll(".exp-map-ylabel").on("mouseover",function(){z(this).classed("highlighted",!0)}).on("click",function(t){u.selectAll(".exp-map-ylabel").classed("clicked",!1),z(this).classed("clicked",!0);const n=t,l=c.filter(t=>t.tissueId==n),d=s.filter(t=>t.tissueId==n);e.changeTextlabel(u.select("#geneModel"),n),e.addData(u.select("#geneModel"),l,d,a,i);const h=mn().domain([ht(f.map(t=>t.value)),dt(f.map(t=>t.value))]).range([0,-100]),b=f.filter(t=>t.tissueId==n);r.showData(b,o,h)})}return t.render=function(t,e,n,r=function(){const t="https://gtexportal.org/rest/v1/";return{dyneqtl:t+"association/dyneqtl",exonExp:t+"expression/medianExonExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",geneId:t+"reference/geneId?format=json&release=v7&geneId=",geneExp:t+"expression/geneExpression?datasetId=gtex_v7&gencodeId=",geneModel:t+"reference/collapsedGeneModel?unfiltered=false&release=v7&geneId=",geneModelUnfiltered:t+"reference/collapsedGeneModel?unfiltered=true&release=v7&geneId=",isoform:t+"reference/transcript?release=v7&gencode_id=",isoformExp:t+"expression/isoformExpression?datasetId=gtex_v7&boxplotDetail=median&gencodeId=",junctionExp:t+"expression/medianJunctionExpression?datasetId=gtex_v7&hcluster=true&gencodeId=",medGeneExp:t+"expression/medianGeneExpression?datasetId=gtex_v7&hcluster=true&page_size=10000",sample:"data/gtex.Sample.csv",snp:t+"reference/snp?reference=current&format=json&snpId=",tissue:t+"dataset/tissueInfo",tissueSites:t+"dataset/tissueSiteDetail?format=json",topInTissueFiltered:t+"expression/topExpressedGenes?datasetId=gtex_v7&filterMtGene=true&sort_by=median&sortDirection=desc&page_size=50&tissueId=",topInTissue:t+"expression/topExpressedGenes?datasetId=gtex_v7&sort_by=median&sortDirection=desc&page_size=50&tissueId=",variantId:t+"reference/snp?format=json&reference=current&release=v7&variantId=",rnaseqCram:"data/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"data/wgs_cram_files_v7_hg38_dbGaP_011516.txt"}}()){et(r.geneId+e).then(function(a){if(!a.hasOwnProperty("geneId"))throw"Parsing Error: attribute geneId doesn't exist.";if(0==a.geneId.length)throw alert("No gene is found with "+e),"Fatal Error: gene is not found";if(a.geneId.length>1){let t=a.geneId.filter(t=>t.geneSymbolUpper==e.toUpperCase()||t.ensemblId==e.toUpperCase()||t.gencodeId==e.toUpperCase());if(t.length>1)throw alert("Fatal Error: input gene ID is not unique."),"Fatal Error: input gene ID is not unique.";a.geneId=t}const i=a.geneId[0];if(void 0===i)throw alert("No gene is found with "+e),"Fatal Error: gene is not found";const o=i.gencodeId,c=[et(r.tissue),et(r.geneModelUnfiltered+o),et(r.geneModel+o),et(r.isoform+o),et(r.junctionExp+o),et(r.exonExp+o),et(r.isoformExp+o)];Promise.all(c).then(function(e){const r=function(t){if(!t.hasOwnProperty("tissueInfo"))throw"Fatal Error: parseTissues input error.";const e=t.tissueInfo;return["tissueId","tissueName","colorHex"].forEach(t=>{if(!e[0].hasOwnProperty(t))throw"Fatal Error: parseTissue attr not found: "+t}),e}(e[0]),a=Qr(e[1]),o=Qr(e[2]),c=function(t){if(!t.hasOwnProperty("transcript"))throw"parseIsoforms input error";return t.transcript.filter(t=>"transcript"==t.featureType).sort((t,e)=>-(Math.abs(t.chromEnd-t.chromStart)+1-(Math.abs(e.chromEnd-e.chromStart)+1)))}(e[3]),s=function(t){if(!t.hasOwnProperty("transcript"))throw"parseIsoforms input error "+t;return t.transcript.filter(t=>"exon"==t.featureType).reduce((t,e)=>(void 0===t[e.transcriptId]&&(t[e.transcriptId]=[]),t[e.transcriptId].push(e),t),{})}(e[3]),f=function(t){const e="medianJunctionExpression";if(!t.hasOwnProperty(e))throw"Fatal Error: parseJunctions input error. "+t;return t[e].filter(t=>"Liver"==t.tissueId).map(t=>{let e=t.junctionId.split("_");return{chrom:e[0],chromStart:e[1],chromEnd:e[2],junctionId:t.junctionId}})}(e[4]),u=function(t,e=!0,n=1){const r="medianJunctionExpression";if(!t.hasOwnProperty(r))throw"parseJunctionExpression input error";const a=t[r];return["tissueId","junctionId","data","gencodeId"].forEach(t=>{if(!a[0].hasOwnProperty(t))throw"Fatal Error: parseJunctionExpression attr not found: "+t}),a.forEach(t=>{t.value=e?Math.log10(Number(t.data+n)):Number(t.data),t.x=t.junctionId,t.y=t.tissueId,t.originalValue=Number(t.data),t.id=t.gencodeId}),a.sort((t,e)=>t.junctionId>e.junctionId?1:t.junctionId<e.junctionId?-1:0)}(e[4]),l=function(t,e,n=!0,r=1){const a=e.reduce((t,e)=>(t[e.exonId]=e,t),{}),i="medianExonExpression";if(!t.hasOwnProperty(i))throw"parseExonExpression input error";const o=t[i];return["data","exonId","tissueId"].forEach(t=>{if(!o[0].hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t}),o.forEach(t=>{const e=a[t.exonId];["end","start"].forEach(t=>{if(!e.hasOwnProperty(t))throw"Fatal Error: parseExonExpression attr not found: "+t}),t.l=e.end-e.start+1,t.value=Number(t.data)/t.l,t.originalValue=Number(t.data)/t.l,n&&(t.value=Math.log2(t.value+1)),t.x=t.exonId,t.y=t.tissueId,t.id=t.gencodeId,t.chromStart=e.start,t.chromEnd=e.end,t.unit=t.unit+" per base"}),o.sort((t,e)=>t.chromStart<e.chromStart?-1:t.chromStart>e.chromStart?1:0)}(e[5],o);let d=function(t,e=!0,n=1){const r="isoformExpression";if(!t.hasOwnProperty(r))throw"parseIsoformExpression input error";return t[r].forEach(t=>{t.value=e?Math.log10(Number(t.data+n)):Number(t.data),t.originalValue=Number(t.data),t.x=t.transcriptId,t.y=t.tissueId,t.id=t.gencodeId}),t[r]}(e[6]);const h=da(l.map(t=>t.value),"Blues"),b=da(d.map(t=>t.value),"Greys"),p=da(u.map(t=>t.value),"Reds");let g=void 0;const m={root:n,svg:`${n}-svg`,tooltip:"isoformTooltip",toolbar:"isoformToolbar",clone:"isoformClone",buttons:{save:"isoformSave"}};switch(0==$(`#${m.tooltip}`).length&&$("<div/>").attr("id",m.tooltip).appendTo($("body")),["toolbar","clone"].forEach(t=>{$("<div/>").attr("id",m[t]).appendTo($(`#${m.root}`))}),t){case"isoform":{const t=new ba(window.innerWidth,150,100,{top:30,right:350,bottom:200,left:50},12,10);let n=e[6].clusters.tissue,r=e[6].clusters.isoform;(g=new Ii(r,n,d,"Greys",5,t,!0,10)).render(m.root,m.svg,!0,!0,top,5),c.sort((t,e)=>{const n=g.objects.columnTree.xScale.domain();return n.indexOf(t.transcriptId)<n.indexOf(e.transcriptId)?-1:n.indexOf(t.transcriptId)>n.indexOf(e.transcriptId)?1:0});break}case"isoformTransposed":{const t=new ba(window.innerWidth,150,100,{top:30,right:350,bottom:200,left:50},12,10);let n=e[6].clusters.tissue,r=e[6].clusters.isoform,a=function(t,e=!0,n=1){const r="isoformExpression";if(!t.hasOwnProperty(r))throw"parseIsoformExpression input error";return t[r].forEach(t=>{t.value=e?Math.log10(Number(t.data+n)):Number(t.data),t.originalValue=Number(t.data),t.y=t.transcriptId,t.x=t.tissueId,t.id=t.gencodeId}),t[r]}(e[6]);(g=new Ii(n,r,a,"Greys",5,t,!0,10)).render(m.root,m.svg,!0,!0,top,5),c.sort((t,e)=>{const n=g.objects.rowTree.yScale.domain();return n.indexOf(t.transcriptId)<n.indexOf(e.transcriptId)?-1:n.indexOf(t.transcriptId)>n.indexOf(e.transcriptId)?1:0});break}case"junction":{const t=new ba(window.innerWidth,150,0,{top:30,right:350,bottom:200,left:50},12,10);let n=e[4].clusters.tissue;(g=new Ii(void 0,n,u,"Reds",5,t,!0,10)).render(m.root,m.svg,!1,!0,top,5);break}case"exon":{const t=new ba(window.innerWidth,150,0,{top:30,right:350,bottom:200,left:50},12,10);let n=e[5].clusters.tissue;(g=new Ii(void 0,n,l,"Blues",5,t,!0,2)).render(m.root,m.svg,!1,!0,top,5);break}default:throw"Input type is not recognized"}$("#spinner").hide(),g.createTooltip(m.tooltip);const y={x:g.config.panels.main.x,y:g.config.panels.main.h+g.config.panels.main.y+130,w:g.config.panels.main.w,h:100},v={x:y.x,y:y.y+y.h,w:y.w,h:20*c.length};let x=+z(`#${m.svg}`).attr("height");z(`#${m.svg}`).attr("height",x+y.h+v.h);const w=new Ji(i,a,o,f),_=g.visualComponents.svg.append("g").attr("id","geneModel").attr("transform",`translate(${y.x}, ${y.y})`);w.render(_,y);const M=new Zi(c,s,a,v),S=g.visualComponents.svg.append("g").attr("transform",`translate(${v.x}, ${v.y})`);switch(M.render(!1,S),function(t,e,n,r){const a=t.visualComponents.svg;let i=t.objects.heatmap.xScale.range()[1]+50;ha("Exon read counts per base",a.select("#geneModel"),n,{x:i,y:30},!0,5,2,{h:20,w:10},"v"),i+=50,ha("Junction read counts",a.select("#geneModel"),e,{x:i,y:30},!0,5,10,{h:20,w:10},"v")}(g,p,h),function(t,e){t.createToolbar(e.toolbar,t.tooltip).createDownloadButton(e.buttons.save,e.svg,`${e.root}-save.svg`,e.clone)}(g,m),t){case"isoform":Qi(r,w,g,M,p,h,b,u,l,d),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const e=z(this);n.objects.heatmap.cellMouseover(e);const r=void 0===i[t.y]?t.y:i[t.y].tissueName;a.show(`Tissue: ${r}<br/> Isoform: ${t.id}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(3)}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.replace(".","_");r.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),r.selectAll(".exon-curated").classed("highlighted",!1)})}(r,0,g);break;case"isoformTransposed":!function(t,e,n,r,a,i,o,c,s,f){const u=n.visualComponents.svg,l=t.reduce((t,e)=>(t[e.tissueId]=e,t),{}),d=n.tooltip;u.selectAll(".exp-map-xlabel").text(t=>void 0!==l[t]?l[t].tissueName:t).style("cursor","pointer"),u.select("#heatmap").selectAll(".exp-map-xcolor").data(n.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>n.objects.heatmap.xScale(t)).attr("y",n.objects.heatmap.yScale.range()[1]+5).attr("width",n.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("exp-map-xcolor",!0).style("fill",t=>`#${l[t].colorHex}`),n.objects.heatmap.yScale.domain().length>15&&u.select("#heatmap").selectAll(".leaf-color").data(n.objects.heatmap.xScale.domain()).enter().append("rect").attr("x",t=>n.objects.heatmap.xScale(t)).attr("y",n.objects.heatmap.yScale.range()[0]-10).attr("width",n.objects.heatmap.xScale.bandwidth()).attr("height",5).classed("leaf-color",!0).style("fill",t=>`#${l[t].colorHex}`),u.selectAll(".exp-map-xlabel").on("mouseover",function(){z(this).classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1)}).on("click",function(t){u.selectAll(".exp-map-xlabel").classed("clicked",!1),z(this).classed("clicked",!0);const n=t,l=c.filter(t=>t.tissueId==n),d=s.filter(t=>t.tissueId==n);e.changeTextlabel(u.select("#geneModel"),n),e.addData(u.select("#geneModel"),l,d,a,i);const h=mn().domain([ht(f.map(t=>t.value)),dt(f.map(t=>t.value))]).range([0,-100]),b=f.filter(t=>t.tissueId==n);r.showData(b,o,h)}),u.selectAll(".exp-map-cell").on("mouseover",function(t){const e=z(this);n.objects.heatmap.cellMouseover(e);const r=void 0===l[t.x]?t.x:l[t.x].tissueName;d.show(`Tissue: ${r}<br/> Isoform: ${t.id}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(3)}`)}).on("mouseout",function(t){u.selectAll("*").classed("highlighted",!1),d.hide()}),u.selectAll(".exp-map-ylabel").on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.replace(".","_");u.select(`#${e}`).selectAll(".exon-curated").classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),u.selectAll(".exon-curated").classed("highlighted",!1)})}(r,w,g,M,p,h,b,u,l,d);break;case"junction":Qi(r,w,g,M,p,h,b,u,l,d),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const r=z(this);n.objects.heatmap.cellMouseover(r);const o=void 0===i[t.y]?t.x:i[t.y].tissueName,c=e.junctions.filter(e=>e.junctionId==t.x&&!e.filtered)[0];a.show(`Tissue: ${o}<br/> Junction: ${c.displayName}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(4)}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").each(function(){const t=z(this),n=t.text();t.attr("id",`${n}`),t.classed(`junc${n}`,!0);const r=e.junctions.filter(t=>t.junctionId==`${n}`&&!t.filtered)[0];void 0!==r&&t.text(r.displayName)}).on("mouseover",function(){const t=z(this).attr("id");z(this).classed("highlighted",!0),r.selectAll(`.junc${t}`).classed("highlighted",!0);const n=e.junctions.filter(e=>e.junctionId==t&&!e.filtered)[0];void 0!==n&&(r.selectAll(`.exon${n.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(`.exon${n.endExon.exonNumber}`).classed("highlighted",!0))}).on("mouseout",function(){z(this).classed("highlighted",!1),q(".junc").classed("highlighted",!1),q(".junc-curve").classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)}),r.selectAll(".junc").on("mouseover",function(t){q(`.junc${t.junctionId}`).classed("highlighted",!0),console.log(`Junction ${t.junctionId}: ${t.chromStart} - ${t.chromEnd}`),void 0!==t.startExon&&(r.selectAll(".exon").filter(`.exon${t.startExon.exonNumber}`).classed("highlighted",!0),r.selectAll(".exon").filter(`.exon${t.endExon.exonNumber}`).classed("highlighted",!0)),r.select(`.junc${t.junctionId}`).classed("highlighted",!0).classed("normal",!1)}).on("mouseout",function(t){q(`.junc${t.junctionId}`).classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1),r.selectAll(".xLabel").classed("highlighted",!1).classed("normal",!0)}),r.selectAll(".exon-curated").on("mouseover",function(t){z(this).classed("highlighted",!0),console.log(`Exon ${t.exonNumber}: ${t.chromStart} - ${t.chromEnd}. RPK: ${t.originalValue}`)}).on("mouseout",function(t){z(this).classed("highlighted",!1)})}(r,w,g);break;case"exon":Qi(r,w,g,M,p,h,b,u,l,d),function(t,e,n){const r=n.visualComponents.svg,a=n.tooltip,i=t.reduce((t,e)=>(t[e.tissueId]=e,t),{});r.selectAll(".exp-map-cell").on("mouseover",function(t){const e=z(this);n.objects.heatmap.cellMouseover(e);const r=void 0===i[t.y]?t.x:i[t.y].tissueName;a.show(`Tissue: ${r}<br/> Exon: ${t.exonId}<br/> ${t.unit}: ${parseFloat(t.originalValue.toExponential()).toPrecision(3)}`)}).on("mouseout",function(t){r.selectAll("*").classed("highlighted",!1),a.hide()}),r.selectAll(".exp-map-xlabel").on("mouseover",function(t){z(this).classed("highlighted",!0);const e=t.split("_")[1];r.selectAll(`.exon${e}`).classed("highlighted",!0)}).on("mouseout",function(){z(this).classed("highlighted",!1),r.selectAll(".exon").classed("highlighted",!1)})}(r,0,g);break;default:throw"unrecognized type"}}).catch(function(t){console.error(t),$("#spinner").hide()})}).catch(function(t){console.error(t),$("#spinner").hide()})},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNvZm9ybS1leHByZXNzaW9uLmJ1bmRsZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0QWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hc2NlbmRpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWF4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3N1bS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbmVzdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUeXBlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlZmF1bHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvd2Vlay5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21vbnRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29QYXJzZS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvZ3RleERhdGFQYXJzZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jb2xvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvQWNjZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvRGFyazIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwxLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0My5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9QUkduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1BpWUcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZEJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkR3kuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1JkWWxHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9TcGVjdHJhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVHbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVQdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvR25CdS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvT3JSZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdUduLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdVJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9SZFB1LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduQnUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxPclJkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvQmx1ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmV5cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1B1cnBsZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9SZWRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvT3Jhbmdlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvY3ViZWhlbGl4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9yYWluYm93LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS92aXJpZGlzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9jb2xvcnMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3NlcXVlbnRpYWwuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQWZ0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEJlZm9yZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zdW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvc29ydC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9wYXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2FuY2VzdG9ycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9kZXNjZW5kYW50cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9sZWF2ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGlua3MuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvRGVuZHJvZ3JhbS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvbmV3aWNrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL1Rvb2xiYXIuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL3V0aWxzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9Ub29sdGlwLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9IZWF0bWFwLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9EZW5kcm9IZWF0bWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbW9ub3RvbmUuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL0dlbmVNb2RlbC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvSXNvZm9ybVRyYWNrVmlld2VyLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvSXNvZm9ybUV4cHJlc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsInZhciBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCFlbGVtZW50Lm1hdGNoZXMpIHtcbiAgICB2YXIgdmVuZG9yTWF0Y2hlcyA9IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgfHwgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmVuZG9yTWF0Y2hlcy5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBtYXRjaGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKHRydWUpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdGlvbikge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cbiIsInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBERUxJTUlURVIgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblxuICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICBpZiAoY29udmVydCkgcmV0dXJuIGNvbnZlcnQocm93LCBpIC0gMSk7XG4gICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgfSk7XG4gICAgcm93cy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUm93cyh0ZXh0LCBmKSB7XG4gICAgdmFyIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxuICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgbiA9IDAsIC8vIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gY3VycmVudCB0b2tlblxuICAgICAgICBlb2YgPSBOIDw9IDAsIC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9GP1xuICAgICAgICBlb2wgPSBmYWxzZTsgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICAvLyBTdHJpcCB0aGUgdHJhaWxpbmcgbmV3bGluZS5cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gTkVXTElORSkgLS1OO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBSRVRVUk4pIC0tTjtcblxuICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuICAgICAgaWYgKGVvZikgcmV0dXJuIEVPRjtcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuXG4gICAgICAvLyBVbmVzY2FwZSBxdW90ZXMuXG4gICAgICB2YXIgaSwgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSBRVU9URSkge1xuICAgICAgICB3aGlsZSAoSSsrIDwgTiAmJiB0ZXh0LmNoYXJDb2RlQXQoSSkgIT09IFFVT1RFIHx8IHRleHQuY2hhckNvZGVBdCgrK0kpID09PSBRVU9URSk7XG4gICAgICAgIGlmICgoaSA9IEkpID49IE4pIGVvZiA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpIC0gMSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZS5cbiAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSA9IEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IERFTElNSVRFUikgY29udGludWU7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gbGFzdCB0b2tlbiBiZWZvcmUgRU9GLlxuICAgICAgcmV0dXJuIGVvZiA9IHRydWUsIHRleHQuc2xpY2UoaiwgTik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHJvdy5wdXNoKHQpLCB0ID0gdG9rZW4oKTtcbiAgICAgIGlmIChmICYmIChyb3cgPSBmKHJvdywgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChyb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9KSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dCA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHJlRm9ybWF0LnRlc3QodGV4dCArPSBcIlwiKSA/IFwiXFxcIlwiICsgdGV4dC5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufVxuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3ZcIjtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbmV4cG9ydCB2YXIgY3N2UGFyc2UgPSBjc3YucGFyc2U7XG5leHBvcnQgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbiIsImZ1bmN0aW9uIHJlc3BvbnNlSnNvbihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3JcIjtcblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1heDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlc1tpXSkgc3VtICs9IHZhbHVlOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpIHN1bSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJpbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5cbmV4cG9ydCB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbChyYW5nZSkge1xuICB2YXIgaW5kZXggPSBtYXAoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIHJhbmdlID0gcmFuZ2UgPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChyYW5nZSk7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAoKTtcbiAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7cmFuZ2UgYXMgc2VxdWVuY2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IG9yZGluYWwgZnJvbSBcIi4vb3JkaW5hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYW5kKCkge1xuICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcmFuZ2VbMV0gPCByYW5nZVswXSxcbiAgICAgICAgc3RhcnQgPSByYW5nZVtyZXZlcnNlIC0gMF0sXG4gICAgICAgIHN0b3AgPSByYW5nZVsxIC0gcmV2ZXJzZV07XG4gICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgIGlmIChyb3VuZCkgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICBpZiAocm91bmQpIHN0YXJ0ID0gTWF0aC5yb3VuZChzdGFydCksIGJhbmR3aWR0aCA9IE1hdGgucm91bmQoYmFuZHdpZHRoKTtcbiAgICB2YXIgdmFsdWVzID0gc2VxdWVuY2UobikubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7IH0pO1xuICAgIHJldHVybiBvcmRpbmFsUmFuZ2UocmV2ZXJzZSA/IHZhbHVlcy5yZXZlcnNlKCkgOiB2YWx1ZXMpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gWytfWzBdLCArX1sxXV0sIHJvdW5kID0gdHJ1ZSwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kd2lkdGg7XG4gIH07XG5cbiAgc2NhbGUuc3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdGVwO1xuICB9O1xuXG4gIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISFfLCByZXNjYWxlKCkpIDogcm91bmQ7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKClcbiAgICAgICAgLmRvbWFpbihkb21haW4oKSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gcmVzY2FsZSgpO1xufVxuXG5mdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICB2YXIgY29weSA9IHNjYWxlLmNvcHk7XG5cbiAgc2NhbGUucGFkZGluZyA9IHNjYWxlLnBhZGRpbmdPdXRlcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgZGVsZXRlIHNjYWxlLnBhZGRpbmdPdXRlcjtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBvaW50aXNoKGNvcHkoKSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHJldHVybiBwb2ludGlzaChiYW5kKCkucGFkZGluZ0lubmVyKDEpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLyxcbiAgICByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4My5leGVjKGZvcm1hdCkpID8gKG0gPSBwYXJzZUludChtWzFdLCAxNiksIG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHgwZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpKSAvLyAjZjAwXG4gICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuYiAmJiB0aGlzLmIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2J9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxudmFyIEtuID0gMTgsXG4gICAgWG4gPSAwLjk1MDQ3MCwgLy8gRDY1IHN0YW5kYXJkIHJlZmVyZW50XG4gICAgWW4gPSAxLFxuICAgIFpuID0gMS4wODg4MzAsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgIHZhciBoID0gby5oICogZGVnMnJhZDtcbiAgICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbiAgfVxuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciBiID0gcmdiMnh5eihvLnIpLFxuICAgICAgYSA9IHJnYjJ4eXooby5nKSxcbiAgICAgIGwgPSByZ2IyeHl6KG8uYiksXG4gICAgICB4ID0geHl6MmxhYigoMC40MTI0NTY0ICogYiArIDAuMzU3NTc2MSAqIGEgKyAwLjE4MDQzNzUgKiBsKSAvIFhuKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIxMjY3MjkgKiBiICsgMC43MTUxNTIyICogYSArIDAuMDcyMTc1MCAqIGwpIC8gWW4pLFxuICAgICAgeiA9IHh5ejJsYWIoKDAuMDE5MzMzOSAqIGIgKyAwLjExOTE5MjAgKiBhICsgMC45NTAzMDQxICogbCkgLyBabik7XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5hID0gK2E7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgKyBLbiAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLbiAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB5ID0gWW4gKiBsYWIyeHl6KHkpO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIHh5ejJyZ2IoIDMuMjQwNDU0MiAqIHggLSAxLjUzNzEzODUgKiB5IC0gMC40OTg1MzE0ICogeiksIC8vIEQ2NSAtPiBzUkdCXG4gICAgICB4eXoycmdiKC0wLjk2OTI2NjAgKiB4ICsgMS44NzYwMTA4ICogeSArIDAuMDQxNTU2MCAqIHopLFxuICAgICAgeHl6MnJnYiggMC4wNTU2NDM0ICogeCAtIDAuMjA0MDI1OSAqIHkgKyAxLjA1NzIyNTIgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiB4eXoycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJ4eXooeCkge1xuICByZXR1cm4gKHggLz0gMjU1KSA8PSAwLjA0MDQ1ID8geCAvIDEyLjkyIDogTWF0aC5wb3coKHggKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbn1cblxuZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgTGFiKSkgbyA9IGxhYkNvbnZlcnQobyk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYiwgZGFya2VyLCBicmlnaHRlcn0gZnJvbSBcIi4vY29sb3JcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWRcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2VcIjtcblxudmFyIGNzc05vZGUsXG4gICAgY3NzUm9vdCxcbiAgICBjc3NWaWV3LFxuICAgIHN2Z05vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2JcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZVwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0XCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZ1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2VcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGVMaW5lYXIoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGIpO1xufVxuXG5mdW5jdGlvbiBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBkID0gZGVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPD0gYSA/IDAgOiB4ID49IGIgPyAxIDogZCh4KTsgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgciA9IHJlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7IHJldHVybiB0IDw9IDAgPyBhIDogdCA+PSAxID8gYiA6IHIodCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gZGVpbnRlcnBvbGF0ZShkMSwgZDApLCByMCA9IHJlaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IGRlaW50ZXJwb2xhdGUoZDAsIGQxKSwgcjAgPSByZWludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IGRlaW50ZXJwb2xhdGUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gcmVpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKTtcbn1cblxuLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gcmVpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbiwgcmFuZ2UsIGNsYW1wID8gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIDogZGVpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpKSkoK3gpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4sIGRlaW50ZXJwb2xhdGVMaW5lYXIsIGNsYW1wID8gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIDogcmVpbnRlcnBvbGF0ZSkpKSgreSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcC5jYWxsKF8sIG51bWJlciksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHJlc2NhbGUoKSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICByZXR1cm4gcmVzY2FsZSgpO1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlZmF1bHQgZnJvbSBcIi4vZm9ybWF0RGVmYXVsdFwiO1xuaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0b1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiXCI6IGZvcm1hdERlZmF1bHQsXG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHggPSB4LnRvUHJlY2lzaW9uKHApO1xuXG4gIG91dDogZm9yICh2YXIgbiA9IHgubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHhbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcImVcIjogYnJlYWsgb3V0O1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaTAgPiAwID8geC5zbGljZSgwLCBpMCkgKyB4LnNsaWNlKGkxICsgMSkgOiB4O1xufVxuIiwiaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzXCI7XG5cbi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC1cXCggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG5cbiAgdmFyIG1hdGNoLFxuICAgICAgZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiLFxuICAgICAgYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIixcbiAgICAgIHNpZ24gPSBtYXRjaFszXSB8fCBcIi1cIixcbiAgICAgIHN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCIsXG4gICAgICB6ZXJvID0gISFtYXRjaFs1XSxcbiAgICAgIHdpZHRoID0gbWF0Y2hbNl0gJiYgK21hdGNoWzZdLFxuICAgICAgY29tbWEgPSAhIW1hdGNoWzddLFxuICAgICAgcHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpLFxuICAgICAgdHlwZSA9IG1hdGNoWzldIHx8IFwiXCI7XG5cbiAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAvLyBNYXAgaW52YWxpZCB0eXBlcyB0byB0aGUgZGVmYXVsdCBmb3JtYXQuXG4gIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgdHlwZSA9IFwiXCI7XG5cbiAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gIHRoaXMuZmlsbCA9IGZpbGw7XG4gIHRoaXMuYWxpZ24gPSBhbGlnbjtcbiAgdGhpcy5zaWduID0gc2lnbjtcbiAgdGhpcy5zeW1ib2wgPSBzeW1ib2w7XG4gIHRoaXMuemVybyA9IHplcm87XG4gIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgdGhpcy5jb21tYSA9IGNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgdGhpcy50eXBlID0gdHlwZTtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09IG51bGwgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09IG51bGwgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG9cIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG52YXIgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nICYmIGxvY2FsZS50aG91c2FuZHMgPyBmb3JtYXRHcm91cChsb2NhbGUuZ3JvdXBpbmcsIGxvY2FsZS50aG91c2FuZHMpIDogaWRlbnRpdHksXG4gICAgICBjdXJyZW5jeSA9IGxvY2FsZS5jdXJyZW5jeSxcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCxcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID8gZm9ybWF0TnVtZXJhbHMobG9jYWxlLm51bWVyYWxzKSA6IGlkZW50aXR5LFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50IHx8IFwiJVwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzBdIDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gIXR5cGUgfHwgL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gKHR5cGUgPyA2IDogMTIpXG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBkdXJpbmcgZm9ybWF0dGluZywgdHJlYXQgYXMgcG9zaXRpdmUuXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCkgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCAtZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkb21haW4sIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sXG4gICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIgYXMgcmVpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgY29udGludW91cywgY29weSwgZGVpbnRlcnBvbGF0ZUxpbmVhciBhcyBkZWludGVycG9sYXRlfSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkb21haW4oKSwgY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5LCBkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGRheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRheTtcbmV4cG9ydCB2YXIgZGF5cyA9IGRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHNlY29uZCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uU2Vjb25kKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvblNlY29uZDtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDU2Vjb25kcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHNlY29uZDtcbmV4cG9ydCB2YXIgc2Vjb25kcyA9IHNlY29uZC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uTWludXRlKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1pbnV0ZTtcbmV4cG9ydCB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgdmFyIG9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIGR1cmF0aW9uTWludXRlICUgZHVyYXRpb25Ib3VyO1xuICBpZiAob2Zmc2V0IDwgMCkgb2Zmc2V0ICs9IGR1cmF0aW9uSG91cjtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoKCtkYXRlIC0gb2Zmc2V0KSAvIGR1cmF0aW9uSG91cikgKiBkdXJhdGlvbkhvdXIgKyBvZmZzZXQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0RheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjRGF5O1xuZXhwb3J0IHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjWWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG51dGNZZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjWWVhcjtcbmV4cG9ydCB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNNb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNb250aDtcbmV4cG9ydCB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdZZWFyKHkpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdZZWFyKDE5MDApLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IG5ld0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdZZWFyKGQueSkpLmdldFVUQ0RheSgpIDogbmV3RGF0ZShuZXdZZWFyKGQueSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbmV3RGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICgrblswXSkgKiAxMDAwLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdGltZURheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICByZXR1cm4gZGF5ID09PSAwID8gNyA6IGRheTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZVN1bmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHRpbWVUaHVyc2RheS5jb3VudCh0aW1lWWVhcihkKSwgZCkgKyAodGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICByZXR1cm4gXCIrMDAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgcmV0dXJuIFwiJVwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wKGQpIHtcbiAgcmV0dXJuICtkO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyhkKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCtkIC8gMTAwMCk7XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZVwiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciB0aW1lRm9ybWF0O1xuZXhwb3J0IHZhciB0aW1lUGFyc2U7XG5leHBvcnQgdmFyIHV0Y0Zvcm1hdDtcbmV4cG9ydCB2YXIgdXRjUGFyc2U7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIHRpbWVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICB0aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIHV0Y0Zvcm1hdCA9IGxvY2FsZS51dGNGb3JtYXQ7XG4gIHV0Y1BhcnNlID0gbG9jYWxlLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHt1dGNGb3JtYXR9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZXhwb3J0IHZhciBpc29TcGVjaWZpZXIgPSBcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiO1xuXG5mdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xufVxuXG52YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICA/IGZvcm1hdElzb05hdGl2ZVxuICAgIDogdXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdElzbztcbiIsImltcG9ydCB7aXNvU3BlY2lmaWVyfSBmcm9tIFwiLi9pc29Gb3JtYXRcIjtcbmltcG9ydCB7dXRjUGFyc2V9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG59XG5cbnZhciBwYXJzZUlzbyA9ICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKVxuICAgID8gcGFyc2VJc29OYXRpdmVcbiAgICA6IHV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlSXNvO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3RleFVybHMoKXtcbiAgICBjb25zdCBob3N0ID0gJ2h0dHBzOi8vZ3RleHBvcnRhbC5vcmcvcmVzdC92MS8nOyAvLyBOT1RFOiB0b3AgZXhwcmVzc2VkIGdlbmVzIGFyZSBub3QgeWV0IGluIHByb2R1Y3Rpb25cbiAgICByZXR1cm4ge1xuICAgICAgICBkeW5lcXRsOiBob3N0ICsgJ2Fzc29jaWF0aW9uL2R5bmVxdGwnLFxuXG4gICAgICAgIGV4b25FeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9tZWRpYW5FeG9uRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZoY2x1c3Rlcj10cnVlJmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIGdlbmVJZDogaG9zdCArICdyZWZlcmVuY2UvZ2VuZUlkP2Zvcm1hdD1qc29uJnJlbGVhc2U9djcmZ2VuZUlkPScsXG4gICAgICAgIGdlbmVFeHA6IGhvc3QgKyAnZXhwcmVzc2lvbi9nZW5lRXhwcmVzc2lvbj9kYXRhc2V0SWQ9Z3RleF92NyZnZW5jb2RlSWQ9JyxcbiAgICAgICAgZ2VuZU1vZGVsOiBob3N0ICsgJ3JlZmVyZW5jZS9jb2xsYXBzZWRHZW5lTW9kZWw/dW5maWx0ZXJlZD1mYWxzZSZyZWxlYXNlPXY3JmdlbmVJZD0nLFxuICAgICAgICBnZW5lTW9kZWxVbmZpbHRlcmVkOiBob3N0ICsgJ3JlZmVyZW5jZS9jb2xsYXBzZWRHZW5lTW9kZWw/dW5maWx0ZXJlZD10cnVlJnJlbGVhc2U9djcmZ2VuZUlkPScsXG5cbiAgICAgICAgaXNvZm9ybTogaG9zdCArICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9JyxcbiAgICAgICAgaXNvZm9ybUV4cDogaG9zdCArICdleHByZXNzaW9uL2lzb2Zvcm1FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmJveHBsb3REZXRhaWw9bWVkaWFuJmdlbmNvZGVJZD0nLFxuXG4gICAgICAgIGp1bmN0aW9uRXhwOiBob3N0ICsgJ2V4cHJlc3Npb24vbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmZ2VuY29kZUlkPScsXG5cbiAgICAgICAgbWVkR2VuZUV4cDogaG9zdCArICdleHByZXNzaW9uL21lZGlhbkdlbmVFeHByZXNzaW9uP2RhdGFzZXRJZD1ndGV4X3Y3JmhjbHVzdGVyPXRydWUmcGFnZV9zaXplPTEwMDAwJyxcblxuICAgICAgICBzYW1wbGU6ICdkYXRhL2d0ZXguU2FtcGxlLmNzdicsXG4gICAgICAgIHNucDogaG9zdCArICdyZWZlcmVuY2Uvc25wP3JlZmVyZW5jZT1jdXJyZW50JmZvcm1hdD1qc29uJnNucElkPScsXG5cbiAgICAgICAgdGlzc3VlOiAgaG9zdCArICdkYXRhc2V0L3Rpc3N1ZUluZm8nLFxuICAgICAgICB0aXNzdWVTaXRlczogaG9zdCArICdkYXRhc2V0L3Rpc3N1ZVNpdGVEZXRhaWw/Zm9ybWF0PWpzb24nLFxuXG4gICAgICAgIHRvcEluVGlzc3VlRmlsdGVyZWQ6IGhvc3QgKyAnZXhwcmVzc2lvbi90b3BFeHByZXNzZWRHZW5lcz9kYXRhc2V0SWQ9Z3RleF92NyZmaWx0ZXJNdEdlbmU9dHJ1ZSZzb3J0X2J5PW1lZGlhbiZzb3J0RGlyZWN0aW9uPWRlc2MmcGFnZV9zaXplPTUwJnRpc3N1ZUlkPScsXG4gICAgICAgIHRvcEluVGlzc3VlOiBob3N0ICsgJ2V4cHJlc3Npb24vdG9wRXhwcmVzc2VkR2VuZXM/ZGF0YXNldElkPWd0ZXhfdjcmc29ydF9ieT1tZWRpYW4mc29ydERpcmVjdGlvbj1kZXNjJnBhZ2Vfc2l6ZT01MCZ0aXNzdWVJZD0nLFxuXG4gICAgICAgIHZhcmlhbnRJZDogaG9zdCArICdyZWZlcmVuY2Uvc25wP2Zvcm1hdD1qc29uJnJlZmVyZW5jZT1jdXJyZW50JnJlbGVhc2U9djcmdmFyaWFudElkPScsXG5cbiAgICAgICAgLy8gbG9jYWwgc3RhdGljIGZpbGVzXG4gICAgICAgIHJuYXNlcUNyYW06ICdkYXRhL3JuYXNlcV9jcmFtX2ZpbGVzX3Y3X2RiR2FQXzAxMTUxNi50eHQnLFxuICAgICAgICB3Z3NDcmFtOiAnZGF0YS93Z3NfY3JhbV9maWxlc192N19oZzM4X2RiR2FQXzAxMTUxNi50eHQnLFxuXG4gICAgfVxufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnZW5lcyBmcm9tIEdURXggd2ViIHNlcnZpY2VcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGdlbmVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdlbmVzKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUlkJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ0dlbmUgd2ViIHNlcnZpY2UgcGFyc2luZyBlcnJvcic7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl07XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIHRpc3N1ZXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIHRpc3N1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlcyhkYXRhKXtcbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZUluZm8nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlVGlzc3VlcyBpbnB1dCBlcnJvci4nO1xuICAgIGNvbnN0IHRpc3N1ZXMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gc2FuaXR5IGNoZWNrXG4gICAgWyd0aXNzdWVJZCcsICd0aXNzdWVOYW1lJywgJ2NvbG9ySGV4J10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCF0aXNzdWVzWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlVGlzc3VlIGF0dHIgbm90IGZvdW5kOiAnICsgZDtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aXNzdWVzO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSB0aXNzdWUgZ3JvdXBzXG4gKiBAcGFyYW0gZGF0YSB7SnNvbn1cbiAqIEBwYXJhbSBmb3JFcXRsIHtCb29sZWFufVxuICogQHJldHVybnMge0RpY3Rpb25hcnl9IG9mIGxpc3RzIG9mIHRpc3N1ZXMgaW5kZXhlZCBieSB0aGUgdGlzc3VlIGdyb3VwIG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGlzc3VlU2l0ZXMoZGF0YSwgZm9yRXF0bD1mYWxzZSl7XG4gICAgLy8gdGhlIGxpc3Qgb2YgaW52YWxpZGUgZXF0bCB0aXNzdWVzIGR1ZSB0byBzYW1wbGUgc2l6ZSA8IDcwXG4gICAgLy8gYSBoYXJkLWNvZGVkIGxpc3QgYmVjYXVzZSB0aGUgc2FtcGxlIHNpemUgaXMgbm90IGVhc3kgdG8gcmV0cmlldmVcbiAgICBjb25zdCBpbnZhbGlkVGlzc3VlcyA9IFsnQmxhZGRlcicsICdDZXJ2aXhfRWN0b2NlcnZpeCcsICdDZXJ2aXhfRW5kb2NlcnZpeCcsICdGYWxsb3BpYW5fVHViZScsICdLaWRuZXlfQ29ydGV4J107XG5cbiAgICBjb25zdCBhdHRyID0gJ3Rpc3N1ZVNpdGVEZXRhaWwnO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlVGlzc3VlU2l0ZXMgaW5wdXQgZXJyb3IuJztcbiAgICBjb25zdCB0aXNzdWVzID0gZm9yRXF0bD09ZmFsc2U/ZGF0YVthdHRyXTpkYXRhW2F0dHJdLmZpbHRlcigoZCk9PntyZXR1cm4gIWludmFsaWRUaXNzdWVzLmluY2x1ZGVzKGQudGlzc3VlX3NpdGVfZGV0YWlsX2lkKX0pOyAvLyBhbiBhcnJheSBvZiB0aXNzdWVfc2l0ZV9kZXRhaWwgb2JqZWN0c1xuXG4gICAgLy8gYnVpbGQgdGhlIHRpc3N1ZUdyb3VwcyBsb29rdXAgZGljdGlvbmFyeSBpbmRleGVkIGJ5IHRoZSB0aXNzdWUgZ3JvdXAgbmFtZSAoaS5lLiB0aGUgdGlzc3VlIG1haW4gc2l0ZSBuYW1lKVxuICAgIFsndGlzc3VlX3NpdGUnLCAndGlzc3VlX3NpdGVfZGV0YWlsX2lkJywgJ3Rpc3N1ZV9zaXRlX2RldGFpbCddLmZvckVhY2goKGQpPT57XG4gICAgICAgIGlmICghdGlzc3Vlc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgYHBhcnNlVGlzc3VlU2l0ZXMgYXR0ciBlcnJvci4gJHtkfSBpcyBub3QgZm91bmRgO1xuICAgIH0pO1xuICAgIGxldCB0aXNzdWVHcm91cHMgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e1xuICAgICAgICBsZXQgZ3JvdXBOYW1lID0gZC50aXNzdWVfc2l0ZTtcbiAgICAgICAgbGV0IHNpdGUgPSB7XG4gICAgICAgICAgICBpZDogZC50aXNzdWVfc2l0ZV9kZXRhaWxfaWQsXG4gICAgICAgICAgICBuYW1lOiBkLnRpc3N1ZV9zaXRlX2RldGFpbFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWFyci5oYXNPd25Qcm9wZXJ0eShncm91cE5hbWUpKSBhcnJbZ3JvdXBOYW1lXSA9IFtdOyAvLyBpbml0aWF0ZSBhbiBhcnJheVxuICAgICAgICBhcnJbZ3JvdXBOYW1lXS5wdXNoKHNpdGUpO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH0sIHt9KTtcblxuICAgIC8vIG1vZGlmeSB0aGUgdGlzc3VlIGdyb3VwcyB0aGF0IGhhdmUgb25seSBhIHNpbmdsZSBzaXRlXG4gICAgLy8gYnkgcmVwbGFjaW5nIHRoZSBncm91cCdzIG5hbWUgd2l0aCB0aGUgc2luZ2xlIHNpdGUncyBuYW1lIC0tIGZvciBhIGJldHRlciBBbHBoYWJldGljYWwgb3JkZXIgb2YgdGhlIHRpc3N1ZSBncm91cHNcblxuICAgIE9iamVjdC5rZXlzKHRpc3N1ZUdyb3VwcykuZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKHRpc3N1ZUdyb3Vwc1tkXS5sZW5ndGggPT0gMSl7IC8vIGEgc2luZ2xlLXNpdGUgZ3JvdXBcbiAgICAgICAgICAgIGxldCBzaXRlID0gdGlzc3VlR3JvdXBzW2RdWzBdOyAvLyB0aGUgc2luZ2xlIHNpdGVcbiAgICAgICAgICAgIGRlbGV0ZSB0aXNzdWVHcm91cHNbZF07IC8vIHJlbW92ZSB0aGUgb2xkIGdyb3VwIGluIHRoZSBkaWN0aW9uYXJ5XG4gICAgICAgICAgICB0aXNzdWVHcm91cHNbc2l0ZS5uYW1lXSA9IFtzaXRlXTsgLy8gY3JlYXRlIGEgbmV3IGdyb3VwIHdpdGggdGhlIHNpdGUncyBuYW1lXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aXNzdWVHcm91cHM7XG5cbn1cblxuLyoqXG4gKiBwYXJzZSB0aGUgZXhvbnNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufVxuICogQHJldHVybnMge0xpc3R9IG9mIGV4b25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4b25zKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAnY29sbGFwc2VkR2VuZU1vZGVsJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUV4b25zIGlucHV0IGVycm9yLicgKyBkYXRhO1xuICAgIC8vIHNhbml0eSBjaGVja1xuICAgIFsnZmVhdHVyZVR5cGUnLCAnc3RhcnQnLCAnZW5kJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFkYXRhW2F0dHJdWzBdLmhhc093blByb3BlcnR5KGQpKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbnMgYXR0ciBub3QgZm91bmQ6ICcgKyBkO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhW2F0dHJdLmZpbHRlcigoZCk9PmQuZmVhdHVyZVR5cGUgPT0gJ2V4b24nKS5tYXAoKGQpPT57XG4gICAgICAgIGQuY2hyb21TdGFydCA9IGQuc3RhcnQ7XG4gICAgICAgIGQuY2hyb21FbmQgPSBkLmVuZDtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGp1bmN0aW9uc1xuICogQHBhcmFtIGRhdGFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBqdW5jdGlvbnNcbiAqIC8vIHdlIGRvIG5vdCBzdG9yZSBqdW5jdGlvbiBzdHJ1Y3R1cmUgYW5ub3RhdGlvbnMgaW4gTW9uZ29cbiAgICAvLyBzbyBoZXJlIHdlIHVzZSB0aGUganVuY3Rpb24gZXhwcmVzc2lvbiB3ZWIgc2VydmljZSB0byByZXRyaWV2ZSB0aGUganVuY3Rpb24gZ2Vub21pYyBsb2NhdGlvbnNcbiAgICAvLyBhc3N1bWluZyB0aGF0IGVhY2ggdGlzc3VlIGhhcyB0aGUgc2FtZSBqdW5jdGlvbnMsXG4gICAgLy8gdG8gZ3JhYiBhbGwgdGhlIGtub3duIGp1bmN0aW9ucyBvZiBhIGdlbmUsIHdlIG9ubHkgbmVlZCB0byBsb29rIGF0IG9uZSB0aXNzdWVcbiAgICAvLyBoZXJlIHdlIGFyYml0cmFyaWx5IHBpY2sgTGl2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUp1bmN0aW9ucyhkYXRhKXtcblxuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUp1bmN0aW9ucyBpbnB1dCBlcnJvci4gJyArIGRhdGE7XG4gICAgcmV0dXJuIGRhdGFbYXR0cl0uZmlsdGVyKChkKT0+ZC50aXNzdWVJZD09J0xpdmVyJylcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvcyA9IGQuanVuY3Rpb25JZC5zcGxpdCgnXycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbTogcG9zWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tU3RhcnQ6IHBvc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbUVuZDogcG9zWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGp1bmN0aW9uSWQ6IGQuanVuY3Rpb25JZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbn1cblxuLyoqXG4gKiBwYXJzZSB0cmFuc2NyaXB0IGlzb2Zvcm1zIGZyb20gdGhlIEdURXggd2ViIHNlcnZpY2U6ICdyZWZlcmVuY2UvdHJhbnNjcmlwdD9yZWxlYXNlPXY3JmdlbmNvZGVfaWQ9J1xuICogQHBhcmFtIGRhdGEge0pzb259XG4gKiByZXR1cm5zIGEgZGljdGlvbmFyeSBvZiB0cmFuc2NyaXB0IGV4b24gb2JqZWN0IGxpc3RzIGluZGV4ZWQgYnkgRU5TVCBJRHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSXNvZm9ybUV4b25zKGRhdGEpe1xuICAgIGNvbnN0IGF0dHIgPSAndHJhbnNjcmlwdCc7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdwYXJzZUlzb2Zvcm1zIGlucHV0IGVycm9yICcgKyBkYXRhO1xuICAgIHJldHVybiBkYXRhW2F0dHJdLmZpbHRlcigoZCk9PntyZXR1cm4gJ2V4b24nID09IGQuZmVhdHVyZVR5cGV9KVxuICAgICAgICAucmVkdWNlKChhLCBkKT0+e1xuICAgICAgICBpZiAoYVtkLnRyYW5zY3JpcHRJZF0gPT09IHVuZGVmaW5lZCkgYVtkLnRyYW5zY3JpcHRJZF0gPSBbXTtcbiAgICAgICAgYVtkLnRyYW5zY3JpcHRJZF0ucHVzaChkKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xufVxuXG4vKipcbiAqIHBhcnNlIHRyYW5zY3JpcHQgaXNvZm9ybXNcbiAqIEBwYXJhbSBkYXRhIHtKc29ufSBmcm9tIEdURXggd2ViIHNlcnZpY2UgJ3JlZmVyZW5jZS90cmFuc2NyaXB0P3JlbGVhc2U9djcmZ2VuY29kZV9pZD0nXG4gKiByZXR1cm5zIGEgbGlzdCBvZiBpc29mb3JtIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSXNvZm9ybXMoZGF0YSl7XG4gICAgY29uc3QgYXR0ciA9ICd0cmFuc2NyaXB0JztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSXNvZm9ybXMgaW5wdXQgZXJyb3InKTtcbiAgICByZXR1cm4gZGF0YVthdHRyXS5maWx0ZXIoKGQpPT57cmV0dXJuICd0cmFuc2NyaXB0JyA9PSBkLmZlYXR1cmVUeXBlfSkuc29ydCgoYSwgYik9PntcbiAgICAgICAgY29uc3QgbDEgPSBNYXRoLmFicyhhLmNocm9tRW5kIC0gYS5jaHJvbVN0YXJ0KSArIDE7XG4gICAgICAgIGNvbnN0IGwyID0gTWF0aC5hYnMoYi5jaHJvbUVuZCAtIGIuY2hyb21TdGFydCkgKyAxO1xuICAgICAgICByZXR1cm4gLShsMS1sMik7IC8vIHNvcnQgYnkgaXNvZm9ybSBsZW5ndGggaW4gZGVzY2VuZGluZyBvcmRlclxuICAgIH0pO1xufVxuXG4vKipcbiAqIHBhcnNlIGZpbmFsIChtYXNrZWQpIGdlbmUgbW9kZWwgZXhvbiBleHByZXNzaW9uXG4gKiBleHByZXNzaW9uIGlzIG5vcm1hbGl6ZWQgdG8gcmVhZHMgcGVyIGtiXG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gb2YgZXhvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gZXhvbnMge0xpc3R9IG9mIGV4b25zIHdpdGggcG9zaXRpb25zXG4gKiBAcGFyYW0gdXNlTG9nIHtib29sZWFufSB1c2UgbG9nMiB0cmFuc2Zvcm1hdGlvblxuICogQHBhcmFtIGFkanVzdCB7TnVtYmVyfSBkZWZhdWx0IDAuMDFcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBleG9uIG9iamVjdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXhvbkV4cHJlc3Npb24oZGF0YSwgZXhvbnMsIHVzZUxvZz10cnVlLCBhZGp1c3Q9MSl7XG4gICAgY29uc3QgZXhvbkRpY3QgPSBleG9ucy5yZWR1Y2UoKGEsIGQpPT57YVtkLmV4b25JZF0gPSBkOyByZXR1cm4gYTt9LCB7fSk7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5FeG9uRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUV4b25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBleG9uT2JqZWN0cyA9IGRhdGFbYXR0cl07XG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBbJ2RhdGEnLCAnZXhvbklkJywgJ3Rpc3N1ZUlkJ10uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgaWYgKCFleG9uT2JqZWN0c1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUV4b25FeHByZXNzaW9uIGF0dHIgbm90IGZvdW5kOiAnICsgZDtcbiAgICB9KTtcbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBleG9uIGNvdW50c1xuICAgIGV4b25PYmplY3RzLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgY29uc3QgZXhvbiA9IGV4b25EaWN0W2QuZXhvbklkXTsgLy8gZm9yIHJldHJpZXZpbmcgZXhvbiBwb3NpdGlvbnNcbiAgICAgICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICAgICAgWydlbmQnLCAnc3RhcnQnXS5mb3JFYWNoKChwKT0+e1xuICAgICAgICAgICAgaWYgKCFleG9uLmhhc093blByb3BlcnR5KHApKSB0aHJvdyAnRmF0YWwgRXJyb3I6IHBhcnNlRXhvbkV4cHJlc3Npb24gYXR0ciBub3QgZm91bmQ6ICcgKyBwO1xuICAgICAgICB9KTtcbiAgICAgICAgZC5sID0gZXhvbi5lbmQgLSBleG9uLnN0YXJ0ICsgMTtcbiAgICAgICAgZC52YWx1ZSA9IE51bWJlcihkLmRhdGEpL2QubDtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKGQuZGF0YSkvZC5sO1xuICAgICAgICBpZiAodXNlTG9nKSBkLnZhbHVlID0gTWF0aC5sb2cyKGQudmFsdWUgKyAxKTtcbiAgICAgICAgZC54ID0gZC5leG9uSWQ7XG4gICAgICAgIGQueSA9IGQudGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC5jaHJvbVN0YXJ0ID0gZXhvbi5zdGFydDtcbiAgICAgICAgZC5jaHJvbUVuZCA9IGV4b24uZW5kO1xuICAgICAgICBkLnVuaXQgPSBkLnVuaXQgKyAnIHBlciBiYXNlJztcbiAgICB9KTtcbiAgICByZXR1cm4gZXhvbk9iamVjdHMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PGIuY2hyb21TdGFydCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5jaHJvbVN0YXJ0PmIuY2hyb21TdGFydCkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0pOyAvLyBzb3J0IGJ5IGdlbm9taWMgbG9jYXRpb24gaW4gYXNjZW5kaW5nIG9yZGVyXG59XG5cbi8qKlxuICogUGFyc2UganVuY3Rpb24gbWVkaWFuIHJlYWQgY291bnQgZGF0YVxuICogQHBhcmFtIGRhdGEge0pTT059IG9mIHRoZSBqdW5jdGlvbiBleHByZXNzaW9uIHdlYiBzZXJ2aWNlXG4gKiBAcGFyYW0gdXNlTG9nIHtCb29sZWFufSBwZXJmb3JtIGxvZyB0cmFuc2Zvcm1hdGlvblxuICogQHBhcmFtIGFkanVzdCB7TnVtYmVyfSBmb3IgaGFuZGxpbmcgMCdzIHdoZW4gdXNlTG9nIGlzIHRydWVcbiAqIEByZXR1cm5zIHtMaXN0fSBvZiBqdW5jdGlvbiBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbihkYXRhLCB1c2VMb2c9dHJ1ZSwgYWRqdXN0PTEpe1xuICAgIGNvbnN0IGF0dHIgPSAnbWVkaWFuSnVuY3Rpb25FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSnVuY3Rpb25FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG5cbiAgICBjb25zdCBqdW5jdGlvbnMgPSBkYXRhW2F0dHJdO1xuXG4gICAgLy8gZXJyb3ItY2hlY2tpbmdcbiAgICBbJ3Rpc3N1ZUlkJywgJ2p1bmN0aW9uSWQnLCAnZGF0YScsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWp1bmN0aW9uc1swXS5oYXNPd25Qcm9wZXJ0eShkKSkgdGhyb3cgJ0ZhdGFsIEVycm9yOiBwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbiBhdHRyIG5vdCBmb3VuZDogJyArIGQ7XG4gICAgfSk7XG5cbiAgICAvLyBwYXJzZSBHVEV4IG1lZGlhbiBqdW5jdGlvbiByZWFkIGNvdW50c1xuICAgIGp1bmN0aW9ucy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGQudmFsdWUgPSB1c2VMb2c/TWF0aC5sb2cxMChOdW1iZXIoZC5kYXRhICsgYWRqdXN0KSk6TnVtYmVyKGQuZGF0YSk7XG4gICAgICAgIGQueCA9IGQuanVuY3Rpb25JZDtcbiAgICAgICAgZC55ID0gZC50aXNzdWVJZDtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKGQuZGF0YSk7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZFxuICAgIH0pO1xuXG4gICAgLy8gc29ydCBieSBnZW5vbWljIGxvY2F0aW9uIGluIGFzY2VuZGluZyBvcmRlclxuICAgIHJldHVybiBqdW5jdGlvbnMuc29ydCgoYSxiKT0+e1xuICAgICAgICBpZiAoYS5qdW5jdGlvbklkPmIuanVuY3Rpb25JZCkgcmV0dXJuIDE7XG4gICAgICAgIGVsc2UgaWYgKGEuanVuY3Rpb25JZDxiLmp1bmN0aW9uSWQpIHJldHVybiAtMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgaXNvZm9ybSBleHByZXNzaW9uXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIHVzZUxvZ1xuICogQHBhcmFtIGFkanVzdFxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUlzb2Zvcm1FeHByZXNzaW9uKGRhdGEsIHVzZUxvZz10cnVlLCBhZGp1c3Q9MSl7XG4gICAgY29uc3QgYXR0ciA9ICdpc29mb3JtRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93KCdwYXJzZUlzb2Zvcm1FeHByZXNzaW9uIGlucHV0IGVycm9yJyk7XG4gICAgLy8gcGFyc2UgR1RFeCBpc29mb3JtIG1lZGlhbiBUUE1cbiAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpID0+IHtcbiAgICAgICAgZC52YWx1ZSA9IHVzZUxvZz9NYXRoLmxvZzEwKE51bWJlcihkLmRhdGEgKyBhZGp1c3QpKTpOdW1iZXIoZC5kYXRhKTtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKGQuZGF0YSk7XG4gICAgICAgIGQueCA9IGQudHJhbnNjcmlwdElkO1xuICAgICAgICBkLnkgPSBkLnRpc3N1ZUlkO1xuICAgICAgICBkLmlkID0gZC5nZW5jb2RlSWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSXNvZm9ybUV4cHJlc3Npb25UcmFuc3Bvc2UoZGF0YSwgdXNlTG9nPXRydWUsIGFkanVzdD0xKXtcbiAgICBjb25zdCBhdHRyID0gJ2lzb2Zvcm1FeHByZXNzaW9uJztcbiAgICBpZighZGF0YS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgdGhyb3coJ3BhcnNlSXNvZm9ybUV4cHJlc3Npb24gaW5wdXQgZXJyb3InKTtcbiAgICAvLyBwYXJzZSBHVEV4IGlzb2Zvcm0gbWVkaWFuIFRQTVxuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBkLnZhbHVlID0gdXNlTG9nP01hdGgubG9nMTAoTnVtYmVyKGQuZGF0YSArIGFkanVzdCkpOk51bWJlcihkLmRhdGEpO1xuICAgICAgICBkLm9yaWdpbmFsVmFsdWUgPSBOdW1iZXIoZC5kYXRhKTtcbiAgICAgICAgZC55ID0gZC50cmFuc2NyaXB0SWQ7XG4gICAgICAgIGQueCA9IGQudGlzc3VlSWQ7XG4gICAgICAgIGQuaWQgPSBkLmdlbmNvZGVJZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhW2F0dHJdO1xufVxuXG4vKipcbiAqIHBhcnNlIG1lZGlhbiBnZW5lIGV4cHJlc3Npb25cbiAqIEBwYXJhbSBkYXRhIHtKc29ufSB3aXRoIGF0dHIgbWVkaWFuR2VuZUV4cHJlc3Npb25cbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59IHBlcmZvcm1zIGxvZzEwIHRyYW5zZm9ybWF0aW9uXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVkaWFuRXhwcmVzc2lvbihkYXRhLCB1c2VMb2c9dHJ1ZSl7XG4gICAgY29uc3QgYXR0ciA9ICdtZWRpYW5HZW5lRXhwcmVzc2lvbic7XG4gICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICdwYXJzZU1lZGlhbkV4cHJlc3Npb24gaW5wdXQgZXJyb3IuJztcbiAgICBjb25zdCBhZGp1c3QgPSAxO1xuICAgIC8vIHBhcnNlIEdURXggbWVkaWFuIGdlbmUgZXhwcmVzc2lvblxuICAgIC8vIGVycm9yLWNoZWNraW5nIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGVzOlxuICAgIGlmIChkYXRhW2F0dHJdLmxlbmd0aCA9PSAwKSB0aHJvdyAncGFyc2VNZWRpYW5FeHByZXNzaW9uIGZpbmRzIG5vIGRhdGEuJztcbiAgICBbJ21lZGlhbicsICd0aXNzdWVJZCcsICdnZW5jb2RlSWQnXS5mb3JFYWNoKChkKT0+e1xuICAgICAgICBpZiAoIWRhdGFbYXR0cl1bMF0uaGFzT3duUHJvcGVydHkoZCkpIHRocm93IGBwYXJzZU1lZGlhbkV4cHJlc3Npb24gYXR0ciBlcnJvci4gJHtkfSBpcyBub3QgZm91bmRgO1xuICAgIH0pO1xuICAgIGxldCByZXN1bHRzID0gZGF0YVthdHRyXTtcbiAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgICAgIGQudmFsdWUgPSB1c2VMb2c/TWF0aC5sb2cxMChOdW1iZXIoZC5tZWRpYW4pICsgYWRqdXN0KTpOdW1iZXIoZC5tZWRpYW4pO1xuICAgICAgICBkLnggPSBkLnRpc3N1ZUlkO1xuICAgICAgICBkLnkgPSBkLmdlbmNvZGVJZDtcbiAgICAgICAgZC5vcmlnaW5hbFZhbHVlID0gTnVtYmVyKGQubWVkaWFuKTtcbiAgICAgICAgZC5pZCA9IGQuZ2VuY29kZUlkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIGdlbmUgZXhwcmVzc2lvblxuICogQHBhcmFtIGdlbmNvZGVJZCB7U3RyaW5nfVxuICogQHBhcmFtIGRhdGEge0pzb259IHdpdGggYXR0cjogdGlzc3VlSWQsIGdlbmVTeW1ib2xcbiAqIEByZXR1cm5zIHt7ZXhwOiB7fSwgZ2VuZVN5bWJvbDogc3RyaW5nfX1cbiAqL1xuLy8gZnVuY3Rpb24gcGFyc2VHZW5lRXhwcmVzc2lvbihnZW5jb2RlSWQsIGRhdGEpe1xuLy8gICAgIGxldCBsb29rdXBUYWJsZSA9IHtcbi8vICAgICAgICAgZXhwOiB7fSwgLy8gaW5kZXhlZCBieSB0aXNzdWVJZFxuLy8gICAgICAgICBnZW5lU3ltYm9sOiAnJ1xuLy8gICAgIH07XG4vLyAgICAgaWYoIWRhdGEuaGFzT3duUHJvcGVydHkoYXR0cikpIHRocm93ICgncGFyc2VHZW5lRXhwcmVzc2lvbiBpbnB1dCBlcnJvci4nKTtcbi8vICAgICBkYXRhW2F0dHJdLmZvckVhY2goKGQpPT57XG4vLyAgICAgICAgIGlmIChkLmdlbmNvZGVJZCA9PSBnZW5jb2RlSWQpIHtcbi8vICAgICAgICAgICAgIC8vIGlmIHRoZSBnZW5jb2RlIElEIG1hdGNoZXMgdGhlIHF1ZXJ5IGdlbmNvZGVJZCxcbi8vICAgICAgICAgICAgIC8vIGFkZCB0aGUgZXhwcmVzc2lvbiBkYXRhIHRvIHRoZSBsb29rdXAgdGFibGVcbi8vICAgICAgICAgICAgIGxvb2t1cFRhYmxlLmV4cFtkLnRpc3N1ZUlkXSA9IGQuZGF0YTtcbi8vICAgICAgICAgICAgIGlmICgnJyA9PSBsb29rdXBUYWJsZS5nZW5lU3ltYm9sKSBsb29rdXBUYWJsZS5nZW5lU3ltYm9sID0gZC5nZW5lU3ltYm9sXG4vLyAgICAgICAgIH1cbi8vICAgICB9KTtcbi8vICAgICByZXR1cm4gbG9va3VwVGFibGVcbi8vIH1cblxuLyoqXG4gKiBwYXJzZSB0aGUgZXhwcmVzc2lvbiBkYXRhIG9mIGEgZ2VuZSBmb3IgYSBncm91cGVkIHZpb2xpbiBwbG90XG4gKiBAcGFyYW0gZGF0YSB7SlNPTn0gZnJvbSBHVEV4IGdlbmUgZXhwcmVzc2lvbiB3ZWIgc2VydmljZVxuICogQHBhcmFtIGNvbG9ycyB7RGljdGlvbmFyeX0gdGhlIHZpb2xpbiBjb2xvciBmb3IgZ2VuZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2VuZUV4cHJlc3Npb25Gb3JWaW9saW4oZGF0YSwgdXNlTG9nPXRydWUsIGNvbG9ycz11bmRlZmluZWQpe1xuICAgIGNvbnN0IGF0dHIgPSAnZ2VuZUV4cHJlc3Npb24nO1xuICAgIGlmKCFkYXRhLmhhc093blByb3BlcnR5KGF0dHIpKSB0aHJvdyAncGFyc2VHZW5lRXhwcmVzc2lvbkZvclZpb2xpbiBpbnB1dCBlcnJvci4nO1xuICAgIGRhdGFbYXR0cl0uZm9yRWFjaCgoZCk9PntcbiAgICAgICAgZC52YWx1ZXMgPSB1c2VMb2c/ZC5kYXRhLm1hcCgoZGQpPT57cmV0dXJuIE1hdGgubG9nMTAoK2RkKzEpfSk6ZC5kYXRhO1xuICAgICAgICBkLmdyb3VwID0gZC50aXNzdWVJZDtcbiAgICAgICAgZC5sYWJlbCA9IGQuZ2VuZVN5bWJvbDtcbiAgICAgICAgZC5jb2xvciA9IGNvbG9ycz09PXVuZGVmaW5lZD8nIzkwYzFjMSc6Y29sb3JzW2QuZ2VuY29kZUlkXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YVthdHRyXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICB2YXIgbiA9IHNwZWNpZmllci5sZW5ndGggLyA2IHwgMCwgY29sb3JzID0gbmV3IEFycmF5KG4pLCBpID0gMDtcbiAgd2hpbGUgKGkgPCBuKSBjb2xvcnNbaV0gPSBcIiNcIiArIHNwZWNpZmllci5zbGljZShpICogNiwgKytpICogNik7XG4gIHJldHVybiBjb2xvcnM7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjdmYzk3ZmJlYWVkNGZkYzA4NmZmZmY5OTM4NmNiMGYwMDI3ZmJmNWIxNzY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxYjllNzdkOTVmMDI3NTcwYjNlNzI5OGE2NmE2MWVlNmFiMDJhNjc2MWQ2NjY2NjZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYTZjZWUzMWY3OGI0YjJkZjhhMzNhMDJjZmI5YTk5ZTMxYTFjZmRiZjZmZmY3ZjAwY2FiMmQ2NmEzZDlhZmZmZjk5YjE1OTI4XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImZiYjRhZWIzY2RlM2NjZWJjNWRlY2JlNGZlZDlhNmZmZmZjY2U1ZDhiZGZkZGFlY2YyZjJmMlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJiM2UyY2RmZGNkYWNjYmQ1ZThmNGNhZTRlNmY1YzlmZmYyYWVmMWUyY2NjY2NjY2NcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZTQxYTFjMzc3ZWI4NGRhZjRhOTg0ZWEzZmY3ZjAwZmZmZjMzYTY1NjI4Zjc4MWJmOTk5OTk5XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjY2YzJhNWZjOGQ2MjhkYTBjYmU3OGFjM2E2ZDg1NGZmZDkyZmU1YzQ5NGIzYjNiM1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI4ZGQzYzdmZmZmYjNiZWJhZGFmYjgwNzI4MGIxZDNmZGI0NjJiM2RlNjlmY2NkZTVkOWQ5ZDliYzgwYmRjY2ViYzVmZmVkNmZcIik7XG4iLCJpbXBvcnQge2ludGVycG9sYXRlUmdiQmFzaXN9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzY2hlbWUpIHtcbiAgcmV0dXJuIGludGVycG9sYXRlUmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkOGIzNjVmNWY1ZjU1YWI0YWNcIixcbiAgXCJhNjYxMWFkZmMyN2Q4MGNkYzEwMTg1NzFcIixcbiAgXCJhNjYxMWFkZmMyN2RmNWY1ZjU4MGNkYzEwMTg1NzFcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFkOGIzNjVmNmU4YzNmNWY1ZjVjN2VhZTU1YWI0YWMwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWVcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIixcbiAgXCI1NDMwMDU4YzUxMGFiZjgxMmRkZmMyN2RmNmU4YzNmNWY1ZjVjN2VhZTU4MGNkYzEzNTk3OGYwMTY2NWUwMDNjMzBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiYWY4ZGMzZjdmN2Y3N2ZiZjdiXCIsXG4gIFwiN2IzMjk0YzJhNWNmYTZkYmEwMDA4ODM3XCIsXG4gIFwiN2IzMjk0YzJhNWNmZjdmN2Y3YTZkYmEwMDA4ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzYWY4ZGMzZTdkNGU4ZjdmN2Y3ZDlmMGQzN2ZiZjdiMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3XCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCIsXG4gIFwiNDAwMDRiNzYyYTgzOTk3MGFiYzJhNWNmZTdkNGU4ZjdmN2Y3ZDlmMGQzYTZkYmEwNWFhZTYxMWI3ODM3MDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCI5OThlYzNmN2Y3ZjdmMWEzNDBcIixcbiAgXCI1ZTNjOTliMmFiZDJmZGI4NjNlNjYxMDFcIixcbiAgXCI1ZTNjOTliMmFiZDJmN2Y3ZjdmZGI4NjNlNjYxMDFcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg5OThlYzNkOGRhZWJmN2Y3ZjdmZWUwYjZmMWEzNDBiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDZcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIixcbiAgXCIyZDAwNGI1NDI3ODg4MDczYWNiMmFiZDJkOGRhZWJmN2Y3ZjdmZWUwYjZmZGI4NjNlMDgyMTRiMzU4MDY3ZjNiMDhcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZjdmN2Y3NjdhOWNmXCIsXG4gIFwiY2EwMDIwZjRhNTgyOTJjNWRlMDU3MWIwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZjdmN2Y3OTJjNWRlMDU3MWIwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZjdmN2Y3ZDFlNWYwNjdhOWNmMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZjdmN2Y3ZDFlNWYwOTJjNWRlNDM5M2MzMjE2NmFjMDUzMDYxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFjZjYwXCIsXG4gIFwiZDcxOTFjZmRhZTYxYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYTZkOTZhMWE5NjQxXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDhiZmZmZmJmZDllZjhiOTFjZjYwMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwXCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZDllZjhiYTZkOTZhNjZiZDYzMWE5ODUwMDA2ODM3XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjk5ZDU5NFwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZGRhNDJiODNiYVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZGRhNDJiODNiYVwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmZjOGQ1OWZlZTA4YmZmZmZiZmU2ZjU5ODk5ZDU5NDMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcImQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZFwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiLFxuICBcIjllMDE0MmQ1M2U0ZmY0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmU2ZjU5OGFiZGRhNDY2YzJhNTMyODhiZDVlNGZhMlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlNWY1Zjk5OWQ4YzkyY2EyNWZcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyMzhiNDVcIixcbiAgXCJlZGY4ZmJiMmUyZTI2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQyY2EyNWYwMDZkMmNcIixcbiAgXCJlZGY4ZmJjY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDU4MjRcIixcbiAgXCJmN2ZjZmRlNWY1ZjljY2VjZTY5OWQ4Yzk2NmMyYTQ0MWFlNzYyMzhiNDUwMDZkMmMwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBlY2Y0OWViY2RhODg1NmE3XCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg0MTlkXCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkODEwZjdjNGQwMDRiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZjNkYmE4ZGRiNTQzYTJjYVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDJiOGNiZVwiLFxuICBcImYwZjllOGJhZTRiYzdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDQzYTJjYTA4NjhhY1wiLFxuICBcImYwZjllOGNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NTg5ZVwiLFxuICBcImY3ZmNmMGUwZjNkYmNjZWJjNWE4ZGRiNTdiY2NjNDRlYjNkMzJiOGNiZTA4NjhhYzA4NDA4MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU4YzhmZGJiODRlMzRhMzNcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTlkNzMwMWZcIixcbiAgXCJmZWYwZDlmZGNjOGFmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllMzRhMzNiMzAwMDBcIixcbiAgXCJmZWYwZDlmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWY5OTAwMDBcIixcbiAgXCJmZmY3ZWNmZWU4YzhmZGQ0OWVmZGJiODRmYzhkNTllZjY1NDhkNzMwMWZiMzAwMDA3ZjAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlMmYwYTZiZGRiMWM5MDk5XCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMDI4MThhXCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2YzU5MDE0NjM2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTdmMmE2YmRkYjJiOGNiZVwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjA1NzBiMFwiLFxuICBcImYxZWVmNmJkYzllMTc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjJiOGNiZTA0NWE4ZFwiLFxuICBcImYxZWVmNmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDAzNGU3YlwiLFxuICBcImZmZjdmYmVjZTdmMmQwZDFlNmE2YmRkYjc0YTljZjM2OTBjMDA1NzBiMDA0NWE4ZDAyMzg1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlN2UxZWZjOTk0YzdkZDFjNzdcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBjZTEyNTZcIixcbiAgXCJmMWVlZjZkN2I1ZDhkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBkZDFjNzc5ODAwNDNcIixcbiAgXCJmMWVlZjZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5MTAwM2ZcIixcbiAgXCJmN2Y0ZjllN2UxZWZkNGI5ZGFjOTk0YzdkZjY1YjBlNzI5OGFjZTEyNTY5ODAwNDM2NzAwMWZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmN2ZjYjlhZGRkOGUzMWEzNTRcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkyMzg0NDNcIixcbiAgXCJmZmZmY2NjMmU2OTk3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2NzkzMWEzNTQwMDY4MzdcIixcbiAgXCJmZmZmY2NkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDVhMzJcIixcbiAgXCJmZmZmZTVmN2ZjYjlkOWYwYTNhZGRkOGU3OGM2Nzk0MWFiNWQyMzg0NDMwMDY4MzcwMDQ1MjlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZmN2JjZmVjNDRmZDk1ZjBlXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5Y2M0YzAyXCIsXG4gIFwiZmZmZmQ0ZmVkOThlZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZDk1ZjBlOTkzNDA0XCIsXG4gIFwiZmZmZmQ0ZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOGMyZDA0XCIsXG4gIFwiZmZmZmU1ZmZmN2JjZmVlMzkxZmVjNDRmZmU5OTI5ZWM3MDE0Y2M0YzAyOTkzNDA0NjYyNTA2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJkZWViZjc5ZWNhZTEzMTgyYmRcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYyMTcxYjVcIixcbiAgXCJlZmYzZmZiZGQ3ZTc2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDYzMTgyYmQwODUxOWNcIixcbiAgXCJlZmYzZmZjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODQ1OTRcIixcbiAgXCJmN2ZiZmZkZWViZjdjNmRiZWY5ZWNhZTE2YmFlZDY0MjkyYzYyMTcxYjUwODUxOWMwODMwNmJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcFwiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlMGQyZmM5MjcyZGUyZDI2XCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhY2IxODFkXCIsXG4gIFwiZmVlNWQ5ZmNhZTkxZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZGUyZDI2YTUwZjE1XCIsXG4gIFwiZmVlNWQ5ZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkOTkwMDBkXCIsXG4gIFwiZmZmNWYwZmVlMGQyZmNiYmExZmM5MjcyZmI2YTRhZWYzYjJjY2IxODFkYTUwZjE1NjcwMDBkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXBcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTZjZWZkYWU2YmU2NTUwZFwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2Q5NDcwMVwiLFxuICBcImZlZWRkZWZkYmU4NWZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2U2NTUwZGE2MzYwM1wiLFxuICBcImZlZWRkZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMThjMmQwNFwiLFxuICBcImZmZjVlYmZlZTZjZWZkZDBhMmZkYWU2YmZkOGQzY2YxNjkxM2Q5NDgwMWE2MzYwMzdmMjcwNFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMzAwLCAwLjUsIDAuMCksIGN1YmVoZWxpeCgtMjQwLCAwLjUsIDEuMCkpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG5leHBvcnQgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciByYWluYm93ID0gY3ViZWhlbGl4KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKHQgPCAwIHx8IHQgPiAxKSB0IC09IE1hdGguZmxvb3IodCk7XG4gIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICByYWluYm93LmggPSAzNjAgKiB0IC0gMTAwO1xuICByYWluYm93LnMgPSAxLjUgLSAxLjUgKiB0cztcbiAgcmFpbmJvdy5sID0gMC44IC0gMC45ICogdHM7XG4gIHJldHVybiByYWluYm93ICsgXCJcIjtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9yc1wiO1xuXG5mdW5jdGlvbiByYW1wKHJhbmdlKSB7XG4gIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuZXhwb3J0IHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuZXhwb3J0IHZhciBpbmZlcm5vID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMGEwMjAyMGMwMjAyMGUwMzAyMTAwNDAzMTIwNDAzMTQwNTA0MTcwNjA0MTkwNzA1MWIwODA1MWQwOTA2MWYwYTA3MjIwYjA3MjQwYzA4MjYwZDA4MjkwZTA5MmIxMDA5MmQxMTBhMzAxMjBhMzIxNDBiMzQxNTBiMzcxNjBiMzkxODBjM2MxOTBjM2UxYjBjNDExYzBjNDMxZTBjNDUxZjBjNDgyMTBjNGEyMzBjNGMyNDBjNGYyNjBjNTEyODBiNTMyOTBiNTUyYjBiNTcyZDBiNTkyZjBhNWIzMTBhNWMzMjBhNWUzNDBhNWYzNjA5NjEzODA5NjIzOTA5NjMzYjA5NjQzZDA5NjUzZTA5NjY0MDBhNjc0MjBhNjg0NDBhNjg0NTBhNjk0NzBiNmE0OTBiNmE0YTBjNmI0YzBjNmI0ZDBkNmM0ZjBkNmM1MTBlNmM1MjBlNmQ1NDBmNmQ1NTBmNmQ1NzEwNmU1OTEwNmU1YTExNmU1YzEyNmU1ZDEyNmU1ZjEzNmU2MTEzNmU2MjE0NmU2NDE1NmU2NTE1NmU2NzE2NmU2OTE2NmU2YTE3NmU2YzE4NmU2ZDE4NmU2ZjE5NmU3MTE5NmU3MjFhNmU3NDFhNmU3NTFiNmU3NzFjNmQ3ODFjNmQ3YTFkNmQ3YzFkNmQ3ZDFlNmQ3ZjFlNmM4MDFmNmM4MjIwNmM4NDIwNmI4NTIxNmI4NzIxNmI4ODIyNmE4YTIyNmE4YzIzNjk4ZDIzNjk4ZjI0Njk5MDI1Njg5MjI1Njg5MzI2Njc5NTI2Njc5NzI3NjY5ODI3NjY5YTI4NjU5YjI5NjQ5ZDI5NjQ5ZjJhNjNhMDJhNjNhMjJiNjJhMzJjNjFhNTJjNjBhNjJkNjBhODJlNWZhOTJlNWVhYjJmNWVhZDMwNWRhZTMwNWNiMDMxNWJiMTMyNWFiMzMyNWFiNDMzNTliNjM0NThiNzM1NTdiOTM1NTZiYTM2NTViYzM3NTRiZDM4NTNiZjM5NTJjMDNhNTFjMTNhNTBjMzNiNGZjNDNjNGVjNjNkNGRjNzNlNGNjODNmNGJjYTQwNGFjYjQxNDljYzQyNDhjZTQzNDdjZjQ0NDZkMDQ1NDVkMjQ2NDRkMzQ3NDNkNDQ4NDJkNTRhNDFkNzRiM2ZkODRjM2VkOTRkM2RkYTRlM2NkYjUwM2JkZDUxM2FkZTUyMzhkZjUzMzdlMDU1MzZlMTU2MzVlMjU3MzRlMzU5MzNlNDVhMzFlNTVjMzBlNjVkMmZlNzVlMmVlODYwMmRlOTYxMmJlYTYzMmFlYjY0MjllYjY2MjhlYzY3MjZlZDY5MjVlZTZhMjRlZjZjMjNlZjZlMjFmMDZmMjBmMTcxMWZmMTczMWRmMjc0MWNmMzc2MWJmMzc4MTlmNDc5MThmNTdiMTdmNTdkMTVmNjdlMTRmNjgwMTNmNzgyMTJmNzg0MTBmODg1MGZmODg3MGVmODg5MGNmOThiMGJmOThjMGFmOThlMDlmYTkwMDhmYTkyMDdmYTk0MDdmYjk2MDZmYjk3MDZmYjk5MDZmYjliMDZmYjlkMDdmYzlmMDdmY2ExMDhmY2EzMDlmY2E1MGFmY2E2MGNmY2E4MGRmY2FhMGZmY2FjMTFmY2FlMTJmY2IwMTRmY2IyMTZmY2I0MThmYmI2MWFmYmI4MWRmYmJhMWZmYmJjMjFmYmJlMjNmYWMwMjZmYWMyMjhmYWM0MmFmYWM2MmRmOWM3MmZmOWM5MzJmOWNiMzVmOGNkMzdmOGNmM2FmN2QxM2RmN2QzNDBmNmQ1NDNmNmQ3NDZmNWQ5NDlmNWRiNGNmNGRkNGZmNGRmNTNmNGUxNTZmM2UzNWFmM2U1NWRmMmU2NjFmMmU4NjVmMmVhNjlmMWVjNmRmMWVkNzFmMWVmNzVmMWYxNzlmMmYyN2RmMmY0ODJmM2Y1ODZmM2Y2OGFmNGY4OGVmNWY5OTJmNmZhOTZmOGZiOWFmOWZjOWRmYWZkYTFmY2ZmYTRcIikpO1xuXG5leHBvcnQgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcbiIsImltcG9ydCB7bWF4fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2NhbGVTZXF1ZW50aWFsfSBmcm9tIFwiZDMtc2NhbGVcIjtcbmltcG9ydCAqIGFzIGQzQ2hyb21hdGljIGZyb20gXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29sb3JDaGFydChzaHVmZmxlPXRydWUpe1xuICAgIC8vIHJlZiBpbGx1c3RyYXRvciBjb2xvciB0aGVtZXNcbiAgICBjb25zdCBjb2xvcnMgPSBbXG4gICAgICAgIFwicmdiKDEwMCwxMTgsMTIwKVwiLFxuICAgICAgICBcInJnYigxMDEsMTQxLDE0NSlcIixcbiAgICAgICAgXCJyZ2IoMTAzLDEyNiw4MilcIixcbiAgICAgICAgXCJyZ2IoMTAzLDE4NCwyMjIpXCIsXG4gICAgICAgIFwicmdiKDEwOCwxMTAsODgpXCIsXG5cbiAgICAgICAgXCJyZ2IoMTA4LDE0NywxMjgpXCIsXG4gICAgICAgIFwicmdiKDExOSwxNDQsMTgyKVwiLFxuICAgICAgICBcInJnYigxMjYsMTMwLDEyMilcIixcbiAgICAgICAgXCJyZ2IoMTMzLDE3MywxODYpXCIsXG4gICAgICAgIFwicmdiKDEzNywxMTQsOTEpXCIsXG4gICAgICAgIFwicmdiKDE0NSwxNzAsMTU3KVwiLFxuXG4gICAgICAgIFwicmdiKDE0NSwyMDEsMjMyKVwiLFxuICAgICAgICBcInJnYigxNDcsMTA1LDY2KVwiLFxuICAgICAgICBcInJnYigxNTksMTE0LDExNilcIixcbiAgICAgICAgXCJyZ2IoMTU5LDE4OCwxOTEpXCIsXG4gICAgICAgIFwicmdiKDE1OSwyMjksMTk0KVwiLFxuICAgICAgICBcInJnYigxNjMsMTYzLDE3MSlcIixcblxuICAgICAgICBcInJnYigxNjQsMjA3LDE5MClcIixcbiAgICAgICAgXCJyZ2IoMTcyLDEwOCwxMzApXCIsXG4gICAgICAgIFwicmdiKDE3Myw4NCwxMTQpXCIsXG4gICAgICAgIFwicmdiKDE3NCwxOTUsMjIyKVwiLFxuICAgICAgICBcInJnYigxNzYsMjA0LDE1MylcIixcblxuICAgICAgICBcInJnYigxNzksMTgwLDE1MClcIixcbiAgICAgICAgXCJyZ2IoMTgwLDIyMCwyMzcpXCIsXG4gICAgICAgIFwicmdiKDE4MywyMDIsMTIxKVwiLFxuICAgICAgICBcInJnYigxOTIsMjAyLDg1KVwiLFxuICAgICAgICBcInJnYigxOTMsMTkxLDE5M1wiLFxuICAgICAgICBcInJnYigxOTUsOTcsMTM2KVwiLFxuXG4gICAgICAgIFwicmdiKDE5OSwxMjEsMTAyKVwiLFxuICAgICAgICBcInJnYigyMDcsMjAyLDc2KVwiLFxuICAgICAgICBcInJnYigyMDksMjE5LDE4OSlcIixcbiAgICAgICAgXCJyZ2IoMjEzLDI1MSwyNTUpXCIsXG4gICAgICAgIFwicmdiKDIxNSw5NCw1NilcIixcblxuICAgICAgICBcInJnYigyMTgsMTE0LDEyNilcIixcbiAgICAgICAgXCJyZ2IoMjIzLDkwLDczKVwiLFxuICAgICAgICBcInJnYigyMjQsMjQ3LDIxNylcIixcbiAgICAgICAgXCJyZ2IoMjI3LDIwNSwxNjQpXCIsXG4gICAgICAgIFwicmdiKDIyOCwxNjgsMTg1KVwiLFxuXG4gICAgICAgIFwicmdiKDIzMCwxNzYsMTUyKVwiLFxuICAgICAgICBcInJnYigyMzIsMjEyLDE3NSlcIixcbiAgICAgICAgXCJyZ2IoMjM5LDIwMSw3NilcIixcbiAgICAgICAgXCJyZ2IoMjQwLDEyNCwxMDgpXCIsXG4gICAgICAgIFwicmdiKDI0NiwyMzIsMTc3KVwiLFxuXG4gICAgICAgIFwicmdiKDI0OSwyMjgsMTczKVwiLFxuICAgICAgICBcInJnYigyNTIsMjQ1LDE5MSlcIixcbiAgICAgICAgXCJyZ2IoMjU1LDE4OCwxMDMpXCIsXG4gICAgICAgIFwicmdiKDQ1LDk0LDExMClcIixcbiAgICAgICAgXCJyZ2IoNTEsMTUzLDIwNClcIixcblxuICAgICAgICBcInJnYig2MCwxMjQsMTQ1KVwiLFxuICAgICAgICBcInJnYig2Miw4NywxNDUpXCIsXG4gICAgICAgIFwicmdiKDY1LDExNSwxMjApXCIsXG4gICAgICAgIFwicmdiKDg5LDIxNiwyMjkpXCIsXG4gICAgICAgIFwicmdiKDk0LDE3OCwxNTMpXCIsXG4gICAgICAgIFwicmdiKDk1LDEyNCwxMzQpXCJcbiAgICBdO1xuXG4gICAgaWYgKHNodWZmbGUpIHJldHVybiBzaHVmZmxlQ29sb3JzKGNvbG9ycyk7XG4gICAgcmV0dXJuIGNvbG9ycztcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZUNvbG9ycyhhcnJheSkge1xuICAgIC8vIEZpc2hlci1ZYXRlcyBzaHVmZmxlXG4gICAgbGV0IGNvdW50ZXIgPSBhcnJheS5sZW5ndGg7XG5cbiAgICAvLyBXaGlsZSB0aGVyZSBhcmUgZWxlbWVudHMgaW4gdGhlIGFycmF5XG4gICAgd2hpbGUgKGNvdW50ZXIgPiAwKSB7XG4gICAgICAgIC8vIFBpY2sgYSByYW5kb20gaW5kZXhcbiAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY291bnRlcik7XG5cbiAgICAgICAgLy8gRGVjcmVhc2UgY291bnRlciBieSAxXG4gICAgICAgIGNvdW50ZXItLTtcblxuICAgICAgICAvLyBBbmQgc3dhcCB0aGUgbGFzdCBlbGVtZW50IHdpdGggaXRcbiAgICAgICAgbGV0IHRlbXAgPSBhcnJheVtjb3VudGVyXTtcbiAgICAgICAgYXJyYXlbY291bnRlcl0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHRlbXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIGdldCBhIGNvbG9yIGludGVycG9sYXRvclxuICogQHBhcmFtIG5hbWUge2VudW19OiBCdUduLCBPclJkLi4uLlxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvckludGVycG9sYXRvcihuYW1lKXtcbiAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1zY2FsZS1jaHJvbWF0aWMvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI3NlcXVlbnRpYWwtbXVsdGktaHVlXG4gICAgY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgICAgICAgQnVHbjogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVCdUduLFxuICAgICAgICBPclJkOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZU9yUmQsXG4gICAgICAgIFB1QnU6IGQzQ2hyb21hdGljLmludGVycG9sYXRlUHVCdSxcbiAgICAgICAgWWxHbkJ1OiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVlsR25CdSxcbiAgICAgICAgQmx1ZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlQmx1ZXMsXG4gICAgICAgIE9yYW5nZXM6IGQzQ2hyb21hdGljLmludGVycG9sYXRlT3JhbmdlcyxcbiAgICAgICAgR3JlZW5zOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZWVucyxcbiAgICAgICAgUHVycGxlczogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVQdXJwbGVzLFxuICAgICAgICBSZWRzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJlZHMsXG4gICAgICAgIEdyZXlzOiBkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUdyZXlzLFxuICAgICAgICBHcmF5czogZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVHcmV5c1xuICAgIH07XG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IFwiQ29sb3IgSW50ZXJwb2xhdG9yIEVycm9yIFwiICsgbmFtZTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB0aHJvdyhlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tuYW1lXTtcblxufVxuXG4vKipcbiAqIHJlZmVyZW5jZTogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLXNjYWxlXG4gKiByZWZlcmVuY2U6IGh0dHA6Ly9ibC5vY2tzLm9yZy9jdXJyYW4vMzA5NGIzN2U2M2I5MThiYWIwYTA2Nzg3ZTE2MTYwN2JcbiAqIHNjYWxlU2VxdWVudGlhbCBtYXBzIHRoZSBjb250aW51b3VzIGRvbWFpbiB0byBhIGNvbnRpbnVvdXMgY29sb3Igc2NhbGVcbiAqIEBwYXJhbSBkYXRhIHtMaXN0fSBvZiBudW1lcmljYWwgZGF0YVxuICogQHBhcmFtIGNvbG9ycyB7U3RyaW5nfSBhIGNvbG9yIG5hbWUgdGhhdCBpcyBhdmFpbGFibGUgaW4gZ2V0Q29sb3JJbnRlcnBvbGF0b3IoKVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29sb3JTY2FsZShkYXRhLCBjb2xvcnM9XCJZbEduQnVcIiwgZG1pbiA9IDApIHtcbiAgICBsZXQgZG1heCA9IE1hdGgucm91bmQobWF4KGRhdGEpKTtcbiAgICBjb25zdCBzY2FsZSA9IHNjYWxlU2VxdWVudGlhbChnZXRDb2xvckludGVycG9sYXRvcihjb2xvcnMpKTtcbiAgICBzY2FsZS5kb21haW4oW2RtaW4sIGRtYXhdKTtcbiAgICByZXR1cm4gc2NhbGU7XG59XG5cbi8qKlxuICogRHJhdyBhIGNvbG9yIGxlZ2VuZCBiYXIuXG4gKiBEZXBlbmRlbmNpZXM6IGV4cHJlc3Npb25NYXAuY3NzXG4gKiBAcGFyYW0gdGl0bGUge1N0cmluZ31cbiAqIEBwYXJhbSBkb20ge29iamVjdH0gRDMgZG9tIG9iamVjdFxuICogQHBhcmFtIHNjYWxlIHtPYmplY3R9IEQzIHNjYWxlIG9mIHRoZSBjb2xvclxuICogQHBhcmFtIGNvbmZpZyB7T2JqZWN0fSB3aXRoIGF0dHI6IHgsIHlcbiAqIEBwYXJhbSB1c2VMb2cge0Jvb2xlYW59XG4gKiBAcGFyYW0gb3JpZW50YXRpb24ge2VudW19IGggb3IgdiwgaS5lLiBob3Jpem9udGFsIG9yIHZlcnRpY2FsXG4gKiBAcGFyYW0gY2VsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZHJhd0NvbG9yTGVnZW5kKHRpdGxlLCBkb20sIHNjYWxlLCBjb25maWcsIHVzZUxvZywgdGlja3M9MTAsIGJhc2U9MTAsIGNlbGw9e2g6MTAsIHc6NTB9LCBvcmllbnRhdGlvbj1cImhcIil7XG5cbiAgICBjb25zdCBkYXRhID0gc2NhbGUudGlja3ModGlja3MpLnNsaWNlKDEpOyAvLyB3aHkgZG9lc24ndCB0aGlzIHByb3ZpZGUgY29uc2lzdGVudCBudW1iZXIgb2YgdGlja3M/P1xuXG5cbiAgICAvLyBsZWdlbmQgZ3JvdXBzXG4gICAgY29uc3QgbGVnZW5kcyA9IGRvbS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYClcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcIi5sZWdlbmRcIikuZGF0YShkYXRhKTtcblxuICAgIGNvbnN0IGcgPSBsZWdlbmRzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKFwibGVnZW5kXCIsIHRydWUpO1xuXG4gICAgaWYgKG9yaWVudGF0aW9uID09ICdoJyl7XG4gICAgICAgICAvLyBsZWdlbmQgdGl0bGVcbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KHRpdGxlKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC0xMClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55fSlgKTtcblxuICAgICAgICAvLyB0aGUgY29sb3IgbGVnZW5kXG4gICAgICAgIGcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiBjZWxsLncqaSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjZWxsLncpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBjZWxsLmgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHNjYWxlKTtcblxuICAgICAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb2xvci1sZWdlbmRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiB1c2VMb2c/KE1hdGgucG93KGJhc2UsIGQpLTEpLnRvUHJlY2lzaW9uKDIpOmQudG9QcmVjaXNpb24oMikpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+IGNlbGwudyAqIGkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgIC8vIGxlZ2VuZCB0aXRsZVxuICAgICAgICBkb20uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbG9yLWxlZ2VuZFwiKVxuICAgICAgICAgICAgLnRleHQodGl0bGUpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgNSlcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7Y29uZmlnLnh9LCAke2NvbmZpZy55ICsgY2VsbC5oICogZGF0YS5sZW5ndGh9KXJvdGF0ZSg5MClgKTtcblxuICAgICAgICBnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkLCBpKSA9PiBjZWxsLmgqaSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY2VsbC53KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2VsbC5oKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBzY2FsZSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiY29sb3ItbGVnZW5kXCIpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gdXNlTG9nPyhNYXRoLnBvdyhiYXNlLCBkKS0xKS50b1ByZWNpc2lvbigyKTpkLnRvUHJlY2lzaW9uKDIpKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDE1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkLCBpKSA9PiBjZWxsLmggKiBpICsgKGNlbGwuaC8yKSk7XG4gICAgfVxuXG5cblxufSIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMSxcbiAgICAgIGNsYW1wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHZhciB0ID0gKHggLSB4MCkgLyAoeDEgLSB4MCk7XG4gICAgcmV0dXJuIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKSA6IHQpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIHNjYWxlKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpLmRvbWFpbihbeDAsIHgxXSkuY2xhbXAoY2xhbXApO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiLyoqXG4gKiBUT0RPOiBjb2RlIHJldmlldyBvZiBob3cgdG8gcHJlc2V0IHBhcmFtZXRlciB2YWx1ZXNcbiAqIHJldmlldyBhbGwgdGhlIHBvc2l0aW9uIGNhbGN1bGF0aW9uc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZW5kcm9IZWF0bWFwQ29uZmlnIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbWFpblBhbmVsVyB7TnVtYmVyfSwgc2V0IHRoaXMgdG8gZGV0ZXJtaW5lIHRoZSBjZWxsV1xuICAgICAqIEBwYXJhbSBsZWZ0UGFuZWxXIHtJbnRlZ2VyfSwgc2V0IHRvIDAgaWYgdGhlcmUncyBubyBsZWZ0IHBhbmVsXG4gICAgICogQHBhcmFtIHRvcFBhbmVsSCB7SW50ZWdlcn0sIHNldCB0byAwIGlmIHRoZXJlJ3Mgbm8gdG9wIHBhbmVsXG4gICAgICogQHBhcmFtIG1hcmdpbiB7T2JqZWN0fSB3aXRoIGF0dHI6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc21hbGxlciB2YWx1ZXMgdGhhbiB0aGUgZGVmYXVsdCBhcmUgbm90IHJlY29tbWVuZGVkIGZvciB0aGUgaGVhdG1hcFxuICAgICAqIEBwYXJhbSBjZWxsSCB7SW50ZWdlcn1cbiAgICAgKiBAcGFyYW0gYWRqdXN0IHtJbnRlZ2VyfSwgYWRqdXN0ZWQgc3BhY2luZyBiZXR3ZWVuIHRoZSBoZWF0bWFwIGFuZCB0aGUgZGVuZHJvZ3JhbVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJvb3RXPXdpbmRvdy5pbm5lcldpZHRoLCBsZWZ0UGFuZWxXPTEwMCwgdG9wUGFuZWxIPTEwMCwgbWFyZ2luPXt0b3A6NTAsIHJpZ2h0OjI1MCwgYm90dG9tOjE3MCwgbGVmdDoxMH0sIGNlbGxIPTEyLCBhZGp1c3Q9MTApIHtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSBtYXJnaW47XG4gICAgICAgIHRoaXMucm9vdFcgPSByb290VztcblxuICAgICAgICB0aGlzLmxlZnRUcmVlUGFuZWwgPSB7IC8vIHRoZSByb3cgZGVuZHJvZ3JhbSBwYW5lbFxuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQsXG4gICAgICAgICAgICB5OiBtYXJnaW4udG9wICsgdG9wUGFuZWxILFxuICAgICAgICAgICAgaDogdW5kZWZpbmVkLCAvLyB1bmRlZmluZWQgaW5pdGlhbGx5LCBiZWNhdXNlIGl0J3MgZGF0YS1kZXBlbmRlbnRcbiAgICAgICAgICAgIHc6IGxlZnRQYW5lbFcgLSBhZGp1c3QsXG4gICAgICAgICAgICBpZDogXCJsZWZ0VHJlZVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jZWxsID0ge1xuICAgICAgICAgICAgdzogdW5kZWZpbmVkLCAvLyB0byBiZSBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBkYXRhIGFuZCByb290V1xuICAgICAgICAgICAgaDogY2VsbEhcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRvcFRyZWVQYW5lbCA9IHsgLy8gdGhlIGNvbHVtbiBkZW5kcm9ncmFtIHBhbmVsXG4gICAgICAgICAgICB4OiBtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcsXG4gICAgICAgICAgICB5OiBtYXJnaW4udG9wLFxuICAgICAgICAgICAgaDogdG9wUGFuZWxIIC0gYWRqdXN0LFxuICAgICAgICAgICAgdzogdGhpcy5yb290VyAtIChtYXJnaW4ubGVmdCArIGxlZnRQYW5lbFcgKyBtYXJnaW4ucmlnaHQpLCAvLyBoYXJkLWNvZGVkIHZhbHVlcz9cbiAgICAgICAgICAgIGlkOiBcInRvcFRyZWVcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaGVhdG1hcFBhbmVsID0ge1xuICAgICAgICAgICAgeDogbWFyZ2luLmxlZnQgKyBsZWZ0UGFuZWxXLFxuICAgICAgICAgICAgeTogbWFyZ2luLnRvcCArIHRvcFBhbmVsSCxcbiAgICAgICAgICAgIGg6IHRoaXMubGVmdFRyZWVQYW5lbC5oLFxuICAgICAgICAgICAgdzogdGhpcy50b3BUcmVlUGFuZWwudyxcbiAgICAgICAgICAgIGlkOiBcImhlYXRtYXBcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubGVnZW5kUGFuZWwgPSB7IC8vIHRoZSBjb2xvciBsZWdlbmQgcGFuZWxcbiAgICAgICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgbGVmdFBhbmVsVyxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICBoOiBtYXJnaW4udG9wLzIsXG4gICAgICAgICAgICB3OiB0aGlzLnRvcFRyZWVQYW5lbC53LFxuICAgICAgICAgICAgY2VsbDoge3c6IDYwfSxcbiAgICAgICAgICAgIGlkOiBcImxlZ2VuZFwiXG4gICAgICAgIH07XG5cblxuICAgIH1cblxuICAgIGdldCgpe1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWFyZ2luOiB0aGlzLm1hcmdpbixcbiAgICAgICAgICAgIGNlbGw6IHRoaXMuY2VsbCxcbiAgICAgICAgICAgIHc6IHRoaXMucm9vdFcsXG4gICAgICAgICAgICBoOiB0aGlzLm1hcmdpbi50b3AgKyB0aGlzLnRvcFRyZWVQYW5lbC5oICsgdGhpcy5sZWdlbmRQYW5lbC5oICsgdGhpcy5tYXJnaW4uYm90dG9tLCAvLyBpbml0aWFsIGhlaWdodFxuICAgICAgICAgICAgcGFuZWxzOiB7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnRvcFRyZWVQYW5lbCxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLmxlZnRUcmVlUGFuZWwsXG4gICAgICAgICAgICAgICAgbWFpbjogdGhpcy5oZWF0bWFwUGFuZWwsXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB0aGlzLmxlZ2VuZFBhbmVsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4iLCJmdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGNvdW50KTtcbn1cbiIsImltcG9ydCBub2RlX2NvdW50IGZyb20gXCIuL2NvdW50XCI7XG5pbXBvcnQgbm9kZV9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBub2RlX2VhY2hCZWZvcmUgZnJvbSBcIi4vZWFjaEJlZm9yZVwiO1xuaW1wb3J0IG5vZGVfZWFjaEFmdGVyIGZyb20gXCIuL2VhY2hBZnRlclwiO1xuaW1wb3J0IG5vZGVfc3VtIGZyb20gXCIuL3N1bVwiO1xuaW1wb3J0IG5vZGVfc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgbm9kZV9wYXRoIGZyb20gXCIuL3BhdGhcIjtcbmltcG9ydCBub2RlX2FuY2VzdG9ycyBmcm9tIFwiLi9hbmNlc3RvcnNcIjtcbmltcG9ydCBub2RlX2Rlc2NlbmRhbnRzIGZyb20gXCIuL2Rlc2NlbmRhbnRzXCI7XG5pbXBvcnQgbm9kZV9sZWF2ZXMgZnJvbSBcIi4vbGVhdmVzXCI7XG5pbXBvcnQgbm9kZV9saW5rcyBmcm9tIFwiLi9saW5rc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgIHZhbHVlZCA9ICtkYXRhLnZhbHVlICYmIChyb290LnZhbHVlID0gZGF0YS52YWx1ZSksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbcm9vdF0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcyxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKHZhbHVlZCkgbm9kZS52YWx1ZSA9ICtub2RlLmRhdGEudmFsdWU7XG4gICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IE5vZGUoY2hpbGRzW2ldKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgIGNoaWxkLmRlcHRoID0gbm9kZS5kZXB0aCArIDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvb3QuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gbm9kZV9jb3B5KCkge1xuICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q2hpbGRyZW4oZCkge1xuICByZXR1cm4gZC5jaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xuICBub2RlLmRhdGEgPSBub2RlLmRhdGEuZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICB2YXIgaGVpZ2h0ID0gMDtcbiAgZG8gbm9kZS5oZWlnaHQgPSBoZWlnaHQ7XG4gIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZGVwdGggPVxuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbn1cblxuTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTm9kZSxcbiAgY291bnQ6IG5vZGVfY291bnQsXG4gIGVhY2g6IG5vZGVfZWFjaCxcbiAgZWFjaEFmdGVyOiBub2RlX2VhY2hBZnRlcixcbiAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxuICBzdW06IG5vZGVfc3VtLFxuICBzb3J0OiBub2RlX3NvcnQsXG4gIHBhdGg6IG5vZGVfcGF0aCxcbiAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gIGxpbmtzOiBub2RlX2xpbmtzLFxuICBjb3B5OiBub2RlX2NvcHlcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIGN1cnJlbnQsIG5leHQgPSBbbm9kZV0sIGNoaWxkcmVuLCBpLCBuO1xuICBkbyB7XG4gICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgd2hpbGUgKG5vZGUgPSBjdXJyZW50LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5leHQucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IHdoaWxlIChuZXh0Lmxlbmd0aCk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbjtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChub2RlID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGk7XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHN1bSA9ICt2YWx1ZShub2RlLmRhdGEpIHx8IDAsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICBub2RlLnZhbHVlID0gc3VtO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZW5kKSB7XG4gIHZhciBzdGFydCA9IHRoaXMsXG4gICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICBub2RlcyA9IFtzdGFydF07XG4gIHdoaWxlIChzdGFydCAhPT0gYW5jZXN0b3IpIHtcbiAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcbiAgfVxuICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgd2hpbGUgKGVuZCAhPT0gYW5jZXN0b3IpIHtcbiAgICBub2Rlcy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICBlbmQgPSBlbmQucGFyZW50O1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxuICAgICAgYyA9IG51bGw7XG4gIGEgPSBhTm9kZXMucG9wKCk7XG4gIGIgPSBiTm9kZXMucG9wKCk7XG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgYyA9IGE7XG4gICAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgICBiID0gYk5vZGVzLnBvcCgpO1xuICB9XG4gIHJldHVybiBjO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV07XG4gIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBbXTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsZWF2ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICByb290LmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlICE9PSByb290KSB7IC8vIERvbuKAmXQgaW5jbHVkZSB0aGUgcm9vdOKAmXMgcGFyZW50LCBpZiBhbnkuXG4gICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGlua3M7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIikpO1xuXG4gICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcblxuICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjMDAwXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/IFwiTVwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIixcIiArIHJhbmdlMCArIFwiSDAuNVZcIiArIHJhbmdlMSArIFwiSFwiICsgayAqIHRpY2tTaXplT3V0ZXJcbiAgICAgICAgICAgIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlcik7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXModG9wLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xuICByZXR1cm4gYXhpcyhsZWZ0LCBzY2FsZSk7XG59XG4iLCIvKlxuICAgIERlbmRyb2dyYW0gdmlzdWFsaXplcyBhIHRleHQtYmFzZWQgTmV3aWNrIHRyZWUgdXNpbmcgRDMgVjUuXG5cbiAgICBkZXBlbmRlbmNpZXM6XG4gICAgZDMgdjVcbiAgICB0aGUgbmV3aWNrIHBhcnNlcjogbmV3aWNrLmpzXG5cbiAgICByZWZlcmVuY2VzOlxuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1oaWVyYXJjaHlcbiAgICBodHRwczovL2dpdGh1Yi5jb20vamFzb25kYXZpZXMvbmV3aWNrLmpzL1xuXG4gICAgbm90ZXMgb24gdGhlIHVuZGVybHlpbmcgZGF0YSBzdHJ1Y3R1cmVzOlxuICAgIC0gaXQgdXNlcyBwYXJzZU5ld2ljaygpIHRvIGNvbnZlcnQgdGhlIG5ld2ljayB0cmVlIGludG8gdGhlIGZvbGxvd2luZyBqc29uOlxuICAgICAgICB7XG4gICAgICAgICAgICBicmFuY2hzZXQ6W2NoaWxkIG5vZGUganNvbiBvYmplY3RzXSxcbiAgICAgICAgICAgIG5hbWU6IFwiXCIgLy8gaW50ZXJuYWwgbm9kZXMgd291bGQgaGF2ZSBubyByZWFsIGxhYmVsc1xuICAgICAgICB9XG4gICAgICAgVGhpcyBqc29uIHN0cnVjdHVyZSBpcyB0aGUgaW5wdXQgZGF0YSBvZiBkMy5oaWVyYXJjaHkoKVxuXG4gICAgLSBJbiB0aGUgZDMuaGllcmFyY2h5KCksIHRoZSByb290IG5vZGUgb2JqZWN0IGhhcyB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcbiAgICAgICAge1xuICAgICAgICAgICAgY2hpbGRyZW46IFtjbywgY29dLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGJyYW5jaHNldDogQXJyYXkoMiksXG4gICAgICAgICAgICAgICAgbmFtZTogXCJub2RlIG5hbWVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiBpbnRlZ2VyLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IDlcbiAgICAgICAgfVxuICovXG5cbi8vIFRPRE86IGVsaW1pbmF0ZSBoYXJkLWNvZGVkIHZhbHVlc1xuXG5pbXBvcnQge2hpZXJhcmNoeX0gZnJvbSBcImQzLWhpZXJhcmNoeVwiO1xuaW1wb3J0IHthc2NlbmRpbmd9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtheGlzQm90dG9tLCBheGlzTGVmdH0gZnJvbSBcImQzLWF4aXNcIjtcbmltcG9ydCB7c2NhbGVMaW5lYXIsIHNjYWxlQmFuZH0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQge3BhcnNlTmV3aWNrfSBmcm9tIFwiLi9uZXdpY2tcIjtcbmNvbnN0IHZlcmJvc2UgPSBmYWxzZTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbmRyb2dyYW0ge1xuICAgIGNvbnN0cnVjdG9yKG5ld2ljaywgb3JpZW50YXRpb249J2gnKXtcbiAgICAgICAgdGhpcy5uZXdpY2sgPSBuZXdpY2s7XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICAgICAgdGhpcy5wb3N0b3JkZXIgPSBbXTtcbiAgICAgICAgdGhpcy5yb290ID0gaGllcmFyY2h5KHBhcnNlTmV3aWNrKG5ld2ljayksIChkKSA9PiBkLmJyYW5jaHNldClcbiAgICAgICAgICAgIC5zdW0oKGQpPT5kLmJyYW5jaHNldD8wOjEpXG4gICAgICAgICAgICAuc29ydCgoYSxiKT0+YS52YWx1ZS1iLnZhbHVlfHxhLmRhdGEubGVuZ3RoLWIuZGF0YS5sZW5ndGgpO1xuICAgICAgICB0aGlzLmxlYXZlcyA9IHRoaXMucm9vdC5sZWF2ZXMoKS5zb3J0KChhLCBiKSA9PiAoYS52YWx1ZSAtIGIudmFsdWUpIHx8IGFzY2VuZGluZyhhLmRhdGEubGVuZ3RoLCBiLmRhdGEubGVuZ3RoKSk7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZHJhdyhkb20sIHdpZHRoLCBoZWlnaHQpe1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLl9zZXRYU2NhbGUoKTtcbiAgICAgICAgdGhpcy5fc2V0WVNjYWxlKCk7XG4gICAgICAgIGlmICgnaCcgPT0gdGhpcy5vcmllbnRhdGlvbikgdGhpcy5fZHJhd0hUcmVlKGRvbSk7XG4gICAgICAgIGVsc2UgdGhpcy5fZHJhd1ZUcmVlKGRvbSk7XG4gICAgfVxuXG4gICAgLy8vLy8vLyBwcml2YXRlIG1ldGhvZHMgLy8vLy8vL1xuXG4gICAgX2RyYXdIVHJlZShkb20pe1xuICAgICAgICBjb25zdCBzZXRZID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBhIGxlYWYgbm9kZVxuICAgICAgICAgICAgICAgIG5vZGUueSA9IHRoaXMueVNjYWxlKG5vZGUuZGF0YS5uYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYW4gaW50ZXJuYWwgbm9kZVxuICAgICAgICAgICAgICAgIC8vIHRoZSB5IGNvb3JkaW5hdGUgb2YgYW4gaW50ZXJuYWwgbm9kZSBpcyB0aGUgYXZlcmFnZSB5IGZyb20gaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgbm9kZS55ID0gbm9kZS5jaGlsZHJlbi5yZWR1Y2UoKHN1bSwgZCk9PnN1bStkLnksIDApL25vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXRYID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUueCA9IHRoaXMueFNjYWxlKHRoaXMuX2dldEJyYW5jaExlbmd0aFRvUm9vdChub2RlKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZnJvbSB0aGUgbGVhZiBsZXZlbCAtPiByb290XG4gICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5fc29ydE5vZGVzQnlMZXZlbCgpO1xuICAgICAgICBub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBzZXRYKG5vZGUpO1xuICAgICAgICAgICAgc2V0WShub2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9tLnNlbGVjdEFsbCgnLmJyYW5jaCcpXG4gICAgICAgICAgICAuZGF0YShub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQueClcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQuZGF0YS5sZW5ndGg/ZC54IC0gdGhpcy54U2NhbGUoZC5kYXRhLmxlbmd0aCk6ZC54KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgKGQpID0+IGQueSArIHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIC8vIGZvciBhbGwgaW50ZXJuYWwgbm9kZXNcbiAgICAgICAgY29uc3QgaW5vZGVzID0gdGhpcy5yb290LmRlc2NlbmRhbnRzKCkuZmlsdGVyKChkKT0+ZC5oZWlnaHQpLnNvcnQoKGEsYik9PmIuaGVpZ2h0LWEuaGVpZ2h0KTtcbiAgICAgICAgZG9tLnNlbGVjdEFsbCgnLmFybScpXG4gICAgICAgICAgICAuZGF0YShpbm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIChkKSA9PiBkLmNoaWxkcmVuWzBdLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC5jaGlsZHJlblsxXS55ICsgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSk7XG5cbiAgICAgICAgZG9tLnNlbGVjdEFsbCgnLm5vZGUnKVxuICAgICAgICAgICAgLmRhdGEoaW5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKSA9PiBkLnkgKyB0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDIpXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICcjMzMzJylcbiAgICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAwLjUpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZGVuZHJvZ3JhbS1ub2RlXCIpXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJyXCIsIDMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGQubGVhdmVzKCkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYXhpc1xuICAgICAgICAvLyBBZGQgdGhlIHggQXhpc1xuICAgICAgICBkb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHRoaXMuaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgICAgICBheGlzQm90dG9tKHRoaXMueFNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja3MoMylcbiAgICAgICAgICAgICAgICAvLyAudGlja1ZhbHVlcyhbTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKS8yKSwgTWF0aC5mbG9vcih0aGlzLl9nZXRNYXhCcmFuY2hMZW5ndGgoKSldKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBfc29ydE5vZGVzQnlMZXZlbCgpe1xuICAgICAgICAvLyByZXR1cm5zIGEgbGlzdCBvZiBub2RlcyBvcmRlcmVkIGJ5IGFuY2VzdHJhbCBsZXZlbCwgdGhlbiBieSBicmFuY2ggbGVuZ3RoXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuZGVzY2VuZGFudHMoKS5zb3J0KChhLCBiKSA9PiAoYS5oZWlnaHQgLSBiLmhlaWdodCkgfHwgYXNjZW5kaW5nKGEuZGF0YS5sZW5ndGgsIGIuZGF0YS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICBfZHJhd1ZUcmVlKGRvbSl7XG4gICAgICAgIGNvbnN0IHNldFggPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGEgbGVhZiBub2RlXG4gICAgICAgICAgICAgICAgbm9kZS54ID0gdGhpcy54U2NhbGUobm9kZS5kYXRhLm5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhbiBpbnRlcm5hbCBub2RlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHkgY29vcmRpbmF0ZSBvZiBhbiBpbnRlcm5hbCBub2RlIGlzIHRoZSBhdmVyYWdlIHkgZnJvbSBpdHMgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBub2RlLnggPSBub2RlLmNoaWxkcmVuLnJlZHVjZSgoc3VtLCBkKT0+c3VtK2QueCwgMCkvbm9kZS5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNldFkgPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgbm9kZS55ID0gdGhpcy55U2NhbGUodGhpcy5fZ2V0QnJhbmNoTGVuZ3RoVG9Sb290KG5vZGUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZnJvbSB0aGUgbGVhZiBsZXZlbCAtPiByb290XG4gICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5fc29ydE5vZGVzQnlMZXZlbCgpO1xuICAgICAgICBub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBzZXRYKG5vZGUpO1xuICAgICAgICAgICAgc2V0WShub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5icmFuY2gnKVxuICAgICAgICAgICAgLmRhdGEobm9kZXMpXG4gICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuYXR0cihcInkxXCIsIChkKSA9PiBkLnkpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKSA9PiBkLmRhdGEubGVuZ3RoP2QueSAtIHRoaXMueVNjYWxlKGQuZGF0YS5sZW5ndGgpOmQueSlcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLnggKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKS8yKVxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxKTtcblxuICAgICAgICAvLyBmb3IgYWxsIGludGVybmFsIG5vZGVzXG4gICAgICAgIGNvbnN0IGlub2RlcyA9IHRoaXMucm9vdC5kZXNjZW5kYW50cygpLmZpbHRlcigoZCk9PmQuaGVpZ2h0KS5zb3J0KChhLGIpPT5iLmhlaWdodC1hLmhlaWdodCk7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5hcm0nKVxuICAgICAgICAgICAgLmRhdGEoaW5vZGVzKVxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCAoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC5jaGlsZHJlblswXS54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQuY2hpbGRyZW5bMV0ueCArIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpLzIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpO1xuXG4gICAgICAgIGRvbS5zZWxlY3RBbGwoJy5ub2RlJylcbiAgICAgICAgICAgIC5kYXRhKGlub2RlcylcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC54ICsgdGhpcy54U2NhbGUuYmFuZHdpZHRoKCkvMilcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgKGQpID0+IGQueSlcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzMzMycpXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMC41KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tbm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiclwiLCAzKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkLmxlYXZlcygpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGF4aXNcbiAgICAgICAgLy8gQWRkIHRoZSB4IEF4aXNcbiAgICAgICAgZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC8vIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt0aGlzLndpZHRofSwgMClgKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRlbmRyb2dyYW0tYXhpc1wiKVxuICAgICAgICAgICAgLmNhbGwoXG4gICAgICAgICAgICAgICAgYXhpc0xlZnQodGhpcy55U2NhbGUpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrcygzKVxuICAgICAgICAgICAgICAgIC8vIC50aWNrVmFsdWVzKFtNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpLzIpLCBNYXRoLmZsb29yKHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpKV0pXG4gICAgICAgICAgICApO1xuXG4gICAgfVxuXG4gICAgX2dldEJyYW5jaExlbmd0aFRvUm9vdChub2RlKSB7XG4gICAgICAgIC8vIG5vZGU6IGEgZDMuaGllcmFyY2h5IG5vZGVcbiAgICAgICAgcmV0dXJuIG5vZGUucGF0aCh0aGlzLnJvb3QpXG4gICAgICAgICAgICAucmVkdWNlKChzdW0sIGQpID0+IGQuZGF0YS5sZW5ndGg/c3VtK2QuZGF0YS5sZW5ndGg6c3VtLCAwKTtcbiAgICB9XG5cbiAgICBfZ2V0TWF4QnJhbmNoTGVuZ3RoKCkge1xuICAgICAgICAvLyB0aGUgYXNzdW1wdGlvbiBoZXJlIGlzIHRoYXQgYWxsIGxlYWYgbm9kZXMgaGF2ZSB0aGUgc2FtZSBkaXN0YW5jZSB0byB0aGUgcm9vdC5cbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmxlYXZlc1swXTsgLy8gcmFuZG9tbHkgcGlja3MgYSBsZWFmIG5vZGVcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJyYW5jaExlbmd0aFRvUm9vdChub2RlKTtcbiAgICB9XG5cbiAgICBfYXNzaWduUG9zdG9yZGVyKG5vZGUpe1xuICAgICAgICAvLyBhc3NpZ25zIHBvc3Qtb3JkZXIgb2YgYWxsIGxlYWYgbm9kZXNcbiAgICAgICAgaWYobm9kZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIC8vIGJhc2UgY2FzZVxuICAgICAgICAgICAgdGhpcy5wb3N0b3JkZXIucHVzaChub2RlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcihub2RlLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgIHRoaXMuX2Fzc2lnblBvc3RvcmRlcihub2RlLmNoaWxkcmVuWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRYU2NhbGUoKXtcbiAgICAgICAgaWYgKCdoJyA9PSB0aGlzLm9yaWVudGF0aW9uKXtcbiAgICAgICAgICAgIHRoaXMueFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpXSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMud2lkdGhdKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYXNzaWduUG9zdG9yZGVyKHRoaXMucm9vdCk7XG4gICAgICAgICAgICBpZiAodmVyYm9zZSkgY29uc29sZS5sb2codGhpcy5wb3N0b3JkZXIpO1xuICAgICAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5kb21haW4odGhpcy5wb3N0b3JkZXIubWFwKChkKSA9PiBkLmRhdGEubmFtZSkpXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLndpZHRoXSlcbiAgICAgICAgICAgICAgICAucGFkZGluZyguMDUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldFlTY2FsZSgpe1xuICAgICAgICBpZiAoJ2gnID09IHRoaXMub3JpZW50YXRpb24pe1xuICAgICAgICAgICAgdGhpcy5fYXNzaWduUG9zdG9yZGVyKHRoaXMucm9vdCk7XG4gICAgICAgICAgICBpZiAodmVyYm9zZSkgY29uc29sZS5sb2codGhpcy5wb3N0b3JkZXIpO1xuICAgICAgICAgICAgdGhpcy55U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgICAgICAgICAgICAgIC5kb21haW4odGhpcy5wb3N0b3JkZXIubWFwKChkKSA9PiBkLmRhdGEubmFtZSkpXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLmhlaWdodF0pXG4gICAgICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHRoaXMuX2dldE1heEJyYW5jaExlbmd0aCgpXSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIHRoaXMuaGVpZ2h0XSlcbiAgICAgICAgfVxuICAgIH1cblxufSIsIi8vIENvcHlyaWdodCAyMDExIEphc29uIERhdmllcyBodHRwczovL2dpdGh1Yi5jb20vamFzb25kYXZpZXMvbmV3aWNrLmpzXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5ld2ljayhzKSB7XG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdO1xuICAgIHZhciB0cmVlID0ge307XG4gICAgdmFyIHRva2VucyA9IHMuc3BsaXQoL1xccyooO3xcXCh8XFwpfCx8OilcXHMqLyk7XG4gICAgZm9yICh2YXIgaT0wOyBpPHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICcoJzogLy8gbmV3IGJyYW5jaHNldFxuICAgICAgICAgIHZhciBzdWJ0cmVlID0ge307XG4gICAgICAgICAgdHJlZS5icmFuY2hzZXQgPSBbc3VidHJlZV07XG4gICAgICAgICAgYW5jZXN0b3JzLnB1c2godHJlZSk7XG4gICAgICAgICAgdHJlZSA9IHN1YnRyZWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJywnOiAvLyBhbm90aGVyIGJyYW5jaFxuICAgICAgICAgIHZhciBzdWJ0cmVlID0ge307XG4gICAgICAgICAgYW5jZXN0b3JzW2FuY2VzdG9ycy5sZW5ndGgtMV0uYnJhbmNoc2V0LnB1c2goc3VidHJlZSk7XG4gICAgICAgICAgdHJlZSA9IHN1YnRyZWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJyknOiAvLyBvcHRpb25hbCBuYW1lIG5leHRcbiAgICAgICAgICB0cmVlID0gYW5jZXN0b3JzLnBvcCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICc6JzogLy8gb3B0aW9uYWwgbGVuZ3RoIG5leHRcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB2YXIgeCA9IHRva2Vuc1tpLTFdO1xuICAgICAgICAgIGlmICh4ID09ICcpJyB8fCB4ID09ICcoJyB8fCB4ID09ICcsJykge1xuICAgICAgICAgICAgdHJlZS5uYW1lID0gdG9rZW47XG4gICAgICAgICAgfSBlbHNlIGlmICh4ID09ICc6Jykge1xuICAgICAgICAgICAgdHJlZS5sZW5ndGggPSBwYXJzZUZsb2F0KHRva2VuKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cmVlO1xufVxuXG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUaW1lcn0gZnJvbSBcIi4vdGltZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICB0LnJlc3RhcnQoZnVuY3Rpb24oZWxhcHNlZCkge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORykgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc3RhcnRlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICAvLyBEaXNwYXRjaCB0aGUgaW50ZXJydXB0IGV2ZW50LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuIE5vIGludGVycnVwdCBldmVudCBpcyBkaXNwYXRjaGVkXG4gICAgICAvLyBiZWNhdXNlIHRoZSBjYW5jZWxsZWQgdHJhbnNpdGlvbnMgbmV2ZXIgc3RhcnRlZC4gTm90ZSB0aGF0IHRoaXMgYWxzb1xuICAgICAgLy8gcmVtb3ZlcyB0aGlzIHRyYW5zaXRpb24gZnJvbSB0aGUgcGVuZGluZyBsaXN0IVxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChudWxsLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2Vcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIHZhbHVlMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBpICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgIH07XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlXCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZUVuZChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVSZW1vdmUobmFtZSwgaSkpXG4gICAgICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmVFbmQobmFtZSkpXG4gICAgICA6IHRoaXMuc3R5bGVUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICAgICAgOiBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlICsgXCJcIiksIHByaW9yaXR5KTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCIvKipcbiAqIENyZWF0ZSBhIHRvb2xiYXJcbiAqIFRoaXMgY2xhc3MgdXNlcyBhIGxvdCBvZiBqUXVlcnkgZm9yIGRvbSBlbGVtZW50IG1hbmlwdWxhdGlvblxuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3BhcnNlQ3NzU3R5bGVzfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb29sYmFyIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21JZCwgdG9vbHRpcD11bmRlZmluZWQsIHZlcnRpY2FsPWZhbHNlKXtcbiAgICAgICAgJChgIyR7ZG9tSWR9YCkuc2hvdygpOyAvLyBpZiBoaWRkZW5cblxuICAgICAgICAvLyBhZGQgYSBuZXcgYmFyZ3JvdXAgZGl2IHRvIGRvbUlEIHdpdGggYm9vdHN0cmFwIGJ1dHRvbiBjbGFzc2VzXG4gICAgICAgIGNvbnN0IGJ0bkNsYXNzZXMgPSB2ZXJ0aWNhbD8nYnRuLWdyb3VwLXZlcnRpY2FsIGJ0bi1ncm91cC1zbSc6ICdidG4tZ3JvdXAgYnRuLWdyb3VwLXNtJztcbiAgICAgICAgdGhpcy5iYXIgPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhidG5DbGFzc2VzKS5hcHBlbmRUbyhgIyR7ZG9tSWR9YCk7XG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IHt9O1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRvd25sb2FkIGJ1dHRvblxuICAgICAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgYnV0dG9uIGRvbSBJRFxuICAgICAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfSB0aGUgU1ZHIGRvbSBJRCB0byBncmFiIGFuZCBkb3dubG9hZFxuICAgICAqIEBwYXJhbSBvdXRmaWxlTmFtZSB7U3RyaW5nfSB0aGUgZG93bmxvYWQgZmlsZSBuYW1lXG4gICAgICogQHBhcmFtIGNsb25lSWQge1N0cmluZ30gdGhlIGNsb25lZCBTVkcgZG9tIElEXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSdzIGljb24gY2xhc3MgbmFtZVxuICAgICAqL1xuICAgIGNyZWF0ZURvd25sb2FkQnV0dG9uKGlkLCBzdmdJZCwgb3V0ZmlsZU5hbWUsIGNsb25lSWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihpZCwgaWNvbik7XG4gICAgICAgIHNlbGVjdChgIyR7aWR9YClcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRTdmcoc3ZnSWQsIG91dGZpbGVOYW1lLCBjbG9uZUlkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJEb3dubG9hZFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3V0JywgKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVzZXRCdXR0b24oaWQsIGNhbGxiYWNrLCBpY29uPSdmYS1leHBhbmQtYXJyb3dzLWFsdCcpe1xuICAgICAgICBjb25zdCAkYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oaWQsIGljb24pO1xuICAgICAgICBzZWxlY3QoYCMke2lkfWApXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgY2FsbGJhY2spXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsICgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwLnNob3coXCJSZXNldCB0aGUgc2NhbGVzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgYSBidXR0b24gdG8gdGhlIHRvb2xiYXJcbiAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30gdGhlIGJ1dHRvbidzIGlkXG4gICAgICogQHBhcmFtIGljb24ge1N0cmluZ30gYSBmb250YXdlc29tZSBpY29uIGNsYXNzXG4gICAgICogRGVwZW5kZW5jaWVzOiBCb290c3RyYXAsIGpRdWVyeSwgRm9udGF3ZXNvbWVcbiAgICAgKi9cbiAgICBjcmVhdGVCdXR0b24oaWQsIGljb249J2ZhLWRvd25sb2FkJyl7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSAkKCc8YS8+JykuYXR0cignaWQnLCBpZClcbiAgICAgICAgICAgIC5hZGRDbGFzcygnYnRuIGJ0bi1kZWZhdWx0JykuYXBwZW5kVG8odGhpcy5iYXIpO1xuICAgICAgICAkKCc8aS8+JykuYWRkQ2xhc3MoYGZhICR7aWNvbn1gKS5hcHBlbmRUbygkYnV0dG9uKTtcbiAgICAgICAgdGhpcy5idXR0b25zW2lkXSA9ICRidXR0b247XG4gICAgICAgIHJldHVybiAkYnV0dG9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGF0dGFjaCBhIHRvb2x0aXAgZG9tIHdpdGggdGhlIHRvb2xiYXJcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBhdHRhY2hUb29sdGlwKHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERvd25sb2FkIFNWRyBvYmpcbiAgICAgKiBAcGFyYW0gc3ZnSWQge1N0cmluZ30gdGhlIFNWRyBkb20gSURcbiAgICAgKiBAcGFyYW0gZmlsZU5hbWUge1N0cmluZ30gdGhlIG91dHB1dCBmaWxlIG5hbWVcbiAgICAgKiBAcGFyYW0gY2xvbmVJZCB7U3RyaW5nfSB0aGUgdGVtcG9yYXJ5IGRvbSBJRCB0byBjb3B5IHRoZSBTVkcgdG9cbiAgICAgKi9cbiAgICBkb3dubG9hZFN2ZyhzdmdJZCwgZmlsZU5hbWUsIGNsb25lSWQpe1xuICAgICAgICAvLyBsZXQgc3ZnT2JqID0gJCgkKCQoYCR7XCIjXCIgK3N2Z0lkfSBzdmdgKSlbMF0pOyAvLyBjb21wbGljYXRlZCBqUXVlcnkgdG8gZ2V0IHRvIHRoZSBTVkcgb2JqZWN0XG4gICAgICAgIGxldCBzdmdPYmogPSAkKCQoJChgJHtcIiNcIiArc3ZnSWR9YCkpWzBdKTtcbiAgICAgICAgdmFyICRzdmdDb3B5ID0gc3ZnT2JqLmNsb25lKClcbiAgICAgICAgLmF0dHIoXCJ2ZXJzaW9uXCIsIFwiMS4xXCIpXG4gICAgICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgICAgICAvLyBwYXJzZSBhbmQgYWRkIGFsbCB0aGUgQ1NTIHN0eWxpbmcgdXNlZCBieSB0aGUgU1ZHXG4gICAgICAgIHZhciBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICAgICAkc3ZnQ29weS5wcmVwZW5kKHN0eWxlcyk7XG5cbiAgICAgICAgJChcIiNcIiArIGNsb25lSWQpLmh0bWwoJycpLmhpZGUoKTsgLy8gbWFrZSBzdXJlIHRoZSBjb3B5SUQgaXMgaW52aXNpYmxlXG4gICAgICAgIHZhciBzdmdIdG1sID0gJChgIyR7Y2xvbmVJZH1gKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgICAgICB2YXIgc3ZnQmxvYiA9IG5ldyBCbG9iKFtzdmdIdG1sXSwge3R5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwifSk7XG4gICAgICAgIHNhdmVBcyhzdmdCbG9iLCBmaWxlTmFtZSk7XG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIHRlbXAgZG93bmxvYWQgZGl2XG4gICAgICAgICQoYCMke2Nsb25lSWR9YCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZXMgYW4gU1ZHXG4gKiBAcGFyYW0gaWQge1N0cmluZ30gYSBET00gZWxlbWVudCBJRCB0aGF0IHN0YXJ0cyB3aXRoIGEgXCIjXCJcbiAqIEBwYXJhbSB3aWR0aCB7TnVtZXJpY31cbiAqIEBwYXJhbSBoZWlnaHQge051bWVyaWN9XG4gKiBAcGFyYW0gbWFyZ2luIHtPYmplY3R9IHdpdGggdHdvIGF0dHJpYnV0ZXM6IHdpZHRoIGFuZCBoZWlnaHRcbiAqIEByZXR1cm4ge1NlbGVjdGlvbn0gdGhlIGQzIHNlbGVjdGlvbiBvYmplY3Qgb2YgdGhlIFNWR1xuICovXG5cbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBpZCB7U3RyaW5nfSB0aGUgcGFyZW50IGRvbSBJRFxuICogQHBhcmFtIHdpZHRoIHtOdW1lcmljfVxuICogQHBhcmFtIGhlaWdodCB7TnVtZXJpY31cbiAqIEBwYXJhbSBtYXJnaW4ge09iamVjdH0gd2l0aCBhdHRyOiBsZWZ0LCB0b3BcbiAqIEBwYXJhbSBzdmdJZCB7U3RyaW5nfVxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdmcoaWQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpbiwgc3ZnSWQ9dW5kZWZpbmVkKXtcbiAgICBpZiAoc3ZnSWQ9PT11bmRlZmluZWQpIHN2Z0lkPWAke2lkfS1zdmdgO1xuICAgIHJldHVybiBzZWxlY3QoXCIjXCIraWQpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgc3ZnSWQpXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLnRvcH0pYClcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHN2Z09ialxuICogQHBhcmFtIGRvd25sb2FkRmlsZU5hbWUge1N0cmluZ31cbiAqIEBwYXJhbSB0ZW1wRG93bmxvYWREaXZJZCB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRTdmcoc3ZnT2JqLCBkb3dubG9hZEZpbGVOYW1lLCB0ZW1wRG93bmxvYWREaXZJZCl7XG4gICAgY29uc29sZS5sb2coc3ZnT2JqKTtcbiAgICB2YXIgJHN2Z0NvcHkgPSBzdmdPYmouY2xvbmUoKVxuICAgIC5hdHRyKFwidmVyc2lvblwiLCBcIjEuMVwiKVxuICAgIC5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgIC8vIHBhcnNlIGFuZCBhZGQgdGhlIENTUyBzdHlsaW5nIHVzZWQgYnkgdGhlIFNWR1xuICAgIHZhciBzdHlsZXMgPSBwYXJzZUNzc1N0eWxlcyhzdmdPYmouZ2V0KCkpO1xuICAgICRzdmdDb3B5LnByZXBlbmQoc3R5bGVzKTtcblxuICAgICQoXCIjXCIgKyB0ZW1wRG93bmxvYWREaXZJZCkuaHRtbCgnJykuaGlkZSgpO1xuICAgIHZhciBzdmdIdG1sID0gJChcIiNcIiArIHRlbXBEb3dubG9hZERpdklkKS5hcHBlbmQoJHN2Z0NvcHkpLmh0bWwoKTtcblxuICAgIHZhciBzdmdCbG9iID0gbmV3IEJsb2IoW3N2Z0h0bWxdLCB7dHlwZTogXCJpbWFnZS9zdmcreG1sXCJ9KTtcbiAgICBzYXZlQXMoc3ZnQmxvYiwgZG93bmxvYWRGaWxlTmFtZSk7XG5cbiAgICAvLyBjbGVhciB0aGUgdGVtcCBkb3dubG9hZCBkaXZcbiAgICAkKFwiI1wiICsgdGVtcERvd25sb2FkRGl2SWQpLmh0bWwoJycpLmhpZGUoKTtcbn1cbi8qKlxuICogQSBmdW5jdGlvbiBmb3IgcGFyc2luZyB0aGUgQ1NTIHN0eWxlIHNoZWV0IGFuZCBpbmNsdWRpbmcgdGhlIHN0eWxlIHByb3BlcnRpZXMgaW4gdGhlIGRvd25sb2FkYWJsZSBTVkcuXG4gKiBAcGFyYW0gZG9tXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzU3R5bGVzIChkb20pIHtcbiAgICB2YXIgdXNlZCA9IFwiXCI7XG4gICAgdmFyIHNoZWV0cyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGVldHMubGVuZ3RoOyBpKyspIHsgLy8gVE9ETzogd2FsayB0aHJvdWdoIHRoaXMgYmxvY2sgb2YgY29kZVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoc2hlZXRzW2ldLmNzc1J1bGVzID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gc2hlZXRzW2ldLmNzc1J1bGVzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJ1bGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJ1bGUuc3R5bGUpICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zO1xuICAgICAgICAgICAgICAgICAgICAvL1NvbWUgc2VsZWN0b3JzIHdvbid0IHdvcmssIGFuZCBtb3N0IG9mIHRoZXNlIGRvbid0IG1hdHRlci5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zID0gJChkb20pLmZpbmQocnVsZS5zZWxlY3RvclRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgKz0gcnVsZS5zZWxlY3RvclRleHQgKyBcIiB7IFwiICsgcnVsZS5zdHlsZS5jc3NUZXh0ICsgXCIgfVxcblwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJbiBGaXJlZm94LCBpZiBzdHlsZXNoZWV0IG9yaWdpbmF0ZXMgZnJvbSBhIGRpZmYgZG9tYWluLFxuICAgICAgICAgICAgLy8gdHJ5aW5nIHRvIGFjY2VzcyB0aGUgY3NzUnVsZXMgd2lsbCB0aHJvdyBhIFNlY3VyaXR5RXJyb3IuXG4gICAgICAgICAgICAvLyBIZW5jZSwgd2UgbXVzdCB1c2UgYSB0cnkvY2F0Y2ggdG8gaGFuZGxlIHRoaXMgaW4gRmlyZWZveFxuICAgICAgICAgICAgaWYgKGUubmFtZSAhPT0gJ1NlY3VyaXR5RXJyb3InKSB0aHJvdyBlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgcy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICBzLmlubmVySFRNTCA9IFwiPCFbQ0RBVEFbXFxuXCIgKyB1c2VkICsgXCJcXG5dXT5cIjtcblxuICAgIHJldHVybiBzO1xufVxuIiwiaW1wb3J0IHtzZWxlY3QsIGV2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2x0aXAge1xuICAgIGNvbnN0cnVjdG9yKGlkLCB2ZXJib3NlPWZhbHNlLCBvZmZzZXRYPTMwLCBvZmZzZXRZPS00MCwgZHVyYXRpb249MTAwKXtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnZlcmJvc2UgPSB2ZXJib3NlO1xuICAgICAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgfVxuXG4gICAgc2hvdyhpbmZvKSB7XG4gICAgICAgIGlmKHRoaXMudmVyYm9zZSkgY29uc29sZS5sb2coaW5mbyk7XG4gICAgICAgIHRoaXMuZWRpdChpbmZvKTtcbiAgICAgICAgdGhpcy5tb3ZlKCk7XG4gICAgICAgIHNlbGVjdChcIiNcIiArIHRoaXMuaWQpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lXCIpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMS4wKVxuXG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKVxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjApO1xuICAgICAgICB0aGlzLmVkaXQoXCJcIik7XG4gICAgfVxuXG4gICAgbW92ZSh4ID0gZXZlbnQucGFnZVgsIHkgPSBldmVudC5wYWdlWSkge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHkpO1xuICAgICAgICB9XG4gICAgICAgIHggPSB4ICsgdGhpcy5vZmZzZXRYOyAvLyBUT0RPOiBnZXQgcmlkIG9mIHRoZSBoYXJkLWNvZGVkIGFkanVzdG1lbnRcbiAgICAgICAgeSA9ICh5ICsgdGhpcy5vZmZzZXRZKTwwPzEwOnkrdGhpcy5vZmZzZXRZO1xuICAgICAgICBjb25zdCB0ID0gc2VsZWN0KCcjJyt0aGlzLmlkKVxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBgJHt4fXB4YClcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBgJHt5fXB4YClcbiAgICB9XG5cbiAgICBlZGl0KGluZm8pIHtcbiAgICAgICAgc2VsZWN0KFwiI1wiICsgdGhpcy5pZClcbiAgICAgICAgICAgIC5odG1sKGluZm8pXG4gICAgfVxufVxuXG4iLCJpbXBvcnQge3NlbGVjdCwgc2VsZWN0QWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlQmFuZH0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQge25lc3R9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3RyYW5zaXRpb259IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5cbmltcG9ydCB7c2V0Q29sb3JTY2FsZSwgZHJhd0NvbG9yTGVnZW5kfSBmcm9tIFwiLi9jb2xvcnNcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhdG1hcCB7XG4gICAgLyogZGF0YSBpcyBhIGpzb24gd2l0aCB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gICAgICAgIHg6IHRoZSB4IGxhYmVsXG4gICAgICAgIHk6IHRoZSB5IGxhYmVsXG4gICAgICAgIHZhbHVlOiB0aGUgcmVuZGVyZWQgbnVtZXJpY2FsIHZhbHVlICh0cmFuc2Zvcm1lZClcbiAgICAgICAgb3JpZ2luYWxWYWx1ZTogdGhlIG9yaWdpbmFsIG51bWVyaWNhbCB2YWx1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gZGF0YSB7T2JqZWN0fSwgc2VlIGFib3ZlXG4gICAgICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn0gcGVyZm9ybXMgbG9nIHRyYW5zZm9ybWF0aW9uXG4gICAgICogQHBhcmFtIGNvbG9yU2NoZW1lIHtTdHJpbmd9OiByZWNvZ25pemVkIHRlcm1zIGluIENvbG9yczpnZXRDb2xvckludGVycG9sYXRvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGNvbG9yU2NoZW1lPVwiWWxHbkJ1XCIsIHVzZUxvZz10cnVlLCBiYXNlPTEwLCByPTIpe1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnVzZUxvZyA9IHVzZUxvZztcbiAgICAgICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgICAgICAgdGhpcy5udWxsQ29sb3IgPSBcIiNlNmU2ZTZcIjtcbiAgICAgICAgdGhpcy5jb2xvclNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhMaXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnlMaXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhTY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55U2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuY29sb3JTY2hlbWUgPSBjb2xvclNjaGVtZTtcblxuICAgICAgICB0aGlzLnRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbHRpcCBvYmplY3RcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2x0aXAncyBkb20gSURcbiAgICAgKiBAcmV0dXJucyB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBjcmVhdGVUb29sdGlwKGRvbUlkKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAoZG9tSWQpO1xuICAgICAgICBzZWxlY3QoYCMke2RvbUlkfWApLmNsYXNzZWQoJ2hlYXRtYXAtdG9vbHRpcCcsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGRyYXcgY29sb3IgbGVnZW5kIGZvciB0aGUgaGVhdCBtYXBcbiAgICAgKiBAcGFyYW0gZG9tIHtTZWxlY3Rpb259IGEgZDMgc2VsZWN0aW9uIG9iamVjdFxuICAgICAqIEBwYXJhbSBsZWdlbmRDb25maWcge09iamVjdH0gd2l0aCBhdHRyOiB4LCB5XG4gICAgICovXG5cbiAgICBkcmF3Q29sb3JMZWdlbmQoZG9tLCBsZWdlbmRDb25maWc9e3g6MCwgeTowfSwgdGlja3M9NSl7XG4gICAgICAgIGRyYXdDb2xvckxlZ2VuZCh0aGlzLmRhdGFbMF0udW5pdHx8XCJWYWx1ZVwiLCBkb20sIHRoaXMuY29sb3JTY2FsZSwgbGVnZW5kQ29uZmlnLCB0aGlzLnVzZUxvZywgdGlja3MsIHRoaXMuYmFzZSk7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIHJlZHJhd3MgdGhlIGhlYXRtYXA6IHdoZW4gdGhlIHhsaXN0IGFuZCB5bGlzdCBhcmUgY2hhbmdlZCwgcmVkcmF3IHRoZSBoZWF0bWFwXG4gICAgICogQHBhcmFtIGRvbSB7U2VsZWN0aW9ufSBhIGQzIHNlbGVjdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0geExpc3Qge0xpc3R9IGEgbGlzdCBvZiB4IGxhYmVsc1xuICAgICAqIEBwYXJhbSB5TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHkgbGFiZWxzXG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge0RpY3Rpb25hcnl9IHt3OkludGVnZXIsIGg6aW50ZWdlcn0gd2l0aCB0d28gYXR0cmlidXRlczogdyBhbmQgaFxuICAgICAqIEBwYXJhbSBhbmdsZSB7SW50ZWdlcn0gZm9yIHRoZSB5IHRleHQgbGFiZWxzXG4gICAgICovXG4gICAgcmVkcmF3KGRvbSwgeExpc3QsIHlMaXN0LCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6MTAwMH0sIGFuZ2xlPTMwKXtcbiAgICAgICAgdGhpcy5fc2V0WExpc3QoZGltZW5zaW9ucy53LCB4TGlzdCk7XG4gICAgICAgIHRoaXMuX3NldFlMaXN0KGRpbWVuc2lvbnMuaCwgeUxpc3QpO1xuICAgICAgICB0aGlzLmRyYXcoZG9tLCBkaW1lbnNpb25zLCBhbmdsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZHJhd3MgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gZG9tIHtTZWxlY3Rpb259XG4gICAgICogQHBhcmFtIGRpbWVuc2lvbnMge0RpY3Rpb25hcnl9IHt3OkludGVnZXIsIGg6aW50ZWdlcn0gb2YgdGhlIGhlYXRtYXBcbiAgICAgKiBAcGFyYW0gYW5nbGUge0ludGVnZXJ9IGZvciB0aGUgeSB0ZXh0IGxhYmVsc1xuICAgICAqIEBwYXJhbSB1c2VOdWxsQ29sb3Ige0Jvb2xlYW59IHdoZXRoZXIgdG8gcmVuZGVyIG51bGwgdmFsdWVzIHdpdGggdGhlIHByZS1kZWZpbmVkIG51bGwgY29sb3JcbiAgICAgKi9cblxuICAgIGRyYXcoZG9tLCBkaW1lbnNpb25zPXt3OjEwMDAsIGg6NjAwfSwgYW5nbGU9MzAsIHVzZU51bGxDb2xvcj10cnVlKXtcbiAgICAgICAgaWYgKHRoaXMueExpc3QgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WExpc3QoZGltZW5zaW9ucy53KTtcbiAgICAgICAgaWYgKHRoaXMueUxpc3QgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0WUxpc3QoZGltZW5zaW9ucy5oKTtcbiAgICAgICAgaWYgKHRoaXMuY29sb3JTY2FsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLmNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKHRoaXMuZGF0YS5tYXAoKGQpPT5kLnZhbHVlKSwgdGhpcy5jb2xvclNjaGVtZSk7XG5cbiAgICAgICAgLy8gdGV4dCBsYWJlbHNcbiAgICAgICAgLy8gZGF0YSBqb2luXG4gICAgICAgIGNvbnN0IHhMYWJlbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgICAgICAuZGF0YSh0aGlzLnhMaXN0KTtcblxuICAgICAgICAvLyB1cGRhdGUgb2xkIGVsZW1lbnRzXG4gICAgICAgIGNvbnN0IFkgPSB0aGlzLnlTY2FsZS5yYW5nZSgpWzFdICsgKHRoaXMueVNjYWxlLmJhbmR3aWR0aCgpICogMik7XG4gICAgICAgIGNvbnN0IGFkanVzdCA9IDU7XG4gICAgICAgIHhMYWJlbHMuYXR0cihcInRyYW5zZm9ybVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy54U2NhbGUoZCkgKyBhZGp1c3Q7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSBZO1xuICAgICAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke2FuZ2xlfSlgO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyAuYXR0cihcImNsYXNzXCIsIChkLCBpKSA9PiBgZXhwLW1hcC14bGFiZWwgeCR7aX1gKTtcblxuXG4gICAgICAgIC8vIGVudGVycyBuZXcgZWxlbWVudHNcbiAgICAgICAgeExhYmVscy5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQsIGkpID0+IGBleHAtbWFwLXhsYWJlbCB4JHtpfWApXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwKVxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMueFNjYWxlKGQpICsgYWRqdXN0O1xuICAgICAgICAgICAgICAgIGxldCB5ID0gWTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke3l9KSByb3RhdGUoJHthbmdsZX0pYDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWVyZ2UoeExhYmVscylcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiBkKTtcblxuICAgICAgICAvLyBleGl0IC0tIHJlbW92ZXMgb2xkIGVsZW1lbnRzIGFzIG5lZWRlZFxuICAgICAgICB4TGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICBjb25zdCB5TGFiZWxzID0gZG9tLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy55TGlzdClcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC50ZXh0KChkKSA9PiBkKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMueFNjYWxlLnJhbmdlKClbMV0gKyA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiB0aGlzLnlTY2FsZShkKSArIDEwKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCwgaSkgPT4gYGV4cC1tYXAteWxhYmVsIHkke2l9YClcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgICAgICAgIC5zdHlsZShcImN1cnNvclwiLCBcImRlZmF1bHRcIilcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KGAke2R9IGlzIGNsaWNrZWQuIFRvIGJlIGltcGxlbWVudGVkYClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnbm9ybWFsJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ25vcm1hbCcsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlbmRlcnMgdGhlIGhlYXRtYXAgY2VsbHNcblxuICAgICAgICAvLyBkYXRhIGpvaW5cbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb20uc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhLCAoZCkgPT4gZC52YWx1ZSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIG9sZCBlbGVtZW50c1xuICAgICAgICBjZWxscy5hdHRyKFwieFwiLCAoZCkgPT4gdGhpcy54U2NhbGUoZC54KSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gdGhpcy55U2NhbGUoZC55KSlcbiAgICAgICAgICAgIC5hdHRyKFwicm93XCIsIChkKSA9PiBgeCR7dGhpcy54TGlzdC5pbmRleE9mKGQueCl9YClcbiAgICAgICAgICAgIC5hdHRyKFwiY29sXCIsIChkKSA9PiBgeSR7dGhpcy55TGlzdC5pbmRleE9mKGQueSl9YCk7XG5cbiAgICAgICAgLy8gZW50ZXIgbmV3IGVsZW1lbnRzXG4gICAgICAgIGNvbnN0IG51bGxDb2xvciA9IFwiI0RERERERFwiO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgY2VsbHMuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInJvd1wiLCAoZCkgPT4gYHgke3RoaXMueExpc3QuaW5kZXhPZihkLngpfWApXG4gICAgICAgICAgICAuYXR0cihcImNvbFwiLCAoZCkgPT4gYHkke3RoaXMueUxpc3QuaW5kZXhPZihkLnkpfWApXG5cbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4gdGhpcy54U2NhbGUoZC54KSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gdGhpcy55U2NhbGUoZC55KSlcbiAgICAgICAgICAgIC5hdHRyKFwicnhcIiwgdGhpcy5yKVxuICAgICAgICAgICAgLmF0dHIoJ3J5JywgdGhpcy5yKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCkgPT4gYGV4cC1tYXAtY2VsbGApXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHRoaXMueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdGhpcy55U2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiBcIiNlZWVlZWVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gTm90ZTogXCJ0aGlzXCIgaGVyZSByZWZlcnMgdG8gdGhlIGRvbSBlbGVtZW50IG5vdCB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgc2VsZi5jZWxsTW91c2VvdmVyKHNlbGVjdGVkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpOyAvLyBOb3RlOiBcInRoaXNcIiBoZXJlIHJlZmVycyB0byB0aGUgZG9tIGVsZW1lbnQgbm90IHRoZSBvYmplY3RcbiAgICAgICAgICAgICAgICBzZWxmLmNlbGxNb3VzZW91dCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm1lcmdlKGNlbGxzKVxuICAgICAgICAgICAgLy8gLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLy8gLmR1cmF0aW9uKDIwMDApXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiB1c2VOdWxsQ29sb3ImJmQub3JpZ2luYWxWYWx1ZT09MD9udWxsQ29sb3I6dGhpcy5jb2xvclNjYWxlKGQudmFsdWUpKTsgLy8gVE9ETzogd2hhdCBpZiBudWxsIHZhbHVlIGlzbid0IDA/XG5cbiAgICAgICAgLy8gZXhpdCBhbmQgcmVtb3ZlXG4gICAgICAgIGNlbGxzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBjZWxsTW91c2VvdXQoZCl7XG4gICAgICAgIHNlbGVjdEFsbChcIipcIikuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2VsbE1vdXNlb3ZlciAoc2VsZWN0ZWQpIHtcbiAgICAgICAgY29uc3Qgcm93Q2xhc3MgPSBzZWxlY3RlZC5hdHRyKFwicm93XCIpO1xuICAgICAgICBjb25zdCBjb2xDbGFzcyA9IHNlbGVjdGVkLmF0dHIoXCJjb2xcIik7XG4gICAgICAgIHNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKS5maWx0ZXIoYC4ke3Jvd0NsYXNzfWApXG4gICAgICAgICAgICAuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCB0cnVlKTtcbiAgICAgICAgc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpLmZpbHRlcihgLiR7Y29sQ2xhc3N9YClcbiAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgICAgICBzZWxlY3RlZC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuICAgIH1cblxuICAgIF9zZXRYTGlzdCh3aWR0aCwgbmV3TGlzdCkge1xuICAgICAgICBpZihuZXdMaXN0ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy54TGlzdCA9IG5ld0xpc3RcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueExpc3QgPSBuZXN0KClcbiAgICAgICAgICAgICAgICAua2V5KChkKSA9PiBkLngpXG4gICAgICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgICAgIC5tYXAoKGQpID0+IGQua2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhTY2FsZSA9IHNjYWxlQmFuZCgpXG4gICAgICAgICAgICAuZG9tYWluKHRoaXMueExpc3QpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSlcbiAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIFRPRE86IGVsaW1pbmF0ZSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG4gICAgX3NldFlMaXN0KGhlaWdodCwgbmV3TGlzdCkge1xuICAgICAgICBpZihuZXdMaXN0ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy55TGlzdCA9IG5ld0xpc3RcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgdGhpcy55TGlzdCA9IG5lc3QoKVxuICAgICAgICAgICAgLmtleSgoZCkgPT4gZC55KVxuICAgICAgICAgICAgLmVudHJpZXModGhpcy5kYXRhKVxuICAgICAgICAgICAgLm1hcCgoZCkgPT4gZC5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXMueUxpc3QpXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCBoZWlnaHRdKVxuICAgICAgICAgICAgICAgIC5wYWRkaW5nKC4wNSk7IC8vIFRPRE86IGVsaW1pbmF0ZSBoYXJkLWNvZGVkIHZhbHVlXG4gICAgfVxuXG5cbn0iLCJpbXBvcnQge2NyZWF0ZVN2Z30gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmltcG9ydCBEZW5kcm9IZWF0bWFwQ29uZmlnIGZyb20gXCIuL0RlbmRyb0hlYXRtYXBDb25maWdcIjtcbmltcG9ydCBEZW5kcm9ncmFtIGZyb20gXCIuL0RlbmRyb2dyYW1cIjtcbmltcG9ydCBIZWF0bWFwIGZyb20gXCIuL0hlYXRtYXBcIjtcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuL1Rvb2x0aXBcIjtcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuL1Rvb2xiYXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVuZHJvSGVhdG1hcCB7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBjb2x1bW5UcmVlIHtTdHJpbmd9IGEgbmV3aWNrIHRyZWVcbiAgICAgKiBAcGFyYW0gcm93VHJlZSB7U3RyaW5nfSBhIG5ld2ljayB0cmVlXG4gICAgICogQHBhcmFtIGhlYXRtYXBEYXRhIHtMaXN0fSBvZiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogeDogU3RyaW5nLCB5OlN0cmluZywgdmFsdWU6RmxvYXQsIG9yaWdpbmFsVmFsdWU6RmxvYXRcbiAgICAgKiBAcGFyYW0gY29sb3Ige1N0cmluZ30gYSBjb2xvciBuYW1lIHRoYXQncyBhdmFpbGFibGUgaW4gQ29sb3JzLmdldENvbG9ySW50ZXJwb2xhdG9yXG4gICAgICogQHBhcmFtIHIge0ludGVnZXJ9IHRoZSBkZWdyZWVzIG9mIHJvdW5kZWQtY29ybmVycyBvZiB0aGUgaGVhdG1hcCBjZWxsc1xuICAgICAqIEBwYXJhbSBjb25maWcge0RlbmRyb0hlYXRtYXBDb25maWd9XG4gICAgICogQHBhcmFtIHVzZUxvZyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2x1bW5UcmVlLCByb3dUcmVlLCBoZWF0bWFwRGF0YSwgY29sb3I9XCJZbEduQnVcIiwgcj0yLCBjb25maWc9bmV3IERlbmRyb0hlYXRtYXBDb25maWcoKSwgdXNlTG9nPXRydWUsIGJhc2U9MTApe1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZy5nZXQoKTtcbiAgICAgICAgLy9pbnB1dCBldmFsdWF0aW9uc1xuICAgICAgICBjb2x1bW5UcmVlID0gY29sdW1uVHJlZT09PXVuZGVmaW5lZHx8Y29sdW1uVHJlZS5zdGFydHNXaXRoKFwiTm90IGVub3VnaCBkYXRhXCIpP3VuZGVmaW5lZDpjb2x1bW5UcmVlO1xuICAgICAgICByb3dUcmVlID0gcm93VHJlZT09PXVuZGVmaW5lZHx8cm93VHJlZS5zdGFydHNXaXRoKFwiTm90IGVub3VnaCBkYXRhXCIpP3VuZGVmaW5lZDpyb3dUcmVlO1xuICAgICAgICAvLyBhc3NpZ24gYXR0cmlidXRlIHZhbHVlcyBiYXNlZCBvbiBpbnB1dCBhcmd1bWVudHNcbiAgICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICAgICAgY29sdW1uVHJlZTogY29sdW1uVHJlZSxcbiAgICAgICAgICAgIHJvd1RyZWU6IHJvd1RyZWUsXG4gICAgICAgICAgICBoZWF0bWFwOiBoZWF0bWFwRGF0YSxcbiAgICAgICAgICAgIGV4dGVybmFsOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vYmplY3RzID0ge1xuICAgICAgICAgICAgY29sdW1uVHJlZTogdGhpcy5kYXRhLmNvbHVtblRyZWU9PT11bmRlZmluZWQ/IHVuZGVmaW5lZDpuZXcgRGVuZHJvZ3JhbSh0aGlzLmRhdGEuY29sdW1uVHJlZSwgXCJ2XCIpLFxuICAgICAgICAgICAgcm93VHJlZTogdGhpcy5kYXRhLnJvd1RyZWU9PT11bmRlZmluZWQ/dW5kZWZpbmVkOm5ldyBEZW5kcm9ncmFtKHRoaXMuZGF0YS5yb3dUcmVlLCBcImhcIiksXG4gICAgICAgICAgICBoZWF0bWFwOiBuZXcgSGVhdG1hcCh0aGlzLmRhdGEuaGVhdG1hcCwgY29sb3IsIHVzZUxvZywgYmFzZSwgcilcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzID0ge1xuICAgICAgICAgICAgc3ZnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjb2x1bW5UcmVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByb3dUcmVlOiB1bmRlZmluZWRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnRvb2x0aXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHRvb2xiYXIgcGFuZWxcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2xiYXIncyBkb20gSURcbiAgICAgKiBAcGFyYW0gdG9vbHRpcCB7VG9vbHRpcH1cbiAgICAgKiBAcmV0dXJucyB7VG9vbGJhcn1cbiAgICAgKi9cblxuICAgIGNyZWF0ZVRvb2xiYXIoZG9tSWQsIHRvb2x0aXApe1xuICAgICAgICB0aGlzLnRvb2xiYXIgPSBuZXcgVG9vbGJhcihkb21JZCwgdG9vbHRpcCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xiYXI7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdG9vbHRpcCBvYmplY3RcbiAgICAgKiBAcGFyYW0gZG9tSWQge1N0cmluZ30gdGhlIHRvb2x0aXAncyBkb20gSURcbiAgICAgKiBAcmV0dXJucyB7VG9vbHRpcH1cbiAgICAgKi9cbiAgICBjcmVhdGVUb29sdGlwKGRvbUlkKXtcbiAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAoZG9tSWQpO1xuICAgICAgICBzZWxlY3QoYCMke2RvbUlkfWApLmNsYXNzZWQoJ2hlYXRtYXAtdG9vbHRpcCcsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgZGVuZHJvZ3JhbXMgYW5kIGNvcnJlc3BvbmRpbmcgaGVhdG1hcFxuICAgICAqIEBwYXJhbSBkb21JZCB7U3RyaW5nfSB0aGUgcGFyZW50IERPTSBpZCBvZiB0aGUgU1ZHXG4gICAgICogQHBhcmFtIHN2Z0lkIHtTdHJpbmd9IG9mIHRoZSBTVkdcbiAgICAgKiBAcGFyYW0gc2hvd0NvbHVtblRyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgY29sdW1uIGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gc2hvd1Jvd1RyZWUge0Jvb2xlYW59IHJlbmRlciB0aGUgcm93IGRlbmRyb2dyYW1cbiAgICAgKiBAcGFyYW0gbGVnZW5kUG9zIHtFbnVtfSB3aGVyZSB0byBwbGFjZSB0aGUgY29sb3IgbGVnZW5kOiBib3R0b20sIHRvcFxuICAgICAqIEBwYXJhbSB0aWNrcyB7SW50ZWdlcn0gbnVtYmVyIG9mIGJpbnMgb2YgdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAqL1xuICAgIHJlbmRlcihkb21JZCwgc3ZnSWQsIHNob3dDb2x1bW5UcmVlPXRydWUsIHNob3dSb3dUcmVlPXRydWUsIGxlZ2VuZFBvcz1cInRvcFwiLCB0aWNrcz01KXtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ29uZmlnKGxlZ2VuZFBvcyk7XG4gICAgICAgIHRoaXMudmlzdWFsQ29tcG9uZW50cy5zdmcgPSBjcmVhdGVTdmcoZG9tSWQsIHRoaXMuY29uZmlnLncsIHRoaXMuY29uZmlnLmgsIHRoaXMuY29uZmlnLm1hcmdpbiwgc3ZnSWQpO1xuXG4gICAgICAgIGxldCB4bGlzdCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHlsaXN0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzaG93Q29sdW1uVHJlZSAmJiB0aGlzLm9iamVjdHMuY29sdW1uVHJlZSE9PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnZpc3VhbENvbXBvbmVudHMuY29sdW1uVHJlZSA9IHRoaXMuX3JlbmRlclRyZWUoXCJjb2x1bW5cIiwgdGhpcy5vYmplY3RzLmNvbHVtblRyZWUsIHRoaXMuY29uZmlnLnBhbmVscy50b3ApO1xuICAgICAgICAgICAgeGxpc3QgPSB0aGlzLm9iamVjdHMuY29sdW1uVHJlZS54U2NhbGUuZG9tYWluKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3dSb3dUcmVlICYmIHRoaXMub2JqZWN0cy5yb3dUcmVlICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy52aXN1YWxDb21wb25lbnRzLnJvd1RyZWUgPSB0aGlzLl9yZW5kZXJUcmVlKFwicm93XCIsIHRoaXMub2JqZWN0cy5yb3dUcmVlLCB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdCk7XG4gICAgICAgICAgICB5bGlzdCA9IHRoaXMub2JqZWN0cy5yb3dUcmVlLnlTY2FsZS5kb21haW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlbmRlckhlYXRtYXAodGhpcy5vYmplY3RzLmhlYXRtYXAsIHhsaXN0LCB5bGlzdCwgdGlja3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIG5ld2ljayB0cmVlXG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiB7ZW51bX0gY29sdW1uIG9yIHJvd1xuICAgICAqIEBwYXJhbSB0cmVlIHtEZW5kcm9ncmFtfSBhIERlbmRyb2dyYW0gb2JqZWN0XG4gICAgICogQHBhcmFtIGNvbmZpZyB7T2JqZWN0fSBhIHBhbmVsIGNvbmZpZyB3aXRoIGF0dHJpYnV0ZXM6IHgsIHksIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZW5kZXJUcmVlKGRpcmVjdGlvbiwgdHJlZSwgY29uZmlnKXtcbiAgICAgICAgbGV0IHN2ZyA9IHRoaXMudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgICAgIGNvbnN0IGxhYmVsQ2xhc3MgPSBkaXJlY3Rpb249PVwicm93XCI/XCIuZXhwLW1hcC15bGFiZWxcIjpcIi5leHAtbWFwLXhsYWJlbFwiO1xuXG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSB0aGlzLnZpc3VhbENvbXBvbmVudHMudG9vbHRpcDtcbiAgICAgICAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGNvbmZpZy5pZClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtjb25maWcueH0sICR7Y29uZmlnLnl9KWApO1xuICAgICAgICB0cmVlLmRyYXcoZywgY29uZmlnLncsIGNvbmZpZy5oKTtcblxuICAgICAgICBjb25zdCBtb3VzZW91dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgMilcbiAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjMzMzXCIpO1xuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbChsYWJlbENsYXNzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbChcIi5sZWFmLWNvbG9yXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbW91c2VvdmVyID0gZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgNilcbiAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJyZWRcIik7XG4gICAgICAgICAgICBsZXQgaWRzID0gZC5sZWF2ZXMoKS5tYXAoKG5vZGUpPT5ub2RlLmRhdGEubmFtZSk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKGxhYmVsQ2xhc3MpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigobGFiZWwpPT5pZHMuaW5jbHVkZXMobGFiZWwpKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKFwiLmxlYWYtY29sb3JcIilcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChsYWJlbCk9Pmlkcy5pbmNsdWRlcyhsYWJlbCkpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBnLnNlbGVjdEFsbChcIi5kZW5kcm9ncmFtLW5vZGVcIilcbiAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBtb3VzZW92ZXIpXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBtb3VzZW91dCk7XG4gICAgICAgIHJldHVybiBnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgaGVhdG1hcCBhbmQgY29sb3IgbGVnZW5kXG4gICAgICogQHBhcmFtIGhlYXRtYXAge0hlYXRtYXB9IGEgSGVhdG1hcCBvYmplY3RcbiAgICAgKiBAcGFyYW0geExpc3Qge0xpc3R9IGEgbGlzdCBvZiB4IGxhYmVsc1xuICAgICAqIEBwYXJhbSB5TGlzdCB7TGlzdH0gYSBsaXN0IG9mIHkgbGFiZWxzXG4gICAgICogQHBhcmFtIHRpY2tzIHtJbnRlZ2VyfSB0aGUgbnVtYmVyIG9mIGJpbnMgaW4gdGhlIGNvbG9yIGxlZ2VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbmRlckhlYXRtYXAoaGVhdG1hcCwgeExpc3QsIHlMaXN0LCB0aWNrcz01KXtcbiAgICAgICAgbGV0IGRvbSA9IHRoaXMudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnLnBhbmVscy5tYWluO1xuICAgICAgICBjb25zdCBnID0gZG9tLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgY29uZmlnLmlkKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2NvbmZpZy54fSwgJHtjb25maWcueX0pYCk7XG4gICAgICAgIGhlYXRtYXAucmVkcmF3KGcsIHhMaXN0LCB5TGlzdCwge3c6IGNvbmZpZy53LCBoOiBjb25maWcuaH0pO1xuICAgICAgICBoZWF0bWFwLmRyYXdDb2xvckxlZ2VuZChkb20sIHRoaXMuY29uZmlnLnBhbmVscy5sZWdlbmQsIHRpY2tzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGp1c3QgdGhlIGxheW91dCBkaW1lbnNpb25zIGJhc2VkIG9uIHRoZSBhY3R1YWwgZGF0YVxuICAgICAqIEBwYXJhbSBsZWdlbmRQb3Mge1N0cmluZ30gYm90dG9tIG9yIHRvcFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VwZGF0ZUNvbmZpZyhsZWdlbmRQb3Mpe1xuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5vYmplY3RzLnJvd1RyZWU9PT11bmRlZmluZWQ/MTp0aGlzLm9iamVjdHMucm93VHJlZS5sZWF2ZXMubGVuZ3RoO1xuXG4gICAgICAgIC8vIHVwZGF0ZXMgdGhlIGxlZnQgcGFuZWwncyBoZWlnaHQgYmFzZWQgb24gdGhlIGRhdGFcbiAgICAgICAgdGhpcy5jb25maWcucGFuZWxzLmxlZnQuaCA9IHRoaXMuY29uZmlnLmNlbGwuaCAqIHJvd3M8MjA/MjA6dGhpcy5jb25maWcuY2VsbC5oICogcm93cztcbiAgICAgICAgdGhpcy5jb25maWcuaCArPSB0aGlzLmNvbmZpZy5wYW5lbHMubGVmdC5oO1xuICAgICAgICB0aGlzLmNvbmZpZy5wYW5lbHMubWFpbi5oID0gdGhpcy5jb25maWcucGFuZWxzLmxlZnQuaDtcbiAgICAgICAgaWYobGVnZW5kUG9zPT1cImJvdHRvbVwiKSB0aGlzLmNvbmZpZy5wYW5lbHMubGVnZW5kLnkgKz0gdGhpcy5jb25maWcucGFuZWxzLm1haW4uaCArIHRoaXMuY29uZmlnLnBhbmVscy5tYWluLnggKyA1MDtcblxuXG4gICAgfVxufSIsInZhciBwaSA9IE1hdGguUEksXG4gICAgdGF1ID0gMiAqIHBpLFxuICAgIGVwc2lsb24gPSAxZS02LFxuICAgIHRhdUVwc2lsb24gPSB0YXUgLSBlcHNpbG9uO1xuXG5mdW5jdGlvbiBQYXRoKCkge1xuICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuXyA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiBuZXcgUGF0aDtcbn1cblxuUGF0aC5wcm90b3R5cGUgPSBwYXRoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhdGgsXG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3gxID0gdGhpcy5feDAsIHRoaXMuX3kxID0gdGhpcy5feTA7XG4gICAgICB0aGlzLl8gKz0gXCJaXCI7XG4gICAgfVxuICB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiUVwiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJDXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICgreDIpICsgXCIsXCIgKyAoK3kyKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGFyY1RvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Miwgcikge1xuICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XG4gICAgdmFyIHgwID0gdGhpcy5feDEsXG4gICAgICAgIHkwID0gdGhpcy5feTEsXG4gICAgICAgIHgyMSA9IHgyIC0geDEsXG4gICAgICAgIHkyMSA9IHkyIC0geTEsXG4gICAgICAgIHgwMSA9IHgwIC0geDEsXG4gICAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICAgIGwwMV8yID0geDAxICogeDAxICsgeTAxICogeTAxO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgxLHkxKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxuICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uKSkge31cblxuICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xuICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICBlbHNlIHtcbiAgICAgIHZhciB4MjAgPSB4MiAtIHgwLFxuICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgbDIwXzIgPSB4MjAgKiB4MjAgKyB5MjAgKiB5MjAsXG4gICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgIGwgPSByICogTWF0aC50YW4oKHBpIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHgxICsgdDAxICogeDAxKSArIFwiLFwiICsgKHkxICsgdDAxICogeTAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMCxcIiArICgrKHkwMSAqIHgyMCA+IHgwMSAqIHkyMCkpICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICB9XG4gIH0sXG4gIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcbiAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyO1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkocCkge1xuICByZXR1cm4gcFsxXTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2N1cnZlL2xpbmVhclwiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IHBvaW50WCxcbiAgICAgIHkgPSBwb2ludFksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxpbmUoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcjtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgZWxzZSBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSBvdXRwdXQucG9pbnQoK3goZCwgaSwgZGF0YSksICt5KGQsIGksIGRhdGEpKTtcbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgbGluZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB4O1xuICB9O1xuXG4gIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeTtcbiAgfTtcblxuICBsaW5lLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGxpbmUuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBsaW5lLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGxpbmUpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gbGluZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICB0aGF0Ll94MSArIHRoYXQuX2sgKiAodGhhdC5feDIgLSB0aGF0Ll94MCksXG4gICAgdGhhdC5feTEgKyB0aGF0Ll9rICogKHRoYXQuX3kyIC0gdGhhdC5feTApLFxuICAgIHRoYXQuX3gyICsgdGhhdC5fayAqICh0aGF0Ll94MSAtIHgpLFxuICAgIHRoYXQuX3kyICsgdGhhdC5fayAqICh0aGF0Ll95MSAtIHkpLFxuICAgIHRoYXQuX3gyLFxuICAgIHRoYXQuX3kyXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDEgPSB4LCB0aGlzLl95MSA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbi8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXG4vLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4vLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG5mdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XG4gIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxuICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuXG4vLyBDYWxjdWxhdGUgYSBvbmUtc2lkZWQgc2xvcGUuXG5mdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gIHJldHVybiBoID8gKDMgKiAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyBoIC0gdCkgLyAyIDogdDtcbn1cblxuLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXG4vLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG5mdW5jdGlvbiBwb2ludCh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBuZXcgUmVmbGVjdENvbnRleHQoY29udGV4dCk7XG59XG5cbihNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbn07XG5cbmZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubW92ZVRvKHksIHgpOyB9LFxuICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7IHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7IH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuIiwiXG4vKlxuVGhpcyBjbGFzcyBkZWZpbmVzIGEgZ2VuZSBtb2RlbCAob3IgaXNvZm9ybSksIHJlbmRlcmluZyB0aGUgZXhvbnMgYW5kIGp1bmN0aW9ucyBvZiBhIGdpdmVuIGdlbmUuIFRoZSBtb2RlbCBpcyByZW5kZXJlZCBiYXNlZCBvblxuZ2Vub21pYyBwb3NpdGlvbnMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN0cmFuZCBhbmQgdHJhbnNjcmlwdGlvbmFsIGRpcmVjdGlvbi5cblxuVE9ETzogZXh0cmFjdCBvdXQgdGhlIHNpbXBsZSBpc29mb3JtIHN0cnVjdHVyZSByZW5kZXJpbmc/XG4gKi9cblxuaW1wb3J0IHtjdXJ2ZUNhcmRpbmFsLCBsaW5lfSBmcm9tIFwiZDMtc2hhcGVcIjtcbmltcG9ydCB7bWF4LCBzdW19IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzY2FsZUxpbmVhcn0gZnJvbSBcImQzLXNjYWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlbmVNb2RlbCB7XG4gICAgLyoqXG4gICAgICogY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gZ2VuZSB7T2JqZWN0fSB3aXRoIGF0dHJpYnV0ZXM6IHN0cmFuZCwgdHJhbnNjcmlwdElkLCBnZW5lU3ltYm9sXG4gICAgICogQHBhcmFtIGV4b25zIHtMaXN0fSBvZiBleG9uIG9iamVjdHMgd2l0aCBhdHRyaWJ1dGVzOiBjaHJvbSwgY2hyb21TdGFydCwgY2hyb21FbmQsIGxlbmd0aCwgZXhvbk51bWJlciwgZXhvbklkXG4gICAgICogQHBhcmFtIGV4b25zQ3VyYXRlZCB7TGlzdH0gb2YgZXhvbiBvYmplY3RzIGluIHRoZSBmaW5hbCBnZW5lIG1vZGVsLiBUaGlzIGlzIHByZXR0eSBzcGVjaWZpYyB0byBHVEV4LiBJZiB0aGlzIGxpc3QgaXNuJ3QgYXZhaWxhYmxlIGZvciB5b3VyIGRhdGEsIHRoZW4ganVzdCBwYXNzIGluIHRoZSBzYW1lIGV4b24gbGlzdCBhZ2Fpbi5cbiAgICAgKiBAcGFyYW0ganVuY3Rpb25zIHtMaXN0fSBvZiBqdW5jdGlvbiBvYmplY3RzIHdpdGggYXR0cmlidXRlczogY2hyb20sIGNocm9tU3RhcnQsIGNocm9tRW5kLCBqdW5jdGlvbklkXG4gICAgICogQHBhcmFtIGlzSXNvZm9ybSB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICAgIC8qKiBOT1RFOiB0aGUgZXhvbk51bWJlciBpbiBleG9ucyAmIGV4b25zQ3VyYXRlZCBkb24ndCByZWZlciB0byB0aGUgc2FtZSBleG9ucyAoYXQgbGVhc3QgdGhpcyBpcyB0aGUgY2FzZSBpbiBHVEV4KVxuICAgICAqICBUbyBlbnN1cmUgY29ycmVjdCBleG9uIG1hcHBpbmcgb2YgdGhlIGN1cmF0ZWQgZ2VuZSBtb2RlbCB0byB0aGUgb3JpZ2luYWwgbW9kZWwsIGhlcmUgd2UgdXNlIGdlbm9taWMgcG9zaXRpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKGdlbmUsIGV4b25zLCBleG9uc0N1cmF0ZWQsIGp1bmN0aW9ucywgaXNJc29mb3JtPWZhbHNlKXtcbiAgICAgICAgdGhpcy5nZW5lID0gZ2VuZTtcbiAgICAgICAgdGhpcy5leG9ucyA9IGV4b25zO1xuICAgICAgICBpZiAodGhpcy5nZW5lLnN0cmFuZCA9PSBcIitcIikgdGhpcy5leG9ucy5zb3J0KChhLCBiKT0+e3JldHVybiBOdW1iZXIoYS5leG9uTnVtYmVyKS1OdW1iZXIoYi5leG9uTnVtYmVyKX0pO1xuICAgICAgICBlbHNlIHRoaXMuZXhvbnMuc29ydCgoYSwgYik9PntyZXR1cm4gTnVtYmVyKGIuZXhvbk51bWJlciktTnVtYmVyKGEuZXhvbk51bWJlcil9KTtcbiAgICAgICAgdGhpcy5leG9uc0N1cmF0ZWQgPSBleG9uc0N1cmF0ZWQuc29ydCgoYSwgYik9PntyZXR1cm4gTnVtYmVyKGEuZXhvbk51bWJlciktTnVtYmVyKGIuZXhvbk51bWJlcil9KTtcbiAgICAgICAgdGhpcy5qdW5jdGlvbnMgPSBqdW5jdGlvbnMuc29ydCgoYSxiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYS5qdW5jdGlvbklkIDwgYi5qdW5jdGlvbklkKSByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoYS5qdW5jdGlvbklkID4gYi5qdW5jdGlvbklkKSByZXR1cm4gMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KTsgLy8gc29ydGVkIGJ5IGp1bmN0aW9uIElEXG4gICAgICAgIHRoaXMuaXNJc29mb3JtID0gaXNJc29mb3JtO1xuXG4gICAgICAgIC8vIGhhcmQtY29kZWQgZm9yIG5vd1xuICAgICAgICB0aGlzLmludHJvbkxlbmd0aCA9IDA7IC8vIGZpeGVkIGZha2UgaW50cm9uIGxlbmd0aCBpbiBiYXNlIHBhaXJzXG4gICAgICAgIHRoaXMubWluRXhvbldpZHRoID0gNTsgLy8gbWluaW11bSBleG9uIHdpZHRoIGluIHBpeGVsc1xuICAgIH1cblxuICAgIGNoYW5nZVRleHRsYWJlbChkb20sIGxhYmVsKXtcbiAgICAgICAgZG9tLnNlbGVjdEFsbChcIiNtb2RlbEluZm9cIikudGV4dChsYWJlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9tIHtPYmplY3R9IG9mIEQzXG4gICAgICogQHBhcmFtIGpkYXRhIHtMaXN0fSBvZiBqdW5jdGlvbiBleHByZXNzaW9uIG9iamVjdHNcbiAgICAgKiBAcGFyYW0gZWRhdGEge0xpc3R9IG9mIGV4b24gZXhwcmVzc2lvbiBvYmplY3RzXG4gICAgICogQHBhcmFtIGpzY2FsZSB7RDMgc2NhbGV9IG9mIGNvbG9ycyBvZiBqdW5jdGlvbiBkYXRhXG4gICAgICogQHBhcmFtIGVzY2FsZSB7RDMgc2NhbGV9IG9mIGNvbG9ycyBvZiBleG9uIGRhdGFcbiAgICAgKi9cbiAgICBhZGREYXRhKGRvbSwgamRhdGEsIGVkYXRhLCBqc2NhbGUsIGVzY2FsZSl7XG4gICAgICAgIGRvbS5zZWxlY3RBbGwoXCIuanVuY1wiKS5zdHlsZShcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBqZGF0YS5maWx0ZXIoKHopPT56Lmp1bmN0aW9uSWQ9PWQuanVuY3Rpb25JZClbMF07XG4gICAgICAgICAgICBjb25zdCBqY29sb3IgPSBqc2NhbGUodi52YWx1ZSk7XG4gICAgICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmp1bmMtY3VydmVcIikuZmlsdGVyKChgLmp1bmMke2QuanVuY3Rpb25JZH1gKSkuc3R5bGUoXCJzdHJva2VcIiwgamNvbG9yKTtcbiAgICAgICAgICAgIHJldHVybiBqY29sb3I7XG4gICAgICAgIH0pO1xuICAgICAgICBkb20uc2VsZWN0QWxsKFwiLmV4b24tY3VyYXRlZFwiKS5zdHlsZShcImZpbGxcIiwgKGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBlZGF0YS5maWx0ZXIoKHopPT56LmV4b25JZD09ZC5leG9uSWQpWzBdO1xuICAgICAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkgdGhyb3cgYCR7ZC5leG9uSWR9IGhhcyBubyBkYXRhYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2xvciA9IGVzY2FsZSh2LnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBlY29sb3I7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbmRlciB0aGUgU1ZHIG9mIHRoZSBnZW5lIG1vZGVsXG4gICAgICogQHBhcmFtIGRvbTogYW4gU1ZHIGRvbSBvYmplY3RcbiAgICAgKiBAcGFyYW0gY29uZmlnXG5cbiAgICAgKi9cbiAgICByZW5kZXIoZG9tLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5zZXRYc2NhbGUoY29uZmlnLncpO1xuXG4gICAgICAgIC8qIE5vdGU6IGV4b24ueCwgZXhvbi53IGFyZSBpbiBwaXhlbHMgZm9yIHZpc3VhbCByZW5kZXJpbmcgKi9cbiAgICAgICAgLyogTm90ZTogZXhvbi5sZW5ndGggaXMgaW4gYmFzZSBwYWlycyAqL1xuICAgICAgICAvLyBjYWxjdWxhdGluZyB4IGFuZCB3IGZvciBlYWNoIGV4b25cbiAgICAgICAgY29uc3QgZXhvblkgPSBjb25maWcuaC8yOyAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZXNcbiAgICAgICAgdGhpcy5leG9ucy5mb3JFYWNoKChkLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoaSA9PSAwKSBkLnggPSAwO1xuICAgICAgICAgICAgaWYoaSA+IDApIGQueCA9IHRoaXMuZXhvbnNbaS0xXS54ICsgdGhpcy5leG9uc1tpLTFdLncgKyB0aGlzLnhTY2FsZSh0aGlzLmludHJvbkxlbmd0aCk7XG4gICAgICAgICAgICBkLncgPSB0aGlzLnhTY2FsZShkLmxlbmd0aCk8dGhpcy5taW5FeG9uV2lkdGg/dGhpcy5taW5FeG9uV2lkdGg6dGhpcy54U2NhbGUoZC5sZW5ndGgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjYWxjdWxhaW5nIHggYW5kIHcgZm9yIGVhY2ggY3VyYXRlZCBleG9uXG4gICAgICAgIHRoaXMuZXhvbnNDdXJhdGVkLmZvckVhY2goKGQsIGkpID0+IHtcbiAgICAgICAgICAgIC8vIG1hcCBlYWNoIGN1cmF0ZWQgZXhvbiB0byB0aGUgb3JpZ2luYWwgZ2VuZSBtb2RlbC0tZmluZCB0aGUgb3JpZ2luYWwgZXhvblxuICAgICAgICAgICAgZC5vcmlFeG9uID0gdGhpcy5fZmluZEV4b24oZC5jaHJvbVN0YXJ0KXx8dGhpcy5fZmluZEV4b24oZC5jaHJvbUVuZCk7XG4gICAgICAgICAgICBpZiAoZC5vcmlFeG9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7dGhpcy5nZW5lLnRyYW5zY3JpcHRJZH0tJHtkLmV4b25JZH0gY2FuJ3QgbWFwIHRvIGZ1bGwgZ2VuZSBtb2RlbGApO1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gaWdub3JlIHVubWFwcGFibGUgZXhvbnMsIHRoaXMgaGFwcGVucyBhdCB0aW1lc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE51bWJlcihkLm9yaUV4b24uY2hyb21TdGFydCkgPT0gTnVtYmVyKGQuY2hyb21TdGFydCkpIGQueCA9IGQub3JpRXhvbi54O1xuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGV4b24gZG9lc24ndCBzdGFydCBmcm9tIHRoZSBvcmlFeG9uIHN0YXJ0IHBvc1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBOdW1iZXIoZC5jaHJvbVN0YXJ0KSAtIE51bWJlcihkLm9yaUV4b24uY2hyb21TdGFydCkgKyAxO1xuICAgICAgICAgICAgICAgIGQueCA9IGQub3JpRXhvbi54ICsgdGhpcy54U2NhbGUoZGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5sZW5ndGggPT09IHVuZGVmaW5lZCkgZC5sZW5ndGggPSBOdW1iZXIoZC5jaHJvbUVuZCkgLSBOdW1iZXIoZC5jaHJvbVN0YXJ0KSArIDE7XG4gICAgICAgICAgICBkLncgPSB0aGlzLnhTY2FsZShkLmxlbmd0aCk8dGhpcy5taW5FeG9uV2lkdGg/dGhpcy5taW5FeG9uV2lkdGg6dGhpcy54U2NhbGUoZC5sZW5ndGgpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGV2YWx1YXRlcyB3aGV0aGVyIGl0J3MgYW4gaXNvZm9ybSBvciBnZW5lIG1vZGVsXG4gICAgICAgIGlmKCF0aGlzLmlzSXNvZm9ybSl7XG4gICAgICAgICAgICAvLyBOT1RFOiB0aGUgcmVuZGVyaW5nIG9yZGVyIGlzIGltcG9ydGFudC4gRG8gbm90IGNhc3VhbGx5IGNoYW5nZSBpdC5cbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSBnZW5lIG1vZGVsLCBub3QgYW4gaXNvZm9ybVxuICAgICAgICAgICAgLy8gY2FsY3VsYXRpbmcgeCBmb3IgZWFjaCBqdW5jdGlvblxuICAgICAgICAgICAgdGhpcy5qdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGQuc3RhcnRFeG9uID0gdGhpcy5fZmluZEV4b24oZC5jaHJvbVN0YXJ0KTtcbiAgICAgICAgICAgICAgICBkLmVuZEV4b24gPSB0aGlzLl9maW5kRXhvbihkLmNocm9tRW5kKTtcbiAgICAgICAgICAgICAgICBkLmRpc3BsYXlOYW1lID0gZC5qdW5jdGlvbklkO1xuICAgICAgICAgICAgICAgIGlmIChkLnN0YXJ0RXhvbiA9PT0gdW5kZWZpbmVkIHx8IGQuZW5kRXhvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGZpZ3VyZSBvdXQgd2h5IHNvbWUganVuY3Rpb25zIGNhbid0IG1hcCB0byB0aGUgZ2VuZSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayB1bmZpbHRlcmVkIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IHNvbHV0aW9uOiBzZXQgZC5maWx0ZXJlZCB0byB0cnVlIGFuZCBpZ25vcmUgcmVuZGVyaW5nIHRoaXMganVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgZC5maWx0ZXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNhbid0IG1hcCBqdW5jdGlvbiB0byBleG9ucyBcIiArIGQuanVuY3Rpb25JZCk7IC8vIHdoeSB0aGUganVuY3Rpb24gY2FuJ3QgbWFwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkLmRpc3BsYXlOYW1lID0gYEV4b24gJHtkLnN0YXJ0RXhvbi5leG9uTnVtYmVyfSAtICR7ZC5lbmRFeG9uLmV4b25OdW1iZXJ9YDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQuc3RhcnRFeG9uLmV4b25OdW1iZXIgPT0gZC5lbmRFeG9uLmV4b25OdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihkLmp1bmN0aW9uSWQgKyBcIiBpcyBpbiBFeG9uOiBcIiArZC5zdGFydEV4b24uY2hyb21TdGFydCArIFwiIC0gXCIgKyBkLnN0YXJ0RXhvbi5jaHJvbUVuZCApO1xuICAgICAgICAgICAgICAgICAgICB9IC8vIHdoYXQgaXMgaGFwcGVuaW5nXG5cbiAgICAgICAgICAgICAgICAgICAgZC5maWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0ID0gTnVtYmVyKGQuY2hyb21TdGFydCkgLSBOdW1iZXIoZC5zdGFydEV4b24uY2hyb21TdGFydCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0MiA9IE51bWJlcihkLmNocm9tRW5kKSAtIE51bWJlcihkLmVuZEV4b24uY2hyb21TdGFydCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGQuc3RhcnRYID0gZC5zdGFydEV4b24ueCArIHRoaXMueFNjYWxlKGRpc3QpO1xuICAgICAgICAgICAgICAgICAgICBkLmVuZFggPSBkLmVuZEV4b24ueCArIHRoaXMueFNjYWxlKGRpc3QyKTtcbiAgICAgICAgICAgICAgICAgICAgZC5jeCA9IGQuc3RhcnRYICsgKGQuZW5kWCAtIGQuc3RhcnRYICsgMSkvMjsgLy8ganVuY3Rpb24gaXMgcmVuZGVyZWQgYXQgdGhlIG1pZHBvaW50IGJldHdlZW4gc3RhcnRYIGFuZCBlbmRYXG4gICAgICAgICAgICAgICAgICAgIGQuY3kgPSBleG9uWSAtIDE1ICogKCBNYXRoLmFicyhOdW1iZXIoZC5lbmRFeG9uLmV4b25OdW1iZXIpIC0gTnVtYmVyKGQuc3RhcnRFeG9uLmV4b25OdW1iZXIpKSArIDAuNSApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5jeSA8IDApIGQuY3kgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBoYW5kbGluZyBlZGdlIGNhc2U6IG92ZXJsYXBwaW5nIGp1bmN0aW9ucywgYWRkIGppdHRlclxuICAgICAgICAgICAgLy8gYS5yZWR1Y2UoKHIsayk9PntyW2tdPTErcltrXXx8MTtyZXR1cm4gcn0se30pXG4gICAgICAgICAgICBjb25zdCBjb3VudHMgPSB0aGlzLmp1bmN0aW9ucy5yZWR1Y2UoKHIsZCk9PntyW2QuZGlzcGxheU5hbWVdPTErcltkLmRpc3BsYXlOYW1lXXx8MTtyZXR1cm4gcn0se30pO1xuICAgICAgICAgICAgdGhpcy5qdW5jdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGppdHRlclxuICAgICAgICAgICAgICAgIGlmKGNvdW50c1tkLmRpc3BsYXlOYW1lXSA+IDEpeyAvLyBvdmVybGFwcGluZyBqdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgLy8gZC5jeCArPSBNYXRoLnJhbmRvbSgpKjIwO1xuICAgICAgICAgICAgICAgICAgICBkLmN5IC09IE1hdGgucmFuZG9tKCkqMTU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8qKioqKiByZW5kZXIganVuY3Rpb25zICovXG4gICAgICAgICAgICBjb25zdCBjdXJ2ZSA9IGxpbmUoKVxuICAgICAgICAgICAgICAgIC54KChkKSA9PiBkLngpXG4gICAgICAgICAgICAgICAgLnkoKGQpID0+IGQueSlcbiAgICAgICAgICAgICAgICAuY3VydmUoY3VydmVDYXJkaW5hbCk7XG5cbiAgICAgICAgICAgIHRoaXMuanVuY3Rpb25zLmZpbHRlcigoZCkgPT4gIWQuZmlsdGVyZWQpXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChkLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb20uYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdHVtKFt7eDpkLnN0YXJ0WCwgeTpleG9uWX0sIHt4OmQuY3gsIHk6ZC5jeX0sIHt4OmQuZW5kWCwgeTpleG9uWX1dKSAvLyB0aGUgaW5wdXQgcG9pbnRzIHRvIGRyYXcgdGhlIGN1cnZlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGBqdW5jLWN1cnZlIGp1bmMke2QuanVuY3Rpb25JZH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGN1cnZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiIzkyYmNjOVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgY29uc3QganVuY0RvdHMgPSBkb20uc2VsZWN0QWxsKFwiLmp1bmNcIilcbiAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLmp1bmN0aW9ucy5maWx0ZXIoKGQpPT4hZC5maWx0ZXJlZCkpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGluZyBlbGVtZW50c1xuICAgICAgICAgICAganVuY0RvdHMuYXR0cihcImN4XCIsIChkKSA9PiBkLmN4KTtcbiAgICAgICAgICAgIGp1bmNEb3RzLmF0dHIoXCJjeVwiLCAoZCkgPT4gZC5jeSk7IC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlc1xuXG4gICAgICAgICAgICAvLyBlbnRlcmluZyBuZXcgZWxlbWVudHNcbiAgICAgICAgICAgIGp1bmNEb3RzLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCAoZCkgPT4gYGp1bmMganVuYyR7ZC5qdW5jdGlvbklkfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4gZC5jeClcbiAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKSA9PiBkLmN5KVxuICAgICAgICAgICAgICAgIC5tZXJnZShqdW5jRG90cylcbiAgICAgICAgICAgICAgICAuYXR0cihcInJcIiwgNClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwicmdiKDg2LCA5OCwgMTA3KVwiKTtcblxuICAgICAgICAgICAgLyoqKioqIHJlbmRlcmluZyBmdWxsIGdlbmUgbW9kZWwgZXhvbnMgKi9cbiAgICAgICAgICAgIGNvbnN0IGV4b25SZWN0cyA9IGRvbS5zZWxlY3RBbGwoXCIuZXhvblwiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5leG9ucyk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0aW5nIGVsZW1lbnRzXG4gICAgICAgICAgICBleG9uUmVjdHMuYXR0cihcInhcIiwgKGQpID0+IGQueCk7XG4gICAgICAgICAgICBleG9uUmVjdHMuYXR0cihcInlcIiwgZXhvblkpO1xuXG4gICAgICAgICAgICAvLyBlbnRlcmluZyBuZXcgZWxlbWVudHNcbiAgICAgICAgICAgIGV4b25SZWN0cy5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkKT0+YGV4b24gZXhvbiR7ZC5leG9uTnVtYmVyfWApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4b25ZKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwicnhcIiwgMilcbiAgICAgICAgICAgICAgICAuYXR0cigncnknLCAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgKGQpID0+IGQudylcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAxNSkgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkKSA9PiBkLngpXG4gICAgICAgICAgICAgICAgLm1lcmdlKGV4b25SZWN0cylcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJkZWZhdWx0XCIpO1xuXG4gICAgICAgICAgICAvLyBtb2RlbCBpbmZvIHRleHQgbGFiZWxcbiAgICAgICAgICAgIGRvbS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcIm1vZGVsSW5mb1wiKSAvLyBUT0RPOiBubyBoYXJkLWNvZGVkIHZhbHVlXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy54U2NhbGUoMCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4b25ZLTEwKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCAxMilcbiAgICAgICAgICAgICAgICAudGV4dChcIkdlbmUgTW9kZWxcIik7XG5cbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpc29mb3JtLCByZW5kZXIgdGhlIGludHJvbiBsaW5lXG4gICAgICAgICAgICBjb25zdCBpbnRyb25MaW5lID0gZG9tLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHRoaXMuZXhvbnNDdXJhdGVkWzBdLngpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLmV4b25zQ3VyYXRlZFt0aGlzLmV4b25zQ3VyYXRlZC5sZW5ndGgtMV0ueClcbiAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIGV4b25ZICsgKDE1LzIpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgZXhvblkgKyAoMTUvMikpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJpbnRyb25cIiwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKioqKiogcmVuZGVyaW5nIGN1cmF0ZWQgZXhvbnMgb3IgaXNvZm9ybSBleG9ucyAqL1xuICAgICAgICBjb25zdCBleG9uUmVjdHMyID0gZG9tLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIilcbiAgICAgICAgICAgIC5kYXRhKHRoaXMuZXhvbnNDdXJhdGVkKTtcblxuICAgICAgICAvLyB1cGRhdGluZyBlbGVtZW50c1xuICAgICAgICBleG9uUmVjdHMyLmF0dHIoXCJ4XCIsIChkKSA9PiBkLngpO1xuICAgICAgICBleG9uUmVjdHMyLmF0dHIoXCJ5XCIsIGV4b25ZKTtcblxuICAgICAgICAvLyBlbnRlcmluZyBuZXcgZWxlbWVudHNcbiAgICAgICAgZXhvblJlY3RzMi5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgKGQpPT5gZXhvbi1jdXJhdGVkYClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleG9uWSlcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgKGQpID0+IGQudylcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDE1KSAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZXNcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4gZC54KVxuICAgICAgICAgICAgLm1lcmdlKGV4b25SZWN0czIpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiI2VlZVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKTtcblxuICAgICAgICAvKioqKiogcmVuZGVyaW5nIHRleHQgbGFiZWxzICovXG5cbiAgICAgICAgZG9tLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJtb2RlbExhYmVsXCIpIC8vIFRPRE86IG5vIGhhcmQtY29kZWQgdmFsdWVcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy54U2NhbGUoMCkgLSA1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4b25ZICsgNy41KVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIDkpXG4gICAgICAgICAgICAudGV4dCh0aGlzLmdlbmUudHJhbnNjcmlwdElkPT09dW5kZWZpbmVkP2Ake3RoaXMuZ2VuZS5nZW5lU3ltYm9sfWA6dGhpcy5nZW5lLnRyYW5zY3JpcHRJZCk7XG4gICAgfVxuXG4gICAgc2V0WHNjYWxlKHcpe1xuICAgICAgICAvLyBjb25jZXB0IGV4cGxhaW5lZDpcbiAgICAgICAgLy8gYXNzdW1pbmcgdGhlIGNhbnZhcyB3aWR0aCBpcyBmaXhlZFxuICAgICAgICAvLyB0aGUgdGFzayBpcyBob3cgdG8gcmVuZGVyIGFsbCBleG9ucyArIGZpeGVkLXdpZHRoIGludHJvbnMgd2l0aGluIHRoZSBjYW52YXNcbiAgICAgICAgLy8gZmlyc3QgZmluZCB0aGUgbGFyZ2VzdCBleG9uLFxuICAgICAgICAvLyB0aGVuIHNldCB0aGUgeCBzY2FsZSBvZiB0aGUgY2FudmFzIHRvIGFjY29tbW9kYXRlIG1heChleG9uIGxlbmd0aCkqZXhvbiBjb3VudHMsXG4gICAgICAgIC8vIHRoaXMgZW5zdXJlcyB0aGF0IHRoZXJlJ3MgYWx3YXlzIHNwYWNlIGZvciByZW5kZXJpbmcgaW50cm9uc1xuICAgICAgICAvLyB0aGUgZml4ZWQgaW50cm9uIHdpZHRoIGlzIGNhbGN1bGF0ZWQgYXMgc3VjaDpcbiAgICAgICAgLy8gKChtYXgoZXhvbiBsZW5ndGgpICogZXhvbiBjb3VudHMpIC0gdG90YWwgZXhvbiBsZW5ndGgpLyhleG9uIGNvdW50cyAtIDEpXG5cbiAgICAgICAgLy8gdXNlIGEgbGluZWFyIHNjYWxlIHRvXG4gICAgICAgIHRoaXMuZXhvbnMuZm9yRWFjaCgoZCkgPT4ge2QubGVuZ3RoID0gTnVtYmVyKGQuY2hyb21FbmQpIC0gTnVtYmVyKGQuY2hyb21TdGFydCkgKyAxfSk7XG4gICAgICAgIGNvbnN0IG1heEV4b25MZW5ndGggPSBtYXgodGhpcy5leG9ucywgKGQpPT5kLmxlbmd0aCk7XG5cbiAgICAgICAgY29uc3QgZG9tYWluID0gWzAsIG1heEV4b25MZW5ndGgqdGhpcy5leG9ucy5sZW5ndGhdO1xuICAgICAgICBjb25zdCByYW5nZSA9IFswLCB3XTtcbiAgICAgICAgdGhpcy54U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgICAgIC5yYW5nZShyYW5nZSk7XG5cbiAgICAgICAgLy8gZml4ZWQgaW50cm9uIHdpZHRoXG4gICAgICAgIGNvbnN0IG1pbkxlbmd0aCA9IHRoaXMueFNjYWxlLmludmVydCh0aGlzLm1pbkV4b25XaWR0aCk7IC8vIHRoZSBtaW5pbXVtIGV4b24gbGVuZ3RoIHRoYXQgbWFwcyB0byBtaW5pbXVtIGV4b24gd2lkdGggKHBpeGVscykgdXNpbmcgeFNjYWxlXG4gICAgICAgIGNvbnN0IHRvdGFsRXhvbkxlbmd0aCA9IHN1bSh0aGlzLmV4b25zLCAoZCk9PmQubGVuZ3RoPm1pbkxlbmd0aD9kLmxlbmd0aDptaW5MZW5ndGgpOyAvLyBpZiBhbiBleG9uIGlzIHNob3J0ZXIgdGhhbiBtaW4gbGVuZ3RoLCB1c2UgbWluIGxlbmd0aFxuICAgICAgICB0aGlzLmludHJvbkxlbmd0aCA9IChtYXhFeG9uTGVuZ3RoICogdGhpcy5leG9ucy5sZW5ndGggLSB0b3RhbEV4b25MZW5ndGgpLyh0aGlzLmV4b25zLmxlbmd0aC0xKTsgLy8gY2FsdWNsYXRlIHRoZSBmaXhlZCBpbnRyb24gbGVuZ3RoXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIGEgZ2l2ZW4gcG9zaXRpb24sIGZpbmQgdGhlIGV4b25cbiAgICAgKiBAcGFyYW0gcG9zIHtJbnRlZ2VyfTogYSBnZW5vbWljIHBvc2l0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmluZEV4b24ocG9zKXtcbiAgICAgICAgcG9zID0gTnVtYmVyKHBvcyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmV4b25zLmZpbHRlcigoZCkgPT4ge3JldHVybiBOdW1iZXIoZC5jaHJvbVN0YXJ0KSAtIDEgPD0gcG9zICYmIE51bWJlcihkLmNocm9tRW5kKSArIDEgPj0gcG9zfSk7XG4gICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PSAxKSByZXR1cm4gcmVzdWx0c1swXTtcbiAgICAgICAgZWxzZSBpZihyZXN1bHRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJObyBleG9uIGZvdW5kIGZvcjogXCIgKyBwb3MpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk1vcmUgdGhhbiBvbmUgZXhvbnMgZm91bmQgZm9yOiBcIiArIHBvcyk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn0iLCJcbi8qXG5UaGlzIGNsYXNzIGlzIGEgdmlld2VyIG9mIHRyYW5zY3JpcHRpb25hbCBpc29mb3JtcywgZWFjaCBpcyByZW5kZXIgYXMgYSB0cmFja1xuICovXG5cbmltcG9ydCBHZW5lTW9kZWwgZnJvbSBcIi4vR2VuZU1vZGVsXCI7XG5pbXBvcnQge3NlbGVjdCwgc2VsZWN0QWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NjYWxlQmFuZH0gZnJvbSBcImQzLXNjYWxlXCI7XG5pbXBvcnQge2F4aXNUb3AsIGF4aXNSaWdodH0gZnJvbSBcImQzLWF4aXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSXNvZm9ybVRyYWNrVmlld2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihpc29mb3JtcywgaXNvZm9ybUV4b25zLCBtb2RlbEV4b25zLCBjb25maWcpe1xuICAgICAgICB0aGlzLmlzb2Zvcm1zID0gaXNvZm9ybXM7XG4gICAgICAgIHRoaXMuaXNvZm9ybUV4b25zID0gaXNvZm9ybUV4b25zO1xuICAgICAgICB0aGlzLm1vZGVsRXhvbnMgPSBtb2RlbEV4b25zO1xuICAgICAgICB0aGlzLnZpc3VhbERvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgfVxuXG4gICAgc2hvd0RhdGEoZGF0YSwgY29sb3JTY2FsZSwgYmFyU2NhbGUpe1xuICAgICAgICBkYXRhLnNvcnQoKGEsYik9PntyZXR1cm4gLShhLm9yaWdpbmFsVmFsdWUgLSBiLm9yaWdpbmFsVmFsdWUpfSk7IC8vIGZpcnN0IHNvcnQgdGhlIGV4cHJlc3Npb24gZGF0YVxuICAgICAgICBjb25zdCBpZHMgPSBkYXRhLm1hcCgoZCk9PmQudHJhbnNjcmlwdElkKTtcbiAgICAgICAgdGhpcy5zb3J0VHJhY2tzKGlkcyk7XG5cbiAgICAgICAgZGF0YS5mb3JFYWNoKChkKT0+e1xuICAgICAgICAgICAgY29uc3QgaXNvZm9ybSA9IHRoaXMudmlzdWFsRG9tLnNlbGVjdChgIyR7ZC50cmFuc2NyaXB0SWQucmVwbGFjZShcIi5cIiwgXCJfXCIpfWApO1xuICAgICAgICAgICAgaXNvZm9ybS5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBjb2xvclNjYWxlKGQudmFsdWUpKVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXIgdGhlIGxvbGxpcG9wIGdyYXBoXG4gICAgICAgIHRoaXMudmlzdWFsRG9tLnNlbGVjdChcIi5sb2xsaXBvcEdyYXBoXCIpLnJlbW92ZSgpO1xuICAgICAgICBjb25zdCBsb2xsaXBvcEdyYXBoID0gdGhpcy52aXN1YWxEb20uYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsb2xsaXBvcEdyYXBoXCIsIHRydWUpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKC0xMDAsIDEzKWApOyAvLyBUT0RPOiByZW1vdmUgaGFyZC1jb2RlZCB2YWx1ZXNcblxuICAgICAgICBjb25zdCBsb2xsaXBvcHMgPSBsb2xsaXBvcEdyYXBoLnNlbGVjdEFsbChcIi5sb2xsaXBvcFwiKVxuICAgICAgICAgICAgLmRhdGEoZGF0YSk7XG5cbiAgICAgICAgY29uc3QgZyA9IGxvbGxpcG9wcy5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsb2xsaXBvcFwiLCB0cnVlKTtcblxuICAgICAgICBnLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgKGQpPT50aGlzLnlTY2FsZShkLnRyYW5zY3JpcHRJZCkpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsIChkKT0+dGhpcy55U2NhbGUoZC50cmFuc2NyaXB0SWQpKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIChkKT0+Y29sb3JTY2FsZShkLnZhbHVlKSlcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAyKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKDEwMDApXG4gICAgICAgICAgICAuYXR0cihcIngyXCIsIChkKT0+YmFyU2NhbGUoZC52YWx1ZSkpO1xuXG4gICAgICAgIGcuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsIChkKT0+dGhpcy55U2NhbGUoZC50cmFuc2NyaXB0SWQpIClcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCA1KVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCk9PmNvbG9yU2NhbGUoZC52YWx1ZSkpXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgKGQpPT5iYXJTY2FsZShkLnZhbHVlKSk7XG5cbiAgICAgICAgLy8gYWRkIHRoZSBheGVzXG4gICAgICAgIGxvbGxpcG9wR3JhcGguYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxvbGxpcG9wLWF4aXNcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwtJHt0aGlzLnlTY2FsZS5iYW5kd2lkdGgoKS8yfSlgKVxuICAgICAgICAgICAgLmNhbGwoXG4gICAgICAgICAgICAgICAgYXhpc1RvcChiYXJTY2FsZSlcbiAgICAgICAgICAgICAgICAgICAgLnRpY2tzKDMpXG4gICAgICAgICAgICApO1xuICAgICAgICBsb2xsaXBvcEdyYXBoLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJsb2xsaUxhYmVsXCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtNDApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIDkpXG4gICAgICAgICAgICAudGV4dChcImxvZzEwKFRQTSlcIik7XG5cbiAgICAgICAgbG9sbGlwb3BHcmFwaC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibG9sbGlwb3AtYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLC0ke3RoaXMueVNjYWxlLmJhbmR3aWR0aCgpLzJ9KWApXG4gICAgICAgICAgICAuY2FsbChcbiAgICAgICAgICAgICAgICBheGlzUmlnaHQodGhpcy55U2NhbGUpXG4gICAgICAgICAgICAgICAgICAudGlja1ZhbHVlcyhbXSkgLy8gc2hvdyBubyB0aWNrc1xuICAgICAgICAgICAgKTtcblxuXG5cbiAgICB9XG5cbiAgICBzb3J0VHJhY2tzKHlsaXN0KXtcbiAgICAgICAgY29uc29sZS5sb2coeWxpc3QpO1xuICAgICAgICB0aGlzLnNldFlzY2FsZSh0aGlzLmNvbmZpZy5oLCB5bGlzdCk7XG4gICAgICAgIHRoaXMucmVuZGVyKHRydWUpO1xuICAgIH1cblxuICAgIHJlbmRlcihyZWRyYXc9ZmFsc2UsIGRvbT11bmRlZmluZWQsIGR1cmF0aW9uPTEwMDApe1xuICAgICAgICBpZiAoZG9tID09PSB1bmRlZmluZWQgJiYgdGhpcy52aXN1YWxEb20gPT09IHVuZGVmaW5lZCkgdGhyb3cgXCJGYXRhbCBFcnJvcjogbXVzdCBwcm92aWRlIGEgZG9tIGVsZW1lbnRcIjtcbiAgICAgICAgaWYgKGRvbSA9PT0gdW5kZWZpbmVkKSBkb20gPSB0aGlzLnZpc3VhbERvbTtcbiAgICAgICAgZWxzZSB0aGlzLnZpc3VhbERvbSA9IGRvbTtcblxuICAgICAgICBpZih0aGlzLnlTY2FsZT09PXVuZGVmaW5lZCkgdGhpcy5zZXRZc2NhbGUodGhpcy5jb25maWcuaCk7XG5cbiAgICAgICAgY29uc3QgaXNvVHJhY2tzID0gZG9tLnNlbGVjdEFsbChcIi5pc290cmFja1wiKVxuICAgICAgICAgICAgLmRhdGEodGhpcy5pc29mb3Jtcy5tYXAoKGQpPT5kLnRyYW5zY3JpcHRJZCkpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBvbGQgaXNvZm9ybSB0cmFja3MsIGlmIGFueVxuICAgICAgICBpc29UcmFja3MudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCk9PnsgcmV0dXJuIGB0cmFuc2xhdGUoMCwgJHt0aGlzLnlTY2FsZShkKX0pYH0pO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBuZXcgdHJhY2tzXG4gICAgICAgIGlzb1RyYWNrcy5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCAoZCk9PihkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKSkpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaXNvdHJhY2tcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKT0+eyByZXR1cm4gYHRyYW5zbGF0ZSgwLCAwKWB9KVxuXG4gICAgICAgICAgICAvLyAubWVyZ2UoaXNvVHJhY2tzKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uLzIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCk9PnsgcmV0dXJuIGB0cmFuc2xhdGUoMCwgJHt0aGlzLnlTY2FsZShkKX0pYH0pO1xuXG4gICAgICAgIGlmIChyZWRyYXcpIHJldHVybjtcblxuICAgICAgICB0aGlzLl9yZW5kZXJNb2RlbHModGhpcy5jb25maWcudyk7XG5cbiAgICB9XG5cbiAgICBfcmVuZGVyTW9kZWxzKHcpe1xuICAgICAgICB0aGlzLmlzb2Zvcm1zLmZvckVhY2goKGlzb2Zvcm0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IEdlbmVNb2RlbChpc29mb3JtLCB0aGlzLm1vZGVsRXhvbnMsIHRoaXMuaXNvZm9ybUV4b25zW2lzb2Zvcm0udHJhbnNjcmlwdElkXSwgW10sIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgaXNvZm9ybUcgPSBzZWxlY3QoYCMke2lzb2Zvcm0udHJhbnNjcmlwdElkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKX1gKTtcbiAgICAgICAgICAgIG1vZGVsLnJlbmRlcihpc29mb3JtRywge3c6dywgaDogdGhpcy55U2NhbGUuYmFuZHdpZHRoKCl9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBzZXRZc2NhbGUoaCwgeWxpc3Q9dW5kZWZpbmVkKXtcbiAgICAgICAgaWYgKHlsaXN0ID09PSB1bmRlZmluZWQpIHlsaXN0ID0gdGhpcy5pc29mb3Jtcy5tYXAoKGQpPT5kLnRyYW5zY3JpcHRJZCk7XG4gICAgICAgIHRoaXMueVNjYWxlID0gc2NhbGVCYW5kKClcbiAgICAgICAgICAgIC5kb21haW4oeWxpc3QpXG4gICAgICAgICAgICAucmFuZ2UoWzAsIGhdKVxuICAgICAgICAgICAgLnBhZGRpbmcoLjA1KTtcbiAgICB9XG5cbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtzZWxlY3QsIHNlbGVjdEFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtqc29ufSBmcm9tIFwiZDMtZmV0Y2hcIjtcbmltcG9ydCB7c2NhbGVMaW5lYXJ9IGZyb20gXCJkMy1zY2FsZVwiO1xuaW1wb3J0IHttaW4sIG1heH0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmltcG9ydCB7Z2V0R3RleFVybHMsXG4gICAgICAgIHBhcnNlVGlzc3VlcyxcbiAgICAgICAgcGFyc2VFeG9ucyxcbiAgICAgICAgcGFyc2VKdW5jdGlvbnMsXG4gICAgICAgIHBhcnNlSXNvZm9ybXMsXG4gICAgICAgIHBhcnNlSXNvZm9ybUV4cHJlc3Npb25UcmFuc3Bvc2UsXG4gICAgICAgIHBhcnNlSXNvZm9ybUV4b25zLFxuICAgICAgICBwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbixcbiAgICAgICAgcGFyc2VFeG9uRXhwcmVzc2lvbixcbiAgICAgICAgcGFyc2VJc29mb3JtRXhwcmVzc2lvblxufSBmcm9tIFwiLi9tb2R1bGVzL2d0ZXhEYXRhUGFyc2VyXCI7XG5cbmltcG9ydCB7c2V0Q29sb3JTY2FsZSwgZHJhd0NvbG9yTGVnZW5kfSBmcm9tIFwiLi9tb2R1bGVzL2NvbG9yc1wiO1xuLy8gaW1wb3J0IHtkb3dubG9hZFN2Z30gZnJvbSBcIi4vbW9kdWxlcy91dGlsc1wiO1xuXG5pbXBvcnQgRGVuZHJvSGVhdG1hcENvbmZpZyBmcm9tIFwiLi9tb2R1bGVzL0RlbmRyb0hlYXRtYXBDb25maWdcIjtcbmltcG9ydCBEZW5kcm9IZWF0bWFwIGZyb20gXCIuL21vZHVsZXMvRGVuZHJvSGVhdG1hcFwiO1xuaW1wb3J0IEdlbmVNb2RlbCBmcm9tIFwiLi9tb2R1bGVzL0dlbmVNb2RlbFwiO1xuaW1wb3J0IElzb2Zvcm1UcmFja1ZpZXdlciBmcm9tIFwiLi9tb2R1bGVzL0lzb2Zvcm1UcmFja1ZpZXdlclwiO1xuXG4vKipcbiAqIFJlbmRlciBleHByZXNzaW9uIGhlYXRtYXAsIGdlbmUgbW9kZWwsIGFuZCBpc29mb3JtIHRyYWNrc1xuICogQHBhcmFtIHR5cGUge2VudW19IGlzb2Zvcm0sIGV4b24sIGp1bmN0aW9uXG4gKiBAcGFyYW0gZ2VuZUlkIHtTdHJpbmd9IGEgZ2VuZSBuYW1lIG9yIGdlbmNvZGUgSURcbiAqIEBwYXJhbSByb290SWQge1N0cmluZ30gdGhlIERPTSBJRCBvZiB0aGUgU1ZHXG4gKiBAcGFyYW0gdXJscyB7T2JqZWN0fSBvZiB0aGUgR1RFeCB3ZWIgc2VydmljZSB1cmxzIHdpdGggYXR0cjogZ2VuZUlkLCB0aXNzdWUsIGdlbmVNb2RlbFVuZmlsdGVyZWQsIGdlbmVNb2RlbCwganVuY3Rpb25FeHAsIGV4b25FeHBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih0eXBlLCBnZW5lSWQsIHJvb3RJZCwgdXJscz1nZXRHdGV4VXJscygpKXtcbiAgICBqc29uKHVybHMuZ2VuZUlkICsgZ2VuZUlkKSAvLyBxdWVyeSB0aGUgZ2VuZSBieSBnZW5lSWQtLWdlbmUgbmFtZSBvciBnZW5jb2RlIElEIHdpdGggb3Igd2l0aG91dCB2ZXJzaW9uaW5nXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgIC8vIGdldCB0aGUgZ2VuZSBvYmplY3QgYW5kIGl0cyBnZW5jb2RlIElkXG4gICAgICAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KFwiZ2VuZUlkXCIpKSB0aHJvdyBcIlBhcnNpbmcgRXJyb3I6IGF0dHJpYnV0ZSBnZW5lSWQgZG9lc24ndCBleGlzdC5cIjtcbiAgICAgICAgICAgICBpZiAoZGF0YS5nZW5lSWQubGVuZ3RoPT0wKXtcbiAgICAgICAgICAgICAgICAgYWxlcnQoXCJObyBnZW5lIGlzIGZvdW5kIHdpdGggXCIgKyBnZW5lSWQpO1xuICAgICAgICAgICAgICAgICB0aHJvdyBcIkZhdGFsIEVycm9yOiBnZW5lIGlzIG5vdCBmb3VuZFwiO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoZGF0YS5nZW5lSWQubGVuZ3RoPjEpIHtcbiAgICAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gZGF0YS5nZW5lSWQuZmlsdGVyKChnKT0+e1xuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGcuZ2VuZVN5bWJvbFVwcGVyPT1nZW5lSWQudG9VcHBlckNhc2UoKSB8fCBnLmVuc2VtYmxJZD09Z2VuZUlkLnRvVXBwZXJDYXNlKCkgfHwgZy5nZW5jb2RlSWQgPT0gZ2VuZUlkLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICBhbGVydChcIkZhdGFsIEVycm9yOiBpbnB1dCBnZW5lIElEIGlzIG5vdCB1bmlxdWUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogaW5wdXQgZ2VuZSBJRCBpcyBub3QgdW5pcXVlLlwiO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICBkYXRhLmdlbmVJZCA9IGZpbHRlcmVkO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIGNvbnN0IGdlbmUgPSBkYXRhLmdlbmVJZFswXTtcbiAgICAgICAgICAgICBpZiAoZ2VuZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gZ2VuZSBpcyBmb3VuZCB3aXRoIFwiICsgZ2VuZUlkKTtcbiAgICAgICAgICAgICAgICAgdGhyb3cgXCJGYXRhbCBFcnJvcjogZ2VuZSBpcyBub3QgZm91bmRcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgY29uc3QgZ2VuY29kZUlkID0gZ2VuZS5nZW5jb2RlSWQ7XG5cbiAgICAgICAgICAgICAvLyBidWlsZCB0aGUgcHJvbWlzZXNcbiAgICAgICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtcbiAgICAgICAgICAgICAgICBqc29uKHVybHMudGlzc3VlKSxcbiAgICAgICAgICAgICAgICBqc29uKHVybHMuZ2VuZU1vZGVsVW5maWx0ZXJlZCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLmdlbmVNb2RlbCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLmlzb2Zvcm0gKyBnZW5jb2RlSWQpLFxuICAgICAgICAgICAgICAgIGpzb24odXJscy5qdW5jdGlvbkV4cCArIGdlbmNvZGVJZCksXG4gICAgICAgICAgICAgICAganNvbih1cmxzLmV4b25FeHAgKyBnZW5jb2RlSWQpLFxuICAgICAgICAgICAgICAgIGpzb24odXJscy5pc29mb3JtRXhwICsgZ2VuY29kZUlkKVxuICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oYXJncyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpc3N1ZXMgPSBwYXJzZVRpc3N1ZXMoYXJnc1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBleG9ucyA9IHBhcnNlRXhvbnMoYXJnc1sxXSksIC8vIGV4b25zIG9mIHRoZSBmdWxsIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4b25zQ3VyYXRlZCA9IHBhcnNlRXhvbnMoYXJnc1syXSksIC8vIGV4b25zIG9mIHRoZSBjdXJhdGVkIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2Zvcm1zID0gcGFyc2VJc29mb3JtcyhhcmdzWzNdKSwgLy8gYnkgZGVmYXVsdCwgdGhlIHBhcnNlciBzb3J0cyB0aGUgaXNvZm9ybXMgaW4gZGVzY2VuZGluZyBvcmRlciBieSBsZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2Zvcm1FeG9ucyA9IHBhcnNlSXNvZm9ybUV4b25zKGFyZ3NbM10pLCAvLyBleG9ucyBvZiB0aGUgaW5kaXZpZHVhbCBpc29mb3Jtc1xuICAgICAgICAgICAgICAgICAgICAgICAganVuY3Rpb25zID0gcGFyc2VKdW5jdGlvbnMoYXJnc1s0XSksXG4gICAgICAgICAgICAgICAgICAgICAgICBqdW5jdGlvbkV4cHJlc3MgPSBwYXJzZUp1bmN0aW9uRXhwcmVzc2lvbihhcmdzWzRdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4b25FeHByZXNzID0gcGFyc2VFeG9uRXhwcmVzc2lvbihhcmdzWzVdLCAgZXhvbnNDdXJhdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzb2Zvcm1FeHByZXNzID0gcGFyc2VJc29mb3JtRXhwcmVzc2lvbihhcmdzWzZdKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgYWxsIHRoZSBjb2xvciBzY2FsZXNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhvbkNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGV4b25FeHByZXNzLm1hcChkPT5kLnZhbHVlKSwgXCJCbHVlc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNvZm9ybUNvbG9yU2NhbGUgPSBzZXRDb2xvclNjYWxlKGlzb2Zvcm1FeHByZXNzLm1hcChkPT5kLnZhbHVlKSwgXCJHcmV5c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QganVuY3Rpb25Db2xvclNjYWxlID0gc2V0Q29sb3JTY2FsZShqdW5jdGlvbkV4cHJlc3MubWFwKGQ9PmQudmFsdWUpLCBcIlJlZHNcIik7XG5cbiAgICAgICAgICAgICAgICAvLyBoZWF0IG1hcFxuICAgICAgICAgICAgICAgIGxldCBkbWFwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdDogcm9vdElkLFxuICAgICAgICAgICAgICAgICAgICBzdmc6IGAke3Jvb3RJZH0tc3ZnYCxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogXCJpc29mb3JtVG9vbHRpcFwiLFxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyOiBcImlzb2Zvcm1Ub29sYmFyXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsb25lOiBcImlzb2Zvcm1DbG9uZVwiLFxuICAgICAgICAgICAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlOiBcImlzb2Zvcm1TYXZlXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgdGhlIGRvbSBjb21wb25lbnRzXG4gICAgICAgICAgICAgICAgaWYoJChgIyR7aWRzLnRvb2x0aXB9YCkubGVuZ3RoID09IDApICQoJzxkaXYvPicpLmF0dHIoJ2lkJywgaWRzLnRvb2x0aXApLmFwcGVuZFRvKCQoJ2JvZHknKSk7XG4gICAgICAgICAgICAgICAgW1widG9vbGJhclwiLCBcImNsb25lXCJdLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgJCgnPGRpdi8+JykuYXR0cihcImlkXCIsIGlkc1trZXldKS5hcHBlbmRUbygkKGAjJHtpZHMucm9vdH1gKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHR5cGUpe1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaXNvZm9ybVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkbWFwQ29uZmlnID0gbmV3IERlbmRyb0hlYXRtYXBDb25maWcod2luZG93LmlubmVyV2lkdGgsIDE1MCwgMTAwLCB7dG9wOiAzMCwgcmlnaHQ6IDM1MCwgYm90dG9tOiAyMDAsIGxlZnQ6IDUwfSwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXNzdWVUcmVlID0gYXJnc1s2XS5jbHVzdGVycy50aXNzdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNvZm9ybVRyZWUgPSBhcmdzWzZdLmNsdXN0ZXJzLmlzb2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAoaXNvZm9ybVRyZWUsIHRpc3N1ZVRyZWUsIGlzb2Zvcm1FeHByZXNzLCBcIkdyZXlzXCIsIDUsIGRtYXBDb25maWcsIHRydWUsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRtYXAucmVuZGVyKGlkcy5yb290LCBpZHMuc3ZnLCB0cnVlLCB0cnVlLCB0b3AsIDUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNvZm9ybXMuc29ydCgoYSwgYik9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmRlcnMgPSBkbWFwLm9iamVjdHMuY29sdW1uVHJlZS54U2NhbGUuZG9tYWluKCk7IC8vIHRoZSBsZWFmIG9yZGVyIG9mIHRoZSBpc29mb3JtIGRlbmRyb2dyYW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJzLmluZGV4T2YoYS50cmFuc2NyaXB0SWQpIDwgb3JkZXJzLmluZGV4T2YoYi50cmFuc2NyaXB0SWQpKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVycy5pbmRleE9mKGEudHJhbnNjcmlwdElkKSA+IG9yZGVycy5pbmRleE9mKGIudHJhbnNjcmlwdElkKSkgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpc29mb3JtVHJhbnNwb3NlZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkbWFwQ29uZmlnID0gbmV3IERlbmRyb0hlYXRtYXBDb25maWcod2luZG93LmlubmVyV2lkdGgsIDE1MCwgMTAwLCB7dG9wOiAzMCwgcmlnaHQ6IDM1MCwgYm90dG9tOiAyMDAsIGxlZnQ6IDUwfSwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXNzdWVUcmVlID0gYXJnc1s2XS5jbHVzdGVycy50aXNzdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNvZm9ybVRyZWUgPSBhcmdzWzZdLmNsdXN0ZXJzLmlzb2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNvZm9ybUV4cHJlc3NUID0gcGFyc2VJc29mb3JtRXhwcmVzc2lvblRyYW5zcG9zZShhcmdzWzZdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZG1hcCA9IG5ldyBEZW5kcm9IZWF0bWFwKHRpc3N1ZVRyZWUsIGlzb2Zvcm1UcmVlLCBpc29mb3JtRXhwcmVzc1QsIFwiR3JleXNcIiwgNSwgZG1hcENvbmZpZywgdHJ1ZSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG1hcC5yZW5kZXIoaWRzLnJvb3QsIGlkcy5zdmcsIHRydWUsIHRydWUsIHRvcCwgNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc29mb3Jtcy5zb3J0KChhLCBiKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yZGVycyA9IGRtYXAub2JqZWN0cy5yb3dUcmVlLnlTY2FsZS5kb21haW4oKTsgLy8gdGhlIGxlYWYgb3JkZXIgb2YgdGhlIGlzb2Zvcm0gZGVuZHJvZ3JhbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlcnMuaW5kZXhPZihhLnRyYW5zY3JpcHRJZCkgPCBvcmRlcnMuaW5kZXhPZihiLnRyYW5zY3JpcHRJZCkpIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJzLmluZGV4T2YoYS50cmFuc2NyaXB0SWQpID4gb3JkZXJzLmluZGV4T2YoYi50cmFuc2NyaXB0SWQpKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImp1bmN0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRtYXBDb25maWcgPSBuZXcgRGVuZHJvSGVhdG1hcENvbmZpZyh3aW5kb3cuaW5uZXJXaWR0aCwgMTUwLCAwLCB7dG9wOiAzMCwgcmlnaHQ6IDM1MCwgYm90dG9tOiAyMDAsIGxlZnQ6IDUwfSwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXNzdWVUcmVlID0gYXJnc1s0XS5jbHVzdGVycy50aXNzdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAodW5kZWZpbmVkLCB0aXNzdWVUcmVlLCBqdW5jdGlvbkV4cHJlc3MsIFwiUmVkc1wiLCA1LCBkbWFwQ29uZmlnLCB0cnVlLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwLnJlbmRlcihpZHMucm9vdCwgaWRzLnN2ZywgZmFsc2UsIHRydWUsIHRvcCwgNSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJleG9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRtYXBDb25maWcgPSBuZXcgRGVuZHJvSGVhdG1hcENvbmZpZyh3aW5kb3cuaW5uZXJXaWR0aCwgMTUwLCAwLCB7dG9wOiAzMCwgcmlnaHQ6IDM1MCwgYm90dG9tOiAyMDAsIGxlZnQ6IDUwfSwgMTIsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXNzdWVUcmVlID0gYXJnc1s1XS5jbHVzdGVycy50aXNzdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkbWFwID0gbmV3IERlbmRyb0hlYXRtYXAodW5kZWZpbmVkLCB0aXNzdWVUcmVlLCBleG9uRXhwcmVzcywgXCJCbHVlc1wiLCA1LCBkbWFwQ29uZmlnLCB0cnVlLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRtYXAucmVuZGVyKGlkcy5yb290LCBpZHMuc3ZnLCBmYWxzZSwgdHJ1ZSwgdG9wLCA1KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJJbnB1dCB0eXBlIGlzIG5vdCByZWNvZ25pemVkXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCgnI3NwaW5uZXInKS5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyB0b29sdGlwXG4gICAgICAgICAgICAgICAgZG1hcC5jcmVhdGVUb29sdGlwKGlkcy50b29sdGlwKTtcblxuICAgICAgICAgICAgICAgIC8vIGRlZmluZSB0aGUgZ2VuZSBtb2RlbCBhbmQgaXNvZm9ybSB0cmFja3MgbGF5b3V0IGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RlbENvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogZG1hcC5jb25maWcucGFuZWxzLm1haW4ueCxcbiAgICAgICAgICAgICAgICAgICAgeTogZG1hcC5jb25maWcucGFuZWxzLm1haW4uaCArIGRtYXAuY29uZmlnLnBhbmVscy5tYWluLnkgKyAxMzAsIC8vIFRPRE86IHJlbW92ZSBoYXJkLWNvZGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICB3OiBkbWFwLmNvbmZpZy5wYW5lbHMubWFpbi53LFxuICAgICAgICAgICAgICAgICAgICBoOiAxMDBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZXhvbkggPSAyMDsgLy8gVE9ETzogcmVtb3ZlIGhhcmQtY29kZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgY29uc3QgaXNvVHJhY2tWaWV3ZXJDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IG1vZGVsQ29uZmlnLngsXG4gICAgICAgICAgICAgICAgICAgIHk6IG1vZGVsQ29uZmlnLnkgKyBtb2RlbENvbmZpZy5oLFxuICAgICAgICAgICAgICAgICAgICB3OiBtb2RlbENvbmZpZy53LFxuICAgICAgICAgICAgICAgICAgICBoOiBleG9uSCppc29mb3Jtcy5sZW5ndGhcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5kIHRoZSBTVkcgaGVpZ2h0IHRvIGFjY29tbW9uZGF0ZSB0aGUgZ2VuZSBtb2RlbCBhbmQgaXNvZm9ybSB0cmFja3NcbiAgICAgICAgICAgICAgICBsZXQgaCA9ICtzZWxlY3QoYCMke2lkcy5zdmd9YCkuYXR0cihcImhlaWdodFwiKTsgLy8gZ2V0IHRoZSBjdXJyZW50IGhlaWdodFxuICAgICAgICAgICAgICAgIHNlbGVjdChgIyR7aWRzLnN2Z31gKS5hdHRyKFwiaGVpZ2h0XCIsIGggKyBtb2RlbENvbmZpZy5oICsgaXNvVHJhY2tWaWV3ZXJDb25maWcuaCk7XG5cbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgdGhlIGdlbmUgbW9kZWxcbiAgICAgICAgICAgICAgICBjb25zdCBnZW5lTW9kZWwgPSBuZXcgR2VuZU1vZGVsKGdlbmUsIGV4b25zLCBleG9uc0N1cmF0ZWQsIGp1bmN0aW9ucyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWxHID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2Zy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJpZFwiLCBcImdlbmVNb2RlbFwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bW9kZWxDb25maWcueH0sICR7bW9kZWxDb25maWcueX0pYCk7XG4gICAgICAgICAgICAgICAgZ2VuZU1vZGVsLnJlbmRlcihtb2RlbEcsIG1vZGVsQ29uZmlnKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbmRlciBpc29mb3JtIHRyYWNrcywgaWdub3JpbmcgaW50cm9uIGxlbmd0aHNcbiAgICAgICAgICAgICAgICBjb25zdCBpc29mb3JtVHJhY2tWaWV3ZXIgPSBuZXcgSXNvZm9ybVRyYWNrVmlld2VyKGlzb2Zvcm1zLCBpc29mb3JtRXhvbnMsIGV4b25zLCBpc29UcmFja1ZpZXdlckNvbmZpZyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tWaWV3ZXJHID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtpc29UcmFja1ZpZXdlckNvbmZpZy54fSwgJHtpc29UcmFja1ZpZXdlckNvbmZpZy55fSlgKTtcbiAgICAgICAgICAgICAgICBpc29mb3JtVHJhY2tWaWV3ZXIucmVuZGVyKGZhbHNlLCB0cmFja1ZpZXdlckcpO1xuXG4gICAgICAgICAgICAgICAgLy8gY3VzdG9taXphdGlvblxuICAgICAgICAgICAgICAgIF9hZGRDb2xvckxlZ2VuZHNGb3JHZW5lTW9kZWwoZG1hcCwganVuY3Rpb25Db2xvclNjYWxlLCBleG9uQ29sb3JTY2FsZSwgaXNvZm9ybUNvbG9yU2NhbGUpO1xuICAgICAgICAgICAgICAgIF9jcmVhdGVUb29sYmFyKGRtYXAsIGlkcyk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2godHlwZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpc29mb3JtXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVIZWF0TWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCwgaXNvZm9ybVRyYWNrVmlld2VyLCBqdW5jdGlvbkNvbG9yU2NhbGUsIGV4b25Db2xvclNjYWxlLCBpc29mb3JtQ29sb3JTY2FsZSwganVuY3Rpb25FeHByZXNzLCBleG9uRXhwcmVzcywgaXNvZm9ybUV4cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUlzb2Zvcm1NYXAodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImlzb2Zvcm1UcmFuc3Bvc2VkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVJc29mb3JtVHJhbnNwb3NlZE1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXAsIGlzb2Zvcm1UcmFja1ZpZXdlciwganVuY3Rpb25Db2xvclNjYWxlLCBleG9uQ29sb3JTY2FsZSwgaXNvZm9ybUNvbG9yU2NhbGUsIGp1bmN0aW9uRXhwcmVzcywgZXhvbkV4cHJlc3MsIGlzb2Zvcm1FeHByZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJqdW5jdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplSGVhdE1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXAsIGlzb2Zvcm1UcmFja1ZpZXdlciwganVuY3Rpb25Db2xvclNjYWxlLCBleG9uQ29sb3JTY2FsZSwgaXNvZm9ybUNvbG9yU2NhbGUsIGp1bmN0aW9uRXhwcmVzcywgZXhvbkV4cHJlc3MsIGlzb2Zvcm1FeHByZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jdXN0b21pemVKdW5jdGlvbk1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImV4b25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2N1c3RvbWl6ZUhlYXRNYXAodGlzc3VlcywgZ2VuZU1vZGVsLCBkbWFwLCBpc29mb3JtVHJhY2tWaWV3ZXIsIGp1bmN0aW9uQ29sb3JTY2FsZSwgZXhvbkNvbG9yU2NhbGUsIGlzb2Zvcm1Db2xvclNjYWxlLCBqdW5jdGlvbkV4cHJlc3MsIGV4b25FeHByZXNzLCBpc29mb3JtRXhwcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9taXplRXhvbk1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJ1bnJlY29nbml6ZWQgdHlwZVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgJCgnI3NwaW5uZXInKS5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICQoJyNzcGlubmVyJykuaGlkZSgpO1xuICAgICAgICB9KVxufVxuXG5cbi8qKlxuICogQ3JlYXRlIHRoZSBTVkcgdG9vbGJhclxuICogQHBhcmFtIGRtYXAge0RlbmRyb0hlYXRtYXB9XG4gKiBAcGFyYW0gaWRzIHtEaWN0aW9uYXJ5fSBvZiBET00gSURzIHdpdGggYnV0dG9uc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2NyZWF0ZVRvb2xiYXIoZG1hcCwgaWRzKXtcbiAgICBsZXQgdG9vbGJhciA9IGRtYXAuY3JlYXRlVG9vbGJhcihpZHMudG9vbGJhciwgZG1hcC50b29sdGlwKTtcbiAgICB0b29sYmFyLmNyZWF0ZURvd25sb2FkQnV0dG9uKGlkcy5idXR0b25zLnNhdmUsIGlkcy5zdmcsIGAke2lkcy5yb290fS1zYXZlLnN2Z2AsIGlkcy5jbG9uZSk7XG59XG5cblxuZnVuY3Rpb24gX2N1c3RvbWl6ZUlzb2Zvcm1UcmFuc3Bvc2VkTWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCwgaXNvVHJhY2tWaWV3ZXIsIGp1bmN0aW9uU2NhbGUsIGV4b25TY2FsZSwgaXNvZm9ybVNjYWxlLCBqdW5jdGlvbkRhdGEsIGV4b25EYXRhLCBpc29mb3JtRGF0YSl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0aXNzdWVEaWN0ID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuICAgIGNvbnN0IHRvb2x0aXAgPSBkbWFwLnRvb2x0aXA7XG5cbiAgICAvL3JlcGxhY2UgdGlzc3VlIElEIHdpdGggdGlzc3VlIG5hbWVcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgIC50ZXh0KChkKT0+dGlzc3VlRGljdFtkXSE9PXVuZGVmaW5lZD90aXNzdWVEaWN0W2RdLnRpc3N1ZU5hbWU6ZClcbiAgICAgICAgLnN0eWxlKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKTtcblxuICAgIC8vIGFkZCB0aXNzdWUgYmFuZHNcbiAgICAvLyBUT0RPOiByZWZhY3RvclxuICAgIG1hcFN2Zy5zZWxlY3QoXCIjaGVhdG1hcFwiKS5zZWxlY3RBbGwoXCIuZXhwLW1hcC14Y29sb3JcIilcbiAgICAgICAgLmRhdGEoZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmRvbWFpbigpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgKGQpPT5kbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUoZCkpXG4gICAgICAgIC5hdHRyKFwieVwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUucmFuZ2UoKVsxXSArIDUpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCA1KVxuICAgICAgICAuY2xhc3NlZChcImV4cC1tYXAteGNvbG9yXCIsIHRydWUpXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgKGQpPT5gIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcblxuICAgIGlmIChkbWFwLm9iamVjdHMuaGVhdG1hcC55U2NhbGUuZG9tYWluKCkubGVuZ3RoID4gMTUpe1xuICAgICAgICAvLyB3aGVuIHRoZXJlIGFyZSBtb3JlIHRoYW4gMTUgaXNvZm9ybXMsIGFkZCBhbm90aGVyIHRpc3N1ZSBjb2xvciBiYW5kcyB1bmRlciB0aGUgZGVuZHJvZ3JhbSdzIGxlYWYgbm9kZXNcbiAgICAgICAgIG1hcFN2Zy5zZWxlY3QoXCIjaGVhdG1hcFwiKS5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKVxuICAgICAgICAgICAgLmRhdGEoZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmRvbWFpbigpKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgKGQpPT5kbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUoZCkpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlLnJhbmdlKClbMF0gLSAxMClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgNSlcbiAgICAgICAgICAgIC5jbGFzc2VkKFwibGVhZi1jb2xvclwiLCB0cnVlKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCk9PmAjJHt0aXNzdWVEaWN0W2RdLmNvbG9ySGV4fWApO1xuICAgIH1cblxuXG4gICAgLy8gZGVmaW5lIHRpc3N1ZSBsYWJlbCBtb3VzZSBldmVudHNcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIHRydWUpO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLXhsYWJlbFwiKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImNsaWNrZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCB0aXNzdWUgPSBkO1xuICAgICAgICAgICAgY29uc3QgaiA9IGp1bmN0aW9uRGF0YS5maWx0ZXIoKGopPT5qLnRpc3N1ZUlkPT10aXNzdWUpOyAvLyBqdW5jdGlvbiBkYXRhXG4gICAgICAgICAgICBjb25zdCBleCA9IGV4b25EYXRhLmZpbHRlcigoZSk9PmUudGlzc3VlSWQ9PXRpc3N1ZSk7IC8vIGV4b24gZGF0YVxuICAgICAgICAgICAgZ2VuZU1vZGVsLmNoYW5nZVRleHRsYWJlbChtYXBTdmcuc2VsZWN0KFwiI2dlbmVNb2RlbFwiKSwgdGlzc3VlKTtcbiAgICAgICAgICAgIGdlbmVNb2RlbC5hZGREYXRhKG1hcFN2Zy5zZWxlY3QoXCIjZ2VuZU1vZGVsXCIpLCBqLCBleCwganVuY3Rpb25TY2FsZSwgZXhvblNjYWxlKTtcblxuICAgICAgICAgICAgLy8gaXNvZm9ybXMgdXBkYXRlXG5cbiAgICAgICAgICAgIGNvbnN0IGlzb0JhclNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgIC5kb21haW4oW21pbihpc29mb3JtRGF0YS5tYXAoZD0+ZC52YWx1ZSkpLCBtYXgoaXNvZm9ybURhdGEubWFwKGQ9PmQudmFsdWUpKV0pXG4gICAgICAgICAgICAgICAgLnJhbmdlKFswLCAtMTAwXSk7XG4gICAgICAgICAgICBjb25zdCBpc29EYXRhID0gaXNvZm9ybURhdGEuZmlsdGVyKChpc28pPT5pc28udGlzc3VlSWQ9PXRpc3N1ZSk7XG4gICAgICAgICAgICBpc29UcmFja1ZpZXdlci5zaG93RGF0YShpc29EYXRhLCBpc29mb3JtU2NhbGUsIGlzb0JhclNjYWxlKTtcbiAgICAgICAgfSk7XG5cblxuXG4gICAgLy8gZGVmaW5lIHRoZSBpc29mb3JtIGhlYXRtYXAgY2VsbHMnIG1vdXNlIGV2ZW50c1xuICAgIC8vIG5vdGU6IHRvIHJlZmVyZW5jZSB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGZ1bmN0aW9uIChlLmcuIGQzLnNlbGVjdCh0aGlzKSkgaGVyZSB3ZSBtdXN0IHVzZSBhIG5vcm1hbCBhbm9ueW1vdXMgZnVuY3Rpb24uXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLWNlbGxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBzZWxlY3QodGhpcyk7IC8vICd0aGlzJyByZWZlcnMgdG8gdGhlIGQzIERPTSBvYmplY3RcbiAgICAgICAgICAgIGRtYXAub2JqZWN0cy5oZWF0bWFwLmNlbGxNb3VzZW92ZXIoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgY29uc3QgdGlzc3VlID0gdGlzc3VlRGljdFtkLnhdID09PSB1bmRlZmluZWQ/ZC54OnRpc3N1ZURpY3RbZC54XS50aXNzdWVOYW1lOyAvLyBnZXQgdGlzc3VlIG5hbWUgb3IgSURcbiAgICAgICAgICAgIHRvb2x0aXAuc2hvdyhgVGlzc3VlOiAke3Rpc3N1ZX08YnIvPiBJc29mb3JtOiAke2QuaWR9PGJyLz4gJHtkLnVuaXR9OiAke3BhcnNlRmxvYXQoZC5vcmlnaW5hbFZhbHVlLnRvRXhwb25lbnRpYWwoKSkudG9QcmVjaXNpb24oMyl9YClcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiKlwiKS5jbGFzc2VkKCdoaWdobGlnaHRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgIC8vIGlzb2Zvcm0gbGFiZWxzXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLXlsYWJlbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBoaWdobGlnaHQgdGhlIGlzb2Zvcm0gdHJhY2tcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZC5yZXBsYWNlKFwiLlwiLCBcIl9cIik7IC8vIGRvdCBpcyBub3QgYW4gYWxsb3dhYmxlIGNoYXJhY3Rlciwgc28gaXQgaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBhbiB1bmRlcnNjb3JlXG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0KGAjJHtpZH1gKS5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTsgLy8gVE9ETzogcGVyaGFwcyBjaGFuZ2UgdGhlIGNsYXNzIG5hbWU/XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhvbi1jdXJhdGVkXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIH0pO1xufVxuXG5cblxuLyoqXG4gKiBjdXN0b21pemluZyB0aGUgaGVhdG1hcFxuICogZGVwZW5kZW5jaWVzOiBDU1MgY2xhc3NlcyBmcm9tIGV4cHJlc3NNYXAuY3NzLCBqdW5jdGlvbk1hcC5jc3NcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiBHVEV4IHRpc3N1ZSBvYmplY3RzIHdpdGggYXR0cjogY29sb3JIZXgsIHRpc3N1ZUlkLCB0aXNzdWVOYW1lXG4gKiBAcGFyYW0gZ2VuZU1vZGVsIHtHZW5lTW9kZWx9IG9mIHRoZSBjb2xsYXBzZWQgZ2VuZSBtb2RlbFxuICogQHBhcmFtIGRtYXAge09iamVjdH0gb2YgRGVuZHJvSGVhdG1hcFxuICogQHBhcmFtIGpkYXRhIHtMaXN0fSBvZiBqdW5jdGlvbiBleHByZXNzaW9uIGRhdGEgb2JqZWN0c1xuICogQHBhcmFtIGVkYXRhIHtMaXN0fSBvZiBleG9uIGV4cHJlc3Npb24gZGF0YSBvYmplY3RzXG4gKiBAcGFyYW0gaWRhdGEge0xpc3R9IG9mIGlzb2Zvcm0gZXhwcmVzc2lvbiBkYXRhIG9iamVjdHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jdXN0b21pemVIZWF0TWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCwgaXNvVHJhY2tWaWV3ZXIsIGp1bmN0aW9uU2NhbGUsIGV4b25TY2FsZSwgaXNvZm9ybVNjYWxlLCBqdW5jdGlvbkRhdGEsIGV4b25EYXRhLCBpc29mb3JtRGF0YSl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0aXNzdWVEaWN0ID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuXG4gICAgLy8gcmVwbGFjZSB0aXNzdWUgSUQgd2l0aCB0aXNzdWUgbmFtZVxuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIilcbiAgICAgICAgLnRleHQoKGQpPT50aXNzdWVEaWN0W2RdIT09dW5kZWZpbmVkP3Rpc3N1ZURpY3RbZF0udGlzc3VlTmFtZTpkKVxuICAgICAgICAuc3R5bGUoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUucmFuZ2UoKVsxXSArIDE1KTsgLy8gbWFrZSByb29tIGZvciB0aXNzdWUgY29sb3IgYm94ZXNcblxuICAgIC8vIGFkZCB0aXNzdWUgYmFuZHNcbiAgICBtYXBTdmcuc2VsZWN0KFwiI2hlYXRtYXBcIikuc2VsZWN0QWxsKFwiLmV4cC1tYXAteWNvbG9yXCIpXG4gICAgICAgIC5kYXRhKGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5kb21haW4oKSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGRtYXAub2JqZWN0cy5oZWF0bWFwLnhTY2FsZS5yYW5nZSgpWzFdICsgNSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIChkKT0+ZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlKGQpKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIDUpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGRtYXAub2JqZWN0cy5oZWF0bWFwLnlTY2FsZS5iYW5kd2lkdGgoKSlcbiAgICAgICAgLmNsYXNzZWQoXCJleHAtbWFwLXljb2xvclwiLCB0cnVlKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKT0+YCMke3Rpc3N1ZURpY3RbZF0uY29sb3JIZXh9YCk7XG5cbiAgICBpZiAoZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLmRvbWFpbigpLmxlbmd0aCA+IDE1KSB7XG4gICAgICAgIC8vIEFkZCBhbiBleHRyYSB0aXNzdWUgY29sb3IgYmFuZCBpZiB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgYXJlIGxhcmdlciB0aGFuIDE1XG4gICAgICAgIG1hcFN2Zy5zZWxlY3QoXCIjaGVhdG1hcFwiKS5zZWxlY3RBbGwoXCIubGVhZi1jb2xvclwiKVxuICAgICAgICAgICAgLmRhdGEoZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlLmRvbWFpbigpKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueFNjYWxlLnJhbmdlKClbMF0gLSAxMClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlKGQpKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA1KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZG1hcC5vYmplY3RzLmhlYXRtYXAueVNjYWxlLmJhbmR3aWR0aCgpKVxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsZWFmLWNvbG9yXCIsIHRydWUpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkKSA9PiBgIyR7dGlzc3VlRGljdFtkXS5jb2xvckhleH1gKTtcbiAgICB9XG5cbiAgICAvLyBkZWZpbmUgdGlzc3VlIGxhYmVsIG1vdXNlIGV2ZW50c1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC15bGFiZWxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteWxhYmVsXCIpLmNsYXNzZWQoXCJjbGlja2VkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiY2xpY2tlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHRpc3N1ZSA9IGQ7XG4gICAgICAgICAgICBjb25zdCBqID0ganVuY3Rpb25EYXRhLmZpbHRlcigoaik9PmoudGlzc3VlSWQ9PXRpc3N1ZSk7IC8vIGp1bmN0aW9uIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IGV4ID0gZXhvbkRhdGEuZmlsdGVyKChlKT0+ZS50aXNzdWVJZD09dGlzc3VlKTsgLy8gZXhvbiBkYXRhXG4gICAgICAgICAgICBnZW5lTW9kZWwuY2hhbmdlVGV4dGxhYmVsKG1hcFN2Zy5zZWxlY3QoXCIjZ2VuZU1vZGVsXCIpLCB0aXNzdWUpO1xuICAgICAgICAgICAgZ2VuZU1vZGVsLmFkZERhdGEobWFwU3ZnLnNlbGVjdChcIiNnZW5lTW9kZWxcIiksIGosIGV4LCBqdW5jdGlvblNjYWxlLCBleG9uU2NhbGUpO1xuXG4gICAgICAgICAgICAvLyBpc29mb3JtcyB1cGRhdGVcblxuICAgICAgICAgICAgY29uc3QgaXNvQmFyU2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAgICAgLmRvbWFpbihbbWluKGlzb2Zvcm1EYXRhLm1hcChkPT5kLnZhbHVlKSksIG1heChpc29mb3JtRGF0YS5tYXAoZD0+ZC52YWx1ZSkpXSlcbiAgICAgICAgICAgICAgICAucmFuZ2UoWzAsIC0xMDBdKTtcbiAgICAgICAgICAgIGNvbnN0IGlzb0RhdGEgPSBpc29mb3JtRGF0YS5maWx0ZXIoKGlzbyk9Pmlzby50aXNzdWVJZD09dGlzc3VlKTtcbiAgICAgICAgICAgIGlzb1RyYWNrVmlld2VyLnNob3dEYXRhKGlzb0RhdGEsIGlzb2Zvcm1TY2FsZSwgaXNvQmFyU2NhbGUpO1xuICAgICAgICB9KTtcbn1cblxuLyoqXG4gKiBjdXN0b21pemluZyB0aGUgaXNvZm9ybSBoZWF0IG1hcFxuICogQHBhcmFtIHRpc3N1ZXMge0xpc3R9IG9mIHRoZSBHVEV4IHRpc3N1ZSBvYmplY3RzIHdpdGggYXR0cjogdGlzc3VlTmFtZVxuICogQHBhcmFtIGdlbmVNb2RlbCB7R2VuZU1vZGVsfVxuICogQHBhcmFtIGRtYXAge0RlbmRyb0hlYXRtYXB9XG5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jdXN0b21pemVJc29mb3JtTWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZUlkXSA9IGQ7IHJldHVybiBhcnI7fSx7fSk7XG5cbiAgICAvLyBkZWZpbmUgdGhlIGlzb2Zvcm0gaGVhdG1hcCBjZWxscycgbW91c2UgZXZlbnRzXG4gICAgLy8gbm90ZTogdG8gcmVmZXJlbmNlIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgZnVuY3Rpb24gKGUuZy4gZDMuc2VsZWN0KHRoaXMpKSBoZXJlIHdlIG11c3QgdXNlIGEgbm9ybWFsIGFub255bW91cyBmdW5jdGlvbi5cbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAtY2VsbFwiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHNlbGVjdCh0aGlzKTsgLy8gJ3RoaXMnIHJlZmVycyB0byB0aGUgZDMgRE9NIG9iamVjdFxuICAgICAgICAgICAgZG1hcC5vYmplY3RzLmhlYXRtYXAuY2VsbE1vdXNlb3ZlcihzZWxlY3RlZCk7XG4gICAgICAgICAgICBjb25zdCB0aXNzdWUgPSB0aXNzdWVEaWN0W2QueV0gPT09IHVuZGVmaW5lZD9kLnk6dGlzc3VlRGljdFtkLnldLnRpc3N1ZU5hbWU7IC8vIGdldCB0aXNzdWUgbmFtZSBvciBJRFxuICAgICAgICAgICAgdG9vbHRpcC5zaG93KGBUaXNzdWU6ICR7dGlzc3VlfTxici8+IElzb2Zvcm06ICR7ZC5pZH08YnIvPiAke2QudW5pdH06ICR7cGFyc2VGbG9hdChkLm9yaWdpbmFsVmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbigzKX1gKVxuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIqXCIpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgdG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgLy8gaXNvZm9ybSBsYWJlbHNcbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4cC1tYXAteGxhYmVsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIGhpZ2hsaWdodCB0aGUgaXNvZm9ybSB0cmFja1xuICAgICAgICAgICAgY29uc3QgaWQgPSBkLnJlcGxhY2UoXCIuXCIsIFwiX1wiKTsgLy8gZG90IGlzIG5vdCBhbiBhbGxvd2FibGUgY2hhcmFjdGVyLCBzbyBpdCBoYXMgYmVlbiByZXBsYWNlZCB3aXRoIGFuIHVuZGVyc2NvcmVcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3QoYCMke2lkfWApLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpOyAvLyBUT0RPOiBwZXJoYXBzIGNoYW5nZSB0aGUgY2xhc3MgbmFtZT9cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfSk7XG59XG5cbi8qKlxuICogY3VzdG9taXppbmcgdGhlIGV4b24gaGVhdCBtYXBcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiB0aGUgR1RFeCB0aXNzdWUgb2JqZWN0cyB3aXRoIGF0dHI6IHRpc3N1ZU5hbWVcbiAqIEBwYXJhbSBnZW5lTW9kZWwge0dlbmVNb2RlbH1cbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY3VzdG9taXplRXhvbk1hcCh0aXNzdWVzLCBnZW5lTW9kZWwsIGRtYXApe1xuICAgIGNvbnN0IG1hcFN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgY29uc3QgdG9vbHRpcCA9IGRtYXAudG9vbHRpcDtcbiAgICBjb25zdCB0aXNzdWVEaWN0ID0gdGlzc3Vlcy5yZWR1Y2UoKGFyciwgZCk9PnthcnJbZC50aXNzdWVJZF0gPSBkOyByZXR1cm4gYXJyO30se30pO1xuXG4gICAgLy8gZGVmaW5lIHRoZSBleG9uIGhlYXRtYXAgY2VsbHMnIG1vdXNlIGV2ZW50c1xuICAgIC8vIG5vdGU6IHRvIHJlZmVyZW5jZSB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGZ1bmN0aW9uIChlLmcuIGQzLnNlbGVjdCh0aGlzKSkgaGVyZSB3ZSBtdXN0IHVzZSBhIG5vcm1hbCBhbm9ueW1vdXMgZnVuY3Rpb24uXG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leHAtbWFwLWNlbGxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBzZWxlY3QodGhpcyk7IC8vICd0aGlzJyByZWZlcnMgdG8gdGhlIGQzIERPTSBvYmplY3RcbiAgICAgICAgICAgIGRtYXAub2JqZWN0cy5oZWF0bWFwLmNlbGxNb3VzZW92ZXIoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgY29uc3QgdGlzc3VlID0gdGlzc3VlRGljdFtkLnldID09PSB1bmRlZmluZWQ/ZC54OnRpc3N1ZURpY3RbZC55XS50aXNzdWVOYW1lOyAvLyBnZXQgdGlzc3VlIG5hbWUgb3IgSURcbiAgICAgICAgICAgIHRvb2x0aXAuc2hvdyhgVGlzc3VlOiAke3Rpc3N1ZX08YnIvPiBFeG9uOiAke2QuZXhvbklkfTxici8+ICR7ZC51bml0fTogJHtwYXJzZUZsb2F0KGQub3JpZ2luYWxWYWx1ZS50b0V4cG9uZW50aWFsKCkpLnRvUHJlY2lzaW9uKDMpfWApXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChcIipcIikuY2xhc3NlZCgnaGlnaGxpZ2h0ZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyBleG9uIGxhYmVsc1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBleG9uIG9uIHRoZSBnZW5lIG1vZGVsXG4gICAgICAgICAgICBjb25zdCBleG9uTnVtYmVyID0gZC5zcGxpdChcIl9cIilbMV07XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKGAuZXhvbiR7ZXhvbk51bWJlcn1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhvblwiKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICB9KTtcbn1cblxuLyoqXG4gKiBjdXN0b21pemluZyB0aGUganVuY3Rpb24gaGVhdCBtYXBcbiAqIEBwYXJhbSB0aXNzdWVzIHtMaXN0fSBvZiB0aGUgR1RFeCB0aXNzdWUgb2JqZWN0cyB3aXRoIGF0dHI6IHRpc3N1ZU5hbWVcbiAqIEBwYXJhbSBnZW5lTW9kZWwge0dlbmVNb2RlbH1cbiAqIEBwYXJhbSBkbWFwIHtEZW5kcm9IZWF0bWFwfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2N1c3RvbWl6ZUp1bmN0aW9uTWFwKHRpc3N1ZXMsIGdlbmVNb2RlbCwgZG1hcCl7XG4gICAgY29uc3QgbWFwU3ZnID0gZG1hcC52aXN1YWxDb21wb25lbnRzLnN2ZztcbiAgICBjb25zdCB0b29sdGlwID0gZG1hcC50b29sdGlwO1xuICAgIGNvbnN0IHRpc3N1ZURpY3QgPSB0aXNzdWVzLnJlZHVjZSgoYXJyLCBkKT0+e2FycltkLnRpc3N1ZUlkXSA9IGQ7IHJldHVybiBhcnI7fSx7fSk7XG5cbiAgICAvLyBkZWZpbmUgdGhlIGp1bmN0aW9uIGhlYXRtYXAgY2VsbHMnIG1vdXNlIGV2ZW50c1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC1jZWxsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0KHRoaXMpO1xuICAgICAgICAgICAgZG1hcC5vYmplY3RzLmhlYXRtYXAuY2VsbE1vdXNlb3ZlcihzZWxlY3RlZCk7XG4gICAgICAgICAgICBjb25zdCB0aXNzdWUgPSB0aXNzdWVEaWN0W2QueV0gPT09IHVuZGVmaW5lZD9kLng6dGlzc3VlRGljdFtkLnldLnRpc3N1ZU5hbWU7IC8vIGdldCB0aXNzdWUgbmFtZSBvciBJRFxuICAgICAgICAgICAgY29uc3QganVuYyA9IGdlbmVNb2RlbC5qdW5jdGlvbnMuZmlsdGVyKChqKT0+ai5qdW5jdGlvbklkID09IGQueCAmJiAhai5maWx0ZXJlZClbMF07XG4gICAgICAgICAgICB0b29sdGlwLnNob3coYFRpc3N1ZTogJHt0aXNzdWV9PGJyLz4gSnVuY3Rpb246ICR7anVuYy5kaXNwbGF5TmFtZX08YnIvPiAke2QudW5pdH06ICR7cGFyc2VGbG9hdChkLm9yaWdpbmFsVmFsdWUudG9FeHBvbmVudGlhbCgpKS50b1ByZWNpc2lvbig0KX1gKVxuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIqXCIpLmNsYXNzZWQoJ2hpZ2hsaWdodGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgdG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgIC8vIGp1bmN0aW9uIGxhYmVsc1xuICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhwLW1hcC14bGFiZWxcIilcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGFkZCBqdW5jdGlvbiBJRCBhcyB0aGUgZG9tIGlkXG4gICAgICAgICAgICBjb25zdCB4bGFiZWwgPSBzZWxlY3QodGhpcyk7XG4gICAgICAgICAgICBjb25zdCBqSWQgPSB4bGFiZWwudGV4dCgpO1xuICAgICAgICAgICAgeGxhYmVsLmF0dHIoXCJpZFwiLCBgJHtqSWR9YCk7XG4gICAgICAgICAgICB4bGFiZWwuY2xhc3NlZChganVuYyR7aklkfWAsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBhbmQgdGhlbiBjaGFuZ2UgdGhlIHRleHQgdG8gc3RhcnRFeG9uLWVuZEV4b24gZm9ybWF0XG4gICAgICAgICAgICBjb25zdCBqdW5jID0gZ2VuZU1vZGVsLmp1bmN0aW9ucy5maWx0ZXIoKGQpPT5kLmp1bmN0aW9uSWQgPT0gYCR7aklkfWAgJiYgIWQuZmlsdGVyZWQpWzBdO1xuICAgICAgICAgICAgaWYgKGp1bmMgIT09IHVuZGVmaW5lZCkgeGxhYmVsLnRleHQoanVuYy5kaXNwbGF5TmFtZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY29uc3QgaklkID0gc2VsZWN0KHRoaXMpLmF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIGhpZ2hsaWdodCB0aGUganVuY3Rpb24gYW5kIGl0cyBleG9ucyBvbiB0aGUgZ2VuZSBtb2RlbFxuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChgLmp1bmMke2pJZH1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBqdW5jID0gZ2VuZU1vZGVsLmp1bmN0aW9ucy5maWx0ZXIoKGQpPT5kLmp1bmN0aW9uSWQgPT0gaklkICYmICFkLmZpbHRlcmVkKVswXTtcbiAgICAgICAgICAgIGlmIChqdW5jICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKGAuZXhvbiR7anVuYy5zdGFydEV4b24uZXhvbk51bWJlcn1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdEFsbChgLmV4b24ke2p1bmMuZW5kRXhvbi5leG9uTnVtYmVyfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgc2VsZWN0QWxsKFwiLmp1bmNcIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGVjdEFsbChcIi5qdW5jLWN1cnZlXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4b25cIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmp1bmNcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0QWxsKGAuanVuYyR7ZC5qdW5jdGlvbklkfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBKdW5jdGlvbiAke2QuanVuY3Rpb25JZH06ICR7ZC5jaHJvbVN0YXJ0fSAtICR7ZC5jaHJvbUVuZH1gKTtcblxuICAgICAgICAgICAgaWYgKGQuc3RhcnRFeG9uICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIuZXhvblwiKS5maWx0ZXIoYC5leG9uJHtkLnN0YXJ0RXhvbi5leG9uTnVtYmVyfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4b25cIikuZmlsdGVyKGAuZXhvbiR7ZC5lbmRFeG9uLmV4b25OdW1iZXJ9YCkuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIG9uIHRoZSBqdW5jdGlvbiBoZWF0IG1hcCwgbGFiZWwgdGhlIHhsYWJlbFxuICAgICAgICAgICAgbWFwU3ZnLnNlbGVjdChgLmp1bmMke2QuanVuY3Rpb25JZH1gKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcIm5vcm1hbFwiLCBmYWxzZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0QWxsKGAuanVuYyR7ZC5qdW5jdGlvbklkfWApLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICBtYXBTdmcuc2VsZWN0QWxsKFwiLmV4b25cIikuY2xhc3NlZChcImhpZ2hsaWdodGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIG1hcFN2Zy5zZWxlY3RBbGwoXCIueExhYmVsXCIpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcIm5vcm1hbFwiLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgbWFwU3ZnLnNlbGVjdEFsbChcIi5leG9uLWN1cmF0ZWRcIilcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRXhvbiAke2QuZXhvbk51bWJlcn06ICR7ZC5jaHJvbVN0YXJ0fSAtICR7ZC5jaHJvbUVuZH0uIFJQSzogJHtkLm9yaWdpbmFsVmFsdWV9YClcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRlZFwiLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG59XG5cbmZ1bmN0aW9uIF9hZGRDb2xvckxlZ2VuZHNGb3JHZW5lTW9kZWwoZG1hcCwganVuY3Rpb25TY2FsZSwgZXhvblNjYWxlLCBpc29mb3JtU2NhbGUpe1xuICAgIGNvbnN0IG1hcFN2ZyA9IGRtYXAudmlzdWFsQ29tcG9uZW50cy5zdmc7XG4gICAgbGV0IFggPSBkbWFwLm9iamVjdHMuaGVhdG1hcC54U2NhbGUucmFuZ2UoKVsxXSArIDUwO1xuICAgIGNvbnN0IFkgPSAzMDtcbiAgICBjb25zdCBpbmMgPSA1MDtcbiAgICBkcmF3Q29sb3JMZWdlbmQoXCJFeG9uIHJlYWQgY291bnRzIHBlciBiYXNlXCIsIG1hcFN2Zy5zZWxlY3QoXCIjZ2VuZU1vZGVsXCIpLCBleG9uU2NhbGUsIHt4OiBYLCB5Oll9LCB0cnVlLCA1LCAyLCB7aDoyMCwgdzoxMH0sICd2Jyk7XG5cbiAgICBYID0gWCArIGluYztcbiAgICBkcmF3Q29sb3JMZWdlbmQoXCJKdW5jdGlvbiByZWFkIGNvdW50c1wiLCBtYXBTdmcuc2VsZWN0KFwiI2dlbmVNb2RlbFwiKSwganVuY3Rpb25TY2FsZSwge3g6IFgsIHk6WX0sIHRydWUsIDUsIDEwLCB7aDoyMCwgdzoxMH0sICd2Jyk7XG5cbiAgICAvLyBYID0gWCArIGluYztcbiAgICAvLyBkcmF3Q29sb3JMZWdlbmQoXCJJc29mb3JtIFRQTVwiLCBtYXBTdmcuc2VsZWN0KFwiI2dlbmVNb2RlbFwiKSwgaXNvZm9ybVNjYWxlLCB7eDogWCwgeTpZfSwgdHJ1ZSwgNSwgMTAsIHtoOjIwLCB3OjEwfSwgJ3YnKTtcblxufSJdLCJuYW1lcyI6WyJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJuYW1lIiwicHJlZml4IiwiaSIsImluZGV4T2YiLCJzbGljZSIsIm5hbWVzcGFjZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInNwYWNlIiwibG9jYWwiLCJmdWxsbmFtZSIsIm5hbWVzcGFjZSIsInRoaXMiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwibm9uZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImVtcHR5IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiZWxlbWVudCIsInZlbmRvck1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJjYWxsIiwidXBkYXRlIiwiQXJyYXkiLCJsZW5ndGgiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiZGVmYXVsdFZpZXciLCJzdHlsZVZhbHVlIiwic3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNsYXNzQXJyYXkiLCJzdHJpbmciLCJ0cmltIiwic3BsaXQiLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImdldEF0dHJpYnV0ZSIsImNsYXNzZWRBZGQiLCJuYW1lcyIsImxpc3QiLCJuIiwiYWRkIiwiY2xhc3NlZFJlbW92ZSIsInJlbW92ZSIsInB1c2giLCJzZXRBdHRyaWJ1dGUiLCJqb2luIiwic3BsaWNlIiwiY29udGFpbnMiLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwicmFpc2UiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZU5vZGUiLCJzZWxlY3Rpb25fY2xvbmVEZWVwIiwiZmlsdGVyRXZlbnRzIiwiZXZlbnQiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsImZpbHRlckNvbnRleHRMaXN0ZW5lciIsImxpc3RlbmVyIiwiaW5kZXgiLCJjb250ZXh0TGlzdGVuZXIiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXZlbnQxIiwiZXZlbnQwIiwib25SZW1vdmUiLCJ0eXBlbmFtZSIsIm9uIiwiX19vbiIsIm8iLCJqIiwibSIsInR5cGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FwdHVyZSIsIm9uQWRkIiwidmFsdWUiLCJ3cmFwIiwiZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwicm9vdCIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3Rpb24iLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJzZWxlY3RvckFsbCIsImZpbHRlciIsIm1hdGNoIiwic2l6ZSIsImVhY2giLCJ4IiwiYmluZCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsInByZXZpb3VzIiwiaTAiLCJpMSIsIl9lbnRlciIsIl9leGl0IiwibWFwIiwic3BhcnNlIiwibWVyZ2UiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJNYXRoIiwibWluIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwib3JkZXIiLCJzb3J0IiwiY29tcGFyZSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsImNhbGxiYWNrIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJub2RlcyIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwidiIsInNldEF0dHJpYnV0ZU5TIiwicHJpb3JpdHkiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwicHJvcGVydHkiLCJjbGFzc2VkIiwidGV4dCIsImh0bWwiLCJhcHBlbmQiLCJjcmVhdGUiLCJjcmVhdG9yIiwiaW5zZXJ0IiwiYmVmb3JlIiwiY2xvbmUiLCJkZWVwIiwidCIsInR5cGVuYW1lcyIsInBhcnNlVHlwZW5hbWVzIiwiZGlzcGF0Y2giLCJFT0wiLCJFT0YiLCJRVU9URSIsIk5FV0xJTkUiLCJSRVRVUk4iLCJvYmplY3RDb252ZXJ0ZXIiLCJjb2x1bW5zIiwiRnVuY3Rpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJSZWdFeHAiLCJERUxJTUlURVIiLCJjaGFyQ29kZUF0IiwicGFyc2VSb3dzIiwiZiIsInJvd3MiLCJOIiwiSSIsImVvZiIsImVvbCIsInRva2VuIiwiYyIsInJlcGxhY2UiLCJyb3ciLCJmb3JtYXRSb3ciLCJmb3JtYXRWYWx1ZSIsInRlc3QiLCJwYXJzZSIsImNvbnZlcnQiLCJvYmplY3QiLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXQiLCJjb2x1bW5TZXQiLCJPYmplY3QiLCJmb3JFYWNoIiwiY29sdW1uIiwiaW5mZXJDb2x1bW5zIiwiY29uY2F0IiwiZm9ybWF0Um93cyIsImRzdiIsInJlc3BvbnNlSnNvbiIsInJlc3BvbnNlIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJqc29uIiwiaW5wdXQiLCJpbml0IiwiZmV0Y2giLCJ0aGVuIiwiYmlzZWN0UmlnaHQiLCJsZWZ0IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0Iiwic3RhcnQiLCJzdG9wIiwic3RlcCIsIm1heCIsImNlaWwiLCJyYW5nZSIsImUxMCIsInNxcnQiLCJlNSIsImUyIiwiY291bnQiLCJyZXZlcnNlIiwidGlja3MiLCJ0aWNrSW5jcmVtZW50IiwiaXNGaW5pdGUiLCJmbG9vciIsInBvd2VyIiwibG9nIiwiTE4xMCIsImVycm9yIiwicG93IiwidmFsdWVzIiwidmFsdWVvZiIsInN1bSIsIk1hcCIsInNldCIsImlzQXJyYXkiLCJoYXMiLCJnZXQiLCJjbGVhciIsImtleXMiLCJlbnRyaWVzIiwic29ydFZhbHVlcyIsInJvbGx1cCIsIm5lc3QiLCJzb3J0S2V5cyIsImFycmF5IiwiZGVwdGgiLCJjcmVhdGVSZXN1bHQiLCJzZXRSZXN1bHQiLCJ2YWx1ZXNCeUtleSIsInJlc3VsdCIsImNyZWF0ZU9iamVjdCIsInNldE9iamVjdCIsImNyZWF0ZU1hcCIsInNldE1hcCIsInNvcnRLZXkiLCJrIiwiaW1wbGljaXQiLCJiYW5kIiwiYmFuZHdpZHRoIiwic2NhbGUiLCJvcmRpbmFsIiwiZG9tYWluIiwidW5rbm93biIsIl8iLCJjb3B5IiwidW5kZWZpbmVkIiwib3JkaW5hbFJhbmdlIiwicm91bmQiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJhbGlnbiIsInJlc2NhbGUiLCJzZXF1ZW5jZSIsInJhbmdlUm91bmQiLCJwYWRkaW5nIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJDb2xvciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4MyIsInJlSGV4NiIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvciIsInRvTG93ZXJDYXNlIiwiZXhlYyIsIlJnYiIsInBhcnNlSW50IiwicmdibiIsInJnYmEiLCJoc2xhIiwiciIsImciLCJyZ2JDb252ZXJ0IiwicmdiIiwib3BhY2l0eSIsImgiLCJzIiwibCIsIkhzbCIsImhzbDJyZ2IiLCJtMiIsImRlZmluZSIsImRpc3BsYXlhYmxlIiwidG9TdHJpbmciLCJicmlnaHRlciIsImRhcmtlciIsImlzTmFOIiwiaHNsQ29udmVydCIsImRlZzJyYWQiLCJQSSIsInJhZDJkZWciLCJYbiIsIlluIiwiWm4iLCJ0MCIsInQxIiwidDIiLCJ0MyIsImxhYkNvbnZlcnQiLCJMYWIiLCJIY2wiLCJjb3MiLCJzaW4iLCJyZ2IyeHl6IiwieHl6MmxhYiIsInkiLCJsYWIyeHl6IiwieHl6MnJnYiIsInoiLCJhdGFuMiIsImhjbENvbnZlcnQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeCIsIkN1YmVoZWxpeCIsImJsIiwiY3ViZWhlbGl4Q29udmVydCIsImJhc2lzIiwidjAiLCJ2MSIsInYyIiwidjMiLCJjb3NoIiwic2luaCIsImxpbmVhciIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29uc3RhbnQiLCJyZ2JHYW1tYSIsImVuZCIsImNvbG9yUmdiIiwicmdiU3BsaW5lIiwic3BsaW5lIiwiY29sb3JzIiwicmdiQmFzaXMiLCJyZUEiLCJyZUIiLCJzb3VyY2UiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiYW0iLCJibSIsImJzIiwiYmkiLCJsYXN0SW5kZXgiLCJxIiwibnVtYmVyIiwib25lIiwiemVybyIsIkRhdGUiLCJzZXRUaW1lIiwibmIiLCJuYSIsInZhbHVlT2YiLCJkZWdyZWVzIiwiaWRlbnRpdHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInRyYW5zbGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwidHJhbnNmb3JtIiwiZGVjb21wb3NlIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJtYXRyaXgiLCJodWUiLCJjdWJlaGVsaXhHYW1tYSIsImNvbG9yQ3ViZWhlbGl4IiwiY3ViZWhlbGl4JDEiLCJjdWJlaGVsaXhMb25nIiwidW5pdCIsImRlaW50ZXJwb2xhdGVMaW5lYXIiLCJiaW1hcCIsImRlaW50ZXJwb2xhdGUiLCJyZWludGVycG9sYXRlIiwiZDAiLCJkMSIsInIwIiwicjEiLCJwb2x5bWFwIiwiYmlzZWN0IiwicHJlZml4RXhwb25lbnQiLCJwIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwiZm9ybWF0RGVjaW1hbCIsImFicyIsImV4cG9uZW50IiwidG9QcmVjaXNpb24iLCJvdXQiLCIlIiwidG9GaXhlZCIsImZvcm1hdFJvdW5kZWQiLCJYIiwidG9VcHBlckNhc2UiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsImZvcm1hdFR5cGVzIiwibG9jYWxlIiwiZm9ybWF0UHJlZml4IiwicHJlZml4ZXMiLCJncm91cGluZyIsInRob3VzYW5kcyIsInN1YnN0cmluZyIsImN1cnJlbmN5IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwiZm9ybWF0TnVtZXJhbHMiLCJwZXJjZW50IiwibmV3Rm9ybWF0Iiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJJbmZpbml0eSIsImZvcm1hdExvY2FsZSIsInN0ZXAwIiwic3RlcDEiLCJ0aWNrU3RlcCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJ0aWNrRm9ybWF0IiwibmljZSIsInBpZWNld2lzZSIsIm91dHB1dCIsImludGVycG9sYXRlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImNsYW1wIiwiZGVpbnRlcnBvbGF0ZUNsYW1wIiwiaW52ZXJ0IiwicmVpbnRlcnBvbGF0ZUNsYW1wIiwiaW50ZXJwb2xhdGVSb3VuZCIsImNvbnRpbnVvdXMiLCJuZXdJbnRlcnZhbCIsImZsb29yaSIsIm9mZnNldGkiLCJmaWVsZCIsImludGVydmFsIiwiZGF0ZSIsIm9mZnNldCIsImV2ZXJ5IiwibWlsbGlzZWNvbmQiLCJkdXJhdGlvbk1pbnV0ZSIsImR1cmF0aW9uV2VlayIsImRheSIsImdldFVUQ1NlY29uZHMiLCJnZXRNaW51dGVzIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRIb3VycyIsInNldEhvdXJzIiwic2V0RGF0ZSIsImdldERhdGUiLCJ3ZWVrZGF5IiwiZ2V0RGF5Iiwic3VuZGF5IiwibW9uZGF5IiwidGh1cnNkYXkiLCJ5ZWFyIiwic2V0TW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJzZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENIb3VycyIsInV0Y0RheSIsInNldFVUQ0hvdXJzIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJ1dGNXZWVrZGF5IiwiZ2V0VVRDRGF5IiwidXRjU3VuZGF5IiwidXRjTW9uZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNZZWFyIiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJsb2NhbERhdGUiLCJIIiwiTSIsIlMiLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld1llYXIiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsInBhZHMiLCItIiwiMCIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicGFkIiwicmVxdW90ZSIsImZvcm1hdFJlIiwiZm9ybWF0TG9va3VwIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwidyIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInUiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJVIiwicGFyc2VXZWVrTnVtYmVySVNPIiwiViIsInBhcnNlV2Vla051bWJlck1vbmRheSIsIlciLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJ0aW1lRGF5IiwidGltZVllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJmb3JtYXRXZWVrTnVtYmVyU3VuZGF5IiwidGltZVN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJJU08iLCJ0aW1lVGh1cnNkYXkiLCJmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlck1vbmRheSIsInRpbWVNb25kYXkiLCJmb3JtYXRZZWFyIiwiZm9ybWF0RnVsbFllYXIiLCJmb3JtYXRab25lIiwiZm9ybWF0VVRDRGF5T2ZNb250aCIsImZvcm1hdFVUQ0hvdXIyNCIsImZvcm1hdFVUQ0hvdXIxMiIsImZvcm1hdFVUQ0RheU9mWWVhciIsImZvcm1hdFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImZvcm1hdFVUQ01pY3Jvc2Vjb25kcyIsImZvcm1hdFVUQ01vbnRoTnVtYmVyIiwiZm9ybWF0VVRDTWludXRlcyIsImZvcm1hdFVUQ1NlY29uZHMiLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZG93IiwiZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJJU08iLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSIsImZvcm1hdFVUQ1llYXIiLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ1pvbmUiLCJmb3JtYXRMaXRlcmFsUGVyY2VudCIsImZvcm1hdFVuaXhUaW1lc3RhbXAiLCJmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyIsImxvY2FsZV9kYXRlVGltZSIsImRhdGVUaW1lIiwibG9jYWxlX2RhdGUiLCJsb2NhbGVfdGltZSIsInRpbWUiLCJsb2NhbGVfcGVyaW9kcyIsInBlcmlvZHMiLCJsb2NhbGVfd2Vla2RheXMiLCJkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsInBlcmlvZExvb2t1cCIsIndlZWtkYXlSZSIsIndlZWtkYXlMb29rdXAiLCJzaG9ydFdlZWtkYXlSZSIsInNob3J0V2Vla2RheUxvb2t1cCIsIm1vbnRoUmUiLCJtb250aExvb2t1cCIsInNob3J0TW9udGhSZSIsInNob3J0TW9udGhMb29rdXAiLCJmb3JtYXRzIiwiWSIsInV0Y0Zvcm1hdHMiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsImNoYXJBdCIsIm5ld1BhcnNlIiwibmV3RGF0ZSIsIndlZWsiLCJkZWZhdWx0TG9jYWxlIiwidG9JU09TdHJpbmciLCJwYXJzZUV4b25zIiwiZmVhdHVyZVR5cGUiLCJjaHJvbVN0YXJ0IiwiY2hyb21FbmQiLCJzY2hlbWUiLCJpbnRlcnBvbGF0ZVJnYkJhc2lzIiwicmFtcCIsImludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyIsInJhbXAkMSIsInNldENvbG9yU2NhbGUiLCJkbWluIiwiZG1heCIsInNlcXVlbnRpYWwiLCJpbnRlcnBvbGF0b3IiLCJ4MCIsIngxIiwic2NhbGVTZXF1ZW50aWFsIiwiaW50ZXJwb2xhdG9ycyIsIkJ1R24iLCJkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUJ1R24iLCJPclJkIiwiZDNDaHJvbWF0aWMuaW50ZXJwb2xhdGVPclJkIiwiUHVCdSIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUHVCdSIsIllsR25CdSIsImQzQ2hyb21hdGljLmludGVycG9sYXRlWWxHbkJ1IiwiQmx1ZXMiLCJkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZUJsdWVzIiwiT3JhbmdlcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlT3JhbmdlcyIsIkdyZWVucyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlR3JlZW5zIiwiUHVycGxlcyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlUHVycGxlcyIsIlJlZHMiLCJkM0Nocm9tYXRpYy5pbnRlcnBvbGF0ZVJlZHMiLCJHcmV5cyIsImQzQ2hyb21hdGljLmludGVycG9sYXRlR3JleXMiLCJHcmF5cyIsImVyciIsImNvbnNvbGUiLCJnZXRDb2xvckludGVycG9sYXRvciIsImRyYXdDb2xvckxlZ2VuZCIsInRpdGxlIiwiZG9tIiwiY29uZmlnIiwidXNlTG9nIiwiYmFzZSIsImNlbGwiLCJvcmllbnRhdGlvbiIsIkRlbmRyb0hlYXRtYXBDb25maWciLCJbb2JqZWN0IE9iamVjdF0iLCJyb290VyIsImlubmVyV2lkdGgiLCJsZWZ0UGFuZWxXIiwidG9wUGFuZWxIIiwibWFyZ2luIiwidG9wIiwiYm90dG9tIiwiY2VsbEgiLCJhZGp1c3QiLCJsZWZ0VHJlZVBhbmVsIiwiaWQiLCJ0b3BUcmVlUGFuZWwiLCJoZWF0bWFwUGFuZWwiLCJsZWdlbmRQYW5lbCIsInBhbmVscyIsIm1haW4iLCJsZWdlbmQiLCJjaGlsZHJlbiIsImhpZXJhcmNoeSIsImNoaWxkcyIsIk5vZGUiLCJ2YWx1ZWQiLCJkZWZhdWx0Q2hpbGRyZW4iLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwiaGVpZ2h0IiwiZWFjaEFmdGVyIiwiY3VycmVudCIsInBhdGgiLCJhbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImxlYXN0Q29tbW9uQW5jZXN0b3IiLCJkZXNjZW5kYW50cyIsImxlYXZlcyIsImxpbmtzIiwidGFyZ2V0IiwiZXBzaWxvbiIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsImNvbnRleHQiLCJzcGFjaW5nIiwicmFuZ2UwIiwicmFuZ2UxIiwicG9zaXRpb24iLCJ0aWNrIiwidGlja0V4aXQiLCJ0aWNrRW50ZXIiLCJsaW5lIiwidHJhbnNpdGlvbiIsInRpY2tTaXplIiwidmVyYm9zZSIsIkRlbmRyb2dyYW0iLCJuZXdpY2siLCJwb3N0b3JkZXIiLCJ0cmVlIiwidG9rZW5zIiwic3VidHJlZSIsImJyYW5jaHNldCIsInBhcnNlRmxvYXQiLCJwYXJzZU5ld2ljayIsInhTY2FsZSIsInlTY2FsZSIsIl9zZXRYU2NhbGUiLCJfc2V0WVNjYWxlIiwiX2RyYXdIVHJlZSIsIl9kcmF3VlRyZWUiLCJzZXRZIiwicmVkdWNlIiwic2V0WCIsIl9nZXRCcmFuY2hMZW5ndGhUb1Jvb3QiLCJfc29ydE5vZGVzQnlMZXZlbCIsImlub2RlcyIsImQzIiwiX2Fzc2lnblBvc3RvcmRlciIsInNjYWxlTGluZWFyIiwiX2dldE1heEJyYW5jaExlbmd0aCIsInNjYWxlQmFuZCIsIm5vb3AiLCJEaXNwYXRjaCIsInR5cGVzIiwiVCIsInRoYXQiLCJhcmdzIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsImZyYW1lIiwidGltZW91dCIsInBva2VEZWxheSIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwidGltZXIiLCJkZWxheSIsInJlc3RhcnQiLCJ3YWtlIiwidGltZXJGbHVzaCIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIlR5cGVFcnJvciIsImVsYXBzZWQiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJzZWxmIiwidHdlZW4iLCJzdGF0ZSIsImR1cmF0aW9uIiwiZWFzZSIsInNjaGVkdWxlIiwidHdlZW5WYWx1ZSIsIl9pZCIsImludGVycG9sYXRlTnVtYmVyIiwiaW50ZXJwb2xhdGVSZ2IiLCJpbnRlcnBvbGF0ZVN0cmluZyIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJvbkZ1bmN0aW9uIiwiYXR0clR3ZWVuIiwidmFsdWUwMCIsInZhbHVlMTAiLCJpbnRlcnBvbGF0ZTAiLCJ2YWx1ZTAiLCJ2YWx1ZTEiLCJfdmFsdWUiLCJzdHlsZVR3ZWVuIiwic3R5bGVSZW1vdmUiLCJzdHlsZVJlbW92ZUVuZCIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZUNvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwidGV4dENvbnN0YW50IiwidHdlZW4wIiwidHdlZW4xIiwiZWFzZUNvbnN0YW50IiwiZGVmYXVsdFRpbWluZyIsImludGVycnVwdCIsImFjdGl2ZSIsIlRvb2xiYXIiLCJkb21JZCIsInRvb2x0aXAiLCJ2ZXJ0aWNhbCIsIiQiLCJzaG93IiwiYnRuQ2xhc3NlcyIsImJhciIsImFkZENsYXNzIiwiYXBwZW5kVG8iLCJidXR0b25zIiwic3ZnSWQiLCJvdXRmaWxlTmFtZSIsImNsb25lSWQiLCJpY29uIiwiY3JlYXRlQnV0dG9uIiwiZG93bmxvYWRTdmciLCJoaWRlIiwiJGJ1dHRvbiIsImZpbGVOYW1lIiwic3ZnT2JqIiwiJHN2Z0NvcHkiLCJzdHlsZXMiLCJ1c2VkIiwic2hlZXRzIiwic3R5bGVTaGVldHMiLCJjc3NSdWxlcyIsInJ1bGVzIiwicnVsZSIsImVsZW1zIiwiZmluZCIsInNlbGVjdG9yVGV4dCIsImNzc1RleHQiLCJwYXJzZUNzc1N0eWxlcyIsInByZXBlbmQiLCJzdmdIdG1sIiwic3ZnQmxvYiIsIkJsb2IiLCJzYXZlQXMiLCJUb29sdGlwIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJpbmZvIiwiZWRpdCIsIm1vdmUiLCJwYWdlWCIsInBhZ2VZIiwiSGVhdG1hcCIsImNvbG9yU2NoZW1lIiwibnVsbENvbG9yIiwiY29sb3JTY2FsZSIsInhMaXN0IiwieUxpc3QiLCJ0b29sYmFyIiwibGVnZW5kQ29uZmlnIiwiZGltZW5zaW9ucyIsImFuZ2xlIiwiX3NldFhMaXN0IiwiX3NldFlMaXN0IiwiZHJhdyIsInVzZU51bGxDb2xvciIsInhMYWJlbHMiLCJhbGVydCIsImNlbGxzIiwic2VsZWN0ZWQiLCJjZWxsTW91c2VvdmVyIiwiY2VsbE1vdXNlb3V0Iiwib3JpZ2luYWxWYWx1ZSIsInJvd0NsYXNzIiwiY29sQ2xhc3MiLCJuZXdMaXN0IiwiRGVuZHJvSGVhdG1hcCIsImNvbHVtblRyZWUiLCJyb3dUcmVlIiwiaGVhdG1hcERhdGEiLCJzdGFydHNXaXRoIiwiaGVhdG1hcCIsImV4dGVybmFsIiwib2JqZWN0cyIsInZpc3VhbENvbXBvbmVudHMiLCJzaG93Q29sdW1uVHJlZSIsInNob3dSb3dUcmVlIiwibGVnZW5kUG9zIiwiX3VwZGF0ZUNvbmZpZyIsImNyZWF0ZVN2ZyIsInhsaXN0IiwieWxpc3QiLCJfcmVuZGVyVHJlZSIsIl9yZW5kZXJIZWF0bWFwIiwiZGlyZWN0aW9uIiwibGFiZWxDbGFzcyIsImlkcyIsImxhYmVsIiwiaW5jbHVkZXMiLCJyZWRyYXciLCJwaSIsInRhdSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsInkxIiwiYmV6aWVyQ3VydmVUbyIsIngyIiwieTIiLCJhcmNUbyIsInkwIiwieDIxIiwieTIxIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwiYWNvcyIsInQwMSIsInQyMSIsImFyYyIsImEwIiwiYTEiLCJjY3ciLCJkeCIsImR5IiwiY3ciLCJkYSIsInJlY3QiLCJMaW5lYXIiLCJfY29udGV4dCIsImFyZWFTdGFydCIsIl9saW5lIiwiYXJlYUVuZCIsImxpbmVTdGFydCIsIl9wb2ludCIsImxpbmVFbmQiLCJwb2ludCIsInBvaW50WCIsInBvaW50WSIsImRlZmluZWQiLCJjdXJ2ZSIsImN1cnZlTGluZWFyIiwiYnVmZmVyIiwiZGVmaW5lZDAiLCJfayIsIl94MiIsIl95MiIsIkNhcmRpbmFsIiwidGVuc2lvbiIsImN1c3RvbSIsImNhcmRpbmFsIiwic2xvcGUzIiwiaDAiLCJoMSIsInMwIiwiczEiLCJzbG9wZTIiLCJNb25vdG9uZVgiLCJSZWZsZWN0Q29udGV4dCIsIl90MCIsIkdlbmVNb2RlbCIsImdlbmUiLCJleG9ucyIsImV4b25zQ3VyYXRlZCIsImp1bmN0aW9ucyIsImlzSXNvZm9ybSIsInN0cmFuZCIsIk51bWJlciIsImV4b25OdW1iZXIiLCJqdW5jdGlvbklkIiwiaW50cm9uTGVuZ3RoIiwibWluRXhvbldpZHRoIiwiamRhdGEiLCJlZGF0YSIsImpzY2FsZSIsImVzY2FsZSIsImpjb2xvciIsImV4b25JZCIsInNldFhzY2FsZSIsImV4b25ZIiwib3JpRXhvbiIsIl9maW5kRXhvbiIsImRpc3QiLCJ3YXJuIiwidHJhbnNjcmlwdElkIiwic3RhcnRFeG9uIiwiZW5kRXhvbiIsImRpc3BsYXlOYW1lIiwiZmlsdGVyZWQiLCJkaXN0MiIsInN0YXJ0WCIsImVuZFgiLCJjeCIsImN5IiwiY291bnRzIiwicmFuZG9tIiwiY3VydmVDYXJkaW5hbCIsImp1bmNEb3RzIiwiZXhvblJlY3RzIiwiZXhvblJlY3RzMiIsImdlbmVTeW1ib2wiLCJtYXhFeG9uTGVuZ3RoIiwibWluTGVuZ3RoIiwidG90YWxFeG9uTGVuZ3RoIiwicG9zIiwicmVzdWx0cyIsIklzb2Zvcm1UcmFja1ZpZXdlciIsImlzb2Zvcm1zIiwiaXNvZm9ybUV4b25zIiwibW9kZWxFeG9ucyIsInZpc3VhbERvbSIsImJhclNjYWxlIiwic29ydFRyYWNrcyIsImxvbGxpcG9wR3JhcGgiLCJheGlzUmlnaHQiLCJzZXRZc2NhbGUiLCJyZW5kZXIiLCJpc29UcmFja3MiLCJfcmVuZGVyTW9kZWxzIiwiaXNvZm9ybSIsIm1vZGVsIiwiaXNvZm9ybUciLCJfY3VzdG9taXplSGVhdE1hcCIsInRpc3N1ZXMiLCJnZW5lTW9kZWwiLCJkbWFwIiwiaXNvVHJhY2tWaWV3ZXIiLCJqdW5jdGlvblNjYWxlIiwiZXhvblNjYWxlIiwiaXNvZm9ybVNjYWxlIiwianVuY3Rpb25EYXRhIiwiZXhvbkRhdGEiLCJpc29mb3JtRGF0YSIsIm1hcFN2ZyIsInRpc3N1ZURpY3QiLCJhcnIiLCJ0aXNzdWVJZCIsInRpc3N1ZU5hbWUiLCJjb2xvckhleCIsInRpc3N1ZSIsImV4IiwiY2hhbmdlVGV4dGxhYmVsIiwiYWRkRGF0YSIsImlzb0JhclNjYWxlIiwiaXNvRGF0YSIsImlzbyIsInNob3dEYXRhIiwiZ2VuZUlkIiwicm9vdElkIiwidXJscyIsImhvc3QiLCJkeW5lcXRsIiwiZXhvbkV4cCIsImdlbmVFeHAiLCJnZW5lTW9kZWxVbmZpbHRlcmVkIiwiaXNvZm9ybUV4cCIsImp1bmN0aW9uRXhwIiwibWVkR2VuZUV4cCIsInNhbXBsZSIsInNucCIsInRpc3N1ZVNpdGVzIiwidG9wSW5UaXNzdWVGaWx0ZXJlZCIsInRvcEluVGlzc3VlIiwidmFyaWFudElkIiwicm5hc2VxQ3JhbSIsIndnc0NyYW0iLCJnZXRHdGV4VXJscyIsImdlbmVTeW1ib2xVcHBlciIsImVuc2VtYmxJZCIsImdlbmNvZGVJZCIsInByb21pc2VzIiwiUHJvbWlzZSIsImFsbCIsInBhcnNlVGlzc3VlcyIsInBhcnNlSXNvZm9ybXMiLCJwYXJzZUlzb2Zvcm1FeG9ucyIsImNocm9tIiwicGFyc2VKdW5jdGlvbnMiLCJqdW5jdGlvbkV4cHJlc3MiLCJsb2cxMCIsInBhcnNlSnVuY3Rpb25FeHByZXNzaW9uIiwiZXhvbkV4cHJlc3MiLCJleG9uRGljdCIsImV4b25PYmplY3RzIiwiZXhvbiIsImxvZzIiLCJwYXJzZUV4b25FeHByZXNzaW9uIiwiaXNvZm9ybUV4cHJlc3MiLCJwYXJzZUlzb2Zvcm1FeHByZXNzaW9uIiwiZXhvbkNvbG9yU2NhbGUiLCJpc29mb3JtQ29sb3JTY2FsZSIsImp1bmN0aW9uQ29sb3JTY2FsZSIsInNhdmUiLCJkbWFwQ29uZmlnIiwidGlzc3VlVHJlZSIsImNsdXN0ZXJzIiwiaXNvZm9ybVRyZWUiLCJvcmRlcnMiLCJpc29mb3JtRXhwcmVzc1QiLCJwYXJzZUlzb2Zvcm1FeHByZXNzaW9uVHJhbnNwb3NlIiwiY3JlYXRlVG9vbHRpcCIsIm1vZGVsQ29uZmlnIiwiaXNvVHJhY2tWaWV3ZXJDb25maWciLCJtb2RlbEciLCJpc29mb3JtVHJhY2tWaWV3ZXIiLCJ0cmFja1ZpZXdlckciLCJfYWRkQ29sb3JMZWdlbmRzRm9yR2VuZU1vZGVsIiwiY3JlYXRlVG9vbGJhciIsImNyZWF0ZURvd25sb2FkQnV0dG9uIiwiX2NyZWF0ZVRvb2xiYXIiLCJfY3VzdG9taXplSXNvZm9ybU1hcCIsIl9jdXN0b21pemVJc29mb3JtVHJhbnNwb3NlZE1hcCIsImp1bmMiLCJ4bGFiZWwiLCJqSWQiLCJfY3VzdG9taXplSnVuY3Rpb25NYXAiLCJfY3VzdG9taXplRXhvbk1hcCIsImNhdGNoIl0sIm1hcHBpbmdzIjoiK0NBQU8sSUFBSUEsRUFBUSxrQ0FHakJDLElBQUssNkJBQ0xELE1BQU9BLEVBQ1BFLE1BQU8sK0JBQ1BDLElBQUssdUNBQ0xDLE1BQU8sbUNDTE0sU0FBU0MsR0FDdEIsSUFBSUMsRUFBU0QsR0FBUSxHQUFJRSxFQUFJRCxFQUFPRSxRQUFRLEtBRTVDLE9BRElELEdBQUssR0FBcUMsV0FBL0JELEVBQVNELEVBQUtJLE1BQU0sRUFBR0YsTUFBaUJGLEVBQU9BLEVBQUtJLE1BQU1GLEVBQUksSUFDdEVHLEVBQVdDLGVBQWVMLElBQVdNLE1BQU9GLEVBQVdKLEdBQVNPLE1BQU9SLEdBQVFBLEdDY3hGLE1BQWUsU0FBU0EsR0FDdEIsSUFBSVMsRUFBV0MsRUFBVVYsR0FDekIsT0FBUVMsRUFBU0QsTUFSbkIsU0FBc0JDLEdBQ3BCLE9BQU8sV0FDTCxPQUFPRSxLQUFLQyxjQUFjQyxnQkFBZ0JKLEVBQVNGLE1B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
