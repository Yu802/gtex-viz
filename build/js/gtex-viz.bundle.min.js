var GTExViz=function(t){"use strict";var e="http://www.w3.org/1999/xhtml",n={svg:"http://www.w3.org/2000/svg",xhtml:e,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},a=function(t){var e=t+="",a=e.indexOf(":");return a>=0&&"xmlns"!==(e=t.slice(0,a))&&(t=t.slice(a+1)),n.hasOwnProperty(e)?{space:n[e],local:t}:t};var r=function(t){var n=a(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,a=this.namespaceURI;return a===e&&n.documentElement.namespaceURI===e?n.createElement(t):n.createElementNS(a,t)}})(n)};function i(){}var o=function(t){return null==t?i:function(){return this.querySelector(t)}};function c(){return[]}var s=function(t){return null==t?c:function(){return this.querySelectorAll(t)}},l=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var f=document.documentElement;if(!f.matches){var u=f.webkitMatchesSelector||f.msMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector;l=function(t){return function(){return u.call(this,t)}}}}var h=l,d=function(t){return new Array(t.length)};function b(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}b.prototype={constructor:b,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var p="$";function g(t,e,n,a,r,i){for(var o,c=0,s=e.length,l=i.length;c<l;++c)(o=e[c])?(o.__data__=i[c],a[c]=o):n[c]=new b(t,i[c]);for(;c<s;++c)(o=e[c])&&(r[c]=o)}function m(t,e,n,a,r,i,o){var c,s,l,f={},u=e.length,h=i.length,d=new Array(u);for(c=0;c<u;++c)(s=e[c])&&(d[c]=l=p+o.call(s,s.__data__,c,e),l in f?r[c]=s:f[l]=s);for(c=0;c<h;++c)(s=f[l=p+o.call(t,i[c],c,i)])?(a[c]=s,s.__data__=i[c],f[l]=null):n[c]=new b(t,i[c]);for(c=0;c<u;++c)(s=e[c])&&f[d[c]]===s&&(r[c]=s)}function y(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var v=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function x(t,e){return t.style.getPropertyValue(e)||v(t).getComputedStyle(t,null).getPropertyValue(e)}function w(t){return t.trim().split(/^|\s+/)}function _(t){return t.classList||new S(t)}function S(t){this._node=t,this._names=w(t.getAttribute("class")||"")}function M(t,e){for(var n=_(t),a=-1,r=e.length;++a<r;)n.add(e[a])}function T(t,e){for(var n=_(t),a=-1,r=e.length;++a<r;)n.remove(e[a])}S.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function A(){this.textContent=""}function N(){this.innerHTML=""}function k(){this.nextSibling&&this.parentNode.appendChild(this)}function E(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function L(){return null}function C(){var t=this.parentNode;t&&t.removeChild(this)}function P(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function D(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var B={},I=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(B={mouseenter:"mouseover",mouseleave:"mouseout"}));function U(t,e,n){return t=z(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function z(t,e,n){return function(a){var r=I;I=a;try{t.call(this,this.__data__,e,n)}finally{I=r}}}function Y(t){return function(){var e=this.__on;if(e){for(var n,a=0,r=-1,i=e.length;a<i;++a)n=e[a],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function j(t,e,n){var a=B.hasOwnProperty(t.type)?U:z;return function(r,i,o){var c,s=this.__on,l=a(e,i,o);if(s)for(var f=0,u=s.length;f<u;++f)if((c=s[f]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=l,c.capture=n),void(c.value=e);this.addEventListener(t.type,l,n),c={type:t.type,name:t.name,value:e,listener:l,capture:n},s?s.push(c):this.__on=[c]}}function F(t,e,n){var a=v(t),r=a.CustomEvent;"function"==typeof r?r=new r(e,n):(r=a.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var R=[null];function V(t,e){this._groups=t,this._parents=e}function H(){return new V([[document.documentElement]],R)}V.prototype=H.prototype={constructor:V,select:function(t){"function"!=typeof t&&(t=o(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,c,s=e[r],l=s.length,f=a[r]=new Array(l),u=0;u<l;++u)(i=s[u])&&(c=t.call(i,i.__data__,u,s))&&("__data__"in i&&(c.__data__=i.__data__),f[u]=c);return new V(a,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=s(t));for(var e=this._groups,n=e.length,a=[],r=[],i=0;i<n;++i)for(var o,c=e[i],l=c.length,f=0;f<l;++f)(o=c[f])&&(a.push(t.call(o,o.__data__,f,c)),r.push(o));return new V(a,r)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],c=o.length,s=a[r]=[],l=0;l<c;++l)(i=o[l])&&t.call(i,i.__data__,l,o)&&s.push(i);return new V(a,this._parents)},data:function(t,e){if(!t)return b=new Array(this.size()),f=-1,this.each(function(t){b[++f]=t}),b;var n,a=e?m:g,r=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=i.length,c=new Array(o),s=new Array(o),l=new Array(o),f=0;f<o;++f){var u=r[f],h=i[f],d=h.length,b=t.call(u,u&&u.__data__,f,r),p=b.length,y=s[f]=new Array(p),v=c[f]=new Array(p);a(u,h,y,v,l[f]=new Array(d),b,e);for(var x,w,_=0,S=0;_<p;++_)if(x=y[_]){for(_>=S&&(S=_+1);!(w=v[S])&&++S<p;);x._next=w||null}}return(c=new V(c,r))._enter=s,c._exit=l,c},enter:function(){return new V(this._enter||this._groups.map(d),this._parents)},exit:function(){return new V(this._exit||this._groups.map(d),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),c=0;c<i;++c)for(var s,l=e[c],f=n[c],u=l.length,h=o[c]=new Array(u),d=0;d<u;++d)(s=l[d]||f[d])&&(h[d]=s);for(;c<a;++c)o[c]=e[c];return new V(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var a,r=t[e],i=r.length-1,o=r[i];--i>=0;)(a=r[i])&&(o&&o!==a.nextSibling&&o.parentNode.insertBefore(a,o),o=a);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=y);for(var n=this._groups,a=n.length,r=new Array(a),i=0;i<a;++i){for(var o,c=n[i],s=c.length,l=r[i]=new Array(s),f=0;f<s;++f)(o=c[f])&&(l[f]=o);l.sort(e)}return new V(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var a=t[e],r=0,i=a.length;r<i;++r){var o=a[r];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,a=e.length;n<a;++n)for(var r,i=e[n],o=0,c=i.length;o<c;++o)(r=i[o])&&t.call(r,r.__data__,o,i);return this},attr:function(t,e){var n=a(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var a=e.apply(this,arguments);null==a?this.style.removeProperty(t):this.style.setProperty(t,a,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):x(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=w(t+"");if(arguments.length<2){for(var a=_(this.node()),r=-1,i=n.length;++r<i;)if(!a.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?M:T)(this,t)}}:e?function(t){return function(){M(this,t)}}:function(t){return function(){T(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?A:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?N:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(k)},lower:function(){return this.each(E)},append:function(t){var e="function"==typeof t?t:r(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:r(t),a=null==e?L:"function"==typeof e?e:o(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),a.apply(this,arguments)||null)})},remove:function(){return this.each(C)},clone:function(t){return this.select(t?D:P)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var a,r,i=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=i.length;if(!(arguments.length<2)){for(c=e?j:Y,null==n&&(n=!1),a=0;a<o;++a)this.each(c(i[a],e,n));return this}var c=this.node().__on;if(c)for(var s,l=0,f=c.length;l<f;++l)for(a=0,s=c[l];a<o;++a)if((r=i[a]).type===s.type&&r.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return F(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return F(this,t,e)}})(t,e))}};var X=function(t){return"string"==typeof t?new V([[document.querySelector(t)]],[document.documentElement]):new V([[t]],R)},G=function(){for(var t,e=I;t=e.sourceEvent;)e=t;return e},O=function(t){var e=G();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=e.clientX,a.y=e.clientY,[(a=a.matrixTransform(t.getScreenCTM().inverse())).x,a.y]}var r=t.getBoundingClientRect();return[e.clientX-r.left-t.clientLeft,e.clientY-r.top-t.clientTop]}(t,e)},q=function(t){return"string"==typeof t?new V([document.querySelectorAll(t)],[document.documentElement]):new V([null==t?[]:t],R)},W=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var Z,K,Q=(1===(Z=W).length&&(K=Z,Z=function(t,e){return W(K(t),e)}),{left:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;Z(t[r],e)<0?n=r+1:a=r}return n},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){var r=n+a>>>1;Z(t[r],e)>0?a=r:n=r+1}return n}}).right,J=function(t){return null===t?NaN:+t},tt=function(t,e){var n=function(t,e){var n,a,r=t.length,i=0,o=-1,c=0,s=0;if(null==e)for(;++o<r;)isNaN(n=J(t[o]))||(s+=(a=n-c)*(n-(c+=a/++i)));else for(;++o<r;)isNaN(n=J(e(t[o],o,t)))||(s+=(a=n-c)*(n-(c+=a/++i)));if(i>1)return s/(i-1)}(t,e);return n?Math.sqrt(n):n},et=function(t,e){var n,a,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(a=r=n;++o<i;)null!=(n=t[o])&&(a>n&&(a=n),r<n&&(r=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(a=r=n;++o<i;)null!=(n=e(t[o],o,t))&&(a>n&&(a=n),r<n&&(r=n));return[a,r]},nt=function(t,e,n){t=+t,e=+e,n=(r=arguments.length)<2?(e=t,t=0,1):r<3?1:+n;for(var a=-1,r=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(r);++a<r;)i[a]=t+a*n;return i},at=Math.sqrt(50),rt=Math.sqrt(10),it=Math.sqrt(2),ot=function(t,e,n){var a,r,i,o,c=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((a=e<t)&&(r=t,t=e,e=r),0===(o=ct(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(r=Math.ceil(e-t+1));++c<r;)i[c]=(t+c)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(r=Math.ceil(t-e+1));++c<r;)i[c]=(t-c)/o;return a&&i.reverse(),i};function ct(t,e,n){var a=(e-t)/Math.max(0,n),r=Math.floor(Math.log(a)/Math.LN10),i=a/Math.pow(10,r);return r>=0?(i>=at?10:i>=rt?5:i>=it?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(i>=at?10:i>=rt?5:i>=it?2:1)}var st=function(t,e,n){if(null==n&&(n=J),a=t.length){if((e=+e)<=0||a<2)return+n(t[0],0,t);if(e>=1)return+n(t[a-1],a-1,t);var a,r=(a-1)*e,i=Math.floor(r),o=+n(t[i],i,t);return o+(+n(t[i+1],i+1,t)-o)*(r-i)}},lt=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&n>a&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&n>a&&(a=n);return a},ft=function(t,e){var n,a=t.length,r=a,i=-1,o=0;if(null==e)for(;++i<a;)isNaN(n=J(t[i]))?--r:o+=n;else for(;++i<a;)isNaN(n=J(e(t[i],i,t)))?--r:o+=n;if(r)return o/r},ut=function(t,e){var n,a=t.length,r=-1,i=[];if(null==e)for(;++r<a;)isNaN(n=J(t[r]))||i.push(n);else for(;++r<a;)isNaN(n=J(e(t[r],r,t)))||i.push(n);return st(i.sort(W),.5)},ht=function(t,e){var n,a,r=t.length,i=-1;if(null==e){for(;++i<r;)if(null!=(n=t[i])&&n>=n)for(a=n;++i<r;)null!=(n=t[i])&&a>n&&(a=n)}else for(;++i<r;)if(null!=(n=e(t[i],i,t))&&n>=n)for(a=n;++i<r;)null!=(n=e(t[i],i,t))&&a>n&&(a=n);return a},dt=function(t,e){var n,a=t.length,r=-1,i=0;if(null==e)for(;++r<a;)(n=+t[r])&&(i+=n);else for(;++r<a;)(n=+e(t[r],r,t))&&(i+=n);return i};function bt(t){if(0==$(`#${t}`).length){let e=`Input Error: DOM ID ${t} is not found.`;throw alert(e),e}console.log("passed!")}function pt(t,e,n,a,r){return bt(t),void 0===r&&(r=`${t}-canvas`),X(`#${t}`).append("canvas").attr("id",r).attr("width",e).attr("height",n).style("position","relative")}function gt(t,e,n,a,r){return bt(t),void 0===r&&(r=`${t}-svg`),X("#"+t).append("svg").attr("width",e).attr("height",n).attr("id",r).append("g").attr("transform",`translate(${a.left}, ${a.top})`)}function mt(t={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let e=nt(1,t.x+1),n=nt(1,t.y+1),a=[];return e.forEach(e=>{e="x"+e.toString(),n.forEach(n=>{n="y"+n.toString();let r=Math.random()*t.scaleFactor;r=t.diverging&&Math.random()<.5?-r:r,a.push({x:e,y:n,value:r,displayValue:parseFloat(r.toExponential()).toPrecision(3),r:t.bubble?30*Math.random():void 0})})}),a}var yt=function t(e){function n(t,n){var a,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=a)i=a,a=null;else do{a=2*e()-1,i=2*e()-1,r=a*a+i*i}while(!r||r>1);return t+n*i*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(function(){return Math.random()});function vt(){}function xt(t,e){var n=new vt;if(t instanceof vt)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var a,r=-1,i=t.length;if(null==e)for(;++r<i;)n.set(r,t[r]);else for(;++r<i;)n.set(e(a=t[r],r,t),a)}else if(t)for(var o in t)n.set(o,t[o]);return n}vt.prototype=xt.prototype={constructor:vt,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var wt=function(){var t,e,n,a=[],r=[];function i(n,r,o,c){if(r>=a.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var s,l,f,u=-1,h=n.length,d=a[r++],b=xt(),p=o();++u<h;)(f=b.get(s=d(l=n[u])+""))?f.push(l):b.set(s,[l]);return b.each(function(t,e){c(p,e,i(t,r,o,c))}),p}return n={object:function(t){return i(t,0,_t,St)},map:function(t){return i(t,0,Mt,Tt)},entries:function(t){return function t(n,i){if(++i>a.length)return n;var o,c=r[i-1];return null!=e&&i>=a.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,i)})})),null!=c?o.sort(function(t,e){return c(t.key,e.key)}):o}(i(t,0,Mt,Tt),0)},key:function(t){return a.push(t),n},sortKeys:function(t){return r[a.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function _t(){return{}}function St(t,e,n){t[e]=n}function Mt(){return xt()}function Tt(t,e,n){t.set(e,n)}var At=Array.prototype,Nt=At.map,kt=At.slice,Et={name:"implicit"};function Lt(){var t,e,n=function t(e){var n=xt(),a=[],r=Et;function i(t){var i=t+"",o=n.get(i);if(!o){if(r!==Et)return r;n.set(i,o=a.push(t))}return e[(o-1)%e.length]}return e=null==e?[]:kt.call(e),i.domain=function(t){if(!arguments.length)return a.slice();a=[],n=xt();for(var e,r,o=-1,c=t.length;++o<c;)n.has(r=(e=t[o])+"")||n.set(r,a.push(e));return i},i.range=function(t){return arguments.length?(e=kt.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return t().domain(a).range(e).unknown(r)},i}().unknown(void 0),a=n.domain,r=n.range,i=[0,1],o=!1,c=0,s=0,l=.5;function f(){var n=a().length,f=i[1]<i[0],u=i[f-0],h=i[1-f];t=(h-u)/Math.max(1,n-c+2*s),o&&(t=Math.floor(t)),u+=(h-u-t*(n-c))*l,e=t*(1-c),o&&(u=Math.round(u),e=Math.round(e));var d=nt(n).map(function(e){return u+t*e});return r(f?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(a(t),f()):a()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],f()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],o=!0,f()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,f()):o},n.padding=function(t){return arguments.length?(c=s=Math.max(0,Math.min(1,t)),f()):c},n.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),f()):c},n.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),f()):s},n.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),f()):l},n.copy=function(){return Lt().domain(a()).range(i).round(o).paddingInner(c).paddingOuter(s).align(l)},f()}var $t=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Ct(t,e){var n=Object.create(t.prototype);for(var a in e)n[a]=e[a];return n}function Pt(){}var Dt="\\s*([+-]?\\d+)\\s*",Bt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",It="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ut=/^#([0-9a-f]{3})$/,zt=/^#([0-9a-f]{6})$/,Yt=new RegExp("^rgb\\("+[Dt,Dt,Dt]+"\\)$"),jt=new RegExp("^rgb\\("+[It,It,It]+"\\)$"),Ft=new RegExp("^rgba\\("+[Dt,Dt,Dt,Bt]+"\\)$"),Rt=new RegExp("^rgba\\("+[It,It,It,Bt]+"\\)$"),Vt=new RegExp("^hsl\\("+[Bt,It,It]+"\\)$"),Ht=new RegExp("^hsla\\("+[Bt,It,It,Bt]+"\\)$"),Xt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Gt(t){var e;return t=(t+"").trim().toLowerCase(),(e=Ut.exec(t))?new Kt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=zt.exec(t))?Ot(parseInt(e[1],16)):(e=Yt.exec(t))?new Kt(e[1],e[2],e[3],1):(e=jt.exec(t))?new Kt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ft.exec(t))?qt(e[1],e[2],e[3],e[4]):(e=Rt.exec(t))?qt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Vt.exec(t))?Jt(e[1],e[2]/100,e[3]/100,1):(e=Ht.exec(t))?Jt(e[1],e[2]/100,e[3]/100,e[4]):Xt.hasOwnProperty(t)?Ot(Xt[t]):"transparent"===t?new Kt(NaN,NaN,NaN,0):null}function Ot(t){return new Kt(t>>16&255,t>>8&255,255&t,1)}function qt(t,e,n,a){return a<=0&&(t=e=n=NaN),new Kt(t,e,n,a)}function Wt(t){return t instanceof Pt||(t=Gt(t)),t?new Kt((t=t.rgb()).r,t.g,t.b,t.opacity):new Kt}function Zt(t,e,n,a){return 1===arguments.length?Wt(t):new Kt(t,e,n,null==a?1:a)}function Kt(t,e,n,a){this.r=+t,this.g=+e,this.b=+n,this.opacity=+a}function Qt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Jt(t,e,n,a){return a<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new te(t,e,n,a)}function te(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function ee(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}$t(Pt,Gt,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),$t(Kt,Zt,Ct(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Kt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Kt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Qt(this.r)+Qt(this.g)+Qt(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),$t(te,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof te)return new te(t.h,t.s,t.l,t.opacity);if(t instanceof Pt||(t=Gt(t)),!t)return new te;if(t instanceof te)return t;var e=(t=t.rgb()).r/255,n=t.g/255,a=t.b/255,r=Math.min(e,n,a),i=Math.max(e,n,a),o=NaN,c=i-r,s=(i+r)/2;return c?(o=e===i?(n-a)/c+6*(n<a):n===i?(a-e)/c+2:(e-n)/c+4,c/=s<.5?i+r:2-i-r,o*=60):c=s>0&&s<1?0:o,new te(o,c,s,t.opacity)}(t):new te(t,e,n,null==a?1:a)},Ct(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new te(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new te(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,a=n+(n<.5?n:1-n)*e,r=2*n-a;return new Kt(ee(t>=240?t-240:t+120,r,a),ee(t,r,a),ee(t<120?t+240:t-120,r,a),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ne=Math.PI/180,ae=180/Math.PI,re=.96422,ie=1,oe=.82521,ce=4/29,se=6/29,le=3*se*se,fe=se*se*se;function ue(t){if(t instanceof he)return new he(t.l,t.a,t.b,t.opacity);if(t instanceof me){if(isNaN(t.h))return new he(t.l,0,0,t.opacity);var e=t.h*ne;return new he(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Kt||(t=Wt(t));var n,a,r=ge(t.r),i=ge(t.g),o=ge(t.b),c=de((.2225045*r+.7168786*i+.0606169*o)/ie);return r===i&&i===o?n=a=c:(n=de((.4360747*r+.3850649*i+.1430804*o)/re),a=de((.0139322*r+.0971045*i+.7141733*o)/oe)),new he(116*c-16,500*(n-c),200*(c-a),t.opacity)}function he(t,e,n,a){this.l=+t,this.a=+e,this.b=+n,this.opacity=+a}function de(t){return t>fe?Math.pow(t,1/3):t/le+ce}function be(t){return t>se?t*t*t:le*(t-ce)}function pe(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function ge(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function me(t,e,n,a){this.h=+t,this.c=+e,this.l=+n,this.opacity=+a}$t(he,function(t,e,n,a){return 1===arguments.length?ue(t):new he(t,e,n,null==a?1:a)},Ct(Pt,{brighter:function(t){return new he(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new he(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Kt(pe(3.1338561*(e=re*be(e))-1.6168667*(t=ie*be(t))-.4906146*(n=oe*be(n))),pe(-.9787684*e+1.9161415*t+.033454*n),pe(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),$t(me,function(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof me)return new me(t.h,t.c,t.l,t.opacity);if(t instanceof he||(t=ue(t)),0===t.a&&0===t.b)return new me(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*ae;return new me(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new me(t,e,n,null==a?1:a)},Ct(Pt,{brighter:function(t){return new me(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new me(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return ue(this).rgb()}}));var ye=-.14861,ve=1.78277,xe=-.29227,we=-.90649,_e=1.97294,Se=_e*we,Me=_e*ve,Te=ve*xe-we*ye;function Ae(t,e,n,a){return 1===arguments.length?function(t){if(t instanceof Ne)return new Ne(t.h,t.s,t.l,t.opacity);t instanceof Kt||(t=Wt(t));var e=t.r/255,n=t.g/255,a=t.b/255,r=(Te*a+Se*e-Me*n)/(Te+Se-Me),i=a-r,o=(_e*(n-r)-xe*i)/we,c=Math.sqrt(o*o+i*i)/(_e*r*(1-r)),s=c?Math.atan2(o,i)*ae-120:NaN;return new Ne(s<0?s+360:s,c,r,t.opacity)}(t):new Ne(t,e,n,null==a?1:a)}function Ne(t,e,n,a){this.h=+t,this.s=+e,this.l=+n,this.opacity=+a}function ke(t,e,n,a,r){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*a+o*r)/6}$t(Ne,Ae,Ct(Pt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ne(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ne(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ne,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),a=Math.cos(t),r=Math.sin(t);return new Kt(255*(e+n*(ye*a+ve*r)),255*(e+n*(xe*a+we*r)),255*(e+n*(_e*a)),this.opacity)}}));var Ee=function(t){return function(){return t}};function Le(t,e){return function(n){return t+n*e}}function $e(t){return 1==(t=+t)?Ce:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(a){return Math.pow(t+a*e,n)}}(e,n,t):Ee(isNaN(e)?n:e)}}function Ce(t,e){var n=e-t;return n?Le(t,n):Ee(isNaN(t)?e:t)}var Pe=function t(e){var n=$e(e);function a(t,e){var a=n((t=Zt(t)).r,(e=Zt(e)).r),r=n(t.g,e.g),i=n(t.b,e.b),o=Ce(t.opacity,e.opacity);return function(e){return t.r=a(e),t.g=r(e),t.b=i(e),t.opacity=o(e),t+""}}return a.gamma=t,a}(1);function De(t){return function(e){var n,a,r=e.length,i=new Array(r),o=new Array(r),c=new Array(r);for(n=0;n<r;++n)a=Zt(e[n]),i[n]=a.r||0,o[n]=a.g||0,c[n]=a.b||0;return i=t(i),o=t(o),c=t(c),a.opacity=1,function(t){return a.r=i(t),a.g=o(t),a.b=c(t),a+""}}}var Be=De(function(t){var e=t.length-1;return function(n){var a=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[a],i=t[a+1],o=a>0?t[a-1]:2*r-i,c=a<e-1?t[a+2]:2*i-r;return ke((n-a/e)*e,o,r,i,c)}}),Ie=(De(function(t){var e=t.length;return function(n){var a=Math.floor(((n%=1)<0?++n:n)*e),r=t[(a+e-1)%e],i=t[a%e],o=t[(a+1)%e],c=t[(a+2)%e];return ke((n-a/e)*e,r,i,o,c)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),Ue=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ze=new RegExp(Ue.source,"g");var Ye,je,Fe,Re,Ve=function(t,e){var n,a,r,i=Ue.lastIndex=ze.lastIndex=0,o=-1,c=[],s=[];for(t+="",e+="";(n=Ue.exec(t))&&(a=ze.exec(e));)(r=a.index)>i&&(r=e.slice(i,r),c[o]?c[o]+=r:c[++o]=r),(n=n[0])===(a=a[0])?c[o]?c[o]+=a:c[++o]=a:(c[++o]=null,s.push({i:o,x:Ie(n,a)})),i=ze.lastIndex;return i<e.length&&(r=e.slice(i),c[o]?c[o]+=r:c[++o]=r),c.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,a=0;a<e;++a)c[(n=s[a]).i]=n.x(t);return c.join("")})},He=function(t,e){var n,a=typeof e;return null==e||"boolean"===a?Ee(e):("number"===a?Ie:"string"===a?(n=Gt(e))?(e=n,Pe):Ve:e instanceof Gt?Pe:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(a){return n.setTime(t+e*a),n}}:Array.isArray(e)?function(t,e){var n,a=e?e.length:0,r=t?Math.min(a,t.length):0,i=new Array(r),o=new Array(a);for(n=0;n<r;++n)i[n]=He(t[n],e[n]);for(;n<a;++n)o[n]=e[n];return function(t){for(n=0;n<r;++n)o[n]=i[n](t);return o}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,a={},r={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?a[n]=He(t[n],e[n]):r[n]=e[n];return function(t){for(n in a)r[n]=a[n](t);return r}}:Ie)(t,e)},Xe=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},Ge=180/Math.PI,Oe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},qe=function(t,e,n,a,r,i){var o,c,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*a)&&(n-=t*s,a-=e*s),(c=Math.sqrt(n*n+a*a))&&(n/=c,a/=c,s/=c),t*a<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:r,translateY:i,rotate:Math.atan2(e,t)*Ge,skewX:Math.atan(s)*Ge,scaleX:o,scaleY:c}};function We(t,e,n,a){function r(t){return t.length?t.pop()+" ":""}return function(i,o){var c=[],s=[];return i=t(i),o=t(o),function(t,a,r,i,o,c){if(t!==r||a!==i){var s=o.push("translate(",null,e,null,n);c.push({i:s-4,x:Ie(t,r)},{i:s-2,x:Ie(a,i)})}else(r||i)&&o.push("translate("+r+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,c,s),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(r(n)+"rotate(",null,a)-2,x:Ie(t,e)})):e&&n.push(r(n)+"rotate("+e+a)}(i.rotate,o.rotate,c,s),function(t,e,n,i){t!==e?i.push({i:n.push(r(n)+"skewX(",null,a)-2,x:Ie(t,e)}):e&&n.push(r(n)+"skewX("+e+a)}(i.skewX,o.skewX,c,s),function(t,e,n,a,i,o){if(t!==n||e!==a){var c=i.push(r(i)+"scale(",null,",",null,")");o.push({i:c-4,x:Ie(t,n)},{i:c-2,x:Ie(e,a)})}else 1===n&&1===a||i.push(r(i)+"scale("+n+","+a+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,c,s),i=o=null,function(t){for(var e,n=-1,a=s.length;++n<a;)c[(e=s[n]).i]=e.x(t);return c.join("")}}}var Ze=We(function(t){return"none"===t?Oe:(Ye||(Ye=document.createElement("DIV"),je=document.documentElement,Fe=document.defaultView),Ye.style.transform=t,t=Fe.getComputedStyle(je.appendChild(Ye),null).getPropertyValue("transform"),je.removeChild(Ye),t=t.slice(7,-1).split(","),qe(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Ke=We(function(t){return null==t?Oe:(Re||(Re=document.createElementNS("http://www.w3.org/2000/svg","g")),Re.setAttribute("transform",t),(t=Re.transform.baseVal.consolidate())?(t=t.matrix,qe(t.a,t.b,t.c,t.d,t.e,t.f)):Oe)},", ",")",")");function Qe(t){return function e(n){function a(e,a){var r=t((e=Ae(e)).h,(a=Ae(a)).h),i=Ce(e.s,a.s),o=Ce(e.l,a.l),c=Ce(e.opacity,a.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=c(t),e+""}}return n=+n,a.gamma=e,a}(1)}Qe(function(t,e){var n=e-t;return n?Le(t,n>180||n<-180?n-360*Math.round(n/360):n):Ee(isNaN(t)?e:t)});var Je=Qe(Ce),tn=function(t){return function(){return t}},en=function(t){return+t},nn=[0,1];function an(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:tn(e)}function rn(t,e,n,a){var r=t[0],i=t[1],o=e[0],c=e[1];return i<r?(r=n(i,r),o=a(c,o)):(r=n(r,i),o=a(o,c)),function(t){return o(r(t))}}function on(t,e,n,a){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),c=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<r;)i[c]=n(t[c],t[c+1]),o[c]=a(e[c],e[c+1]);return function(e){var n=Q(t,e,1,r)-1;return o[n](i[n](e))}}function cn(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function sn(t,e){var n,a,r,i=nn,o=nn,c=He,s=!1;function l(){return n=Math.min(i.length,o.length)>2?on:rn,a=r=null,f}function f(e){return(a||(a=n(i,o,s?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:a(t)}}}(t):t,c)))(+e)}return f.invert=function(t){return(r||(r=n(o,i,an,s?function(t){return function(e,n){var a=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:a(t)}}}(e):e)))(+t)},f.domain=function(t){return arguments.length?(i=Nt.call(t,en),l()):i.slice()},f.range=function(t){return arguments.length?(o=kt.call(t),l()):o.slice()},f.rangeRound=function(t){return o=kt.call(t),c=Xe,l()},f.clamp=function(t){return arguments.length?(s=!!t,l()):s},f.interpolate=function(t){return arguments.length?(c=t,l()):c},l()}var ln=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,a=t.slice(0,n);return[a.length>1?a[0]+a.slice(2):a,+t.slice(n+1)]},fn=function(t){return(t=ln(Math.abs(t)))?t[1]:NaN},un=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hn(t){return new dn(t)}function dn(t){if(!(e=un.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}hn.prototype=dn.prototype,dn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var bn,pn,gn,mn,yn=function(t){t:for(var e,n=t.length,a=1,r=-1;a<n;++a)switch(t[a]){case".":r=e=a;break;case"0":0===r&&(r=a),e=a;break;default:if(r>0){if(!+t[a])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t},vn=function(t,e){var n=ln(t,e);if(!n)return t+"";var a=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+a:a.length>r+1?a.slice(0,r+1)+"."+a.slice(r+1):a+new Array(r-a.length+2).join("0")},xn={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return vn(100*t,e)},r:vn,s:function(t,e){var n=ln(t,e);if(!n)return t+"";var a=n[0],r=n[1],i=r-(bn=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,o=a.length;return i===o?a:i>o?a+new Array(i-o+1).join("0"):i>0?a.slice(0,i)+"."+a.slice(i):"0."+new Array(1-i).join("0")+ln(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},wn=function(t){return t},_n=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];pn=function(t){var e,n,a=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,a){for(var r=t.length,i=[],o=0,c=e[0],s=0;r>0&&c>0&&(s+c+1>a&&(c=Math.max(1,a-s)),i.push(t.substring(r-=c,r+c)),!((s+=c+1)>a));)c=e[o=(o+1)%e.length];return i.reverse().join(n)}):wn,r=t.currency,i=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):wn,c=t.percent||"%";function s(t){var e=(t=hn(t)).fill,n=t.align,s=t.sign,l=t.symbol,f=t.zero,u=t.width,h=t.comma,d=t.precision,b=t.trim,p=t.type;"n"===p?(h=!0,p="g"):xn[p]||(null==d&&(d=12),b=!0,p="g"),(f||"0"===e&&"="===n)&&(f=!0,e="0",n="=");var g="$"===l?r[0]:"#"===l&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",m="$"===l?r[1]:/[%p]/.test(p)?c:"",y=xn[p],v=/[defgprs%]/.test(p);function x(t){var r,c,l,x=g,w=m;if("c"===p)w=y(t)+w,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),d),b&&(t=yn(t)),_&&0==+t&&(_=!1),x=(_?"("===s?s:"-":"-"===s||"("===s?"":s)+x,w=("s"===p?_n[8+bn/3]:"")+w+(_&&"("===s?")":""),v)for(r=-1,c=t.length;++r<c;)if(48>(l=t.charCodeAt(r))||l>57){w=(46===l?i+t.slice(r+1):t.slice(r))+w,t=t.slice(0,r);break}}h&&!f&&(t=a(t,1/0));var S=x.length+t.length+w.length,M=S<u?new Array(u-S+1).join(e):"";switch(h&&f&&(t=a(M+t,M.length?u-w.length:1/0),M=""),n){case"<":t=x+t+w+M;break;case"=":t=x+M+t+w;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+w+M.slice(S);break;default:t=M+x+t+w}return o(t)}return d=null==d?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:s,formatPrefix:function(t,e){var n=s(((t=hn(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(fn(e)/3))),r=Math.pow(10,-a),i=_n[8+a/3];return function(t){return n(r*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),gn=pn.format,mn=pn.formatPrefix;var Sn=function(t,e,n){var a,r=t[0],i=t[t.length-1],o=function(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),r=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),i=a/r;return i>=at?r*=10:i>=rt?r*=5:i>=it&&(r*=2),e<t?-r:r}(r,i,null==e?10:e);switch((n=hn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(r),Math.abs(i));return null!=n.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(fn(e)/3)))-fn(Math.abs(t)))}(o,c))||(n.precision=a),mn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,fn(e)-fn(t))+1}(o,Math.max(Math.abs(r),Math.abs(i))))||(n.precision=a-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(a=function(t){return Math.max(0,-fn(Math.abs(t)))}(o))||(n.precision=a-2*("%"===n.type))}return gn(n)};function Mn(t){var e=t.domain;return t.ticks=function(t){var n=e();return ot(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Sn(e(),t,n)},t.nice=function(n){null==n&&(n=10);var a,r=e(),i=0,o=r.length-1,c=r[i],s=r[o];return s<c&&(a=c,c=s,s=a,a=i,i=o,o=a),(a=ct(c,s,n))>0?a=ct(c=Math.floor(c/a)*a,s=Math.ceil(s/a)*a,n):a<0&&(a=ct(c=Math.ceil(c*a)/a,s=Math.floor(s*a)/a,n)),a>0?(r[i]=Math.floor(c/a)*a,r[o]=Math.ceil(s/a)*a,e(r)):a<0&&(r[i]=Math.ceil(c*a)/a,r[o]=Math.floor(s*a)/a,e(r)),t},t}function Tn(){var t=sn(an,Ie);return t.copy=function(){return cn(t,Tn())},Mn(t)}function An(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function Nn(){return function t(){var e=1,n=sn(function(t,n){return(n=An(n,e)-(t=An(t,e)))?function(a){return(An(a,e)-t)/n}:tn(n)},function(t,n){return n=An(n,e)-(t=An(t,e)),function(a){return An(t+n*a,1/e)}}),a=n.domain;return n.exponent=function(t){return arguments.length?(e=+t,a(a())):e},n.copy=function(){return cn(n,t().exponent(e))},Mn(n)}().exponent(.5)}var kn=new Date,En=new Date;function Ln(t,e,n,a){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,a,i){var o,c=[];if(n=r.ceil(n),i=null==i?1:Math.floor(i),!(n<a&&i>0))return c;do{c.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<a);return c},r.filter=function(n){return Ln(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,a){if(t>=t)if(a<0)for(;++a<=0;)for(;e(t,-1),!n(t););else for(;--a>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,a){return kn.setTime(+e),En.setTime(+a),t(kn),t(En),Math.floor(n(kn,En))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(a?function(e){return a(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var $n=Ln(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});$n.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ln(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):$n:null};var Cn=6e4,Pn=6048e5,Dn=(Ln(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Ln(function(t){t.setTime(Math.floor(t/Cn)*Cn)},function(t,e){t.setTime(+t+e*Cn)},function(t,e){return(e-t)/Cn},function(t){return t.getMinutes()}),Ln(function(t){var e=t.getTimezoneOffset()*Cn%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),Ln(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Cn)/864e5},function(t){return t.getDate()-1}));function Bn(t){return Ln(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Cn)/Pn})}var In=Bn(0),Un=Bn(1),zn=(Bn(2),Bn(3),Bn(4)),Yn=(Bn(5),Bn(6),Ln(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Ln(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Yn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ln(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};Ln(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Cn)},function(t,e){return(e-t)/Cn},function(t){return t.getUTCMinutes()}),Ln(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()});var jn=Ln(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1});function Fn(t){return Ln(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Pn})}var Rn=Fn(0),Vn=Fn(1),Hn=(Fn(2),Fn(3),Fn(4)),Xn=(Fn(5),Fn(6),Ln(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Ln(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));function Gn(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function On(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function qn(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}Xn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ln(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Wn,Zn,Kn,Qn={"-":"",_:" ",0:"0"},Jn=/^\s*\d+/,ta=/^%/,ea=/[\\^$*+?|[\]().{}]/g;function na(t,e,n){var a=t<0?"-":"",r=(a?-t:t)+"",i=r.length;return a+(i<n?new Array(n-i+1).join(e)+r:r)}function aa(t){return t.replace(ea,"\\$&")}function ra(t){return new RegExp("^(?:"+t.map(aa).join("|")+")","i")}function ia(t){for(var e={},n=-1,a=t.length;++n<a;)e[t[n].toLowerCase()]=n;return e}function oa(t,e,n){var a=Jn.exec(e.slice(n,n+1));return a?(t.w=+a[0],n+a[0].length):-1}function ca(t,e,n){var a=Jn.exec(e.slice(n,n+1));return a?(t.u=+a[0],n+a[0].length):-1}function sa(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.U=+a[0],n+a[0].length):-1}function la(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.V=+a[0],n+a[0].length):-1}function fa(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.W=+a[0],n+a[0].length):-1}function ua(t,e,n){var a=Jn.exec(e.slice(n,n+4));return a?(t.y=+a[0],n+a[0].length):-1}function ha(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.y=+a[0]+(+a[0]>68?1900:2e3),n+a[0].length):-1}function da(t,e,n){var a=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return a?(t.Z=a[1]?0:-(a[2]+(a[3]||"00")),n+a[0].length):-1}function ba(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.m=a[0]-1,n+a[0].length):-1}function pa(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.d=+a[0],n+a[0].length):-1}function ga(t,e,n){var a=Jn.exec(e.slice(n,n+3));return a?(t.m=0,t.d=+a[0],n+a[0].length):-1}function ma(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.H=+a[0],n+a[0].length):-1}function ya(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.M=+a[0],n+a[0].length):-1}function va(t,e,n){var a=Jn.exec(e.slice(n,n+2));return a?(t.S=+a[0],n+a[0].length):-1}function xa(t,e,n){var a=Jn.exec(e.slice(n,n+3));return a?(t.L=+a[0],n+a[0].length):-1}function wa(t,e,n){var a=Jn.exec(e.slice(n,n+6));return a?(t.L=Math.floor(a[0]/1e3),n+a[0].length):-1}function _a(t,e,n){var a=ta.exec(e.slice(n,n+1));return a?n+a[0].length:-1}function Sa(t,e,n){var a=Jn.exec(e.slice(n));return a?(t.Q=+a[0],n+a[0].length):-1}function Ma(t,e,n){var a=Jn.exec(e.slice(n));return a?(t.Q=1e3*+a[0],n+a[0].length):-1}function Ta(t,e){return na(t.getDate(),e,2)}function Aa(t,e){return na(t.getHours(),e,2)}function Na(t,e){return na(t.getHours()%12||12,e,2)}function ka(t,e){return na(1+Dn.count(Yn(t),t),e,3)}function Ea(t,e){return na(t.getMilliseconds(),e,3)}function La(t,e){return Ea(t,e)+"000"}function $a(t,e){return na(t.getMonth()+1,e,2)}function Ca(t,e){return na(t.getMinutes(),e,2)}function Pa(t,e){return na(t.getSeconds(),e,2)}function Da(t){var e=t.getDay();return 0===e?7:e}function Ba(t,e){return na(In.count(Yn(t),t),e,2)}function Ia(t,e){var n=t.getDay();return t=n>=4||0===n?zn(t):zn.ceil(t),na(zn.count(Yn(t),t)+(4===Yn(t).getDay()),e,2)}function Ua(t){return t.getDay()}function za(t,e){return na(Un.count(Yn(t),t),e,2)}function Ya(t,e){return na(t.getFullYear()%100,e,2)}function ja(t,e){return na(t.getFullYear()%1e4,e,4)}function Fa(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+na(e/60|0,"0",2)+na(e%60,"0",2)}function Ra(t,e){return na(t.getUTCDate(),e,2)}function Va(t,e){return na(t.getUTCHours(),e,2)}function Ha(t,e){return na(t.getUTCHours()%12||12,e,2)}function Xa(t,e){return na(1+jn.count(Xn(t),t),e,3)}function Ga(t,e){return na(t.getUTCMilliseconds(),e,3)}function Oa(t,e){return Ga(t,e)+"000"}function qa(t,e){return na(t.getUTCMonth()+1,e,2)}function Wa(t,e){return na(t.getUTCMinutes(),e,2)}function Za(t,e){return na(t.getUTCSeconds(),e,2)}function Ka(t){var e=t.getUTCDay();return 0===e?7:e}function Qa(t,e){return na(Rn.count(Xn(t),t),e,2)}function Ja(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Hn(t):Hn.ceil(t),na(Hn.count(Xn(t),t)+(4===Xn(t).getUTCDay()),e,2)}function tr(t){return t.getUTCDay()}function er(t,e){return na(Vn.count(Xn(t),t),e,2)}function nr(t,e){return na(t.getUTCFullYear()%100,e,2)}function ar(t,e){return na(t.getUTCFullYear()%1e4,e,4)}function rr(){return"+0000"}function ir(){return"%"}function or(t){return+t}function cr(t){return Math.floor(+t/1e3)}!function(t){Wn=function(t){var e=t.dateTime,n=t.date,a=t.time,r=t.periods,i=t.days,o=t.shortDays,c=t.months,s=t.shortMonths,l=ra(r),f=ia(r),u=ra(i),h=ia(i),d=ra(o),b=ia(o),p=ra(c),g=ia(c),m=ra(s),y=ia(s),v={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:Ta,e:Ta,f:La,H:Aa,I:Na,j:ka,L:Ea,m:$a,M:Ca,p:function(t){return r[+(t.getHours()>=12)]},Q:or,s:cr,S:Pa,u:Da,U:Ba,V:Ia,w:Ua,W:za,x:null,X:null,y:Ya,Y:ja,Z:Fa,"%":ir},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:Ra,e:Ra,f:Oa,H:Va,I:Ha,j:Xa,L:Ga,m:qa,M:Wa,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:or,s:cr,S:Za,u:Ka,U:Qa,V:Ja,w:tr,W:er,x:null,X:null,y:nr,Y:ar,Z:rr,"%":ir},w={a:function(t,e,n){var a=d.exec(e.slice(n));return a?(t.w=b[a[0].toLowerCase()],n+a[0].length):-1},A:function(t,e,n){var a=u.exec(e.slice(n));return a?(t.w=h[a[0].toLowerCase()],n+a[0].length):-1},b:function(t,e,n){var a=m.exec(e.slice(n));return a?(t.m=y[a[0].toLowerCase()],n+a[0].length):-1},B:function(t,e,n){var a=p.exec(e.slice(n));return a?(t.m=g[a[0].toLowerCase()],n+a[0].length):-1},c:function(t,n,a){return M(t,e,n,a)},d:pa,e:pa,f:wa,H:ma,I:ma,j:ga,L:xa,m:ba,M:ya,p:function(t,e,n){var a=l.exec(e.slice(n));return a?(t.p=f[a[0].toLowerCase()],n+a[0].length):-1},Q:Sa,s:Ma,S:va,u:ca,U:sa,V:la,w:oa,W:fa,x:function(t,e,a){return M(t,n,e,a)},X:function(t,e,n){return M(t,a,e,n)},y:ha,Y:ua,Z:da,"%":_a};function _(t,e){return function(n){var a,r,i,o=[],c=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++c<l;)37===t.charCodeAt(c)&&(o.push(t.slice(s,c)),null!=(r=Qn[a=t.charAt(++c)])?a=t.charAt(++c):r="e"===a?" ":"0",(i=e[a])&&(a=i(n,r)),o.push(a),s=c+1);return o.push(t.slice(s,c)),o.join("")}}function S(t,e){return function(n){var a,r,i=qn(1900);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=(a=On(qn(i.y))).getUTCDay())>4||0===r?Vn.ceil(a):Vn(a),a=jn.offset(a,7*(i.V-1)),i.y=a.getUTCFullYear(),i.m=a.getUTCMonth(),i.d=a.getUTCDate()+(i.w+6)%7):(a=(r=(a=e(qn(i.y))).getDay())>4||0===r?Un.ceil(a):Un(a),a=Dn.offset(a,7*(i.V-1)),i.y=a.getFullYear(),i.m=a.getMonth(),i.d=a.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),r="Z"in i?On(qn(i.y)).getUTCDay():e(qn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(r+5)%7:i.w+7*i.U-(r+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,On(i)):e(i)}}function M(t,e,n,a){for(var r,i,o=0,c=e.length,s=n.length;o<c;){if(a>=s)return-1;if(37===(r=e.charCodeAt(o++))){if(r=e.charAt(o++),!(i=w[r in Qn?e.charAt(o++):r])||(a=i(t,n,a))<0)return-1}else if(r!=n.charCodeAt(a++))return-1}return a}return v.x=_(n,v),v.X=_(a,v),v.c=_(e,v),x.x=_(n,x),x.X=_(a,x),x.c=_(e,x),{format:function(t){var e=_(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",Gn);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t,On);return e.toString=function(){return t},e}}}(t),Zn=Wn.utcFormat,Kn=Wn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Zn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Kn("%Y-%m-%dT%H:%M:%S.%LZ");var sr={value:function(){}};function lr(){for(var t,e=0,n=arguments.length,a={};e<n;++e){if(!(t=arguments[e]+"")||t in a)throw new Error("illegal type: "+t);a[t]=[]}return new fr(a)}function fr(t){this._=t}function ur(t,e){for(var n,a=0,r=t.length;a<r;++a)if((n=t[a]).name===e)return n.value}function hr(t,e,n){for(var a=0,r=t.length;a<r;++a)if(t[a].name===e){t[a]=sr,t=t.slice(0,a).concat(t.slice(a+1));break}return null!=n&&t.push({name:e,value:n}),t}fr.prototype=lr.prototype={constructor:fr,on:function(t,e){var n,a,r=this._,i=(a=r,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!a.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,c=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<c;)if(n=(t=i[o]).type)r[n]=hr(r[n],t.name,e);else if(null==e)for(n in r)r[n]=hr(r[n],t.name,null);return this}for(;++o<c;)if((n=(t=i[o]).type)&&(n=ur(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new fr(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,a,r=new Array(n),i=0;i<n;++i)r[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(a=this._[t]).length;i<n;++i)a[i].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var a=this._[t],r=0,i=a.length;r<i;++r)a[r].value.apply(e,n)}};var dr,br,pr=0,gr=0,mr=0,yr=1e3,vr=0,xr=0,wr=0,_r="object"==typeof performance&&performance.now?performance:Date,Sr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Mr(){return xr||(Sr(Tr),xr=_r.now()+wr)}function Tr(){xr=0}function Ar(){this._call=this._time=this._next=null}function Nr(t,e,n){var a=new Ar;return a.restart(t,e,n),a}function kr(){xr=(vr=_r.now())+wr,pr=gr=0;try{!function(){Mr(),++pr;for(var t,e=dr;e;)(t=xr-e._time)>=0&&e._call.call(null,t),e=e._next;--pr}()}finally{pr=0,function(){var t,e,n=dr,a=1/0;for(;n;)n._call?(a>n._time&&(a=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:dr=e);br=t,Lr(a)}(),xr=0}}function Er(){var t=_r.now(),e=t-vr;e>yr&&(wr-=e,vr=t)}function Lr(t){pr||(gr&&(gr=clearTimeout(gr)),t-xr>24?(t<1/0&&(gr=setTimeout(kr,t-_r.now()-wr)),mr&&(mr=clearInterval(mr))):(mr||(vr=_r.now(),mr=setInterval(Er,yr)),pr=1,Sr(kr)))}Ar.prototype=Nr.prototype={constructor:Ar,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Mr():+n)+(null==e?0:+e),this._next||br===this||(br?br._next=this:dr=this,br=this),this._call=t,this._time=n,Lr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Lr())}};var $r=function(t,e,n){var a=new Ar;return e=null==e?0:+e,a.restart(function(n){a.stop(),t(n+e)},e,n),a},Cr=lr("start","end","interrupt"),Pr=[],Dr=0,Br=1,Ir=2,Ur=3,zr=4,Yr=5,jr=6,Fr=function(t,e,n,a,r,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var a,r=t.__transition;function i(s){var l,f,u,h;if(n.state!==Br)return c();for(l in r)if((h=r[l]).name===n.name){if(h.state===Ur)return $r(i);h.state===zr?(h.state=jr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete r[l]):+l<e&&(h.state=jr,h.timer.stop(),delete r[l])}if($r(function(){n.state===Ur&&(n.state=zr,n.timer.restart(o,n.delay,n.time),o(s))}),n.state=Ir,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Ir){for(n.state=Ur,a=new Array(u=n.tween.length),l=0,f=-1;l<u;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(a[++f]=h);a.length=f+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(c),n.state=Yr,1),i=-1,o=a.length;++i<o;)a[i].call(null,r);n.state===Yr&&(n.on.call("end",t,t.__data__,n.index,n.group),c())}function c(){for(var a in n.state=jr,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=Nr(function(t){n.state=Br,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)},0,n.time)}(t,n,{name:e,index:a,group:r,on:Cr,tween:Pr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Dr})};function Rr(t,e){var n=Hr(t,e);if(n.state>Dr)throw new Error("too late; already scheduled");return n}function Vr(t,e){var n=Hr(t,e);if(n.state>Ir)throw new Error("too late; already started");return n}function Hr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var Xr=function(t,e){var n,a,r,i=t.__transition,o=!0;if(i){for(r in e=null==e?null:e+"",i)(n=i[r]).name===e?(a=n.state>Ir&&n.state<Yr,n.state=jr,n.timer.stop(),a&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[r]):o=!1;o&&delete t.__transition}};function Gr(t,e,n){var a=t._id;return t.each(function(){var t=Vr(this,a);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Hr(t,a).value[e]}}var Or=function(t,e){var n;return("number"==typeof e?Ie:e instanceof Gt?Pe:(n=Gt(e))?(e=n,Pe):Ve)(t,e)};var qr=H.prototype.constructor;var Wr=0;function Zr(t,e,n,a){this._groups=t,this._parents=e,this._name=n,this._id=a}function Kr(){return++Wr}var Qr=H.prototype;Zr.prototype=function(t){return H().transition(t)}.prototype={constructor:Zr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=o(t));for(var a=this._groups,r=a.length,i=new Array(r),c=0;c<r;++c)for(var s,l,f=a[c],u=f.length,h=i[c]=new Array(u),d=0;d<u;++d)(s=f[d])&&(l=t.call(s,s.__data__,d,f))&&("__data__"in s&&(l.__data__=s.__data__),h[d]=l,Fr(h[d],e,n,d,h,Hr(s,n)));return new Zr(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=s(t));for(var a=this._groups,r=a.length,i=[],o=[],c=0;c<r;++c)for(var l,f=a[c],u=f.length,h=0;h<u;++h)if(l=f[h]){for(var d,b=t.call(l,l.__data__,h,f),p=Hr(l,n),g=0,m=b.length;g<m;++g)(d=b[g])&&Fr(d,e,n,g,b,p);i.push(b),o.push(l)}return new Zr(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=h(t));for(var e=this._groups,n=e.length,a=new Array(n),r=0;r<n;++r)for(var i,o=e[r],c=o.length,s=a[r]=[],l=0;l<c;++l)(i=o[l])&&t.call(i,i.__data__,l,o)&&s.push(i);return new Zr(a,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,a=e.length,r=n.length,i=Math.min(a,r),o=new Array(a),c=0;c<i;++c)for(var s,l=e[c],f=n[c],u=l.length,h=o[c]=new Array(u),d=0;d<u;++d)(s=l[d]||f[d])&&(h[d]=s);for(;c<a;++c)o[c]=e[c];return new Zr(o,this._parents,this._name,this._id)},selection:function(){return new qr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Kr(),a=this._groups,r=a.length,i=0;i<r;++i)for(var o,c=a[i],s=c.length,l=0;l<s;++l)if(o=c[l]){var f=Hr(o,e);Fr(o,t,n,l,c,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Zr(a,this._parents,t,n)},call:Qr.call,nodes:Qr.nodes,node:Qr.node,size:Qr.size,empty:Qr.empty,each:Qr.each,on:function(t,e){var n=this._id;return arguments.length<2?Hr(this.node(),n).on.on(t):this.each(function(t,e,n){var a,r,i=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Rr:Vr;return function(){var o=i(this,t),c=o.on;c!==a&&(r=(a=c).copy()).on(e,n),o.on=r}}(n,t,e))},attr:function(t,e){var n=a(t),r="transform"===n?Ke:Or;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var a,r,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttributeNS(t.space,t.local))===c?null:o===a&&c===r?i:i=e(a=o,r=c);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var a,r,i;return function(){var o,c=n(this);if(null!=c)return(o=this.getAttribute(t))===c?null:o===a&&c===r?i:i=e(a=o,r=c);this.removeAttribute(t)}})(n,r,Gr(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var a,r;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===a?r:r=e(a=i,n)}}:function(t,e,n){var a,r;return function(){var i=this.getAttribute(t);return i===n?null:i===a?r:r=e(a=i,n)}})(n,r,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=a(t);return this.tween(n,(r.local?function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttributeNS(t.space,t.local,a(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,a=e.apply(n,arguments);return a&&function(e){n.setAttribute(t,a(e))}}return n._value=e,n})(r,e))},style:function(t,e,n){var a="transform"==(t+="")?Ze:Or;return null==e?this.styleTween(t,function(t,e){var n,a,r;return function(){var i=x(this,t),o=(this.style.removeProperty(t),x(this,t));return i===o?null:i===n&&o===a?r:r=e(n=i,a=o)}}(t,a)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var a,r,i;return function(){var o=x(this,t),c=n(this);return null==c&&(this.style.removeProperty(t),c=x(this,t)),o===c?null:o===a&&c===r?i:i=e(a=o,r=c)}}(t,a,Gr(this,"style."+t,e)):function(t,e,n){var a,r;return function(){var i=x(this,t);return i===n?null:i===a?r:r=e(a=i,n)}}(t,a,e+""),n)},styleTween:function(t,e,n){var a="style."+(t+="");if(arguments.length<2)return(a=this.tween(a))&&a._value;if(null==e)return this.tween(a,null);if("function"!=typeof e)throw new Error;return this.tween(a,function(t,e,n){function a(){var a=this,r=e.apply(a,arguments);return r&&function(e){a.style.setProperty(t,r(e),n)}}return a._value=e,a}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Gr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var a,r=Hr(this.node(),n).tween,i=0,o=r.length;i<o;++i)if((a=r[i]).name===t)return a.value;return null}return this.each((null==e?function(t,e){var n,a;return function(){var r=Vr(this,t),i=r.tween;if(i!==n)for(var o=0,c=(a=n=i).length;o<c;++o)if(a[o].name===e){(a=a.slice()).splice(o,1);break}r.tween=a}}:function(t,e,n){var a,r;if("function"!=typeof n)throw new Error;return function(){var i=Vr(this,t),o=i.tween;if(o!==a){r=(a=o).slice();for(var c={name:e,value:n},s=0,l=r.length;s<l;++s)if(r[s].name===e){r[s]=c;break}s===l&&r.push(c)}i.tween=r}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Rr(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Rr(this,t).delay=e}})(e,t)):Hr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Vr(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Vr(this,t).duration=e}})(e,t)):Hr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Vr(this,t).ease=e}}(e,t)):Hr(this.node(),e).ease}};var Jr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function ti(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Jr.time=Mr(),Jr;return n}H.prototype.interrupt=function(t){return this.each(function(){Xr(this,t)})},H.prototype.transition=function(t){var e,n;t instanceof Zr?(e=t._id,t=t._name):(e=Kr(),(n=Jr).time=Mr(),t=null==t?null:t+"");for(var a=this._groups,r=a.length,i=0;i<r;++i)for(var o,c=a[i],s=c.length,l=0;l<s;++l)(o=c[l])&&Fr(o,t,e,l,c,n||ti(o,e));return new Zr(a,this._parents,t,e)};var ei=function(t){for(var e=t.length/6|0,n=new Array(e),a=0;a<e;)n[a]="#"+t.slice(6*a,6*++a);return n};ei("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),ei("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),ei("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),ei("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),ei("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),ei("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),ei("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),ei("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),ei("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var ni=function(t){return Be(t[t.length-1])};ni(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(ei)),ni(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(ei));var ai=ni(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(ei)),ri=ni(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(ei)),ii=ni(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(ei)),oi=ni(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(ei)),ci=ni(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(ei));ni(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(ei)),ni(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(ei));var si=ni(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(ei));ni(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(ei)),ni(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(ei));var li=ni(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(ei));ni(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(ei));var fi=ni(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(ei));ni(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(ei)),ni(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(ei));var ui=ni(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(ei));ni(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(ei)),ni(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(ei)),ni(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(ei));var hi=ni(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(ei)),di=ni(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(ei)),bi=ni(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(ei)),pi=ni(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(ei)),gi=ni(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(ei)),mi=ni(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(ei));Je(Ae(300,.5,0),Ae(-240,.5,1));Je(Ae(-100,.75,.35),Ae(80,1.5,.8)),Je(Ae(260,.75,.35),Ae(80,1.5,.8)),Ae(),Zt();function yi(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}yi(ei("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));yi(ei("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),yi(ei("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),yi(ei("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function vi(t,e="YlGnBu",n,a,r=!1){a=void 0===a?lt(t):a,n=void 0===n?ht(t):n;const i=function t(e){var n=0,a=1,r=1,i=!1;function o(t){var a=(t-n)*r;return e(i?Math.max(0,Math.min(1,a)):a)}return o.domain=function(t){return arguments.length?(n=+t[0],a=+t[1],r=n===a?0:1/(a-n),o):[n,a]},o.clamp=function(t){return arguments.length?(i=!!t,o):i},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return t(e).domain([n,a]).clamp(i)},Mn(o)}(function(t){const e={BuGn:si,OrRd:li,PuBu:fi,YlGnBu:ui,Blues:hi,Oranges:mi,Greens:di,Purples:pi,Reds:gi,Greys:bi,Grays:bi,RdBu:ii,RdGy:oi,PiYG:ai,PuOr:ri,RdYlBu:ci};if(!e.hasOwnProperty(t)){const e="Unrecognized color: "+t;throw alert(e),e}return e[t]}(e));return r?i.domain([a,n]):i.domain([n,a]),i}function xi(t,e,n,a,r,i=10,o=10,c={h:10,w:40},s="h",l=!1){let f=[];if(l){let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=(f=t.map(t=>t*e)).concat(t.filter(t=>0!=t).map(t=>0-t*e)).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN)}else{let t=[...Array(i+1).keys()],e=n.domain()[1]/i;f=t.map(t=>t*e)}const u=e.append("g").attr("transform",`translate(${a.x}, ${a.y})`).selectAll(".legend").data(f).enter().append("g").classed("legend",!0);"h"==s?(e.append("text").attr("class","color-legend").text(t).attr("x",-10).attr("text-anchor","end").attr("y",c.h).attr("transform",`translate(${a.x}, ${a.y})`),u.append("rect").attr("x",(t,e)=>c.w*e).attr("y",5).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?Math.pow(o,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>c.w*e).attr("y",0)):(e.append("text").attr("class","color-legend").text(t).attr("x",5).attr("text-anchor","start").attr("y",0).attr("transform",`translate(${a.x}, ${a.y+c.h*f.length})rotate(90)`),u.append("rect").attr("x",0).attr("y",(t,e)=>c.h*e).attr("width",c.w).attr("height",c.h).style("fill",n),u.append("text").attr("class","color-legend").text(t=>r?(Math.pow(o,t)-1).toPrecision(2):t.toPrecision(2)).attr("x",15).attr("y",(t,e)=>c.h*e+c.h/2))}class wi{constructor(t,e,n=!1){$(`#${t}`).show();const a=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(a).appendTo(`#${t}`),this.buttons={},this.tooltip=e}createDownloadSvgButton(t,e,n,a,r="fa-download"){this.createButton(t,r);X(`#${t}`).on("click",()=>{this.downloadSvg(e,n,a)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(t,e,n="fa-expand-arrows-alt"){this.createButton(t,n);X(`#${t}`).on("click",e).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(t,e="fa-download"){const n=$("<a/>").attr("id",t).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${e}`).appendTo(n),this.buttons[t]=n,n}attachTooltip(t){this.tooltip=t}downloadSvg(t,e,n){let a=$($($(`${"#"+t}`))[0]),r=a.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(t){for(var e="",n=document.styleSheets,a=0;a<n.length;a++)try{if(null==n[a].cssRules)continue;for(var r=n[a].cssRules,i=0;i<r.length;i++){var o=r[i];if(void 0!==o.style){var c;try{c=$(t).find(o.selectorText)}catch(t){c=[]}c.length>0&&(e+=o.selectorText+" { "+o.style.cssText+" }\n")}}}catch(t){if("SecurityError"!==t.name)throw t;continue}var s=document.createElement("style");return s.setAttribute("type","text/css"),s.innerHTML="<![CDATA[\n"+e+"\n]]>",s}(a.get());r.prepend(i),$("#"+n).html("").hide();let o=$(`#${n}`).append(r).html(),c=new Blob([o],{type:"image/svg+xml"});saveAs(c,e),$(`#${n}`).html("").hide()}}class _i{constructor(t,e=!1,n=30,a=-40,r=100){this.id=t,this.verbose=e,this.offsetX=n,this.offsetY=a,this.duration=r}show(t){this.verbose&&console.log(t),this.edit(t),this.move(),X("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){X("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(t=I.pageX,e=I.pageY){this.verbose&&(console.log(t),console.log(e)),t+=this.offsetX,e=e+this.offsetY<0?10:e+this.offsetY;X("#"+this.id).style("left",`${t}px`).style("top",`${e}px`)}edit(t){X("#"+this.id).html(t)}}class Si{constructor(t,e=!0,n=10,a="YlGnBu",r=2,i="heatmapTooltip"){this.data=t,this.useLog=e,this.logBase=n,this.nullColor="#e6e6e6",this.colorScale=void 0,this.xList=void 0,this.yList=void 0,this.xScale=void 0,this.yScale=void 0,this.r=r,this.colorScheme=a,0==$(`#${i}`).length&&$("<div/>").attr("id",i).appendTo($("body")),this.tooltip=new _i(i),X(`#${i}`).classed("heatmap-tooltip",!0),this.toolbar=void 0}createToolbar(t,e){return this.toolbar=new wi(t,e),this.toolbar}drawColorLegend(t,e={x:0,y:0},n=5){xi(this.data[0].unit||"Value",t,this.colorScale,e,this.useLog,n,this.logBase)}redraw(t,e,n,a={w:1e3,h:1e3},r=30){this._setXScale(a.w,e),this._setYScale(a.h,n),this.draw(t,a,r)}draw(t,e={w:1e3,h:600},n=30,a=!0,r=null){void 0===this.xList&&this._setXScale(e.w),void 0===this.yList&&this._setYScale(e.h),void 0===this.colorScale&&this._setColorScale();const i=t.selectAll(".exp-map-xlabel").data(this.xList),o=null==r?this.yScale.range()[1]+2*this.yScale.bandwidth():this.yScale.range()[1]+r;i.attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}),i.enter().append("text").attr("class",(t,e)=>`exp-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${o}) rotate(${n})`}).merge(i).text(t=>t),i.exit().remove();t.selectAll(".exp-map-ylabel").data(this.yList).enter().append("text").text(t=>t).attr("x",this.xScale.range()[1]+5).attr("y",t=>this.yScale(t)+10).attr("class",(t,e)=>`exp-map-ylabel y${e}`).style("text-anchor","start").style("cursor","default").on("click",t=>{alert(`${t} is clicked. To be implemented`)}).on("mouseover",function(t){X(this).classed("normal",!1).classed("highlighted",!0)}).on("mouseout",function(t){X(this).classed("normal",!0).classed("highlighted",!1)});const c=t.selectAll(".exp-map-cell").data(this.data,t=>t.value);c.attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`);const s=this;c.enter().append("rect").attr("row",t=>`x${this.xList.indexOf(t.x)}`).attr("col",t=>`y${this.yList.indexOf(t.y)}`).attr("x",t=>this.xScale(t.x)).attr("y",t=>this.yScale(t.y)).attr("rx",this.r).attr("ry",this.r).attr("class",t=>"exp-map-cell").attr("width",this.xScale.bandwidth()).attr("height",this.yScale.bandwidth()).style("fill",t=>"#eeeeee").on("mouseover",function(e){const n=X(this);s.cellMouseover(e,t,n)}).on("mouseout",function(t){X(this);s.cellMouseout()}).merge(c).style("fill",t=>a&&0==t.value?"#DDDDDD":this.useLog?this.colorScale(this._log(t.value)):this.colorScale(t.value)),c.exit().remove()}cellMouseout(t){q("*").classed("highlighted",!1),this.tooltip.hide()}cellMouseover(t,e,n){const a=n.attr("row"),r=n.attr("col");e.selectAll(".exp-map-xlabel").filter(`.${a}`).classed("highlighted",!0),e.selectAll(".exp-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);const i=void 0===t.displayValue?parseFloat(t.value.toExponential()).toPrecision(4):t.displayValue;this.tooltip.show(`Column: ${t.x} <br/> Row: ${t.y}<br/> Value: ${i}`)}_setXScale(t,e){this.xList=void 0!==e?e:wt().key(t=>t.x).entries(this.data).map(t=>t.key),this.xScale=Lt().domain(this.xList).range([0,t]).padding(.05)}_setYScale(t,e){this.yList=void 0!==e?e:wt().key(t=>t.y).entries(this.data).map(t=>t.key),this.yScale=Lt().domain(this.yList).range([0,t]).padding(.05)}_setColorScale(){let t=this.useLog,e=this.data.map(e=>t?this._log(e.value):e.value);this.colorScale=vi(e,this.colorScheme,0)}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class Mi{constructor(t=window.innerWidth,e=100,n=100,a={top:50,right:250,bottom:170,left:10},r=12,i=10){this.margin=a,this.rootW=t,this.leftTreePanel={x:a.left,y:a.top+n,h:void 0,w:e-i,id:"leftTree"},this.cell={w:void 0,h:r},this.topTreePanel={x:a.left+e,y:a.top,h:n-i,w:this.rootW-(a.left+e+a.right),id:"topTree"},this.heatmapPanel={x:a.left+e,y:a.top+n,h:this.leftTreePanel.h,w:this.topTreePanel.w,id:"heatmap"},this.legendPanel={x:a.left+e,y:0,h:a.top/2,w:this.topTreePanel.w,cell:{w:60},id:"legend"}}get(){return{margin:this.margin,cell:this.cell,w:this.rootW,h:this.margin.top+this.topTreePanel.h+this.legendPanel.h+this.margin.bottom,panels:{top:this.topTreePanel,left:this.leftTreePanel,main:this.heatmapPanel,legend:this.legendPanel}}}}function Ti(t){var e=0,n=t.children,a=n&&n.length;if(a)for(;--a>=0;)e+=n[a].value;else e=1;t.value=e}function Ai(t,e){var n,a,r,i,o,c=new Li(t),s=+t.value&&(c.value=t.value),l=[c];for(null==e&&(e=Ni);n=l.pop();)if(s&&(n.value=+n.data.value),(r=e(n.data))&&(o=r.length))for(n.children=new Array(o),i=o-1;i>=0;--i)l.push(a=n.children[i]=new Li(r[i])),a.parent=n,a.depth=n.depth+1;return c.eachBefore(Ei)}function Ni(t){return t.children}function ki(t){t.data=t.data.data}function Ei(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Li(t){this.data=t,this.depth=this.height=0,this.parent=null}Li.prototype=Ai.prototype={constructor:Li,count:function(){return this.eachAfter(Ti)},each:function(t){var e,n,a,r,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(a=0,r=n.length;a<r;++a)o.push(n[a])}while(o.length);return this},eachAfter:function(t){for(var e,n,a,r=this,i=[r],o=[];r=i.pop();)if(o.push(r),e=r.children)for(n=0,a=e.length;n<a;++n)i.push(e[n]);for(;r=o.pop();)t(r);return this},eachBefore:function(t){for(var e,n,a=this,r=[a];a=r.pop();)if(t(a),e=a.children)for(n=e.length-1;n>=0;--n)r.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,a=e.children,r=a&&a.length;--r>=0;)n+=a[r].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),a=e.ancestors(),r=null;for(t=n.pop(),e=a.pop();t===e;)r=t,t=n.pop(),e=a.pop();return r}(e,t),a=[e];e!==n;)e=e.parent,a.push(e);for(var r=a.length;t!==n;)a.splice(r,0,t),t=t.parent;return a},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return Ai(this).eachBefore(ki)}};var $i=Array.prototype.slice,Ci=function(t){return t},Pi=1,Di=2,Bi=3,Ii=4,Ui=1e-6;function zi(t){return"translate("+(t+.5)+",0)"}function Yi(t){return"translate(0,"+(t+.5)+")"}function ji(){return!this.__axis}function Fi(t,e){var n=[],a=null,r=null,i=6,o=6,c=3,s=t===Pi||t===Ii?-1:1,l=t===Ii||t===Di?"x":"y",f=t===Pi||t===Bi?zi:Yi;function u(u){var h=null==a?e.ticks?e.ticks.apply(e,n):e.domain():a,d=null==r?e.tickFormat?e.tickFormat.apply(e,n):Ci:r,b=Math.max(i,0)+c,p=e.range(),g=+p[0]+.5,m=+p[p.length-1]+.5,y=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=u.selection?u.selection():u,x=v.selectAll(".domain").data([null]),w=v.selectAll(".tick").data(h,e).order(),_=w.exit(),S=w.enter().append("g").attr("class","tick"),M=w.select("line"),T=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(S),M=M.merge(S.append("line").attr("stroke","currentColor").attr(l+"2",s*i)),T=T.merge(S.append("text").attr("fill","currentColor").attr(l,s*b).attr("dy",t===Pi?"0em":t===Bi?"0.71em":"0.32em")),u!==v&&(x=x.transition(u),w=w.transition(u),M=M.transition(u),T=T.transition(u),_=_.transition(u).attr("opacity",Ui).attr("transform",function(t){return isFinite(t=y(t))?f(t):this.getAttribute("transform")}),S.attr("opacity",Ui).attr("transform",function(t){var e=this.parentNode.__axis;return f(e&&isFinite(e=e(t))?e:y(t))})),_.remove(),x.attr("d",t===Ii||t==Di?o?"M"+s*o+","+g+"H0.5V"+m+"H"+s*o:"M0.5,"+g+"V"+m:o?"M"+g+","+s*o+"V0.5H"+m+"V"+s*o:"M"+g+",0.5H"+m),w.attr("opacity",1).attr("transform",function(t){return f(y(t))}),M.attr(l+"2",s*i),T.attr(l,s*b).text(d),v.filter(ji).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Di?"start":t===Ii?"end":"middle"),v.each(function(){this.__axis=y})}return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(){return n=$i.call(arguments),u},u.tickArguments=function(t){return arguments.length?(n=null==t?[]:$i.call(t),u):n.slice()},u.tickValues=function(t){return arguments.length?(a=null==t?null:$i.call(t),u):a&&a.slice()},u.tickFormat=function(t){return arguments.length?(r=t,u):r},u.tickSize=function(t){return arguments.length?(i=o=+t,u):i},u.tickSizeInner=function(t){return arguments.length?(i=+t,u):i},u.tickSizeOuter=function(t){return arguments.length?(o=+t,u):o},u.tickPadding=function(t){return arguments.length?(c=+t,u):c},u}function Ri(t){return Fi(Bi,t)}function Vi(t){return Fi(Ii,t)}const Hi=!1;class Xi{constructor(t,e="h"){this.newick=t,this.orientation=e,this.postorder=[],this.root=Ai(function(t){for(var e=[],n={},a=t.split(/\s*(;|\(|\)|,|:)\s*/),r=0;r<a.length;r++){var i=a[r];switch(i){case"(":var o={};n.branchset=[o],e.push(n),n=o;break;case",":o={},e[e.length-1].branchset.push(o),n=o;break;case")":n=e.pop();break;case":":break;default:var c=a[r-1];")"==c||"("==c||","==c?n.name=i:":"==c&&(n.length=parseFloat(i))}}return n}(t),t=>t.branchset).sum(t=>t.branchset?0:1).sort((t,e)=>t.value-e.value||t.data.length-e.data.length),this.leaves=this.root.leaves().sort((t,e)=>t.value-e.value||W(t.data.length,e.data.length)),this.width=void 0,this.height=void 0,this.xScale=void 0,this.yScale=void 0}draw(t,e,n){this.width=e,this.height=n,this._setXScale(),this._setYScale(),"h"==this.orientation?this._drawHTree(t):this._drawVTree(t)}_drawHTree(t){const e=t=>{void 0===t.children?t.y=this.yScale(t.data.name):t.y=t.children.reduce((t,e)=>t+e.y,0)/t.children.length},n=t=>{t.x=this.xScale(this._getBranchLengthToRoot(t))},a=this._sortNodesByLevel();a.forEach(t=>{n(t),e(t)}),t.selectAll(".branch").data(a).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.data.length?t.x-this.xScale(t.data.length):t.x).attr("y1",t=>t.y+this.yScale.bandwidth()/2).attr("y2",t=>t.y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const r=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(r).enter().append("line").attr("x1",t=>t.x).attr("x2",t=>t.x).attr("y1",t=>t.children[0].y+this.yScale.bandwidth()/2).attr("y2",t=>t.children[1].y+this.yScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(r).enter().append("circle").attr("cx",t=>t.x).attr("cy",t=>t.y+this.yScale.bandwidth()/2).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").attr("transform","translate(0,"+this.height+")").call(Ri(this.xScale).ticks(3))}_sortNodesByLevel(){return this.root.descendants().sort((t,e)=>t.height-e.height||W(t.data.length,e.data.length))}_drawVTree(t){const e=t=>{void 0===t.children?t.x=this.xScale(t.data.name):t.x=t.children.reduce((t,e)=>t+e.x,0)/t.children.length},n=t=>{t.y=this.yScale(this._getBranchLengthToRoot(t))},a=this._sortNodesByLevel();a.forEach(t=>{e(t),n(t)}),t.selectAll(".branch").data(a).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.data.length?t.y-this.yScale(t.data.length):t.y).attr("x1",t=>t.x+this.xScale.bandwidth()/2).attr("x2",t=>t.x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1);const r=this.root.descendants().filter(t=>t.height).sort((t,e)=>e.height-t.height);t.selectAll(".arm").data(r).enter().append("line").attr("y1",t=>t.y).attr("y2",t=>t.y).attr("x1",t=>t.children[0].x+this.xScale.bandwidth()/2).attr("x2",t=>t.children[1].x+this.xScale.bandwidth()/2).attr("stroke","gray").attr("stroke-width",1),t.selectAll(".node").data(r).enter().append("circle").attr("cx",t=>t.x+this.xScale.bandwidth()/2).attr("cy",t=>t.y).attr("r",2).attr("fill","#333").attr("opacity",.5).attr("class","dendrogram-node").on("mouseover",function(t){d3.select(this).attr("r",3),console.log(t.leaves())}).on("mouseout",function(t){d3.select(this).attr("r",2)}),t.append("g").attr("class","dendrogram-axis").call(Vi(this.yScale).ticks(3))}_getBranchLengthToRoot(t){return t.path(this.root).reduce((t,e)=>e.data.length?t+e.data.length:t,0)}_getMaxBranchLength(){let t=this.leaves[0];return this._getBranchLengthToRoot(t)}_assignPostorder(t){return void 0===t.children?void this.postorder.push(t):(this._assignPostorder(t.children[0]),void this._assignPostorder(t.children[1]))}_setXScale(){"h"==this.orientation?this.xScale=Tn().domain([0,this._getMaxBranchLength()]).range([0,this.width]):(this._assignPostorder(this.root),Hi&&console.log(this.postorder),this.xScale=Lt().domain(this.postorder.map(t=>t.data.name)).range([0,this.width]).padding(.05))}_setYScale(){"h"==this.orientation?(this._assignPostorder(this.root),Hi&&console.log(this.postorder),this.yScale=Lt().domain(this.postorder.map(t=>t.data.name)).range([0,this.height]).padding(.05)):this.yScale=Tn().domain([0,this._getMaxBranchLength()]).range([0,this.height])}}class Gi{constructor(t,e,n,a="YlGnBu",r=2,i=new Mi,o="dmapTooltip",c=!0,s=10,l=""){this.config=i.get(),t=void 0===t||t.startsWith("Not enough data")?void 0:t,e=void 0===e||e.startsWith("Not enough data")?void 0:e,this.data={columnTree:t,rowTree:e,heatmap:n,external:void 0},this.objects={columnTree:void 0===this.data.columnTree?void 0:new Xi(this.data.columnTree,"v"),rowTree:void 0===this.data.rowTree?void 0:new Xi(this.data.rowTree,"h"),heatmap:new Si(this.data.heatmap,c,s,a,r,o)},this.visualComponents={svg:void 0,columnTree:void 0,rowTree:void 0},this.title=l,this.toolbar=void 0,this.tooltip=this.objects.heatmap.tooltip}createToolbar(t,e){return this.toolbar=new wi(t,e),this.toolbar}render(t,e,n=!0,a=!0,r="top",i=5){this._updateConfig(r),this.visualComponents.svg=gt(t,this.config.w,this.config.h,this.config.margin,e);let o=void 0,c=void 0;n&&void 0!==this.objects.columnTree&&(this.visualComponents.columnTree=this._renderTree("column",this.objects.columnTree,this.config.panels.top),o=this.objects.columnTree.xScale.domain()),a&&void 0!==this.objects.rowTree&&(this.visualComponents.rowTree=this._renderTree("row",this.objects.rowTree,this.config.panels.left),c=this.objects.rowTree.yScale.domain()),""!=this.title&&(console.log(this.title),X(`#${t}-svg`).append("text").attr("x",0).attr("y",20).text(this.title)),this._renderHeatmap(this.objects.heatmap,o,c,i)}_renderTree(t,e,n){let a=this.visualComponents.svg;const r="row"==t?".exp-map-ylabel":".exp-map-xlabel",i=a.append("g").attr("id",n.id).attr("transform",`translate(${n.x}, ${n.y})`);e.draw(i,n.w,n.h);return i.selectAll(".dendrogram-node").on("mouseover",function(t){X(this).attr("r",6).attr("fill","red");let e=t.leaves().map(t=>t.data.name);a.selectAll(r).filter(t=>e.includes(t)).classed("highlighted",!0),a.selectAll(".leaf-color").filter(t=>e.includes(t)).classed("highlighted",!0)}).on("mouseout",function(){X(this).attr("r",2).attr("fill","#333"),a.selectAll(r).classed("highlighted",!1),a.selectAll(".leaf-color").classed("highlighted",!1)}),i}_renderHeatmap(t,e,n,a=5){let r=this.visualComponents.svg;const i=this.config.panels.main,o=r.append("g").attr("id",i.id).attr("transform",`translate(${i.x}, ${i.y})`);t.redraw(o,e,n,{w:i.w,h:i.h}),t.drawColorLegend(r,this.config.panels.legend,a)}_updateConfig(t){const e=void 0===this.objects.rowTree?1:this.objects.rowTree.leaves.length;this.config.panels.left.h=this.config.cell.h*e<20?20:this.config.cell.h*e,this.config.h+=this.config.panels.left.h,this.config.panels.main.h=this.config.panels.left.h,"bottom"==t&&(this.config.panels.legend.y+=this.config.panels.main.h+this.config.panels.main.x+50)}}var Oi=Math.PI,qi=2*Oi,Wi=qi-1e-6;function Zi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ki(){return new Zi}Zi.prototype=Ki.prototype={constructor:Zi,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,a){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+a)},bezierCurveTo:function(t,e,n,a,r,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +a+","+(this._x1=+r)+","+(this._y1=+i)},arcTo:function(t,e,n,a,r){t=+t,e=+e,n=+n,a=+a,r=+r;var i=this._x1,o=this._y1,c=n-t,s=a-e,l=i-t,f=o-e,u=l*l+f*f;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(u>1e-6)if(Math.abs(f*c-s*l)>1e-6&&r){var h=n-i,d=a-o,b=c*c+s*s,p=h*h+d*d,g=Math.sqrt(b),m=Math.sqrt(u),y=r*Math.tan((Oi-Math.acos((b+u-p)/(2*g*m)))/2),v=y/m,x=y/g;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*l)+","+(e+v*f)),this._+="A"+r+","+r+",0,0,"+ +(f*h>l*d)+","+(this._x1=t+x*c)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,a,r,i){t=+t,e=+e;var o=(n=+n)*Math.cos(a),c=n*Math.sin(a),s=t+o,l=e+c,f=1^i,u=i?a-r:r-a;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),n&&(u<0&&(u=u%qi+qi),u>Wi?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-c)+"A"+n+","+n+",0,1,"+f+","+(this._x1=s)+","+(this._y1=l):u>1e-6&&(this._+="A"+n+","+n+",0,"+ +(u>=Oi)+","+f+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,a){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +a+"h"+-n+"Z"},toString:function(){return this._}};var Qi=function(t){return function(){return t}};function Ji(t){this._context=t}Ji.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var to=function(t){return new Ji(t)};function eo(t){return t[0]}function no(t){return t[1]}var ao=function(){var t=eo,e=no,n=Qi(!0),a=null,r=to,i=null;function o(o){var c,s,l,f=o.length,u=!1;for(null==a&&(i=r(l=Ki())),c=0;c<=f;++c)!(c<f&&n(s=o[c],c,o))===u&&((u=!u)?i.lineStart():i.lineEnd()),u&&i.point(+t(s,c,o),+e(s,c,o));if(l)return i=null,l+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:Qi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Qi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Qi(!!t),o):n},o.curve=function(t){return arguments.length?(r=t,null!=a&&(i=r(a)),o):r},o.context=function(t){return arguments.length?(null==t?a=i=null:i=r(a=t),o):a},o},ro=function(){var t=eo,e=null,n=Qi(0),a=no,r=Qi(!0),i=null,o=to,c=null;function s(s){var l,f,u,h,d,b=s.length,p=!1,g=new Array(b),m=new Array(b);for(null==i&&(c=o(d=Ki())),l=0;l<=b;++l){if(!(l<b&&r(h=s[l],l,s))===p)if(p=!p)f=l,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),u=l-1;u>=f;--u)c.point(g[u],m[u]);c.lineEnd(),c.areaEnd()}p&&(g[l]=+t(h,l,s),m[l]=+n(h,l,s),c.point(e?+e(h,l,s):g[l],a?+a(h,l,s):m[l]))}if(d)return c=null,d+""||null}function l(){return ao().defined(r).curve(o).context(i)}return s.x=function(n){return arguments.length?(t="function"==typeof n?n:Qi(+n),e=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:Qi(+e),s):t},s.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Qi(+t),s):e},s.y=function(t){return arguments.length?(n="function"==typeof t?t:Qi(+t),a=null,s):n},s.y0=function(t){return arguments.length?(n="function"==typeof t?t:Qi(+t),s):n},s.y1=function(t){return arguments.length?(a=null==t?null:"function"==typeof t?t:Qi(+t),s):a},s.lineX0=s.lineY0=function(){return l().x(t).y(n)},s.lineY1=function(){return l().x(t).y(a)},s.lineX1=function(){return l().x(e).y(n)},s.defined=function(t){return arguments.length?(r="function"==typeof t?t:Qi(!!t),s):r},s.curve=function(t){return arguments.length?(o=t,null!=i&&(c=o(i)),s):o},s.context=function(t){return arguments.length?(null==t?i=c=null:c=o(i=t),s):i},s};function io(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function oo(t,e){this._context=t,this._k=(1-e)/6}oo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:io(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var co=function t(e){function n(t){return new oo(t,e)}return n.tension=function(e){return t(+e)},n}(0);function so(t){return t<0?-1:1}function lo(t,e,n){var a=t._x1-t._x0,r=e-t._x1,i=(t._y1-t._y0)/(a||r<0&&-0),o=(n-t._y1)/(r||a<0&&-0),c=(i*r+o*a)/(a+r);return(so(i)+so(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(c))||0}function fo(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function uo(t,e,n){var a=t._x0,r=t._y0,i=t._x1,o=t._y1,c=(i-a)/3;t._context.bezierCurveTo(a+c,r+c*e,i-c,o-c*n,i,o)}function ho(t){this._context=t}function bo(t){this._context=t}ho.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:uo(this,this._t0,fo(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,uo(this,fo(this,n=lo(this,t,e)),n);break;default:uo(this,this._t0,n=lo(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(function(t){this._context=new bo(t)}.prototype=Object.create(ho.prototype)).point=function(t,e){ho.prototype.point.call(this,e,t)},bo.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,a,r,i){this._context.bezierCurveTo(e,t,a,n,i,r)}};var po=function(){I.preventDefault(),I.stopImmediatePropagation()},go=function(t){var e=t.document.documentElement,n=X(t).on("dragstart.drag",po,!0);"onselectstart"in e?n.on("selectstart.drag",po,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};var mo=function(t){return function(){return t}},yo=function(t,e,n){this.target=t,this.type=e,this.selection=n};function vo(){I.stopImmediatePropagation()}var xo=function(){I.preventDefault(),I.stopImmediatePropagation()},wo={name:"drag"},_o={name:"space"},So={name:"handle"},Mo={name:"center"},To={name:"x",handles:["e","w"].map(Po),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Ao={name:"y",handles:["n","s"].map(Po),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},No={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Po),input:function(t){return t},output:function(t){return t}},ko={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Eo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Lo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},$o={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Co={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Po(t){return{type:t}}function Do(){return!I.button}function Bo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Io(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Uo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}var zo=function(){return function(t){var e,n=Bo,a=Do,r=lr(o,"start","brush","end"),i=6;function o(e){var n=e.property("__brush",u).selectAll(".overlay").data([Po("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",ko.overlay).merge(n).each(function(){var t=Io(this).extent;X(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([Po("selection")]).enter().append("rect").attr("class","selection").attr("cursor",ko.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=e.selectAll(".handle").data(t.handles,function(t){return t.type});a.exit().remove(),a.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return ko[t.type]}),e.each(c).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",f)}function c(){var t=X(this),e=Io(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-i/2:e[0][0]-i/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-i/2:e[0][1]-i/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+i:i}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+i:i})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,e){return t.__brush.emitter||new l(t,e)}function l(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function f(){if(I.touches){if(I.changedTouches.length<I.touches.length)return xo()}else if(e)return;if(a.apply(this,arguments)){var n,r,i,o,l,f,u,h,d,b,p,g,m,y=this,v=I.target.__data__.type,x="selection"===(I.metaKey?v="overlay":v)?wo:I.altKey?Mo:So,w=t===Ao?null:$o[v],_=t===To?null:Co[v],S=Io(y),M=S.extent,T=S.selection,A=M[0][0],N=M[0][1],k=M[1][0],E=M[1][1],L=w&&_&&I.shiftKey,$=O(y),C=$,P=s(y,arguments).beforestart();"overlay"===v?S.selection=T=[[n=t===Ao?A:$[0],i=t===To?N:$[1]],[l=t===Ao?k:n,u=t===To?E:i]]:(n=T[0][0],i=T[0][1],l=T[1][0],u=T[1][1]),r=n,o=i,f=l,h=u;var D=X(y).attr("pointer-events","none"),B=D.selectAll(".overlay").attr("cursor",ko[v]);if(I.touches)D.on("touchmove.brush",z,!0).on("touchend.brush touchcancel.brush",j,!0);else{var U=X(I.view).on("keydown.brush",function(){switch(I.keyCode){case 16:L=w&&_;break;case 18:x===So&&(w&&(l=f-d*w,n=r+d*w),_&&(u=h-b*_,i=o+b*_),x=Mo,Y());break;case 32:x!==So&&x!==Mo||(w<0?l=f-d:w>0&&(n=r-d),_<0?u=h-b:_>0&&(i=o-b),x=_o,B.attr("cursor",ko.selection),Y());break;default:return}xo()},!0).on("keyup.brush",function(){switch(I.keyCode){case 16:L&&(g=m=L=!1,Y());break;case 18:x===Mo&&(w<0?l=f:w>0&&(n=r),_<0?u=h:_>0&&(i=o),x=So,Y());break;case 32:x===_o&&(I.altKey?(w&&(l=f-d*w,n=r+d*w),_&&(u=h-b*_,i=o+b*_),x=Mo):(w<0?l=f:w>0&&(n=r),_<0?u=h:_>0&&(i=o),x=So),B.attr("cursor",ko[v]),Y());break;default:return}xo()},!0).on("mousemove.brush",z,!0).on("mouseup.brush",j,!0);go(I.view)}vo(),Xr(y),c.call(y),P.start()}function z(){var t=O(y);!L||g||m||(Math.abs(t[0]-C[0])>Math.abs(t[1]-C[1])?m=!0:g=!0),C=t,p=!0,xo(),Y()}function Y(){var t;switch(d=C[0]-$[0],b=C[1]-$[1],x){case _o:case wo:w&&(d=Math.max(A-n,Math.min(k-l,d)),r=n+d,f=l+d),_&&(b=Math.max(N-i,Math.min(E-u,b)),o=i+b,h=u+b);break;case So:w<0?(d=Math.max(A-n,Math.min(k-n,d)),r=n+d,f=l):w>0&&(d=Math.max(A-l,Math.min(k-l,d)),r=n,f=l+d),_<0?(b=Math.max(N-i,Math.min(E-i,b)),o=i+b,h=u):_>0&&(b=Math.max(N-u,Math.min(E-u,b)),o=i,h=u+b);break;case Mo:w&&(r=Math.max(A,Math.min(k,n-d*w)),f=Math.max(A,Math.min(k,l+d*w))),_&&(o=Math.max(N,Math.min(E,i-b*_)),h=Math.max(N,Math.min(E,u+b*_)))}f<r&&(w*=-1,t=n,n=l,l=t,t=r,r=f,f=t,v in Eo&&B.attr("cursor",ko[v=Eo[v]])),h<o&&(_*=-1,t=i,i=u,u=t,t=o,o=h,h=t,v in Lo&&B.attr("cursor",ko[v=Lo[v]])),S.selection&&(T=S.selection),g&&(r=T[0][0],f=T[1][0]),m&&(o=T[0][1],h=T[1][1]),T[0][0]===r&&T[0][1]===o&&T[1][0]===f&&T[1][1]===h||(S.selection=[[r,o],[f,h]],c.call(y),P.brush())}function j(){if(vo(),I.touches){if(I.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),D.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(t,e){var n=t.document.documentElement,a=X(t).on("dragstart.drag",null);e&&(a.on("click.drag",po,!0),setTimeout(function(){a.on("click.drag",null)},0)),"onselectstart"in n?a.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(I.view,p),U.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);D.attr("pointer-events","all"),B.attr("cursor",ko.overlay),S.selection&&(T=S.selection),Uo(T)&&(S.selection=null,c.call(y)),P.end()}}function u(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return o.move=function(e,n){e.selection?e.on("start.brush",function(){s(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){s(this,arguments).end()}).tween("brush",function(){var e=this,a=e.__brush,r=s(e,arguments),i=a.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,a.extent),l=He(i,o);function f(t){a.selection=1===t&&Uo(o)?null:l(t),c.call(e),r.brush()}return i&&o?f:f(1)}):e.each(function(){var e=arguments,a=this.__brush,r=t.input("function"==typeof n?n.apply(this,e):n,a.extent),i=s(this,e).beforestart();Xr(this),a.selection=null==r||Uo(r)?null:r,c.call(this),i.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){!function(t,e,n,a){var r=I;t.sourceEvent=I,I=t;try{e.apply(n,a)}finally{I=r}}(new yo(o,e,t.output(this.state.selection)),r.apply,r,[e,this.that,this.args])}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:mo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):n},o.filter=function(t){return arguments.length?(a="function"==typeof t?t:mo(!!t),o):a},o.handleSize=function(t){return arguments.length?(i=+t,o):i},o.on=function(){var t=r.on.apply(r,arguments);return t===r?o:t},o}(No)};const Yo={epanechnikov:function(t){return Math.abs(t)<=1?.75*(1-t*t):0},gaussian:function(t){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*t*t)}},jo={nrd:function(t){let e=(st(t,.75)-st(t,.25))/1.34;return 1.06*Math.min(tt(t),e)*Math.pow(t.length,-.2)}};class Fo{constructor(t,e={}){this._sanityCheck(t),this.data=t,this.groupInfo=e,this.toolbar=void 0,this.tooltip=void 0}render(t,e=500,n=357,a=.05,r,i=[-3,3],o="Y axis",c=!0,s=!0,l=0,f=!1,u=!1,h=!1,d=!1){if(this.reset=(()=>{t.selectAll("*").remove(),this.render(t,e,n,a,r,i,o,c,s,l,f,u,h)}),void 0===i||0==i.length){let t=[];this.data.forEach(e=>t=t.concat(e.values)),i=et(t)}this.groups=wt().key(t=>t.group).entries(this.data),this.scale={x:Lt().rangeRound([0,e]).domain(r||this.groups.map(t=>t.key)).paddingInner(a),subx:Lt(),y:Tn().rangeRound([n,0]).domain(i),z:Tn()},this.groups.forEach(e=>{let a=e.key,r=e.values,o=this.groupInfo[a];if(e.index=this.scale.x.domain().indexOf(a),void 0!==o){t.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("fill",t=>"pvalue"==t&&parseFloat(o[t])<=parseFloat(o.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(t,e)=>{return`translate(${this.scale.x(a)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`}).text(t=>`${t}: ${parseFloat(parseFloat(o[t]).toPrecision(3)).toExponential()}`)}this.scale.subx.domain(r.map(t=>t.label)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),r.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(W),this._drawViolin(t,n,f,e.index))});var c=15;if(d){const e=Lt().domain(r.map(t=>void 0==t.size?"(0)":`(${t.size||0})`)).rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]);t.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(Ri(e))}if(s){c=5;const e=t.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(Ri(this.scale.subx));l>0&&e.selectAll("text").style("text-anchor","start").attr("transform",`rotate(${l}, 2, 10)`)}});let b=s?55:0;if(this.xAxis=c?Ri(this.scale.x):Ri(this.scale.x).tickFormat(""),t.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+b})`).call(this.xAxis).selectAll("text").style("text-anchor","start").attr("transform","rotate(30, -10, 10)"),b=5,this.yAxis=Vi(this.scale.y).tickValues(this.scale.y.ticks(5)),t.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${b}, 0)`).call(this.yAxis),t.append("text").attr("y",-40).attr("x",-40).attr("class","violin-axis-label").attr("text-anchor","start").attr("transform","rotate(-90)").text(o),t.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),u&&this._addGroupDivider(t),h){const e=t.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");e.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=e.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),a=10;n.append("rect").attr("x",(t,e)=>5+60*e+this.scale.x.range()[0]).attr("y",-28).attr("width",a).attr("height",a).style("fill",t=>t.color),n.append("text").attr("class","violin-legend-text").text(t=>t.label).attr("x",(t,e)=>17+60*e+this.scale.x.range()[0]).attr("y",-20)}}createTooltip(t){return 0==$(`#${t}`).length&&$("<div/>").attr("id",t).appendTo($("body")),this.tooltip=new _i(t),X(`#${t}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(t,e){return this.toolbar=new wi(t,e),this.toolbar}addBrush(t){const e=zo();e.on("end",()=>{this.zoom(t,e)}),t.append("g").attr("class","brush").call(e)}zoom(t,e){let n,a=I.selection;if(void 0===e)this.reset();else if(a){this.scale.x.domain(this.scale.x.domain().filter((t,e)=>{const n=Math.floor(a[0][0]/this.scale.x.bandwidth()),r=Math.floor(a[1][0]/this.scale.x.bandwidth());return e>=n&&e<=r}));const n=Math.floor(this.scale.y.invert(a[1][1])),r=Math.floor(this.scale.y.invert(a[0][1]));this.scale.y.domain([n,r]),t.select(".brush").call(e.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let r=t.transition().duration(750);t.select(".axis--x").transition(r).call(this.xAxis),t.select(".axis--y").transition(r).call(this.yAxis),this.groups.forEach((e,n)=>{let a=e.key,i=e.values;this.scale.subx.rangeRound([this.scale.x(a),this.scale.x(a)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(a);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=t.select(`#violin${e.index}-${n.label}`);i.select(".violin").transition(r).attr("d",ro().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0])));const o=st(n.values,.25),c=st(n.values,.75);i.select(".violin-ir").transition(r).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(o)));const s=ut(n.values);i.select(".violin-median").transition(r).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(s)).attr("y2",this.scale.y(s))})})}_drawViolin(t,e,n,a){let r=function(t,e,n){return function(a){return e.map(e=>[e,ft(a,a=>t((e-a)/n))/n])}}(Yo.gaussian,this.scale.y.ticks(100),jo.nrd(e.values));const i=et(e.values),o=r(e.values).filter(t=>t[0]>i[0]&&t[0]<i[1]);let c=lt(o,t=>Math.abs(t[1]));this.scale.z.domain([-c,c]).range([this.scale.subx(e.label),this.scale.subx(e.label)+this.scale.subx.bandwidth()]);const s=t.append("g").attr("id",`violin${a}-${e.label}`);let l=ro().x0(t=>this.scale.z(t[1])).x1(t=>this.scale.z(-t[1])).y(t=>this.scale.y(t[0]));const f=s.append("path").datum(o).attr("d",l).classed("violin",!0).style("fill",()=>void 0!==e.color?e.color:a%2==0?"#90c1c1":"#94a8b8"),u=st(e.values,.25),h=st(e.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(h-u),a=lt(e.values.filter(t=>t<h+1.5*n)),r=ht(e.values.filter(t=>t>u-1.5*n));t.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(a)).attr("y2",this.scale.y(r)).style("stroke","#fff")}s.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(h)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(h)-this.scale.y(u))).attr("class","violin-ir");const b=ut(e.values);s.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(b)).attr("y2",this.scale.y(b)).attr("class","violin-median"),s.on("mouseover",()=>{f.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(e.group+"<br/>"+e.label+"<br/>Median: "+b.toPrecision(4)+"<br/>")}),s.on("mouseout",()=>{f.classed("highlighted",!1)})}_sanityCheck(t){const e=["group","label","values"];t.forEach(t=>{e.forEach(e=>{if(void 0===t[e])throw"GroupedViolin: input data error."})})}_addGroupDivider(t){const e=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),a=(t,a)=>a!==e.length-1?this.scale.x(t)+ +this.scale.x.bandwidth()+n/2:0;t.selectAll(".vline").data(e).enter().append("line").classed("vline",!0).attr("x1",a).attr("x2",a).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(t,n)=>n!=e.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}}class Ro{constructor(t,e,n,a,r=!1,i=1e3,o=0){this.gene=t,this.exons=e,"+"==this.gene.strand?this.exons.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)):this.exons.sort((t,e)=>Number(e.exonNumber)-Number(t.exonNumber)),this.exonsCurated=n.sort((t,e)=>Number(t.exonNumber)-Number(e.exonNumber)),this.junctions=a.sort((t,e)=>t.junctionId<e.junctionId?-1:t.junctionId>e.junctionId?1:0),this.isIsoform=r,this.maxIntronLength=i,this.intronLength=0,this.minExonWidth=o,this.nullColor="#DDDDDD"}changeTextlabel(t,e){t.selectAll("#modelInfo").text(e)}addData(t,e,n,a,r){void 0!==e&&t.selectAll(".junc").style("fill",n=>{const r=e.filter(t=>t.junctionId==n.junctionId)[0],i=0==r.value?this.nullColor:a(r.value);return t.selectAll(".junc-curve").filter(`.junc${n.junctionId}`).style("stroke",i),i}),t.selectAll(".exon-curated").style("fill",t=>{const e=n.filter(e=>e.exonId==t.exonId)[0];if(void 0===e)throw`${t.exonId} has no data`;return 0==e.value?this.nullColor:r(e.value)})}render(t,e){this.setXscale(e.w);const n=e.h/2;if(this.exons.forEach((t,e)=>{t.x=0==e?0:this.exons[e-1].x+this.exons[e-1].w+this.xScale(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}),this.exonsCurated.forEach((t,e)=>{if(t.oriExon=this._findExon(t.chromStart)||this._findExon(t.chromEnd),void 0!==t.oriExon){if(Number(t.oriExon.chromStart)==Number(t.chromStart))t.x=t.oriExon.x;else{const e=Number(t.chromStart)-Number(t.oriExon.chromStart)+1;t.x=t.oriExon.x+this.xScale(e)}void 0===t.length&&(t.length=Number(t.chromEnd)-Number(t.chromStart)+1),t.w=this.xScale(t.length)<this.minExonWidth?this.minExonWidth:this.xScale(t.length)}else console.warn(`${this.gene.transcriptId}-${t.exonId} can't map to full gene model`)}),this.isIsoform){t.append("line").attr("x1",this.exonsCurated[0].x).attr("x2",this.exonsCurated[this.exonsCurated.length-1].x).attr("y1",n+7.5).attr("y2",n+7.5).classed("intron",!0)}else{this.junctions=this.junctions.filter(t=>(t.startExon=this._findExon(t.chromStart),t.endExon=this._findExon(t.chromEnd),void 0!==t.startExon&&void 0!==t.endExon)),this.junctions.sort((t,e)=>+t.chromStart<+e.chromStart?-1:+t.chromStart>+e.chromStart?1:+t.chromEnd<+e.chromEnd?-1:+t.chromEnd>+e.chromEnd?1:0),this.junctions.forEach((t,e)=>{t.displayName=`Junction ${e+1}`;const a=Number(t.chromStart)-Number(t.startExon.chromStart)+1,r=Number(t.chromEnd)-Number(t.endExon.chromStart)+1;t.startX=t.startExon.x+this.xScale(a),t.endX=t.endExon.x+this.xScale(r),t.cx=t.startX+(t.endX-t.startX+1)/2,t.cy=n-15*(Math.abs(Number(t.endExon.exonNumber)-Number(t.startExon.exonNumber))+.5),t.cy<0&&(t.cy=0)});const e=this.junctions.reduce((t,e)=>(t[e.displayName]=1+t[e.displayName]||1,t),{});this.junctions.forEach(t=>{e[t.displayName]>1&&(t.cy-=15*Math.random())});const a=ao().x(t=>t.x).y(t=>t.y).curve(co);this.junctions.forEach((e,r)=>{t.append("path").datum([{x:e.startX,y:n},{x:e.cx,y:e.cy},{x:e.endX,y:n}]).attr("class",`junc-curve junc${e.junctionId}`).attr("d",a).style("stroke","#92bcc9")});const r=t.selectAll(".junc").data(this.junctions);r.attr("cx",t=>t.cx),r.attr("cy",t=>t.cy),r.enter().append("circle").attr("class",t=>`junc junc${t.junctionId}`).attr("cx",t=>t.cx).attr("cy",t=>t.cy).merge(r).attr("r",4).style("fill","rgb(86, 98, 107)");const i=t.selectAll(".exon").data(this.exons);i.attr("x",t=>t.x),i.attr("y",n),i.enter().append("rect").attr("class",t=>`exon exon${t.exonNumber}`).attr("y",n).attr("rx",2).attr("ry",2).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(i).style("cursor","default"),t.append("text").attr("id","modelInfo").style("text-anchor","end").attr("x",this.xScale(0)).attr("y",n-10).style("font-size",12).text("Gene Model")}const a=t.selectAll(".exon-curated").data(this.exonsCurated);a.attr("x",t=>t.x),a.attr("y",n),a.enter().append("rect").attr("class",t=>this.isIsoform?"exon-curated":`exon-curated exon-curated${t.exonNumber}`).attr("y",n).attr("width",t=>t.w).attr("height",15).attr("x",t=>t.x).merge(a).style("fill","#eee").style("cursor","default"),"left"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabel").style("text-anchor","end").attr("x",this.xScale.range()[0]-5).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId),"right"!=e.labelOn&&"both"!=e.labelOn||t.append("text").attr("id","modelLabelRight").style("text-anchor","start").attr("x",this.xScale.range()[1]+50).attr("y",n+7.5).style("font-size","9px").text(void 0===this.gene.transcriptId?`${this.gene.geneSymbol}`:this.gene.transcriptId)}setXscale(t){this.exons.sort((t,e)=>Number(t.chromStart)<Number(e.chromStart)?-1:Number(t.chromStart)>Number(e.chromStart)?1:0);let e=0;this.exons.forEach((t,n)=>{if(t.length=Number(t.chromEnd)-Number(t.chromStart)+1,0==n)e+=t.length;else{let a=this.exons[n-1];t.intronLength=Number(t.chromStart)-Number(a.chromEnd)+1,e+=t.length+(t.intronLength>this.maxIntronLength?this.maxIntronLength:t.intronLength)}});const n=[0,e],a=[0,t];this.xScale=Tn().domain(n).range(a)}setXscaleFixIntron(t){this.exons.forEach(t=>{t.length=Number(t.chromEnd)-Number(t.chromStart)+1});const e=lt(this.exons,t=>t.length),n=[0,e*this.exons.length],a=[0,t];this.xScale=Tn().domain(n).range(a);const r=this.xScale.invert(this.minExonWidth),i=dt(this.exons,t=>t.length>r?t.length:r);this.intronLength=(e*this.exons.length-i)/(this.exons.length-1)}_findExon(t){t=Number(t);const e=this.exons.filter(e=>Number(e.chromStart)-1<=t&&Number(e.chromEnd)+1>=t);return 1==e.length?e[0]:0==e.length?void console.warn("No exon found for: "+t):void console.warn("More than one exons found for: "+t)}}class Vo{constructor(t,e,n,a){this.isoforms=t,this.isoformExons=e,this.modelExons=n,this.visualDom=void 0,this.config=a,this.nullColor="#DDDDDD"}showData(t,e,n,a,r=!0){if(r){t.sort((t,e)=>-(t.displayValue-e.displayValue));const e=t.map(t=>t.transcriptId);this.sortTracks(e)}t.forEach(t=>{this.visualDom.select(`#${t.transcriptId.replace(".","_")}`).selectAll(".exon-curated").style("fill",0==t.value?this.nullColor:e(t.value))}),this.visualDom.select(".lollipopGraph").remove();const i=this.visualDom.append("g").classed("lollipopGraph",!0).attr("transform","translate(-100, 13)"),o=i.selectAll(".lollipop").data(t).enter().append("g").classed("lollipop",!0);var c;o.append("line").attr("x1",0).attr("y1",t=>this.yScale(t.transcriptId)).attr("y2",t=>this.yScale(t.transcriptId)).style("stroke",t=>0==t.value?this.nullColor:e(t.value)).style("stroke-width",2).transition().duration(1e3).attr("x2",t=>0==t.value?0:n(t.value)),o.append("circle").attr("cx",0).attr("cy",t=>this.yScale(t.transcriptId)).attr("r",5).style("fill",t=>0==t.value?this.nullColor:e(t.value)).transition().duration(1e3).attr("cx",t=>n(t.value)),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call((c=n,Fi(Pi,c)).ticks(3)),i.append("text").attr("id","lolliLabel").attr("x",0).attr("y",-40).style("text-anchor","end").style("font-size",9).text("log10(TPM)"),i.append("g").attr("class","lollipop-axis").attr("transform",`translate(0,-${this.yScale.bandwidth()/2})`).call(function(t){return Fi(Di,t)}(this.yScale).tickValues([])),i.append("text").attr("id","lolliLabel").attr("x",10).attr("y",-20).text(`Transcript Expression in ${a}`).style("text-anchor","start").style("font-size","12px")}sortTracks(t){this.setYscale(this.config.h,t),this.render(!0)}render(t=!1,e,n="left",a=1e3){if(void 0===e&&void 0===this.visualDom)throw"Fatal Error: must provide a dom element";void 0===e?e=this.visualDom:this.visualDom=e,void 0===this.yScale&&this.setYscale(this.config.h);const r=e.selectAll(".isotrack").data(this.isoforms.map(t=>t.transcriptId));r.transition().duration(a).attr("transform",t=>`translate(0, ${this.yScale(t)})`),r.enter().append("g").attr("id",t=>t.replace(".","_")).attr("class","isotrack").attr("transform",t=>"translate(0, 0)").transition().duration(a/2).attr("transform",t=>`translate(0, ${this.yScale(t)})`),t||this._renderModels(this.config.w,n)}_renderModels(t,e="left"){this.isoforms.forEach(n=>{let a=void 0===this.modelExons||null===this.modelExons?this.isoformExons[n.transcriptId]:this.modelExons;const r=new Ro(n,a,this.isoformExons[n.transcriptId],[],!0),i=X(`#${n.transcriptId.replace(".","_")}`);r.render(i,{w:t,h:this.yScale.bandwidth(),labelOn:e})})}setYscale(t,e){void 0===e&&(e=this.isoforms.map(t=>t.transcriptId)),this.yScale=Lt().domain(e).range([0,t]).padding(.05)}}class Ho{constructor(t,e=!0,n=10,a="Reds",r="tooltip"){this.data=t,this.useLog=e,this.logBase=n,this.colorScheme=a,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,this.bubbleScale=void 0,0==$(`#${r}`).length&&$("<div/>").attr("id",r).appendTo($("body")),this.tooltip=new _i(r),X(`#${r}`).classed("bubblemap-tooltip",!0),0==$(`#${r}`).length&&$("<div/>").attr("id",r).appendTo($("body")),this.tooltip=new _i(r),X(`#${r}`).classed("bubblemap-tooltip",!0),this.toolbar=void 0}drawCanvas(t,e={w:1e3,h:600,top:20,left:20},n,a=!0,r=30,i=0){this._setScales(e,n);let o=t.node().getContext("2d");o.fillStyle="#ffffff",o.rect(0,0,t.attr("width"),t.attr("height")),o.fill(),this.data.forEach(t=>{o.fillStyle=this.colorScale(t.value),o.arc(this.xScale(t.x)+this.xScale.bandwidth()/2,this.yScale(t.y),this.bubbleScale(t.r),0,2*Math.PI),o.fill()}),a&&(o.save(),o.textAlign="right",o.fillStyle="black",o.font="10px Open Sans",this.yScale.domain().forEach(t=>{o.fillText(t,this.xScale.range()[0]-12,this.yScale(t)+2)}),o.restore(),this.xScale.domain().forEach(t=>{o.save(),o.fillStyle="black",o.font="10px Open Sans",o.textAlign="left",o.translate(this.xScale(t)+this.xScale.bandwidth()/2-3,this.yScale.range()[1]+i),o.rotate(Math.PI/2),o.fillText(t,0,0),o.restore()}))}drawSvg(t,e={w:1e3,h:600,top:0,left:0},n,a=!0,r=30,i=0){this._setScales(e,n);let o=this.tooltip;t.selectAll(".bubble-map-cell").data(this.data,t=>t.value).enter().append("circle").attr("row",t=>`x${this.xScale.domain().indexOf(t.displayX?t.displayX:t.x)}`).attr("col",t=>`y${this.yScale.domain().indexOf(t.y)}`).attr("cx",t=>this.xScale(t.displayX?t.displayX:t.x)+this.xScale.bandwidth()/2).attr("cy",t=>this.yScale(t.y)).attr("r",t=>this.bubbleScale(t.r)).style("fill",t=>this.colorScale(t.value)).on("mouseover",function(e){let n=X(this),a=n.attr("row"),r=n.attr("col");t.selectAll(".bubble-map-xlabel").filter(`.${a}`).classed("highlighted",!0),t.selectAll(".bubble-map-ylabel").filter(`.${r}`).classed("highlighted",!0),n.classed("highlighted",!0);let i=void 0===e.displayValue?parseFloat(e.value.toExponential()).toPrecision(4):e.displayValue;o.show(`Column: ${e.x} <br/> Row: ${e.y}<br/> Value: ${i}`)}).on("mouseout",function(){t.selectAll("*").classed("highlighted",!1),o.hide()});if(a){t.selectAll().data(this.xScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-xlabel x${e}`).attr("x",0).attr("y",0).style("text-anchor","start").style("cursor","default").attr("transform",t=>{return`translate(${this.xScale(t)+5}, ${this.yScale.range()[1]+i}) rotate(${r})`}).text(t=>t),t.selectAll().data(this.yScale.domain()).enter().append("text").attr("class",(t,e)=>`bubble-map-ylabel y${e}`).attr("x",this.xScale.range()[0]-10).attr("y",t=>this.yScale(t)+2).style("text-anchor","end").style("cursor","default").text(t=>t)}}drawColorLegend(t,e={x:0,y:0},n=5,a=""){xi(a,t,this.colorScale,e,this.useLog,n,this.logBase,{h:10,w:40},"h",!0)}drawBubbleLegend(t,e={x:0,y:0,title:"Bubble legend"},n=5,a=""){console.log(this.bubbleScale.domain()),console.log(this.bubbleScale.range());let r=[...Array(n+1).keys()],i=(this.bubbleScale.domain()[1]-this.bubbleScale.domain()[0])/n,o=r.map(t=>this.bubbleScale.domain()[0]+t*i);console.log(o);let c=t.append("g").attr("transform",`translate(${e.x}, ${e.y})`).selectAll(".legend").data(o).enter().append("g").classed("legend",!0);t.append("text").attr("class","color-legend").text(e.title).attr("x",-10).attr("text-anchor","end").attr("y",10).attr("transform",`translate(${e.x}, ${e.y})`);let s=2*this.xScale.bandwidth();console.log(s),c.append("circle").attr("cx",(t,e)=>s*e).attr("cy",10).attr("r",t=>this.bubbleScale(t)).style("fill","black"),c.append("text").attr("class","color-legend").text(t=>this.useLog?Math.pow(base,t).toPrecision(2):t.toPrecision(2)).attr("x",(t,e)=>s*e-5).attr("y",0)}_setScales(t={w:1e3,h:600,top:20,left:20},e){if(void 0===this.xScale&&this._setXScale(t),void 0===this.yScale&&this._setYScale(t),void 0===this.colorScale&&this._setColorScale(e),void 0===this.bubbleScale){let t=ht([this.xScale.bandwidth(),this.yScale.bandwidth()])/2;this._setBubbleScale({max:t,min:2})}}_setXScale(t={w:1e3,left:20}){let e=wt().key(t=>void 0!==t.displayX?t.displayX:t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN);this.xScale=Lt().domain(e).range([t.left,t.left+t.w]).padding(.05)}_setYScale(t={h:600,top:20}){let e=wt().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN);this.yScale=Lt().domain(e).range([t.top,t.top+t.h]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=vi(n,this.colorScheme,void 0,void 0,!0)}_setBubbleScale(t={max:10,min:0}){this.bubbleScale=Nn().domain([2,lt(this.data.map(t=>t.r))]).range([t.min,t.max])}_log(t){return Math.log(Number(t+1))/Math.log(this.logBase)}}class Xo{constructor(t,e=0,n=!0,a=10,r="Greys",i="tooltip"){this.data=t,this.cutoff=e,console.log(this.data),this.useLog=n,this.logBase=a,this.colorScheme=r,this.xScale=void 0,this.yScale=void 0,this.colorScale=void 0,0==$(`#${i}`).length&&$("<div/>").attr("id",i).appendTo($("body")),this.tooltip=new _i(i),X(`#${i}`).classed("bubblemap-tooltip",!0)}drawCanvas(t,e={w:600,top:20,left:20},n=[0,1],a=!0){this._setScales(e,n);let r=this._filter(this.data,this.cutoff),i=t.node().getContext("2d");i.fillStyle="#ffffff",i.rect(0,0,t.attr("width"),t.attr("height")),i.fill(),i.translate(e.left,e.top+this.xScale.bandwidth()*Math.sqrt(2)/2),i.rotate(-.25*Math.PI),r.forEach(t=>{let e=this.xScale(t.x),n=this.yScale(t.y);i.fillStyle=this.colorScale(t.value),i.fillRect(e,n,this.xScale.bandwidth(),this.yScale.bandwidth())})}_filter(t,e){let n={};return t.sort((t,e)=>t.x<e.x?-1:t.x>e.x?1:t.y<e.y?-1:t.y>e.y?1:0),t.filter(t=>{if(t.value<e)return!1;let a=t.x+t.y,r=t.y+t.x;return!n.hasOwnProperty(a)&&!n.hasOwnProperty(r)&&(n[a]=!0,!0)})}_setScales(t={w:600,top:20,left:20},e=[0,1]){void 0===this.xScale&&this._setXScale(t),void 0===this.yScale&&this._setYScale(t),void 0===this.colorScale&&this._setColorScale(e)}_setXScale(t={w:600,left:20}){let e=wt().key(t=>void 0!==t.displayX?t.displayX:t.x).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN);this.xScale=Lt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setYScale(t={w:600,top:20}){let e=wt().key(t=>t.y).entries(this.data).map(t=>t.key).sort((t,e)=>t<e?-1:t>e?1:t>=e?0:NaN);this.yScale=Lt().domain(e).range([0,t.w/Math.sqrt(2)]).padding(.05)}_setColorScale(t){let e=this.useLog,n=void 0===t?this.data.map(t=>e?this._log(t.value):t.value):t;this.colorScale=vi(n,this.colorScheme,void 0,void 0,!0)}}const Go={heatmap:mt({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:nt(0,2e3).map(yt(2,1))},{group:"Group 1",label:"Gene 2",values:nt(0,2e3).map(yt(5,1))},{group:"Group 1",label:"Gene 3",values:nt(0,2e3).map(yt(10,1))},{group:"Group 2",label:"Gene 1",values:nt(0,2e3).map(yt(5,1))},{group:"Group 2",label:"Gene 2",values:nt(0,2e3).map(yt(3,1))},{group:"Group 2",label:"Gene 3",values:nt(0,2e3).map(yt(1,1))},{group:"Group 3",label:"Gene 1",values:nt(0,2e3).map(yt(2,1))},{group:"Group 3",label:"Gene 2",values:nt(0,2e3).map(yt(3,1))},{group:"Group 3",label:"Gene 3",values:nt(0,2e3).map(yt(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:mt({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:mt({x:2,y:2,scaleFactor:1})},Oo={id:"gtexVizLdPlot",data:Go.ldPlot,cutoff:0,width:1e3,marginLeft:100,marginRight:200,marginTop:20,marginBottom:100,colorScheme:"Greys",labelHeight:20,showLabels:!0,legendSpace:50,useLog:!1,logBase:void 0};const qo={id:"gtexTranscriptTracks",data:Go.transcriptTracks,width:1200,height:80,marginLeft:100,marginRight:20,marginTop:0,marginBottom:20,labelPos:"left"};const Wo={id:"gtexVizBubblemap",data:Go.bubbleMap,width:1200,height:400,marginTop:100,marginRight:100,marginBottom:30,marginLeft:30,showLabels:!0,rowLabelWidth:150,columnLabelHeight:100,columnLabelAngle:90,columnLabelPosAdjust:10,useLog:!1,logBase:10,colorScheme:"RdBu",colorScaleDomain:[-.75,.75],useCanvas:!1};const Zo={id:"gtexVizHeatmap",data:Go.heatmap,width:1200,height:300,marginLeft:20,marginRight:40,marginTop:50,marginBottom:50,colorScheme:"YlGnBu",cornerRadius:2,columnLabelHeight:20,columnLabelAngle:60,columnLabelPosAdjust:10,rowLabelWidth:100,legendSpace:50,useLog:!0,logBase:10};const Ko={id:"gtexVizDendroHeatmap",data:Go.dendroHeatmap,useLog:!0,logBase:10,width:600,height:300,marginLeft:20,marginRight:40,marginTop:50,marginBottom:50,rowTreePanelWidth:100,colTreePanelHeight:100,colorScheme:"Blues",cornerRadius:2,columnLabelHeight:200,columnLabelAngle:60,columnLabelPosAdjust:10,rowLabelWidth:200,legendSpace:50};const Qo={id:"gtexGroupedViolinPlot",data:Go.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showGroupX:!0,showX:!0,xAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};return t.demoData=Go,t.ldPlot=function(t=Oo){let e={left:t.marginLeft,top:t.showLabels?t.marginTop+t.labelHeight:t.marginTop,right:t.marginRight,bottom:t.marginBottom},n=t.width-(t.marginLeft+t.marginRight),a=t.width-(t.marginTop+t.marginBottom);n=n>a?a:n;let r=new Xo(t.data,t.cutoff,t.useLog,t.logBase,t.colorScheme,t.id+"-tooltip"),i=pt(t.id,t.width,t.width);r.drawCanvas(i,{w:n,top:e.top,left:e.left},[0,1],t.showLabels)},t.transcriptTracks=function(t=qo){let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft},n=t.width-(t.marginLeft+t.marginRight),a=t.height-(t.marginTop+t.marginBottom);bt(t.id);let r=gt(t.id,t.width,t.height,e),i={x:0,y:0,w:n,h:a,labelOn:t.labelPos};new Vo(t.data.transcripts,t.data.exons,void 0,i).render(!1,r,t.labelPos)},t.bubblemap=function(t=Wo){let e={left:t.showLabels?t.marginLeft+t.rowLabelWidth:t.marginLeft,top:t.marginTop,right:t.marginRight,bottom:t.showLabels?t.marginBottom+t.columnLabelHeight:t.marginBottom},n=t.width-(t.rowLabelWidth+t.marginLeft+t.marginRight),a=t.height-(t.columnLabelHeight+t.marginTop+t.marginBottom);if(t.useCanvas){let r=new Ho(t.data,t.useLog,t.logBase,t.colorScheme,canvasId+"-tooltip"),i=pt(t.id,t.width,t.height);r.drawCanvas(i,{w:n,h:a,top:e.top,left:e.left},t.colorScaleDomain,t.showLabels,t.columnLabelAngle,t.columnLabelPosAdjust)}else{let r=new Ho(t.data,t.useLog,t.logBase,t.colorScheme,t.id+"-tooltip"),i=gt(t.id,t.width,t.height,e);r.drawSvg(i,{w:n,h:a,top:0,left:0},t.colorScaleDomain,t.showLabels,t.columnLabelAngle,t.columnLabelPosAdjust),r.drawColorLegend(i,{x:0,y:-40},3,"NES"),r.drawBubbleLegend(i,{x:500,y:-40,title:"-log10(p-value)"},5,"-log10(p-value)")}},t.heatmap=function(t=Zo){let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft},n=t.width-(t.marginLeft+t.marginRight+t.rowLabelWidth),a=t.height-(t.marginTop+t.marginBottom+t.columnLabelHeight);bt(t.id);let r=gt(t.id,t.width,t.height,e),i=`${t.id}Tooltip`,o=new Si(t.data,t.useLog,t.logBase,t.colorScheme,t.cornerRadius,i);o.draw(r,{w:n,h:a},t.columnLabelAngle,!1,t.columnLabelPosAdjust),o.drawColorLegend(r,{x:20,y:-20},10)},t.dendroHeatmap=function(t=Ko){let e={top:t.marginTop,right:t.marginRight+t.rowLabelWidth,bottom:t.marginBottom+t.columnLabelHeight,left:t.marginLeft};bt(t.id);let n=`${t.id}Svg`,a=`${t.id}Tooltip`,r=new Mi(t.width,t.rowTreePanelWidth,t.colTreePanelHeight,e),i=new Gi(t.data.colTree,t.data.rowTree,t.data.heatmap,t.colorScheme,t.cornerRadius,r,a,t.useLog,t.logBase),o=void 0!==t.data.colTree,c=void 0!==t.data.rowTree;i.render(t.id,n,o,c,"top",8)},t.groupedViolinPlot=function(t=Qo){console.log(t.data);let e={top:t.marginTop,right:t.marginRight,bottom:t.marginBottom,left:t.marginLeft};bt(t.id);let n=t.width-(t.marginLeft+t.marginRight),a=t.height-(t.marginTop+t.marginBottom),r=`${t.id}Tooltip`,i=gt(t.id,t.width,t.height,e);const o=new Fo(t.data);o.render(i,n,a,t.xPadding,void 0,[],t.yLabel,t.showGroupX,t.ShowX,t.xAngle,t.showWhisker,t.showDivider,t.showLegend),o.createTooltip(r)},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
